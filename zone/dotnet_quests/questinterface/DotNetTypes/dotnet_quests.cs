//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ExpeditionLockoutTimer : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ExpeditionLockoutTimer(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ExpeditionLockoutTimer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ExpeditionLockoutTimer obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ExpeditionLockoutTimer() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_ExpeditionLockoutTimer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ExpeditionLockoutTimer() : this(questinterfacePINVOKE.new_ExpeditionLockoutTimer__SWIG_0(), true) {
  }

  public ExpeditionLockoutTimer(SWIGTYPE_p_std__string expedition_uuid, SWIGTYPE_p_std__string expedition_name, SWIGTYPE_p_std__string event_name, ulong expire_time, uint duration) : this(questinterfacePINVOKE.new_ExpeditionLockoutTimer__SWIG_1(SWIGTYPE_p_std__string.getCPtr(expedition_uuid), SWIGTYPE_p_std__string.getCPtr(expedition_name), SWIGTYPE_p_std__string.getCPtr(event_name), expire_time, duration), true) {
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public static ExpeditionLockoutTimer CreateLockout(SWIGTYPE_p_std__string expedition_name, SWIGTYPE_p_std__string event_name, uint seconds, SWIGTYPE_p_std__string uuid) {
    ExpeditionLockoutTimer ret = new ExpeditionLockoutTimer(questinterfacePINVOKE.ExpeditionLockoutTimer_CreateLockout__SWIG_0(SWIGTYPE_p_std__string.getCPtr(expedition_name), SWIGTYPE_p_std__string.getCPtr(event_name), seconds, SWIGTYPE_p_std__string.getCPtr(uuid)), true);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExpeditionLockoutTimer CreateLockout(SWIGTYPE_p_std__string expedition_name, SWIGTYPE_p_std__string event_name, uint seconds) {
    ExpeditionLockoutTimer ret = new ExpeditionLockoutTimer(questinterfacePINVOKE.ExpeditionLockoutTimer_CreateLockout__SWIG_1(SWIGTYPE_p_std__string.getCPtr(expedition_name), SWIGTYPE_p_std__string.getCPtr(event_name), seconds), true);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public class DaysHoursMinutes : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal DaysHoursMinutes(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DaysHoursMinutes obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef swigRelease(DaysHoursMinutes obj) {
      if (obj != null) {
        if (!obj.swigCMemOwn)
          throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
        global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
        obj.swigCMemOwn = false;
        obj.Dispose();
        return ptr;
      } else {
        return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  
    ~DaysHoursMinutes() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            questinterfacePINVOKE.delete_ExpeditionLockoutTimer_DaysHoursMinutes(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public SWIGTYPE_p_std__string days {
      set {
        questinterfacePINVOKE.ExpeditionLockoutTimer_DaysHoursMinutes_days_set(swigCPtr, SWIGTYPE_p_std__string.getCPtr(value));
        if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(questinterfacePINVOKE.ExpeditionLockoutTimer_DaysHoursMinutes_days_get(swigCPtr), true);
        if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public SWIGTYPE_p_std__string hours {
      set {
        questinterfacePINVOKE.ExpeditionLockoutTimer_DaysHoursMinutes_hours_set(swigCPtr, SWIGTYPE_p_std__string.getCPtr(value));
        if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(questinterfacePINVOKE.ExpeditionLockoutTimer_DaysHoursMinutes_hours_get(swigCPtr), true);
        if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public SWIGTYPE_p_std__string mins {
      set {
        questinterfacePINVOKE.ExpeditionLockoutTimer_DaysHoursMinutes_mins_set(swigCPtr, SWIGTYPE_p_std__string.getCPtr(value));
        if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(questinterfacePINVOKE.ExpeditionLockoutTimer_DaysHoursMinutes_mins_get(swigCPtr), true);
        if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public DaysHoursMinutes() : this(questinterfacePINVOKE.new_ExpeditionLockoutTimer_DaysHoursMinutes(), true) {
    }
  
  }

  public void AddLockoutTime(int seconds) {
    questinterfacePINVOKE.ExpeditionLockoutTimer_AddLockoutTime(swigCPtr, seconds);
  }

  public uint GetDuration() {
    uint ret = questinterfacePINVOKE.ExpeditionLockoutTimer_GetDuration(swigCPtr);
    return ret;
  }

  public ulong GetExpireTime() {
    ulong ret = questinterfacePINVOKE.ExpeditionLockoutTimer_GetExpireTime(swigCPtr);
    return ret;
  }

  public ulong GetStartTime() {
    ulong ret = questinterfacePINVOKE.ExpeditionLockoutTimer_GetStartTime(swigCPtr);
    return ret;
  }

  public uint GetSecondsRemaining() {
    uint ret = questinterfacePINVOKE.ExpeditionLockoutTimer_GetSecondsRemaining(swigCPtr);
    return ret;
  }

  public ExpeditionLockoutTimer.DaysHoursMinutes GetDaysHoursMinutesRemaining() {
    ExpeditionLockoutTimer.DaysHoursMinutes ret = new ExpeditionLockoutTimer.DaysHoursMinutes(questinterfacePINVOKE.ExpeditionLockoutTimer_GetDaysHoursMinutesRemaining(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_std__string GetExpeditionName() {
    SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(questinterfacePINVOKE.ExpeditionLockoutTimer_GetExpeditionName(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_std__string GetExpeditionUUID() {
    SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(questinterfacePINVOKE.ExpeditionLockoutTimer_GetExpeditionUUID(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_std__string GetEventName() {
    SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(questinterfacePINVOKE.ExpeditionLockoutTimer_GetEventName(swigCPtr), false);
    return ret;
  }

  public bool IsExpired() {
    bool ret = questinterfacePINVOKE.ExpeditionLockoutTimer_IsExpired(swigCPtr);
    return ret;
  }

  public bool IsFromExpedition(SWIGTYPE_p_std__string uuid) {
    bool ret = questinterfacePINVOKE.ExpeditionLockoutTimer_IsFromExpedition(swigCPtr, SWIGTYPE_p_std__string.getCPtr(uuid));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsReplayTimer() {
    bool ret = questinterfacePINVOKE.ExpeditionLockoutTimer_IsReplayTimer(swigCPtr);
    return ret;
  }

  public bool IsSameLockout(ExpeditionLockoutTimer compare_lockout) {
    bool ret = questinterfacePINVOKE.ExpeditionLockoutTimer_IsSameLockout__SWIG_0(swigCPtr, ExpeditionLockoutTimer.getCPtr(compare_lockout));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsSameLockout(SWIGTYPE_p_std__string expedition_name, SWIGTYPE_p_std__string event_name) {
    bool ret = questinterfacePINVOKE.ExpeditionLockoutTimer_IsSameLockout__SWIG_1(swigCPtr, SWIGTYPE_p_std__string.getCPtr(expedition_name), SWIGTYPE_p_std__string.getCPtr(event_name));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Reset() {
    questinterfacePINVOKE.ExpeditionLockoutTimer_Reset(swigCPtr);
  }

  public void SetDuration(uint seconds) {
    questinterfacePINVOKE.ExpeditionLockoutTimer_SetDuration(swigCPtr, seconds);
  }

  public void SetExpireTime(ulong expire_time) {
    questinterfacePINVOKE.ExpeditionLockoutTimer_SetExpireTime(swigCPtr, expire_time);
  }

  public void SetUUID(SWIGTYPE_p_std__string uuid) {
    questinterfacePINVOKE.ExpeditionLockoutTimer_SetUUID(swigCPtr, SWIGTYPE_p_std__string.getCPtr(uuid));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

}

public enum direction {
  FORWARD,
  BACKWARD
}

public enum focusType {
  focusSpellHaste = 1,
  focusSpellDuration,
  focusRange,
  focusReagentCost,
  focusManaCost,
  focusImprovedHeal,
  focusImprovedDamage,
  focusImprovedDamage2,
  focusFcDamagePctCrit,
  focusPetPower,
  focusResistRate,
  focusSpellHateMod,
  focusTriggerOnCast,
  focusSpellVulnerability,
  focusFcSpellDamagePctIncomingPC,
  focusTwincast,
  focusSympatheticProc,
  focusFcDamageAmt,
  focusFcDamageAmt2,
  focusFcDamageAmtCrit,
  focusSpellDurByTic,
  focusSwarmPetDuration,
  focusReduceRecastTime,
  focusBlockNextSpell,
  focusFcHealPctIncoming,
  focusFcDamageAmtIncoming,
  focusFcSpellDamageAmtIncomingPC,
  focusFcCastSpellOnLand,
  focusFcHealAmtIncoming,
  focusFcBaseEffects,
  focusIncreaseNumHits,
  focusFcLimitUse,
  focusFcMute,
  focusFcTimerRefresh,
  focusFcTimerLockout,
  focusFcStunTimeMod,
  focusFcResistIncoming,
  focusFcAmplifyMod,
  focusFcAmplifyAmt,
  focusFcCastTimeMod2,
  focusFcCastTimeAmt,
  focusFcHealPctCritIncoming,
  focusFcHealAmt,
  focusFcHealAmtCrit
}

public enum FearState {
  fearStateNotFeared = 0,
  fearStateRunning,
  fearStateRunningForever,
  fearStateGrid,
  fearStateStuck
}

public enum GravityBehavior {
  Ground,
  Flying,
  Levitating,
  Water,
  Floating,
  LevitateWhileRunning
}

public enum TradeState {
  TradeNone,
  Trading,
  TradeAccepted,
  TradeCompleting
}

public enum NumHit {
  IncomingHitAttempts = 1,
  OutgoingHitAttempts = 2,
  IncomingSpells = 3,
  OutgoingSpells = 4,
  OutgoingHitSuccess = 5,
  IncomingHitSuccess = 6,
  MatchingSpells = 7,
  IncomingDamage = 8,
  ReflectSpell = 9,
  DefensiveSpellProcs = 10,
  OffensiveSpellProcs = 11
}

public enum PlayerState : uint {
  None = 0,
  Open = 1,
  WeaponSheathed = 2,
  Aggressive = 4,
  ForcedAggressive = 8,
  InstrumentEquipped = 16,
  Stunned = 32,
  PrimaryWeaponEquipped = 64,
  SecondaryWeaponEquipped = 128
}

public enum LootResponse : byte {
  SomeoneElse = 0,
  Normal = 1,
  NotAtThisTime = 2,
  Normal2 = 3,
  Hostiles = 4,
  TooFar = 5,
  LootAll = 6
}

public enum LootRequestType : byte {
  Forbidden = 0,
  GMPeek,
  GMAllowed,
  Self,
  AllowedPVE,
  AllowedPVPAll,
  AllowedPVPSingle,
  AllowedPVPDefined
}

public enum KilledByTypes : byte {
  Killed_NPC = 0,
  Killed_DUEL = 1,
  Killed_PVP = 2
}

public enum SpeakMode : byte {
  Raw = 0,
  Say = 1,
  Shout = 2,
  EmoteAlt = 3,
  Emote = 4,
  Group = 5
}

public enum Mode : byte {
  None = 0,
  Log1 = 1,
  Log2 = 2
}

public class Options : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Options(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Options obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Options obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Options() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_Options(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SpeakMode speak_mode {
    set {
      questinterfacePINVOKE.Options_speak_mode_set(swigCPtr, (int)value);
    } 
    get {
      SpeakMode ret = (SpeakMode)questinterfacePINVOKE.Options_speak_mode_get(swigCPtr);
      return ret;
    } 
  }

  public Mode journal_mode {
    set {
      questinterfacePINVOKE.Options_journal_mode_set(swigCPtr, (int)value);
    } 
    get {
      Mode ret = (Mode)questinterfacePINVOKE.Options_journal_mode_get(swigCPtr);
      return ret;
    } 
  }

  public sbyte language {
    set {
      questinterfacePINVOKE.Options_language_set(swigCPtr, value);
    } 
    get {
      sbyte ret = questinterfacePINVOKE.Options_language_get(swigCPtr);
      return ret;
    } 
  }

  public uint message_type {
    set {
      questinterfacePINVOKE.Options_message_type_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.Options_message_type_get(swigCPtr);
      return ret;
    } 
  }

  public uint target_spawn_id {
    set {
      questinterfacePINVOKE.Options_target_spawn_id_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.Options_target_spawn_id_get(swigCPtr);
      return ret;
    } 
  }

  public Options() : this(questinterfacePINVOKE.new_Options(), true) {
  }

}

public class Buffs_Struct : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Buffs_Struct(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Buffs_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Buffs_Struct obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Buffs_Struct() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_Buffs_Struct(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ushort spellid {
    set {
      questinterfacePINVOKE.Buffs_Struct_spellid_set(swigCPtr, value);
    } 
    get {
      ushort ret = questinterfacePINVOKE.Buffs_Struct_spellid_get(swigCPtr);
      return ret;
    } 
  }

  public byte casterlevel {
    set {
      questinterfacePINVOKE.Buffs_Struct_casterlevel_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.Buffs_Struct_casterlevel_get(swigCPtr);
      return ret;
    } 
  }

  public ushort casterid {
    set {
      questinterfacePINVOKE.Buffs_Struct_casterid_set(swigCPtr, value);
    } 
    get {
      ushort ret = questinterfacePINVOKE.Buffs_Struct_casterid_get(swigCPtr);
      return ret;
    } 
  }

  public string caster_name {
    set {
      questinterfacePINVOKE.Buffs_Struct_caster_name_set(swigCPtr, value);
    } 
    get {
      string ret = questinterfacePINVOKE.Buffs_Struct_caster_name_get(swigCPtr);
      return ret;
    } 
  }

  public int ticsremaining {
    set {
      questinterfacePINVOKE.Buffs_Struct_ticsremaining_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.Buffs_Struct_ticsremaining_get(swigCPtr);
      return ret;
    } 
  }

  public uint counters {
    set {
      questinterfacePINVOKE.Buffs_Struct_counters_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.Buffs_Struct_counters_get(swigCPtr);
      return ret;
    } 
  }

  public uint hit_number {
    set {
      questinterfacePINVOKE.Buffs_Struct_hit_number_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.Buffs_Struct_hit_number_get(swigCPtr);
      return ret;
    } 
  }

  public uint melee_rune {
    set {
      questinterfacePINVOKE.Buffs_Struct_melee_rune_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.Buffs_Struct_melee_rune_get(swigCPtr);
      return ret;
    } 
  }

  public uint magic_rune {
    set {
      questinterfacePINVOKE.Buffs_Struct_magic_rune_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.Buffs_Struct_magic_rune_get(swigCPtr);
      return ret;
    } 
  }

  public uint dot_rune {
    set {
      questinterfacePINVOKE.Buffs_Struct_dot_rune_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.Buffs_Struct_dot_rune_get(swigCPtr);
      return ret;
    } 
  }

  public int caston_x {
    set {
      questinterfacePINVOKE.Buffs_Struct_caston_x_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.Buffs_Struct_caston_x_get(swigCPtr);
      return ret;
    } 
  }

  public int caston_y {
    set {
      questinterfacePINVOKE.Buffs_Struct_caston_y_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.Buffs_Struct_caston_y_get(swigCPtr);
      return ret;
    } 
  }

  public int caston_z {
    set {
      questinterfacePINVOKE.Buffs_Struct_caston_z_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.Buffs_Struct_caston_z_get(swigCPtr);
      return ret;
    } 
  }

  public int ExtraDIChance {
    set {
      questinterfacePINVOKE.Buffs_Struct_ExtraDIChance_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.Buffs_Struct_ExtraDIChance_get(swigCPtr);
      return ret;
    } 
  }

  public short RootBreakChance {
    set {
      questinterfacePINVOKE.Buffs_Struct_RootBreakChance_set(swigCPtr, value);
    } 
    get {
      short ret = questinterfacePINVOKE.Buffs_Struct_RootBreakChance_get(swigCPtr);
      return ret;
    } 
  }

  public uint instrument_mod {
    set {
      questinterfacePINVOKE.Buffs_Struct_instrument_mod_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.Buffs_Struct_instrument_mod_get(swigCPtr);
      return ret;
    } 
  }

  public int virus_spread_time {
    set {
      questinterfacePINVOKE.Buffs_Struct_virus_spread_time_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.Buffs_Struct_virus_spread_time_get(swigCPtr);
      return ret;
    } 
  }

  public bool persistant_buff {
    set {
      questinterfacePINVOKE.Buffs_Struct_persistant_buff_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.Buffs_Struct_persistant_buff_get(swigCPtr);
      return ret;
    } 
  }

  public bool client {
    set {
      questinterfacePINVOKE.Buffs_Struct_client_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.Buffs_Struct_client_get(swigCPtr);
      return ret;
    } 
  }

  public bool UpdateClient {
    set {
      questinterfacePINVOKE.Buffs_Struct_UpdateClient_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.Buffs_Struct_UpdateClient_get(swigCPtr);
      return ret;
    } 
  }

  public Buffs_Struct() : this(questinterfacePINVOKE.new_Buffs_Struct(), true) {
  }

}

public class StatBonuses : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal StatBonuses(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(StatBonuses obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(StatBonuses obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~StatBonuses() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_StatBonuses(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public int AC {
    set {
      questinterfacePINVOKE.StatBonuses_AC_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_AC_get(swigCPtr);
      return ret;
    } 
  }

  public long HP {
    set {
      questinterfacePINVOKE.StatBonuses_HP_set(swigCPtr, value);
    } 
    get {
      long ret = questinterfacePINVOKE.StatBonuses_HP_get(swigCPtr);
      return ret;
    } 
  }

  public long HPRegen {
    set {
      questinterfacePINVOKE.StatBonuses_HPRegen_set(swigCPtr, value);
    } 
    get {
      long ret = questinterfacePINVOKE.StatBonuses_HPRegen_get(swigCPtr);
      return ret;
    } 
  }

  public long MaxHP {
    set {
      questinterfacePINVOKE.StatBonuses_MaxHP_set(swigCPtr, value);
    } 
    get {
      long ret = questinterfacePINVOKE.StatBonuses_MaxHP_get(swigCPtr);
      return ret;
    } 
  }

  public long ManaRegen {
    set {
      questinterfacePINVOKE.StatBonuses_ManaRegen_set(swigCPtr, value);
    } 
    get {
      long ret = questinterfacePINVOKE.StatBonuses_ManaRegen_get(swigCPtr);
      return ret;
    } 
  }

  public long EnduranceRegen {
    set {
      questinterfacePINVOKE.StatBonuses_EnduranceRegen_set(swigCPtr, value);
    } 
    get {
      long ret = questinterfacePINVOKE.StatBonuses_EnduranceRegen_get(swigCPtr);
      return ret;
    } 
  }

  public long Mana {
    set {
      questinterfacePINVOKE.StatBonuses_Mana_set(swigCPtr, value);
    } 
    get {
      long ret = questinterfacePINVOKE.StatBonuses_Mana_get(swigCPtr);
      return ret;
    } 
  }

  public long Endurance {
    set {
      questinterfacePINVOKE.StatBonuses_Endurance_set(swigCPtr, value);
    } 
    get {
      long ret = questinterfacePINVOKE.StatBonuses_Endurance_get(swigCPtr);
      return ret;
    } 
  }

  public int ATK {
    set {
      questinterfacePINVOKE.StatBonuses_ATK_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_ATK_get(swigCPtr);
      return ret;
    } 
  }

  public int STR {
    set {
      questinterfacePINVOKE.StatBonuses_STR_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_STR_get(swigCPtr);
      return ret;
    } 
  }

  public int STRCapMod {
    set {
      questinterfacePINVOKE.StatBonuses_STRCapMod_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_STRCapMod_get(swigCPtr);
      return ret;
    } 
  }

  public int HeroicSTR {
    set {
      questinterfacePINVOKE.StatBonuses_HeroicSTR_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_HeroicSTR_get(swigCPtr);
      return ret;
    } 
  }

  public int STA {
    set {
      questinterfacePINVOKE.StatBonuses_STA_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_STA_get(swigCPtr);
      return ret;
    } 
  }

  public int STACapMod {
    set {
      questinterfacePINVOKE.StatBonuses_STACapMod_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_STACapMod_get(swigCPtr);
      return ret;
    } 
  }

  public int HeroicSTA {
    set {
      questinterfacePINVOKE.StatBonuses_HeroicSTA_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_HeroicSTA_get(swigCPtr);
      return ret;
    } 
  }

  public int DEX {
    set {
      questinterfacePINVOKE.StatBonuses_DEX_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_DEX_get(swigCPtr);
      return ret;
    } 
  }

  public int DEXCapMod {
    set {
      questinterfacePINVOKE.StatBonuses_DEXCapMod_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_DEXCapMod_get(swigCPtr);
      return ret;
    } 
  }

  public int HeroicDEX {
    set {
      questinterfacePINVOKE.StatBonuses_HeroicDEX_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_HeroicDEX_get(swigCPtr);
      return ret;
    } 
  }

  public int AGI {
    set {
      questinterfacePINVOKE.StatBonuses_AGI_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_AGI_get(swigCPtr);
      return ret;
    } 
  }

  public int AGICapMod {
    set {
      questinterfacePINVOKE.StatBonuses_AGICapMod_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_AGICapMod_get(swigCPtr);
      return ret;
    } 
  }

  public int HeroicAGI {
    set {
      questinterfacePINVOKE.StatBonuses_HeroicAGI_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_HeroicAGI_get(swigCPtr);
      return ret;
    } 
  }

  public int INT {
    set {
      questinterfacePINVOKE.StatBonuses_INT_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_INT_get(swigCPtr);
      return ret;
    } 
  }

  public int INTCapMod {
    set {
      questinterfacePINVOKE.StatBonuses_INTCapMod_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_INTCapMod_get(swigCPtr);
      return ret;
    } 
  }

  public int HeroicINT {
    set {
      questinterfacePINVOKE.StatBonuses_HeroicINT_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_HeroicINT_get(swigCPtr);
      return ret;
    } 
  }

  public int WIS {
    set {
      questinterfacePINVOKE.StatBonuses_WIS_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_WIS_get(swigCPtr);
      return ret;
    } 
  }

  public int WISCapMod {
    set {
      questinterfacePINVOKE.StatBonuses_WISCapMod_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_WISCapMod_get(swigCPtr);
      return ret;
    } 
  }

  public int HeroicWIS {
    set {
      questinterfacePINVOKE.StatBonuses_HeroicWIS_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_HeroicWIS_get(swigCPtr);
      return ret;
    } 
  }

  public int CHA {
    set {
      questinterfacePINVOKE.StatBonuses_CHA_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_CHA_get(swigCPtr);
      return ret;
    } 
  }

  public int CHACapMod {
    set {
      questinterfacePINVOKE.StatBonuses_CHACapMod_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_CHACapMod_get(swigCPtr);
      return ret;
    } 
  }

  public int HeroicCHA {
    set {
      questinterfacePINVOKE.StatBonuses_HeroicCHA_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_HeroicCHA_get(swigCPtr);
      return ret;
    } 
  }

  public int MR {
    set {
      questinterfacePINVOKE.StatBonuses_MR_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_MR_get(swigCPtr);
      return ret;
    } 
  }

  public int MRCapMod {
    set {
      questinterfacePINVOKE.StatBonuses_MRCapMod_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_MRCapMod_get(swigCPtr);
      return ret;
    } 
  }

  public int HeroicMR {
    set {
      questinterfacePINVOKE.StatBonuses_HeroicMR_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_HeroicMR_get(swigCPtr);
      return ret;
    } 
  }

  public int FR {
    set {
      questinterfacePINVOKE.StatBonuses_FR_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_FR_get(swigCPtr);
      return ret;
    } 
  }

  public int FRCapMod {
    set {
      questinterfacePINVOKE.StatBonuses_FRCapMod_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_FRCapMod_get(swigCPtr);
      return ret;
    } 
  }

  public int HeroicFR {
    set {
      questinterfacePINVOKE.StatBonuses_HeroicFR_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_HeroicFR_get(swigCPtr);
      return ret;
    } 
  }

  public int CR {
    set {
      questinterfacePINVOKE.StatBonuses_CR_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_CR_get(swigCPtr);
      return ret;
    } 
  }

  public int CRCapMod {
    set {
      questinterfacePINVOKE.StatBonuses_CRCapMod_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_CRCapMod_get(swigCPtr);
      return ret;
    } 
  }

  public int HeroicCR {
    set {
      questinterfacePINVOKE.StatBonuses_HeroicCR_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_HeroicCR_get(swigCPtr);
      return ret;
    } 
  }

  public int PR {
    set {
      questinterfacePINVOKE.StatBonuses_PR_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_PR_get(swigCPtr);
      return ret;
    } 
  }

  public int PRCapMod {
    set {
      questinterfacePINVOKE.StatBonuses_PRCapMod_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_PRCapMod_get(swigCPtr);
      return ret;
    } 
  }

  public int HeroicPR {
    set {
      questinterfacePINVOKE.StatBonuses_HeroicPR_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_HeroicPR_get(swigCPtr);
      return ret;
    } 
  }

  public int DR {
    set {
      questinterfacePINVOKE.StatBonuses_DR_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_DR_get(swigCPtr);
      return ret;
    } 
  }

  public int DRCapMod {
    set {
      questinterfacePINVOKE.StatBonuses_DRCapMod_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_DRCapMod_get(swigCPtr);
      return ret;
    } 
  }

  public int HeroicDR {
    set {
      questinterfacePINVOKE.StatBonuses_HeroicDR_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_HeroicDR_get(swigCPtr);
      return ret;
    } 
  }

  public int Corrup {
    set {
      questinterfacePINVOKE.StatBonuses_Corrup_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_Corrup_get(swigCPtr);
      return ret;
    } 
  }

  public int CorrupCapMod {
    set {
      questinterfacePINVOKE.StatBonuses_CorrupCapMod_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_CorrupCapMod_get(swigCPtr);
      return ret;
    } 
  }

  public int HeroicCorrup {
    set {
      questinterfacePINVOKE.StatBonuses_HeroicCorrup_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_HeroicCorrup_get(swigCPtr);
      return ret;
    } 
  }

  public ushort DamageShieldSpellID {
    set {
      questinterfacePINVOKE.StatBonuses_DamageShieldSpellID_set(swigCPtr, value);
    } 
    get {
      ushort ret = questinterfacePINVOKE.StatBonuses_DamageShieldSpellID_get(swigCPtr);
      return ret;
    } 
  }

  public int DamageShield {
    set {
      questinterfacePINVOKE.StatBonuses_DamageShield_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_DamageShield_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_DmgShieldType DamageShieldType {
    set {
      questinterfacePINVOKE.StatBonuses_DamageShieldType_set(swigCPtr, SWIGTYPE_p_DmgShieldType.getCPtr(value));
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_DmgShieldType ret = new SWIGTYPE_p_DmgShieldType(questinterfacePINVOKE.StatBonuses_DamageShieldType_get(swigCPtr), true);
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int SpellDamageShield {
    set {
      questinterfacePINVOKE.StatBonuses_SpellDamageShield_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_SpellDamageShield_get(swigCPtr);
      return ret;
    } 
  }

  public int SpellShield {
    set {
      questinterfacePINVOKE.StatBonuses_SpellShield_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_SpellShield_get(swigCPtr);
      return ret;
    } 
  }

  public int ReverseDamageShield {
    set {
      questinterfacePINVOKE.StatBonuses_ReverseDamageShield_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_ReverseDamageShield_get(swigCPtr);
      return ret;
    } 
  }

  public ushort ReverseDamageShieldSpellID {
    set {
      questinterfacePINVOKE.StatBonuses_ReverseDamageShieldSpellID_set(swigCPtr, value);
    } 
    get {
      ushort ret = questinterfacePINVOKE.StatBonuses_ReverseDamageShieldSpellID_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_DmgShieldType ReverseDamageShieldType {
    set {
      questinterfacePINVOKE.StatBonuses_ReverseDamageShieldType_set(swigCPtr, SWIGTYPE_p_DmgShieldType.getCPtr(value));
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_DmgShieldType ret = new SWIGTYPE_p_DmgShieldType(questinterfacePINVOKE.StatBonuses_ReverseDamageShieldType_get(swigCPtr), true);
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int movementspeed {
    set {
      questinterfacePINVOKE.StatBonuses_movementspeed_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_movementspeed_get(swigCPtr);
      return ret;
    } 
  }

  public int haste {
    set {
      questinterfacePINVOKE.StatBonuses_haste_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_haste_get(swigCPtr);
      return ret;
    } 
  }

  public int hastetype2 {
    set {
      questinterfacePINVOKE.StatBonuses_hastetype2_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_hastetype2_get(swigCPtr);
      return ret;
    } 
  }

  public int hastetype3 {
    set {
      questinterfacePINVOKE.StatBonuses_hastetype3_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_hastetype3_get(swigCPtr);
      return ret;
    } 
  }

  public int inhibitmelee {
    set {
      questinterfacePINVOKE.StatBonuses_inhibitmelee_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_inhibitmelee_get(swigCPtr);
      return ret;
    } 
  }

  public float AggroRange {
    set {
      questinterfacePINVOKE.StatBonuses_AggroRange_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.StatBonuses_AggroRange_get(swigCPtr);
      return ret;
    } 
  }

  public float AssistRange {
    set {
      questinterfacePINVOKE.StatBonuses_AssistRange_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.StatBonuses_AssistRange_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_int skillmod {
    set {
      questinterfacePINVOKE.StatBonuses_skillmod_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_skillmod_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int skillmodmax {
    set {
      questinterfacePINVOKE.StatBonuses_skillmodmax_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_skillmodmax_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public int effective_casting_level {
    set {
      questinterfacePINVOKE.StatBonuses_effective_casting_level_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_effective_casting_level_get(swigCPtr);
      return ret;
    } 
  }

  public int adjusted_casting_skill {
    set {
      questinterfacePINVOKE.StatBonuses_adjusted_casting_skill_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_adjusted_casting_skill_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_int reflect {
    set {
      questinterfacePINVOKE.StatBonuses_reflect_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_reflect_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public uint singingMod {
    set {
      questinterfacePINVOKE.StatBonuses_singingMod_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.StatBonuses_singingMod_get(swigCPtr);
      return ret;
    } 
  }

  public uint Amplification {
    set {
      questinterfacePINVOKE.StatBonuses_Amplification_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.StatBonuses_Amplification_get(swigCPtr);
      return ret;
    } 
  }

  public uint brassMod {
    set {
      questinterfacePINVOKE.StatBonuses_brassMod_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.StatBonuses_brassMod_get(swigCPtr);
      return ret;
    } 
  }

  public uint percussionMod {
    set {
      questinterfacePINVOKE.StatBonuses_percussionMod_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.StatBonuses_percussionMod_get(swigCPtr);
      return ret;
    } 
  }

  public uint windMod {
    set {
      questinterfacePINVOKE.StatBonuses_windMod_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.StatBonuses_windMod_get(swigCPtr);
      return ret;
    } 
  }

  public uint stringedMod {
    set {
      questinterfacePINVOKE.StatBonuses_stringedMod_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.StatBonuses_stringedMod_get(swigCPtr);
      return ret;
    } 
  }

  public uint songModCap {
    set {
      questinterfacePINVOKE.StatBonuses_songModCap_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.StatBonuses_songModCap_get(swigCPtr);
      return ret;
    } 
  }

  public int hatemod {
    set {
      questinterfacePINVOKE.StatBonuses_hatemod_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_hatemod_get(swigCPtr);
      return ret;
    } 
  }

  public long EnduranceReduction {
    set {
      questinterfacePINVOKE.StatBonuses_EnduranceReduction_set(swigCPtr, value);
    } 
    get {
      long ret = questinterfacePINVOKE.StatBonuses_EnduranceReduction_get(swigCPtr);
      return ret;
    } 
  }

  public int StrikeThrough {
    set {
      questinterfacePINVOKE.StatBonuses_StrikeThrough_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_StrikeThrough_get(swigCPtr);
      return ret;
    } 
  }

  public int MeleeMitigation {
    set {
      questinterfacePINVOKE.StatBonuses_MeleeMitigation_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_MeleeMitigation_get(swigCPtr);
      return ret;
    } 
  }

  public int MeleeMitigationEffect {
    set {
      questinterfacePINVOKE.StatBonuses_MeleeMitigationEffect_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_MeleeMitigationEffect_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_int CriticalHitChance {
    set {
      questinterfacePINVOKE.StatBonuses_CriticalHitChance_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_CriticalHitChance_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public int CriticalSpellChance {
    set {
      questinterfacePINVOKE.StatBonuses_CriticalSpellChance_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_CriticalSpellChance_get(swigCPtr);
      return ret;
    } 
  }

  public int SpellCritDmgIncrease {
    set {
      questinterfacePINVOKE.StatBonuses_SpellCritDmgIncrease_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_SpellCritDmgIncrease_get(swigCPtr);
      return ret;
    } 
  }

  public int SpellCritDmgIncNoStack {
    set {
      questinterfacePINVOKE.StatBonuses_SpellCritDmgIncNoStack_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_SpellCritDmgIncNoStack_get(swigCPtr);
      return ret;
    } 
  }

  public int DotCritDmgIncrease {
    set {
      questinterfacePINVOKE.StatBonuses_DotCritDmgIncrease_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_DotCritDmgIncrease_get(swigCPtr);
      return ret;
    } 
  }

  public int CriticalHealChance {
    set {
      questinterfacePINVOKE.StatBonuses_CriticalHealChance_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_CriticalHealChance_get(swigCPtr);
      return ret;
    } 
  }

  public int CriticalHealOverTime {
    set {
      questinterfacePINVOKE.StatBonuses_CriticalHealOverTime_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_CriticalHealOverTime_get(swigCPtr);
      return ret;
    } 
  }

  public int CriticalDoTChance {
    set {
      questinterfacePINVOKE.StatBonuses_CriticalDoTChance_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_CriticalDoTChance_get(swigCPtr);
      return ret;
    } 
  }

  public int CrippBlowChance {
    set {
      questinterfacePINVOKE.StatBonuses_CrippBlowChance_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_CrippBlowChance_get(swigCPtr);
      return ret;
    } 
  }

  public int AvoidMeleeChance {
    set {
      questinterfacePINVOKE.StatBonuses_AvoidMeleeChance_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_AvoidMeleeChance_get(swigCPtr);
      return ret;
    } 
  }

  public int AvoidMeleeChanceEffect {
    set {
      questinterfacePINVOKE.StatBonuses_AvoidMeleeChanceEffect_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_AvoidMeleeChanceEffect_get(swigCPtr);
      return ret;
    } 
  }

  public int RiposteChance {
    set {
      questinterfacePINVOKE.StatBonuses_RiposteChance_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_RiposteChance_get(swigCPtr);
      return ret;
    } 
  }

  public int DodgeChance {
    set {
      questinterfacePINVOKE.StatBonuses_DodgeChance_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_DodgeChance_get(swigCPtr);
      return ret;
    } 
  }

  public int ParryChance {
    set {
      questinterfacePINVOKE.StatBonuses_ParryChance_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_ParryChance_get(swigCPtr);
      return ret;
    } 
  }

  public int DualWieldChance {
    set {
      questinterfacePINVOKE.StatBonuses_DualWieldChance_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_DualWieldChance_get(swigCPtr);
      return ret;
    } 
  }

  public int DoubleAttackChance {
    set {
      questinterfacePINVOKE.StatBonuses_DoubleAttackChance_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_DoubleAttackChance_get(swigCPtr);
      return ret;
    } 
  }

  public int TripleAttackChance {
    set {
      questinterfacePINVOKE.StatBonuses_TripleAttackChance_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_TripleAttackChance_get(swigCPtr);
      return ret;
    } 
  }

  public int DoubleRangedAttack {
    set {
      questinterfacePINVOKE.StatBonuses_DoubleRangedAttack_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_DoubleRangedAttack_get(swigCPtr);
      return ret;
    } 
  }

  public int ResistSpellChance {
    set {
      questinterfacePINVOKE.StatBonuses_ResistSpellChance_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_ResistSpellChance_get(swigCPtr);
      return ret;
    } 
  }

  public int ResistFearChance {
    set {
      questinterfacePINVOKE.StatBonuses_ResistFearChance_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_ResistFearChance_get(swigCPtr);
      return ret;
    } 
  }

  public bool Fearless {
    set {
      questinterfacePINVOKE.StatBonuses_Fearless_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.StatBonuses_Fearless_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsFeared {
    set {
      questinterfacePINVOKE.StatBonuses_IsFeared_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.StatBonuses_IsFeared_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsBlind {
    set {
      questinterfacePINVOKE.StatBonuses_IsBlind_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.StatBonuses_IsBlind_get(swigCPtr);
      return ret;
    } 
  }

  public int StunResist {
    set {
      questinterfacePINVOKE.StatBonuses_StunResist_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_StunResist_get(swigCPtr);
      return ret;
    } 
  }

  public int MeleeSkillCheck {
    set {
      questinterfacePINVOKE.StatBonuses_MeleeSkillCheck_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_MeleeSkillCheck_get(swigCPtr);
      return ret;
    } 
  }

  public byte MeleeSkillCheckSkill {
    set {
      questinterfacePINVOKE.StatBonuses_MeleeSkillCheckSkill_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.StatBonuses_MeleeSkillCheckSkill_get(swigCPtr);
      return ret;
    } 
  }

  public int HitChance {
    set {
      questinterfacePINVOKE.StatBonuses_HitChance_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_HitChance_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_int HitChanceEffect {
    set {
      questinterfacePINVOKE.StatBonuses_HitChanceEffect_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_HitChanceEffect_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int DamageModifier {
    set {
      questinterfacePINVOKE.StatBonuses_DamageModifier_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_DamageModifier_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int DamageModifier2 {
    set {
      questinterfacePINVOKE.StatBonuses_DamageModifier2_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_DamageModifier2_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int DamageModifier3 {
    set {
      questinterfacePINVOKE.StatBonuses_DamageModifier3_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_DamageModifier3_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int MinDamageModifier {
    set {
      questinterfacePINVOKE.StatBonuses_MinDamageModifier_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_MinDamageModifier_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public int ProcChance {
    set {
      questinterfacePINVOKE.StatBonuses_ProcChance_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_ProcChance_get(swigCPtr);
      return ret;
    } 
  }

  public int ProcChanceSPA {
    set {
      questinterfacePINVOKE.StatBonuses_ProcChanceSPA_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_ProcChanceSPA_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_int ExtraAttackChance {
    set {
      questinterfacePINVOKE.StatBonuses_ExtraAttackChance_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_ExtraAttackChance_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int ExtraAttackChancePrimary {
    set {
      questinterfacePINVOKE.StatBonuses_ExtraAttackChancePrimary_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_ExtraAttackChancePrimary_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int ExtraAttackChanceSecondary {
    set {
      questinterfacePINVOKE.StatBonuses_ExtraAttackChanceSecondary_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_ExtraAttackChanceSecondary_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int DoubleMeleeRound {
    set {
      questinterfacePINVOKE.StatBonuses_DoubleMeleeRound_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_DoubleMeleeRound_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public int DoTShielding {
    set {
      questinterfacePINVOKE.StatBonuses_DoTShielding_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_DoTShielding_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_int DivineSaveChance {
    set {
      questinterfacePINVOKE.StatBonuses_DivineSaveChance_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_DivineSaveChance_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_int DeathSave {
    set {
      questinterfacePINVOKE.StatBonuses_DeathSave_set(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_DeathSave_get(swigCPtr);
      SWIGTYPE_p_unsigned_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
      return ret;
    } 
  }

  public int FlurryChance {
    set {
      questinterfacePINVOKE.StatBonuses_FlurryChance_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_FlurryChance_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_int Accuracy {
    set {
      questinterfacePINVOKE.StatBonuses_Accuracy_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_Accuracy_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public int HundredHands {
    set {
      questinterfacePINVOKE.StatBonuses_HundredHands_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_HundredHands_get(swigCPtr);
      return ret;
    } 
  }

  public int MeleeLifetap {
    set {
      questinterfacePINVOKE.StatBonuses_MeleeLifetap_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_MeleeLifetap_get(swigCPtr);
      return ret;
    } 
  }

  public int Vampirism {
    set {
      questinterfacePINVOKE.StatBonuses_Vampirism_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_Vampirism_get(swigCPtr);
      return ret;
    } 
  }

  public int HealRate {
    set {
      questinterfacePINVOKE.StatBonuses_HealRate_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_HealRate_get(swigCPtr);
      return ret;
    } 
  }

  public int MaxHPChange {
    set {
      questinterfacePINVOKE.StatBonuses_MaxHPChange_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_MaxHPChange_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_short SkillDmgTaken {
    set {
      questinterfacePINVOKE.StatBonuses_SkillDmgTaken_set(swigCPtr, SWIGTYPE_p_short.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_SkillDmgTaken_get(swigCPtr);
      SWIGTYPE_p_short ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_short(cPtr, false);
      return ret;
    } 
  }

  public int HealAmt {
    set {
      questinterfacePINVOKE.StatBonuses_HealAmt_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_HealAmt_get(swigCPtr);
      return ret;
    } 
  }

  public int SpellDmg {
    set {
      questinterfacePINVOKE.StatBonuses_SpellDmg_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_SpellDmg_get(swigCPtr);
      return ret;
    } 
  }

  public int Clairvoyance {
    set {
      questinterfacePINVOKE.StatBonuses_Clairvoyance_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_Clairvoyance_get(swigCPtr);
      return ret;
    } 
  }

  public int DSMitigation {
    set {
      questinterfacePINVOKE.StatBonuses_DSMitigation_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_DSMitigation_get(swigCPtr);
      return ret;
    } 
  }

  public int DSMitigationOffHand {
    set {
      questinterfacePINVOKE.StatBonuses_DSMitigationOffHand_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_DSMitigationOffHand_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_int SpellTriggers {
    set {
      questinterfacePINVOKE.StatBonuses_SpellTriggers_set(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_SpellTriggers_get(swigCPtr);
      SWIGTYPE_p_unsigned_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_int SpellOnKill {
    set {
      questinterfacePINVOKE.StatBonuses_SpellOnKill_set(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_SpellOnKill_get(swigCPtr);
      SWIGTYPE_p_unsigned_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_int SpellOnDeath {
    set {
      questinterfacePINVOKE.StatBonuses_SpellOnDeath_set(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_SpellOnDeath_get(swigCPtr);
      SWIGTYPE_p_unsigned_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int CritDmgMod {
    set {
      questinterfacePINVOKE.StatBonuses_CritDmgMod_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_CritDmgMod_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int CritDmgModNoStack {
    set {
      questinterfacePINVOKE.StatBonuses_CritDmgModNoStack_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_CritDmgModNoStack_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int SkillReuseTime {
    set {
      questinterfacePINVOKE.StatBonuses_SkillReuseTime_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_SkillReuseTime_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int SkillDamageAmount {
    set {
      questinterfacePINVOKE.StatBonuses_SkillDamageAmount_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_SkillDamageAmount_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public int TwoHandBluntBlock {
    set {
      questinterfacePINVOKE.StatBonuses_TwoHandBluntBlock_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_TwoHandBluntBlock_get(swigCPtr);
      return ret;
    } 
  }

  public uint ItemManaRegenCap {
    set {
      questinterfacePINVOKE.StatBonuses_ItemManaRegenCap_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.StatBonuses_ItemManaRegenCap_get(swigCPtr);
      return ret;
    } 
  }

  public int GravityEffect {
    set {
      questinterfacePINVOKE.StatBonuses_GravityEffect_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_GravityEffect_get(swigCPtr);
      return ret;
    } 
  }

  public bool AntiGate {
    set {
      questinterfacePINVOKE.StatBonuses_AntiGate_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.StatBonuses_AntiGate_get(swigCPtr);
      return ret;
    } 
  }

  public bool MagicWeapon {
    set {
      questinterfacePINVOKE.StatBonuses_MagicWeapon_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.StatBonuses_MagicWeapon_get(swigCPtr);
      return ret;
    } 
  }

  public int IncreaseBlockChance {
    set {
      questinterfacePINVOKE.StatBonuses_IncreaseBlockChance_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_IncreaseBlockChance_get(swigCPtr);
      return ret;
    } 
  }

  public uint PersistantCasting {
    set {
      questinterfacePINVOKE.StatBonuses_PersistantCasting_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.StatBonuses_PersistantCasting_get(swigCPtr);
      return ret;
    } 
  }

  public int XPRateMod {
    set {
      questinterfacePINVOKE.StatBonuses_XPRateMod_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_XPRateMod_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_int HPPercCap {
    set {
      questinterfacePINVOKE.StatBonuses_HPPercCap_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_HPPercCap_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int ManaPercCap {
    set {
      questinterfacePINVOKE.StatBonuses_ManaPercCap_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_ManaPercCap_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int EndPercCap {
    set {
      questinterfacePINVOKE.StatBonuses_EndPercCap_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_EndPercCap_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public bool ImmuneToFlee {
    set {
      questinterfacePINVOKE.StatBonuses_ImmuneToFlee_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.StatBonuses_ImmuneToFlee_get(swigCPtr);
      return ret;
    } 
  }

  public uint VoiceGraft {
    set {
      questinterfacePINVOKE.StatBonuses_VoiceGraft_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.StatBonuses_VoiceGraft_get(swigCPtr);
      return ret;
    } 
  }

  public int SpellProcChance {
    set {
      questinterfacePINVOKE.StatBonuses_SpellProcChance_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_SpellProcChance_get(swigCPtr);
      return ret;
    } 
  }

  public int CharmBreakChance {
    set {
      questinterfacePINVOKE.StatBonuses_CharmBreakChance_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_CharmBreakChance_get(swigCPtr);
      return ret;
    } 
  }

  public int SongRange {
    set {
      questinterfacePINVOKE.StatBonuses_SongRange_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_SongRange_get(swigCPtr);
      return ret;
    } 
  }

  public uint HPToManaConvert {
    set {
      questinterfacePINVOKE.StatBonuses_HPToManaConvert_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.StatBonuses_HPToManaConvert_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_int FocusEffects {
    set {
      questinterfacePINVOKE.StatBonuses_FocusEffects_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_FocusEffects_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_short FocusEffectsWorn {
    set {
      questinterfacePINVOKE.StatBonuses_FocusEffectsWorn_set(swigCPtr, SWIGTYPE_p_short.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_FocusEffectsWorn_get(swigCPtr);
      SWIGTYPE_p_short ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_short(cPtr, false);
      return ret;
    } 
  }

  public bool NegateEffects {
    set {
      questinterfacePINVOKE.StatBonuses_NegateEffects_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.StatBonuses_NegateEffects_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_int SkillDamageAmount2 {
    set {
      questinterfacePINVOKE.StatBonuses_SkillDamageAmount2_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_SkillDamageAmount2_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_int NegateAttacks {
    set {
      questinterfacePINVOKE.StatBonuses_NegateAttacks_set(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_NegateAttacks_get(swigCPtr);
      SWIGTYPE_p_unsigned_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_int MitigateMeleeRune {
    set {
      questinterfacePINVOKE.StatBonuses_MitigateMeleeRune_set(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_MitigateMeleeRune_get(swigCPtr);
      SWIGTYPE_p_unsigned_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_int MeleeThresholdGuard {
    set {
      questinterfacePINVOKE.StatBonuses_MeleeThresholdGuard_set(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_MeleeThresholdGuard_get(swigCPtr);
      SWIGTYPE_p_unsigned_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_int SpellThresholdGuard {
    set {
      questinterfacePINVOKE.StatBonuses_SpellThresholdGuard_set(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_SpellThresholdGuard_get(swigCPtr);
      SWIGTYPE_p_unsigned_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_int MitigateSpellRune {
    set {
      questinterfacePINVOKE.StatBonuses_MitigateSpellRune_set(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_MitigateSpellRune_get(swigCPtr);
      SWIGTYPE_p_unsigned_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_int MitigateDotRune {
    set {
      questinterfacePINVOKE.StatBonuses_MitigateDotRune_set(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_MitigateDotRune_get(swigCPtr);
      SWIGTYPE_p_unsigned_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
      return ret;
    } 
  }

  public bool TriggerMeleeThreshold {
    set {
      questinterfacePINVOKE.StatBonuses_TriggerMeleeThreshold_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.StatBonuses_TriggerMeleeThreshold_get(swigCPtr);
      return ret;
    } 
  }

  public bool TriggerSpellThreshold {
    set {
      questinterfacePINVOKE.StatBonuses_TriggerSpellThreshold_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.StatBonuses_TriggerSpellThreshold_get(swigCPtr);
      return ret;
    } 
  }

  public uint ManaAbsorbPercentDamage {
    set {
      questinterfacePINVOKE.StatBonuses_ManaAbsorbPercentDamage_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.StatBonuses_ManaAbsorbPercentDamage_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_int EnduranceAbsorbPercentDamage {
    set {
      questinterfacePINVOKE.StatBonuses_EnduranceAbsorbPercentDamage_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_EnduranceAbsorbPercentDamage_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public int ShieldBlock {
    set {
      questinterfacePINVOKE.StatBonuses_ShieldBlock_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_ShieldBlock_get(swigCPtr);
      return ret;
    } 
  }

  public int BlockBehind {
    set {
      questinterfacePINVOKE.StatBonuses_BlockBehind_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_BlockBehind_get(swigCPtr);
      return ret;
    } 
  }

  public bool CriticalRegenDecay {
    set {
      questinterfacePINVOKE.StatBonuses_CriticalRegenDecay_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.StatBonuses_CriticalRegenDecay_get(swigCPtr);
      return ret;
    } 
  }

  public bool CriticalHealDecay {
    set {
      questinterfacePINVOKE.StatBonuses_CriticalHealDecay_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.StatBonuses_CriticalHealDecay_get(swigCPtr);
      return ret;
    } 
  }

  public bool CriticalDotDecay {
    set {
      questinterfacePINVOKE.StatBonuses_CriticalDotDecay_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.StatBonuses_CriticalDotDecay_get(swigCPtr);
      return ret;
    } 
  }

  public bool DivineAura {
    set {
      questinterfacePINVOKE.StatBonuses_DivineAura_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.StatBonuses_DivineAura_get(swigCPtr);
      return ret;
    } 
  }

  public bool DistanceRemoval {
    set {
      questinterfacePINVOKE.StatBonuses_DistanceRemoval_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.StatBonuses_DistanceRemoval_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_int ImprovedTaunt {
    set {
      questinterfacePINVOKE.StatBonuses_ImprovedTaunt_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_ImprovedTaunt_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_signed_char Root {
    set {
      questinterfacePINVOKE.StatBonuses_Root_set(swigCPtr, SWIGTYPE_p_signed_char.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_Root_get(swigCPtr);
      SWIGTYPE_p_signed_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_signed_char(cPtr, false);
      return ret;
    } 
  }

  public int FrenziedDevastation {
    set {
      questinterfacePINVOKE.StatBonuses_FrenziedDevastation_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_FrenziedDevastation_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_int AbsorbMagicAtt {
    set {
      questinterfacePINVOKE.StatBonuses_AbsorbMagicAtt_set(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_AbsorbMagicAtt_get(swigCPtr);
      SWIGTYPE_p_unsigned_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_int MeleeRune {
    set {
      questinterfacePINVOKE.StatBonuses_MeleeRune_set(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_MeleeRune_get(swigCPtr);
      SWIGTYPE_p_unsigned_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
      return ret;
    } 
  }

  public bool NegateIfCombat {
    set {
      questinterfacePINVOKE.StatBonuses_NegateIfCombat_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.StatBonuses_NegateIfCombat_get(swigCPtr);
      return ret;
    } 
  }

  public sbyte Screech {
    set {
      questinterfacePINVOKE.StatBonuses_Screech_set(swigCPtr, value);
    } 
    get {
      sbyte ret = questinterfacePINVOKE.StatBonuses_Screech_get(swigCPtr);
      return ret;
    } 
  }

  public int AlterNPCLevel {
    set {
      questinterfacePINVOKE.StatBonuses_AlterNPCLevel_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_AlterNPCLevel_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_int AStacker {
    set {
      questinterfacePINVOKE.StatBonuses_AStacker_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_AStacker_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int BStacker {
    set {
      questinterfacePINVOKE.StatBonuses_BStacker_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_BStacker_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int CStacker {
    set {
      questinterfacePINVOKE.StatBonuses_CStacker_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_CStacker_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int DStacker {
    set {
      questinterfacePINVOKE.StatBonuses_DStacker_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_DStacker_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public bool BerserkSPA {
    set {
      questinterfacePINVOKE.StatBonuses_BerserkSPA_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.StatBonuses_BerserkSPA_get(swigCPtr);
      return ret;
    } 
  }

  public int Metabolism {
    set {
      questinterfacePINVOKE.StatBonuses_Metabolism_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_Metabolism_get(swigCPtr);
      return ret;
    } 
  }

  public bool Sanctuary {
    set {
      questinterfacePINVOKE.StatBonuses_Sanctuary_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.StatBonuses_Sanctuary_get(swigCPtr);
      return ret;
    } 
  }

  public int FactionModPct {
    set {
      questinterfacePINVOKE.StatBonuses_FactionModPct_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_FactionModPct_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_bool LimitToSkill {
    set {
      questinterfacePINVOKE.StatBonuses_LimitToSkill_set(swigCPtr, SWIGTYPE_p_bool.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_LimitToSkill_get(swigCPtr);
      SWIGTYPE_p_bool ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_bool(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int SkillProc {
    set {
      questinterfacePINVOKE.StatBonuses_SkillProc_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_SkillProc_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int SkillProcSuccess {
    set {
      questinterfacePINVOKE.StatBonuses_SkillProcSuccess_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_SkillProcSuccess_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int SpellProc {
    set {
      questinterfacePINVOKE.StatBonuses_SpellProc_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_SpellProc_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int RangedProc {
    set {
      questinterfacePINVOKE.StatBonuses_RangedProc_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_RangedProc_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int DefensiveProc {
    set {
      questinterfacePINVOKE.StatBonuses_DefensiveProc_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_DefensiveProc_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public bool Proc_Timer_Modifier {
    set {
      questinterfacePINVOKE.StatBonuses_Proc_Timer_Modifier_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.StatBonuses_Proc_Timer_Modifier_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_int PC_Pet_Rampage {
    set {
      questinterfacePINVOKE.StatBonuses_PC_Pet_Rampage_set(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_PC_Pet_Rampage_get(swigCPtr);
      SWIGTYPE_p_unsigned_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_int PC_Pet_AE_Rampage {
    set {
      questinterfacePINVOKE.StatBonuses_PC_Pet_AE_Rampage_set(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_PC_Pet_AE_Rampage_get(swigCPtr);
      SWIGTYPE_p_unsigned_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
      return ret;
    } 
  }

  public uint PC_Pet_Flurry {
    set {
      questinterfacePINVOKE.StatBonuses_PC_Pet_Flurry_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.StatBonuses_PC_Pet_Flurry_get(swigCPtr);
      return ret;
    } 
  }

  public int Attack_Accuracy_Max_Percent {
    set {
      questinterfacePINVOKE.StatBonuses_Attack_Accuracy_Max_Percent_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_Attack_Accuracy_Max_Percent_get(swigCPtr);
      return ret;
    } 
  }

  public int AC_Mitigation_Max_Percent {
    set {
      questinterfacePINVOKE.StatBonuses_AC_Mitigation_Max_Percent_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_AC_Mitigation_Max_Percent_get(swigCPtr);
      return ret;
    } 
  }

  public int AC_Avoidance_Max_Percent {
    set {
      questinterfacePINVOKE.StatBonuses_AC_Avoidance_Max_Percent_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_AC_Avoidance_Max_Percent_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_int Damage_Taken_Position_Mod {
    set {
      questinterfacePINVOKE.StatBonuses_Damage_Taken_Position_Mod_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_Damage_Taken_Position_Mod_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int Melee_Damage_Position_Mod {
    set {
      questinterfacePINVOKE.StatBonuses_Melee_Damage_Position_Mod_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_Melee_Damage_Position_Mod_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int Damage_Taken_Position_Amt {
    set {
      questinterfacePINVOKE.StatBonuses_Damage_Taken_Position_Amt_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_Damage_Taken_Position_Amt_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int Melee_Damage_Position_Amt {
    set {
      questinterfacePINVOKE.StatBonuses_Melee_Damage_Position_Amt_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_Melee_Damage_Position_Amt_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public int Double_Backstab_Front {
    set {
      questinterfacePINVOKE.StatBonuses_Double_Backstab_Front_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_Double_Backstab_Front_get(swigCPtr);
      return ret;
    } 
  }

  public int DS_Mitigation_Amount {
    set {
      questinterfacePINVOKE.StatBonuses_DS_Mitigation_Amount_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_DS_Mitigation_Amount_get(swigCPtr);
      return ret;
    } 
  }

  public int DS_Mitigation_Percentage {
    set {
      questinterfacePINVOKE.StatBonuses_DS_Mitigation_Percentage_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_DS_Mitigation_Percentage_get(swigCPtr);
      return ret;
    } 
  }

  public int Pet_Crit_Melee_Damage_Pct_Owner {
    set {
      questinterfacePINVOKE.StatBonuses_Pet_Crit_Melee_Damage_Pct_Owner_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_Pet_Crit_Melee_Damage_Pct_Owner_get(swigCPtr);
      return ret;
    } 
  }

  public int Pet_Add_Atk {
    set {
      questinterfacePINVOKE.StatBonuses_Pet_Add_Atk_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_Pet_Add_Atk_get(swigCPtr);
      return ret;
    } 
  }

  public int ItemEnduranceRegenCap {
    set {
      questinterfacePINVOKE.StatBonuses_ItemEnduranceRegenCap_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_ItemEnduranceRegenCap_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_int WeaponStance {
    set {
      questinterfacePINVOKE.StatBonuses_WeaponStance_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_WeaponStance_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public bool ZoneSuspendMinion {
    set {
      questinterfacePINVOKE.StatBonuses_ZoneSuspendMinion_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.StatBonuses_ZoneSuspendMinion_get(swigCPtr);
      return ret;
    } 
  }

  public bool CompleteHealBuffBlocker {
    set {
      questinterfacePINVOKE.StatBonuses_CompleteHealBuffBlocker_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.StatBonuses_CompleteHealBuffBlocker_get(swigCPtr);
      return ret;
    } 
  }

  public int Illusion {
    set {
      questinterfacePINVOKE.StatBonuses_Illusion_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_Illusion_get(swigCPtr);
      return ret;
    } 
  }

  public byte invisibility {
    set {
      questinterfacePINVOKE.StatBonuses_invisibility_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.StatBonuses_invisibility_get(swigCPtr);
      return ret;
    } 
  }

  public byte invisibility_verse_undead {
    set {
      questinterfacePINVOKE.StatBonuses_invisibility_verse_undead_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.StatBonuses_invisibility_verse_undead_get(swigCPtr);
      return ret;
    } 
  }

  public byte invisibility_verse_animal {
    set {
      questinterfacePINVOKE.StatBonuses_invisibility_verse_animal_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.StatBonuses_invisibility_verse_animal_get(swigCPtr);
      return ret;
    } 
  }

  public int TrapCircumvention {
    set {
      questinterfacePINVOKE.StatBonuses_TrapCircumvention_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_TrapCircumvention_get(swigCPtr);
      return ret;
    } 
  }

  public ushort SecondaryForte {
    set {
      questinterfacePINVOKE.StatBonuses_SecondaryForte_set(swigCPtr, value);
    } 
    get {
      ushort ret = questinterfacePINVOKE.StatBonuses_SecondaryForte_get(swigCPtr);
      return ret;
    } 
  }

  public int ShieldDuration {
    set {
      questinterfacePINVOKE.StatBonuses_ShieldDuration_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_ShieldDuration_get(swigCPtr);
      return ret;
    } 
  }

  public int ExtendedShielding {
    set {
      questinterfacePINVOKE.StatBonuses_ExtendedShielding_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_ExtendedShielding_get(swigCPtr);
      return ret;
    } 
  }

  public sbyte Packrat {
    set {
      questinterfacePINVOKE.StatBonuses_Packrat_set(swigCPtr, value);
    } 
    get {
      sbyte ret = questinterfacePINVOKE.StatBonuses_Packrat_get(swigCPtr);
      return ret;
    } 
  }

  public byte BuffSlotIncrease {
    set {
      questinterfacePINVOKE.StatBonuses_BuffSlotIncrease_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.StatBonuses_BuffSlotIncrease_get(swigCPtr);
      return ret;
    } 
  }

  public uint DelayDeath {
    set {
      questinterfacePINVOKE.StatBonuses_DelayDeath_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.StatBonuses_DelayDeath_get(swigCPtr);
      return ret;
    } 
  }

  public sbyte BaseMovementSpeed {
    set {
      questinterfacePINVOKE.StatBonuses_BaseMovementSpeed_set(swigCPtr, value);
    } 
    get {
      sbyte ret = questinterfacePINVOKE.StatBonuses_BaseMovementSpeed_get(swigCPtr);
      return ret;
    } 
  }

  public byte IncreaseRunSpeedCap {
    set {
      questinterfacePINVOKE.StatBonuses_IncreaseRunSpeedCap_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.StatBonuses_IncreaseRunSpeedCap_get(swigCPtr);
      return ret;
    } 
  }

  public int DoubleSpecialAttack {
    set {
      questinterfacePINVOKE.StatBonuses_DoubleSpecialAttack_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_DoubleSpecialAttack_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_int SkillAttackProc {
    set {
      questinterfacePINVOKE.StatBonuses_SkillAttackProc_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_SkillAttackProc_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_bool HasSkillAttackProc {
    set {
      questinterfacePINVOKE.StatBonuses_HasSkillAttackProc_set(swigCPtr, SWIGTYPE_p_bool.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_HasSkillAttackProc_get(swigCPtr);
      SWIGTYPE_p_bool ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_bool(cPtr, false);
      return ret;
    } 
  }

  public byte FrontalStunResist {
    set {
      questinterfacePINVOKE.StatBonuses_FrontalStunResist_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.StatBonuses_FrontalStunResist_get(swigCPtr);
      return ret;
    } 
  }

  public int BindWound {
    set {
      questinterfacePINVOKE.StatBonuses_BindWound_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_BindWound_get(swigCPtr);
      return ret;
    } 
  }

  public int MaxBindWound {
    set {
      questinterfacePINVOKE.StatBonuses_MaxBindWound_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_MaxBindWound_get(swigCPtr);
      return ret;
    } 
  }

  public int ChannelChanceSpells {
    set {
      questinterfacePINVOKE.StatBonuses_ChannelChanceSpells_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_ChannelChanceSpells_get(swigCPtr);
      return ret;
    } 
  }

  public int ChannelChanceItems {
    set {
      questinterfacePINVOKE.StatBonuses_ChannelChanceItems_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_ChannelChanceItems_get(swigCPtr);
      return ret;
    } 
  }

  public byte SeeInvis {
    set {
      questinterfacePINVOKE.StatBonuses_SeeInvis_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.StatBonuses_SeeInvis_get(swigCPtr);
      return ret;
    } 
  }

  public byte TripleBackstab {
    set {
      questinterfacePINVOKE.StatBonuses_TripleBackstab_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.StatBonuses_TripleBackstab_get(swigCPtr);
      return ret;
    } 
  }

  public bool FrontalBackstabMinDmg {
    set {
      questinterfacePINVOKE.StatBonuses_FrontalBackstabMinDmg_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.StatBonuses_FrontalBackstabMinDmg_get(swigCPtr);
      return ret;
    } 
  }

  public byte FrontalBackstabChance {
    set {
      questinterfacePINVOKE.StatBonuses_FrontalBackstabChance_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.StatBonuses_FrontalBackstabChance_get(swigCPtr);
      return ret;
    } 
  }

  public byte ConsumeProjectile {
    set {
      questinterfacePINVOKE.StatBonuses_ConsumeProjectile_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.StatBonuses_ConsumeProjectile_get(swigCPtr);
      return ret;
    } 
  }

  public byte ForageAdditionalItems {
    set {
      questinterfacePINVOKE.StatBonuses_ForageAdditionalItems_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.StatBonuses_ForageAdditionalItems_get(swigCPtr);
      return ret;
    } 
  }

  public byte SalvageChance {
    set {
      questinterfacePINVOKE.StatBonuses_SalvageChance_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.StatBonuses_SalvageChance_get(swigCPtr);
      return ret;
    } 
  }

  public uint ArcheryDamageModifier {
    set {
      questinterfacePINVOKE.StatBonuses_ArcheryDamageModifier_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.StatBonuses_ArcheryDamageModifier_get(swigCPtr);
      return ret;
    } 
  }

  public bool SecondaryDmgInc {
    set {
      questinterfacePINVOKE.StatBonuses_SecondaryDmgInc_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.StatBonuses_SecondaryDmgInc_get(swigCPtr);
      return ret;
    } 
  }

  public uint GiveDoubleAttack {
    set {
      questinterfacePINVOKE.StatBonuses_GiveDoubleAttack_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.StatBonuses_GiveDoubleAttack_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_int SlayUndead {
    set {
      questinterfacePINVOKE.StatBonuses_SlayUndead_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_SlayUndead_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public int PetCriticalHit {
    set {
      questinterfacePINVOKE.StatBonuses_PetCriticalHit_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_PetCriticalHit_get(swigCPtr);
      return ret;
    } 
  }

  public int PetAvoidance {
    set {
      questinterfacePINVOKE.StatBonuses_PetAvoidance_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_PetAvoidance_get(swigCPtr);
      return ret;
    } 
  }

  public int CombatStability {
    set {
      questinterfacePINVOKE.StatBonuses_CombatStability_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_CombatStability_get(swigCPtr);
      return ret;
    } 
  }

  public int DoubleRiposte {
    set {
      questinterfacePINVOKE.StatBonuses_DoubleRiposte_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_DoubleRiposte_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_int GiveDoubleRiposte {
    set {
      questinterfacePINVOKE.StatBonuses_GiveDoubleRiposte_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_GiveDoubleRiposte_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_int RaiseSkillCap {
    set {
      questinterfacePINVOKE.StatBonuses_RaiseSkillCap_set(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_RaiseSkillCap_get(swigCPtr);
      SWIGTYPE_p_unsigned_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
      return ret;
    } 
  }

  public int Ambidexterity {
    set {
      questinterfacePINVOKE.StatBonuses_Ambidexterity_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_Ambidexterity_get(swigCPtr);
      return ret;
    } 
  }

  public int PetMaxHP {
    set {
      questinterfacePINVOKE.StatBonuses_PetMaxHP_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_PetMaxHP_get(swigCPtr);
      return ret;
    } 
  }

  public int PetFlurry {
    set {
      questinterfacePINVOKE.StatBonuses_PetFlurry_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_PetFlurry_get(swigCPtr);
      return ret;
    } 
  }

  public byte MasteryofPast {
    set {
      questinterfacePINVOKE.StatBonuses_MasteryofPast_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.StatBonuses_MasteryofPast_get(swigCPtr);
      return ret;
    } 
  }

  public bool GivePetGroupTarget {
    set {
      questinterfacePINVOKE.StatBonuses_GivePetGroupTarget_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.StatBonuses_GivePetGroupTarget_get(swigCPtr);
      return ret;
    } 
  }

  public int RootBreakChance {
    set {
      questinterfacePINVOKE.StatBonuses_RootBreakChance_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_RootBreakChance_get(swigCPtr);
      return ret;
    } 
  }

  public int UnfailingDivinity {
    set {
      questinterfacePINVOKE.StatBonuses_UnfailingDivinity_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_UnfailingDivinity_get(swigCPtr);
      return ret;
    } 
  }

  public int ItemHPRegenCap {
    set {
      questinterfacePINVOKE.StatBonuses_ItemHPRegenCap_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_ItemHPRegenCap_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_int SEResist {
    set {
      questinterfacePINVOKE.StatBonuses_SEResist_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_SEResist_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public int OffhandRiposteFail {
    set {
      questinterfacePINVOKE.StatBonuses_OffhandRiposteFail_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_OffhandRiposteFail_get(swigCPtr);
      return ret;
    } 
  }

  public int ItemATKCap {
    set {
      questinterfacePINVOKE.StatBonuses_ItemATKCap_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_ItemATKCap_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_int FinishingBlow {
    set {
      questinterfacePINVOKE.StatBonuses_FinishingBlow_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_FinishingBlow_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_int FinishingBlowLvl {
    set {
      questinterfacePINVOKE.StatBonuses_FinishingBlowLvl_set(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_FinishingBlowLvl_get(swigCPtr);
      SWIGTYPE_p_unsigned_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
      return ret;
    } 
  }

  public int ShieldEquipDmgMod {
    set {
      questinterfacePINVOKE.StatBonuses_ShieldEquipDmgMod_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_ShieldEquipDmgMod_get(swigCPtr);
      return ret;
    } 
  }

  public bool TriggerOnCastRequirement {
    set {
      questinterfacePINVOKE.StatBonuses_TriggerOnCastRequirement_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.StatBonuses_TriggerOnCastRequirement_get(swigCPtr);
      return ret;
    } 
  }

  public sbyte StunBashChance {
    set {
      questinterfacePINVOKE.StatBonuses_StunBashChance_set(swigCPtr, value);
    } 
    get {
      sbyte ret = questinterfacePINVOKE.StatBonuses_StunBashChance_get(swigCPtr);
      return ret;
    } 
  }

  public sbyte IncreaseChanceMemwipe {
    set {
      questinterfacePINVOKE.StatBonuses_IncreaseChanceMemwipe_set(swigCPtr, value);
    } 
    get {
      sbyte ret = questinterfacePINVOKE.StatBonuses_IncreaseChanceMemwipe_get(swigCPtr);
      return ret;
    } 
  }

  public sbyte CriticalMend {
    set {
      questinterfacePINVOKE.StatBonuses_CriticalMend_set(swigCPtr, value);
    } 
    get {
      sbyte ret = questinterfacePINVOKE.StatBonuses_CriticalMend_get(swigCPtr);
      return ret;
    } 
  }

  public int ImprovedReclaimEnergy {
    set {
      questinterfacePINVOKE.StatBonuses_ImprovedReclaimEnergy_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_ImprovedReclaimEnergy_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_int HeadShot {
    set {
      questinterfacePINVOKE.StatBonuses_HeadShot_set(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_HeadShot_get(swigCPtr);
      SWIGTYPE_p_unsigned_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_char HSLevel {
    set {
      questinterfacePINVOKE.StatBonuses_HSLevel_set(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_HSLevel_get(swigCPtr);
      SWIGTYPE_p_unsigned_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_int Assassinate {
    set {
      questinterfacePINVOKE.StatBonuses_Assassinate_set(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_Assassinate_get(swigCPtr);
      SWIGTYPE_p_unsigned_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_char AssassinateLevel {
    set {
      questinterfacePINVOKE.StatBonuses_AssassinateLevel_set(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_AssassinateLevel_get(swigCPtr);
      SWIGTYPE_p_unsigned_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
      return ret;
    } 
  }

  public int PetMeleeMitigation {
    set {
      questinterfacePINVOKE.StatBonuses_PetMeleeMitigation_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_PetMeleeMitigation_get(swigCPtr);
      return ret;
    } 
  }

  public int IllusionPersistence {
    set {
      questinterfacePINVOKE.StatBonuses_IllusionPersistence_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_IllusionPersistence_get(swigCPtr);
      return ret;
    } 
  }

  public ushort extra_xtargets {
    set {
      questinterfacePINVOKE.StatBonuses_extra_xtargets_set(swigCPtr, value);
    } 
    get {
      ushort ret = questinterfacePINVOKE.StatBonuses_extra_xtargets_get(swigCPtr);
      return ret;
    } 
  }

  public bool ShroudofStealth {
    set {
      questinterfacePINVOKE.StatBonuses_ShroudofStealth_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.StatBonuses_ShroudofStealth_get(swigCPtr);
      return ret;
    } 
  }

  public ushort ReduceFallDamage {
    set {
      questinterfacePINVOKE.StatBonuses_ReduceFallDamage_set(swigCPtr, value);
    } 
    get {
      ushort ret = questinterfacePINVOKE.StatBonuses_ReduceFallDamage_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_int ReduceTradeskillFail {
    set {
      questinterfacePINVOKE.StatBonuses_ReduceTradeskillFail_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_ReduceTradeskillFail_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public byte TradeSkillMastery {
    set {
      questinterfacePINVOKE.StatBonuses_TradeSkillMastery_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.StatBonuses_TradeSkillMastery_get(swigCPtr);
      return ret;
    } 
  }

  public short NoBreakAESneak {
    set {
      questinterfacePINVOKE.StatBonuses_NoBreakAESneak_set(swigCPtr, value);
    } 
    get {
      short ret = questinterfacePINVOKE.StatBonuses_NoBreakAESneak_get(swigCPtr);
      return ret;
    } 
  }

  public short FeignedCastOnChance {
    set {
      questinterfacePINVOKE.StatBonuses_FeignedCastOnChance_set(swigCPtr, value);
    } 
    get {
      short ret = questinterfacePINVOKE.StatBonuses_FeignedCastOnChance_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_bool PetCommands {
    set {
      questinterfacePINVOKE.StatBonuses_PetCommands_set(swigCPtr, SWIGTYPE_p_bool.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.StatBonuses_PetCommands_get(swigCPtr);
      SWIGTYPE_p_bool ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_bool(cPtr, false);
      return ret;
    } 
  }

  public int FeignedMinionChance {
    set {
      questinterfacePINVOKE.StatBonuses_FeignedMinionChance_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_FeignedMinionChance_get(swigCPtr);
      return ret;
    } 
  }

  public int GrantForage {
    set {
      questinterfacePINVOKE.StatBonuses_GrantForage_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_GrantForage_get(swigCPtr);
      return ret;
    } 
  }

  public int aura_slots {
    set {
      questinterfacePINVOKE.StatBonuses_aura_slots_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_aura_slots_get(swigCPtr);
      return ret;
    } 
  }

  public int trap_slots {
    set {
      questinterfacePINVOKE.StatBonuses_trap_slots_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_trap_slots_get(swigCPtr);
      return ret;
    } 
  }

  public bool hunger {
    set {
      questinterfacePINVOKE.StatBonuses_hunger_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.StatBonuses_hunger_get(swigCPtr);
      return ret;
    } 
  }

  public long heroic_max_hp {
    set {
      questinterfacePINVOKE.StatBonuses_heroic_max_hp_set(swigCPtr, value);
    } 
    get {
      long ret = questinterfacePINVOKE.StatBonuses_heroic_max_hp_get(swigCPtr);
      return ret;
    } 
  }

  public long heroic_max_mana {
    set {
      questinterfacePINVOKE.StatBonuses_heroic_max_mana_set(swigCPtr, value);
    } 
    get {
      long ret = questinterfacePINVOKE.StatBonuses_heroic_max_mana_get(swigCPtr);
      return ret;
    } 
  }

  public long heroic_max_end {
    set {
      questinterfacePINVOKE.StatBonuses_heroic_max_end_set(swigCPtr, value);
    } 
    get {
      long ret = questinterfacePINVOKE.StatBonuses_heroic_max_end_get(swigCPtr);
      return ret;
    } 
  }

  public long heroic_hp_regen {
    set {
      questinterfacePINVOKE.StatBonuses_heroic_hp_regen_set(swigCPtr, value);
    } 
    get {
      long ret = questinterfacePINVOKE.StatBonuses_heroic_hp_regen_get(swigCPtr);
      return ret;
    } 
  }

  public long heroic_mana_regen {
    set {
      questinterfacePINVOKE.StatBonuses_heroic_mana_regen_set(swigCPtr, value);
    } 
    get {
      long ret = questinterfacePINVOKE.StatBonuses_heroic_mana_regen_get(swigCPtr);
      return ret;
    } 
  }

  public long heroic_end_regen {
    set {
      questinterfacePINVOKE.StatBonuses_heroic_end_regen_set(swigCPtr, value);
    } 
    get {
      long ret = questinterfacePINVOKE.StatBonuses_heroic_end_regen_get(swigCPtr);
      return ret;
    } 
  }

  public int heroic_str_shield_ac {
    set {
      questinterfacePINVOKE.StatBonuses_heroic_str_shield_ac_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_heroic_str_shield_ac_get(swigCPtr);
      return ret;
    } 
  }

  public int heroic_str_melee_damage {
    set {
      questinterfacePINVOKE.StatBonuses_heroic_str_melee_damage_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_heroic_str_melee_damage_get(swigCPtr);
      return ret;
    } 
  }

  public int heroic_agi_avoidance {
    set {
      questinterfacePINVOKE.StatBonuses_heroic_agi_avoidance_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_heroic_agi_avoidance_get(swigCPtr);
      return ret;
    } 
  }

  public int heroic_dex_ranged_damage {
    set {
      questinterfacePINVOKE.StatBonuses_heroic_dex_ranged_damage_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.StatBonuses_heroic_dex_ranged_damage_get(swigCPtr);
      return ret;
    } 
  }

  public StatBonuses() : this(questinterfacePINVOKE.new_StatBonuses(), true) {
  }

}

public class tProc : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal tProc(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(tProc obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(tProc obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~tProc() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_tProc(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public int spellID {
    set {
      questinterfacePINVOKE.tProc_spellID_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.tProc_spellID_get(swigCPtr);
      return ret;
    } 
  }

  public ushort chance {
    set {
      questinterfacePINVOKE.tProc_chance_set(swigCPtr, value);
    } 
    get {
      ushort ret = questinterfacePINVOKE.tProc_chance_get(swigCPtr);
      return ret;
    } 
  }

  public int base_spellID {
    set {
      questinterfacePINVOKE.tProc_base_spellID_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.tProc_base_spellID_get(swigCPtr);
      return ret;
    } 
  }

  public int level_override {
    set {
      questinterfacePINVOKE.tProc_level_override_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.tProc_level_override_get(swigCPtr);
      return ret;
    } 
  }

  public uint proc_reuse_time {
    set {
      questinterfacePINVOKE.tProc_proc_reuse_time_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.tProc_proc_reuse_time_get(swigCPtr);
      return ret;
    } 
  }

  public tProc() : this(questinterfacePINVOKE.new_tProc(), true) {
  }

}

public class WeaponStance_Struct : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal WeaponStance_Struct(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(WeaponStance_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(WeaponStance_Struct obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~WeaponStance_Struct() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_WeaponStance_Struct(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public bool enabled {
    set {
      questinterfacePINVOKE.WeaponStance_Struct_enabled_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.WeaponStance_Struct_enabled_get(swigCPtr);
      return ret;
    } 
  }

  public bool spellbonus_enabled {
    set {
      questinterfacePINVOKE.WeaponStance_Struct_spellbonus_enabled_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.WeaponStance_Struct_spellbonus_enabled_get(swigCPtr);
      return ret;
    } 
  }

  public bool itembonus_enabled {
    set {
      questinterfacePINVOKE.WeaponStance_Struct_itembonus_enabled_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.WeaponStance_Struct_itembonus_enabled_get(swigCPtr);
      return ret;
    } 
  }

  public bool aabonus_enabled {
    set {
      questinterfacePINVOKE.WeaponStance_Struct_aabonus_enabled_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.WeaponStance_Struct_aabonus_enabled_get(swigCPtr);
      return ret;
    } 
  }

  public int spellbonus_buff_spell_id {
    set {
      questinterfacePINVOKE.WeaponStance_Struct_spellbonus_buff_spell_id_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.WeaponStance_Struct_spellbonus_buff_spell_id_get(swigCPtr);
      return ret;
    } 
  }

  public int itembonus_buff_spell_id {
    set {
      questinterfacePINVOKE.WeaponStance_Struct_itembonus_buff_spell_id_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.WeaponStance_Struct_itembonus_buff_spell_id_get(swigCPtr);
      return ret;
    } 
  }

  public int aabonus_buff_spell_id {
    set {
      questinterfacePINVOKE.WeaponStance_Struct_aabonus_buff_spell_id_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.WeaponStance_Struct_aabonus_buff_spell_id_get(swigCPtr);
      return ret;
    } 
  }

  public WeaponStance_Struct() : this(questinterfacePINVOKE.new_WeaponStance_Struct(), true) {
  }

}

public class tProjatk : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal tProjatk(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(tProjatk obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(tProjatk obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~tProjatk() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_tProjatk(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ushort increment {
    set {
      questinterfacePINVOKE.tProjatk_increment_set(swigCPtr, value);
    } 
    get {
      ushort ret = questinterfacePINVOKE.tProjatk_increment_get(swigCPtr);
      return ret;
    } 
  }

  public ushort hit_increment {
    set {
      questinterfacePINVOKE.tProjatk_hit_increment_set(swigCPtr, value);
    } 
    get {
      ushort ret = questinterfacePINVOKE.tProjatk_hit_increment_get(swigCPtr);
      return ret;
    } 
  }

  public ushort target_id {
    set {
      questinterfacePINVOKE.tProjatk_target_id_set(swigCPtr, value);
    } 
    get {
      ushort ret = questinterfacePINVOKE.tProjatk_target_id_get(swigCPtr);
      return ret;
    } 
  }

  public int wpn_dmg {
    set {
      questinterfacePINVOKE.tProjatk_wpn_dmg_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.tProjatk_wpn_dmg_get(swigCPtr);
      return ret;
    } 
  }

  public float origin_x {
    set {
      questinterfacePINVOKE.tProjatk_origin_x_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.tProjatk_origin_x_get(swigCPtr);
      return ret;
    } 
  }

  public float origin_y {
    set {
      questinterfacePINVOKE.tProjatk_origin_y_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.tProjatk_origin_y_get(swigCPtr);
      return ret;
    } 
  }

  public float origin_z {
    set {
      questinterfacePINVOKE.tProjatk_origin_z_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.tProjatk_origin_z_get(swigCPtr);
      return ret;
    } 
  }

  public float tlast_x {
    set {
      questinterfacePINVOKE.tProjatk_tlast_x_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.tProjatk_tlast_x_get(swigCPtr);
      return ret;
    } 
  }

  public float tlast_y {
    set {
      questinterfacePINVOKE.tProjatk_tlast_y_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.tProjatk_tlast_y_get(swigCPtr);
      return ret;
    } 
  }

  public uint ranged_id {
    set {
      questinterfacePINVOKE.tProjatk_ranged_id_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.tProjatk_ranged_id_get(swigCPtr);
      return ret;
    } 
  }

  public uint ammo_id {
    set {
      questinterfacePINVOKE.tProjatk_ammo_id_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.tProjatk_ammo_id_get(swigCPtr);
      return ret;
    } 
  }

  public int ammo_slot {
    set {
      questinterfacePINVOKE.tProjatk_ammo_slot_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.tProjatk_ammo_slot_get(swigCPtr);
      return ret;
    } 
  }

  public byte skill {
    set {
      questinterfacePINVOKE.tProjatk_skill_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.tProjatk_skill_get(swigCPtr);
      return ret;
    } 
  }

  public float speed_mod {
    set {
      questinterfacePINVOKE.tProjatk_speed_mod_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.tProjatk_speed_mod_get(swigCPtr);
      return ret;
    } 
  }

  public bool disable_procs {
    set {
      questinterfacePINVOKE.tProjatk_disable_procs_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.tProjatk_disable_procs_get(swigCPtr);
      return ret;
    } 
  }

  public tProjatk() : this(questinterfacePINVOKE.new_tProjatk(), true) {
  }

}

public enum PetType {
  petFamiliar,
  petAnimation,
  petOther,
  petCharmed,
  petNPCFollow,
  petTargetLock,
  petNone = 0xFF
}

public enum CastAction_type {
  SingleTarget,
  AETarget,
  AECaster,
  GroupSpell,
  CAHateList,
  DirectionalAE,
  Beam,
  TargetRing,
  CastActUnknown
}

public class MercType : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MercType(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MercType obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(MercType obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~MercType() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_MercType(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public uint Type {
    set {
      questinterfacePINVOKE.MercType_Type_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.MercType_Type_get(swigCPtr);
      return ret;
    } 
  }

  public uint ClientVersion {
    set {
      questinterfacePINVOKE.MercType_ClientVersion_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.MercType_ClientVersion_get(swigCPtr);
      return ret;
    } 
  }

  public MercType() : this(questinterfacePINVOKE.new_MercType(), true) {
  }

}

public class MercData : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MercData(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MercData obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(MercData obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~MercData() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_MercData(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public uint MercTemplateID {
    set {
      questinterfacePINVOKE.MercData_MercTemplateID_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.MercData_MercTemplateID_get(swigCPtr);
      return ret;
    } 
  }

  public uint MercType {
    set {
      questinterfacePINVOKE.MercData_MercType_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.MercData_MercType_get(swigCPtr);
      return ret;
    } 
  }

  public uint MercSubType {
    set {
      questinterfacePINVOKE.MercData_MercSubType_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.MercData_MercSubType_get(swigCPtr);
      return ret;
    } 
  }

  public uint CostFormula {
    set {
      questinterfacePINVOKE.MercData_CostFormula_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.MercData_CostFormula_get(swigCPtr);
      return ret;
    } 
  }

  public uint ClientVersion {
    set {
      questinterfacePINVOKE.MercData_ClientVersion_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.MercData_ClientVersion_get(swigCPtr);
      return ret;
    } 
  }

  public uint NPCID {
    set {
      questinterfacePINVOKE.MercData_NPCID_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.MercData_NPCID_get(swigCPtr);
      return ret;
    } 
  }

  public MercData() : this(questinterfacePINVOKE.new_MercData(), true) {
  }

}

public class Trade : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Trade(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Trade obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Trade obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Trade() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_Trade(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Trade(Mob in_owner) : this(questinterfacePINVOKE.new_Trade(Mob.getCPtr(in_owner)), true) {
  }

  public void Reset() {
    questinterfacePINVOKE.Trade_Reset(swigCPtr);
  }

  public void Start(uint mob_id, bool initiate_with) {
    questinterfacePINVOKE.Trade_Start__SWIG_0(swigCPtr, mob_id, initiate_with);
  }

  public void Start(uint mob_id) {
    questinterfacePINVOKE.Trade_Start__SWIG_1(swigCPtr, mob_id);
  }

  public Mob With() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Trade_With(swigCPtr);
    Mob ret = (cPtr == global::System.IntPtr.Zero) ? null : new Mob(cPtr, false);
    return ret;
  }

  public void AddEntity(ushort trade_slot_id, uint stack_size) {
    questinterfacePINVOKE.Trade_AddEntity(swigCPtr, trade_slot_id, stack_size);
  }

  public TradeState state {
    set {
      questinterfacePINVOKE.Trade_state_set(swigCPtr, (int)value);
    } 
    get {
      TradeState ret = (TradeState)questinterfacePINVOKE.Trade_state_get(swigCPtr);
      return ret;
    } 
  }

  public int pp {
    set {
      questinterfacePINVOKE.Trade_pp_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.Trade_pp_get(swigCPtr);
      return ret;
    } 
  }

  public int gp {
    set {
      questinterfacePINVOKE.Trade_gp_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.Trade_gp_get(swigCPtr);
      return ret;
    } 
  }

  public int sp {
    set {
      questinterfacePINVOKE.Trade_sp_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.Trade_sp_get(swigCPtr);
      return ret;
    } 
  }

  public int cp {
    set {
      questinterfacePINVOKE.Trade_cp_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.Trade_cp_get(swigCPtr);
      return ret;
    } 
  }

  public Mob GetOwner() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Trade_GetOwner(swigCPtr);
    Mob ret = (cPtr == global::System.IntPtr.Zero) ? null : new Mob(cPtr, false);
    return ret;
  }

}

public class ExtraAttackOptions : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ExtraAttackOptions(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ExtraAttackOptions obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ExtraAttackOptions obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ExtraAttackOptions() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_ExtraAttackOptions(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ExtraAttackOptions() : this(questinterfacePINVOKE.new_ExtraAttackOptions(), true) {
  }

  public float damage_percent {
    set {
      questinterfacePINVOKE.ExtraAttackOptions_damage_percent_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.ExtraAttackOptions_damage_percent_get(swigCPtr);
      return ret;
    } 
  }

  public long damage_flat {
    set {
      questinterfacePINVOKE.ExtraAttackOptions_damage_flat_set(swigCPtr, value);
    } 
    get {
      long ret = questinterfacePINVOKE.ExtraAttackOptions_damage_flat_get(swigCPtr);
      return ret;
    } 
  }

  public float armor_pen_percent {
    set {
      questinterfacePINVOKE.ExtraAttackOptions_armor_pen_percent_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.ExtraAttackOptions_armor_pen_percent_get(swigCPtr);
      return ret;
    } 
  }

  public int armor_pen_flat {
    set {
      questinterfacePINVOKE.ExtraAttackOptions_armor_pen_flat_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.ExtraAttackOptions_armor_pen_flat_get(swigCPtr);
      return ret;
    } 
  }

  public float crit_percent {
    set {
      questinterfacePINVOKE.ExtraAttackOptions_crit_percent_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.ExtraAttackOptions_crit_percent_get(swigCPtr);
      return ret;
    } 
  }

  public float crit_flat {
    set {
      questinterfacePINVOKE.ExtraAttackOptions_crit_flat_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.ExtraAttackOptions_crit_flat_get(swigCPtr);
      return ret;
    } 
  }

  public float hate_percent {
    set {
      questinterfacePINVOKE.ExtraAttackOptions_hate_percent_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.ExtraAttackOptions_hate_percent_get(swigCPtr);
      return ret;
    } 
  }

  public int hate_flat {
    set {
      questinterfacePINVOKE.ExtraAttackOptions_hate_flat_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.ExtraAttackOptions_hate_flat_get(swigCPtr);
      return ret;
    } 
  }

  public int hit_chance {
    set {
      questinterfacePINVOKE.ExtraAttackOptions_hit_chance_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.ExtraAttackOptions_hit_chance_get(swigCPtr);
      return ret;
    } 
  }

  public int melee_damage_bonus_flat {
    set {
      questinterfacePINVOKE.ExtraAttackOptions_melee_damage_bonus_flat_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.ExtraAttackOptions_melee_damage_bonus_flat_get(swigCPtr);
      return ret;
    } 
  }

  public int skilldmgtaken_bonus_flat {
    set {
      questinterfacePINVOKE.ExtraAttackOptions_skilldmgtaken_bonus_flat_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.ExtraAttackOptions_skilldmgtaken_bonus_flat_get(swigCPtr);
      return ret;
    } 
  }

  public int range_percent {
    set {
      questinterfacePINVOKE.ExtraAttackOptions_range_percent_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.ExtraAttackOptions_range_percent_get(swigCPtr);
      return ret;
    } 
  }

}

public class DamageTable : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DamageTable(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DamageTable obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(DamageTable obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~DamageTable() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_DamageTable(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public int max_extra {
    set {
      questinterfacePINVOKE.DamageTable_max_extra_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.DamageTable_max_extra_get(swigCPtr);
      return ret;
    } 
  }

  public int chance {
    set {
      questinterfacePINVOKE.DamageTable_chance_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.DamageTable_chance_get(swigCPtr);
      return ret;
    } 
  }

  public int minusfactor {
    set {
      questinterfacePINVOKE.DamageTable_minusfactor_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.DamageTable_minusfactor_get(swigCPtr);
      return ret;
    } 
  }

  public DamageTable() : this(questinterfacePINVOKE.new_DamageTable(), true) {
  }

}

public class DamageHitInfo : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DamageHitInfo(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DamageHitInfo obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(DamageHitInfo obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~DamageHitInfo() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_DamageHitInfo(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public long base_damage {
    set {
      questinterfacePINVOKE.DamageHitInfo_base_damage_set(swigCPtr, value);
    } 
    get {
      long ret = questinterfacePINVOKE.DamageHitInfo_base_damage_get(swigCPtr);
      return ret;
    } 
  }

  public long min_damage {
    set {
      questinterfacePINVOKE.DamageHitInfo_min_damage_set(swigCPtr, value);
    } 
    get {
      long ret = questinterfacePINVOKE.DamageHitInfo_min_damage_get(swigCPtr);
      return ret;
    } 
  }

  public long damage_done {
    set {
      questinterfacePINVOKE.DamageHitInfo_damage_done_set(swigCPtr, value);
    } 
    get {
      long ret = questinterfacePINVOKE.DamageHitInfo_damage_done_get(swigCPtr);
      return ret;
    } 
  }

  public int offense {
    set {
      questinterfacePINVOKE.DamageHitInfo_offense_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.DamageHitInfo_offense_get(swigCPtr);
      return ret;
    } 
  }

  public int tohit {
    set {
      questinterfacePINVOKE.DamageHitInfo_tohit_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.DamageHitInfo_tohit_get(swigCPtr);
      return ret;
    } 
  }

  public int hand {
    set {
      questinterfacePINVOKE.DamageHitInfo_hand_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.DamageHitInfo_hand_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_EQ__skills__SkillType skill {
    set {
      questinterfacePINVOKE.DamageHitInfo_skill_set(swigCPtr, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(value));
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_EQ__skills__SkillType ret = new SWIGTYPE_p_EQ__skills__SkillType(questinterfacePINVOKE.DamageHitInfo_skill_get(swigCPtr), true);
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public DamageHitInfo() : this(questinterfacePINVOKE.new_DamageHitInfo(), true) {
  }

}

public class ExpeditionInvite : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ExpeditionInvite(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ExpeditionInvite obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ExpeditionInvite obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ExpeditionInvite() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_ExpeditionInvite(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public uint expedition_id {
    set {
      questinterfacePINVOKE.ExpeditionInvite_expedition_id_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.ExpeditionInvite_expedition_id_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__string inviter_name {
    set {
      questinterfacePINVOKE.ExpeditionInvite_inviter_name_set(swigCPtr, SWIGTYPE_p_std__string.getCPtr(value));
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(questinterfacePINVOKE.ExpeditionInvite_inviter_name_get(swigCPtr), true);
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_std__string swap_remove_name {
    set {
      questinterfacePINVOKE.ExpeditionInvite_swap_remove_name_set(swigCPtr, SWIGTYPE_p_std__string.getCPtr(value));
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(questinterfacePINVOKE.ExpeditionInvite_swap_remove_name_get(swigCPtr), true);
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ExpeditionInvite() : this(questinterfacePINVOKE.new_ExpeditionInvite(), true) {
  }

}

public class DataBucketCache : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DataBucketCache(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DataBucketCache obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(DataBucketCache obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~DataBucketCache() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_DataBucketCache(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ulong bucket_id {
    set {
      questinterfacePINVOKE.DataBucketCache_bucket_id_set(swigCPtr, value);
    } 
    get {
      ulong ret = questinterfacePINVOKE.DataBucketCache_bucket_id_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__string bucket_key {
    set {
      questinterfacePINVOKE.DataBucketCache_bucket_key_set(swigCPtr, SWIGTYPE_p_std__string.getCPtr(value));
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(questinterfacePINVOKE.DataBucketCache_bucket_key_get(swigCPtr), true);
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_std__string bucket_value {
    set {
      questinterfacePINVOKE.DataBucketCache_bucket_value_set(swigCPtr, SWIGTYPE_p_std__string.getCPtr(value));
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(questinterfacePINVOKE.DataBucketCache_bucket_value_get(swigCPtr), true);
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public uint bucket_expires {
    set {
      questinterfacePINVOKE.DataBucketCache_bucket_expires_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.DataBucketCache_bucket_expires_get(swigCPtr);
      return ret;
    } 
  }

  public DataBucketCache() : this(questinterfacePINVOKE.new_DataBucketCache(), true) {
  }

}

public class Entity : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Entity(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Entity obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Entity obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Entity() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_Entity(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Entity() : this(questinterfacePINVOKE.new_Entity(), true) {
  }

  public virtual bool IsClient() {
    bool ret = questinterfacePINVOKE.Entity_IsClient(swigCPtr);
    return ret;
  }

  public virtual bool IsNPC() {
    bool ret = questinterfacePINVOKE.Entity_IsNPC(swigCPtr);
    return ret;
  }

  public virtual bool IsMob() {
    bool ret = questinterfacePINVOKE.Entity_IsMob(swigCPtr);
    return ret;
  }

  public virtual bool IsMerc() {
    bool ret = questinterfacePINVOKE.Entity_IsMerc(swigCPtr);
    return ret;
  }

  public virtual bool IsCorpse() {
    bool ret = questinterfacePINVOKE.Entity_IsCorpse(swigCPtr);
    return ret;
  }

  public virtual bool IsPlayerCorpse() {
    bool ret = questinterfacePINVOKE.Entity_IsPlayerCorpse(swigCPtr);
    return ret;
  }

  public virtual bool IsNPCCorpse() {
    bool ret = questinterfacePINVOKE.Entity_IsNPCCorpse(swigCPtr);
    return ret;
  }

  public virtual bool IsObject() {
    bool ret = questinterfacePINVOKE.Entity_IsObject(swigCPtr);
    return ret;
  }

  public virtual bool IsDoor() {
    bool ret = questinterfacePINVOKE.Entity_IsDoor(swigCPtr);
    return ret;
  }

  public virtual bool IsTrap() {
    bool ret = questinterfacePINVOKE.Entity_IsTrap(swigCPtr);
    return ret;
  }

  public virtual bool IsBeacon() {
    bool ret = questinterfacePINVOKE.Entity_IsBeacon(swigCPtr);
    return ret;
  }

  public virtual bool IsEncounter() {
    bool ret = questinterfacePINVOKE.Entity_IsEncounter(swigCPtr);
    return ret;
  }

  public virtual bool IsBot() {
    bool ret = questinterfacePINVOKE.Entity_IsBot(swigCPtr);
    return ret;
  }

  public virtual bool IsAura() {
    bool ret = questinterfacePINVOKE.Entity_IsAura(swigCPtr);
    return ret;
  }

  public virtual bool IsOfClientBot() {
    bool ret = questinterfacePINVOKE.Entity_IsOfClientBot(swigCPtr);
    return ret;
  }

  public virtual bool IsOfClientBotMerc() {
    bool ret = questinterfacePINVOKE.Entity_IsOfClientBotMerc(swigCPtr);
    return ret;
  }

  public virtual bool Process() {
    bool ret = questinterfacePINVOKE.Entity_Process(swigCPtr);
    return ret;
  }

  public virtual bool Save() {
    bool ret = questinterfacePINVOKE.Entity_Save(swigCPtr);
    return ret;
  }

  public virtual void Depop(bool StartSpawnTimer) {
    questinterfacePINVOKE.Entity_Depop__SWIG_0(swigCPtr, StartSpawnTimer);
  }

  public virtual void Depop() {
    questinterfacePINVOKE.Entity_Depop__SWIG_1(swigCPtr);
  }

  public Client CastToClient() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Entity_CastToClient__SWIG_0(swigCPtr);
    Client ret = (cPtr == global::System.IntPtr.Zero) ? null : new Client(cPtr, false);
    return ret;
  }

  public NPC CastToNPC() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Entity_CastToNPC__SWIG_0(swigCPtr);
    NPC ret = (cPtr == global::System.IntPtr.Zero) ? null : new NPC(cPtr, false);
    return ret;
  }

  public Mob CastToMob() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Entity_CastToMob__SWIG_0(swigCPtr);
    Mob ret = (cPtr == global::System.IntPtr.Zero) ? null : new Mob(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_Merc CastToMerc() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Entity_CastToMerc__SWIG_0(swigCPtr);
    SWIGTYPE_p_Merc ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Merc(cPtr, false);
    return ret;
  }

  public Corpse CastToCorpse() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Entity_CastToCorpse__SWIG_0(swigCPtr);
    Corpse ret = (cPtr == global::System.IntPtr.Zero) ? null : new Corpse(cPtr, false);
    return ret;
  }

  public Object CastToObject() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Entity_CastToObject__SWIG_0(swigCPtr);
    Object ret = (cPtr == global::System.IntPtr.Zero) ? null : new Object(cPtr, false);
    return ret;
  }

  public Doors CastToDoors() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Entity_CastToDoors__SWIG_0(swigCPtr);
    Doors ret = (cPtr == global::System.IntPtr.Zero) ? null : new Doors(cPtr, false);
    return ret;
  }

  public Trap CastToTrap() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Entity_CastToTrap__SWIG_0(swigCPtr);
    Trap ret = (cPtr == global::System.IntPtr.Zero) ? null : new Trap(cPtr, false);
    return ret;
  }

  public Beacon CastToBeacon() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Entity_CastToBeacon__SWIG_0(swigCPtr);
    Beacon ret = (cPtr == global::System.IntPtr.Zero) ? null : new Beacon(cPtr, false);
    return ret;
  }

  public Encounter CastToEncounter() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Entity_CastToEncounter__SWIG_0(swigCPtr);
    Encounter ret = (cPtr == global::System.IntPtr.Zero) ? null : new Encounter(cPtr, false);
    return ret;
  }

  public ushort GetInitialId() {
    ushort ret = questinterfacePINVOKE.Entity_GetInitialId(swigCPtr);
    return ret;
  }

  public ushort GetID() {
    ushort ret = questinterfacePINVOKE.Entity_GetID(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_time_t GetSpawnTimeStamp() {
    SWIGTYPE_p_time_t ret = new SWIGTYPE_p_time_t(questinterfacePINVOKE.Entity_GetSpawnTimeStamp(swigCPtr), false);
    return ret;
  }

  public virtual string GetName() {
    string ret = questinterfacePINVOKE.Entity_GetName(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_Bot CastToBot() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Entity_CastToBot__SWIG_0(swigCPtr);
    SWIGTYPE_p_Bot ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Bot(cPtr, false);
    return ret;
  }

}

public class Area : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Area(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Area obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Area obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Area() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_Area(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public int id {
    set {
      questinterfacePINVOKE.Area_id_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.Area_id_get(swigCPtr);
      return ret;
    } 
  }

  public int type {
    set {
      questinterfacePINVOKE.Area_type_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.Area_type_get(swigCPtr);
      return ret;
    } 
  }

  public float min_x {
    set {
      questinterfacePINVOKE.Area_min_x_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.Area_min_x_get(swigCPtr);
      return ret;
    } 
  }

  public float max_x {
    set {
      questinterfacePINVOKE.Area_max_x_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.Area_max_x_get(swigCPtr);
      return ret;
    } 
  }

  public float min_y {
    set {
      questinterfacePINVOKE.Area_min_y_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.Area_min_y_get(swigCPtr);
      return ret;
    } 
  }

  public float max_y {
    set {
      questinterfacePINVOKE.Area_max_y_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.Area_max_y_get(swigCPtr);
      return ret;
    } 
  }

  public float min_z {
    set {
      questinterfacePINVOKE.Area_min_z_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.Area_min_z_get(swigCPtr);
      return ret;
    } 
  }

  public float max_z {
    set {
      questinterfacePINVOKE.Area_max_z_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.Area_max_z_get(swigCPtr);
      return ret;
    } 
  }

  public Area() : this(questinterfacePINVOKE.new_Area(), true) {
  }

}

public class EntityList : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal EntityList(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(EntityList obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(EntityList obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~EntityList() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_EntityList(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public EntityList() : this(questinterfacePINVOKE.new_EntityList(), true) {
  }

  public Entity GetID(ushort id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetID(swigCPtr, id);
    Entity ret = (cPtr == global::System.IntPtr.Zero) ? null : new Entity(cPtr, false);
    return ret;
  }

  public Mob GetMob(ushort id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetMob__SWIG_0(swigCPtr, id);
    Mob ret = (cPtr == global::System.IntPtr.Zero) ? null : new Mob(cPtr, false);
    return ret;
  }

  public Mob GetMobID(ushort id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetMobID(swigCPtr, id);
    Mob ret = (cPtr == global::System.IntPtr.Zero) ? null : new Mob(cPtr, false);
    return ret;
  }

  public Mob GetMob(string name) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetMob__SWIG_1(swigCPtr, name);
    Mob ret = (cPtr == global::System.IntPtr.Zero) ? null : new Mob(cPtr, false);
    return ret;
  }

  public Mob GetMobByNpcTypeID(uint get_id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetMobByNpcTypeID(swigCPtr, get_id);
    Mob ret = (cPtr == global::System.IntPtr.Zero) ? null : new Mob(cPtr, false);
    return ret;
  }

  public bool IsMobSpawnedByNpcTypeID(uint get_id) {
    bool ret = questinterfacePINVOKE.EntityList_IsMobSpawnedByNpcTypeID(swigCPtr, get_id);
    return ret;
  }

  public bool IsNPCSpawned(SWIGTYPE_p_std__vectorT_unsigned_int_t npc_ids) {
    bool ret = questinterfacePINVOKE.EntityList_IsNPCSpawned(swigCPtr, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(npc_ids));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint CountSpawnedNPCs(SWIGTYPE_p_std__vectorT_unsigned_int_t npc_ids) {
    uint ret = questinterfacePINVOKE.EntityList_CountSpawnedNPCs(swigCPtr, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(npc_ids));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public NPC GetNPCByID(ushort id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetNPCByID(swigCPtr, id);
    NPC ret = (cPtr == global::System.IntPtr.Zero) ? null : new NPC(cPtr, false);
    return ret;
  }

  public NPC GetNPCByNPCTypeID(uint npc_id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetNPCByNPCTypeID(swigCPtr, npc_id);
    NPC ret = (cPtr == global::System.IntPtr.Zero) ? null : new NPC(cPtr, false);
    return ret;
  }

  public NPC GetNPCBySpawnID(uint spawn_id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetNPCBySpawnID(swigCPtr, spawn_id);
    NPC ret = (cPtr == global::System.IntPtr.Zero) ? null : new NPC(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_Merc GetMercByID(ushort id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetMercByID(swigCPtr, id);
    SWIGTYPE_p_Merc ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Merc(cPtr, false);
    return ret;
  }

  public Client GetClientByName(string name) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetClientByName(swigCPtr, name);
    Client ret = (cPtr == global::System.IntPtr.Zero) ? null : new Client(cPtr, false);
    return ret;
  }

  public Client GetClientByAccID(uint accid) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetClientByAccID(swigCPtr, accid);
    Client ret = (cPtr == global::System.IntPtr.Zero) ? null : new Client(cPtr, false);
    return ret;
  }

  public Client GetClientByID(ushort id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetClientByID(swigCPtr, id);
    Client ret = (cPtr == global::System.IntPtr.Zero) ? null : new Client(cPtr, false);
    return ret;
  }

  public Client GetClientByCharID(uint iCharID) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetClientByCharID(swigCPtr, iCharID);
    Client ret = (cPtr == global::System.IntPtr.Zero) ? null : new Client(cPtr, false);
    return ret;
  }

  public Client GetClientByWID(uint iWID) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetClientByWID(swigCPtr, iWID);
    Client ret = (cPtr == global::System.IntPtr.Zero) ? null : new Client(cPtr, false);
    return ret;
  }

  public Client GetClientByLSID(uint iLSID) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetClientByLSID(swigCPtr, iLSID);
    Client ret = (cPtr == global::System.IntPtr.Zero) ? null : new Client(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_Bot GetRandomBot(SWIGTYPE_p_glm__vec3 location, float distance, SWIGTYPE_p_Bot exclude_bot) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetRandomBot__SWIG_0(swigCPtr, SWIGTYPE_p_glm__vec3.getCPtr(location), distance, SWIGTYPE_p_Bot.getCPtr(exclude_bot));
    SWIGTYPE_p_Bot ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Bot(cPtr, false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Bot GetRandomBot(SWIGTYPE_p_glm__vec3 location, float distance) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetRandomBot__SWIG_1(swigCPtr, SWIGTYPE_p_glm__vec3.getCPtr(location), distance);
    SWIGTYPE_p_Bot ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Bot(cPtr, false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Bot GetRandomBot(SWIGTYPE_p_glm__vec3 location) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetRandomBot__SWIG_2(swigCPtr, SWIGTYPE_p_glm__vec3.getCPtr(location));
    SWIGTYPE_p_Bot ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Bot(cPtr, false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Bot GetRandomBot() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetRandomBot__SWIG_3(swigCPtr);
    SWIGTYPE_p_Bot ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Bot(cPtr, false);
    return ret;
  }

  public Client GetRandomClient(SWIGTYPE_p_glm__vec3 location, float distance, Client exclude_client) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetRandomClient__SWIG_0(swigCPtr, SWIGTYPE_p_glm__vec3.getCPtr(location), distance, Client.getCPtr(exclude_client));
    Client ret = (cPtr == global::System.IntPtr.Zero) ? null : new Client(cPtr, false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Client GetRandomClient(SWIGTYPE_p_glm__vec3 location, float distance) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetRandomClient__SWIG_1(swigCPtr, SWIGTYPE_p_glm__vec3.getCPtr(location), distance);
    Client ret = (cPtr == global::System.IntPtr.Zero) ? null : new Client(cPtr, false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Client GetRandomClient(SWIGTYPE_p_glm__vec3 location) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetRandomClient__SWIG_2(swigCPtr, SWIGTYPE_p_glm__vec3.getCPtr(location));
    Client ret = (cPtr == global::System.IntPtr.Zero) ? null : new Client(cPtr, false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Client GetRandomClient() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetRandomClient__SWIG_3(swigCPtr);
    Client ret = (cPtr == global::System.IntPtr.Zero) ? null : new Client(cPtr, false);
    return ret;
  }

  public NPC GetRandomNPC(SWIGTYPE_p_glm__vec3 location, float distance, NPC exclude_npc) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetRandomNPC__SWIG_0(swigCPtr, SWIGTYPE_p_glm__vec3.getCPtr(location), distance, NPC.getCPtr(exclude_npc));
    NPC ret = (cPtr == global::System.IntPtr.Zero) ? null : new NPC(cPtr, false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public NPC GetRandomNPC(SWIGTYPE_p_glm__vec3 location, float distance) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetRandomNPC__SWIG_1(swigCPtr, SWIGTYPE_p_glm__vec3.getCPtr(location), distance);
    NPC ret = (cPtr == global::System.IntPtr.Zero) ? null : new NPC(cPtr, false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public NPC GetRandomNPC(SWIGTYPE_p_glm__vec3 location) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetRandomNPC__SWIG_2(swigCPtr, SWIGTYPE_p_glm__vec3.getCPtr(location));
    NPC ret = (cPtr == global::System.IntPtr.Zero) ? null : new NPC(cPtr, false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public NPC GetRandomNPC() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetRandomNPC__SWIG_3(swigCPtr);
    NPC ret = (cPtr == global::System.IntPtr.Zero) ? null : new NPC(cPtr, false);
    return ret;
  }

  public Mob GetRandomMob(SWIGTYPE_p_glm__vec3 location, float distance, Mob exclude_mob) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetRandomMob__SWIG_0(swigCPtr, SWIGTYPE_p_glm__vec3.getCPtr(location), distance, Mob.getCPtr(exclude_mob));
    Mob ret = (cPtr == global::System.IntPtr.Zero) ? null : new Mob(cPtr, false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Mob GetRandomMob(SWIGTYPE_p_glm__vec3 location, float distance) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetRandomMob__SWIG_1(swigCPtr, SWIGTYPE_p_glm__vec3.getCPtr(location), distance);
    Mob ret = (cPtr == global::System.IntPtr.Zero) ? null : new Mob(cPtr, false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Mob GetRandomMob(SWIGTYPE_p_glm__vec3 location) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetRandomMob__SWIG_2(swigCPtr, SWIGTYPE_p_glm__vec3.getCPtr(location));
    Mob ret = (cPtr == global::System.IntPtr.Zero) ? null : new Mob(cPtr, false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Mob GetRandomMob() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetRandomMob__SWIG_3(swigCPtr);
    Mob ret = (cPtr == global::System.IntPtr.Zero) ? null : new Mob(cPtr, false);
    return ret;
  }

  public Group GetGroupByMob(Mob mob) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetGroupByMob(swigCPtr, Mob.getCPtr(mob));
    Group ret = (cPtr == global::System.IntPtr.Zero) ? null : new Group(cPtr, false);
    return ret;
  }

  public Group GetGroupByMobName(string name) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetGroupByMobName(swigCPtr, name);
    Group ret = (cPtr == global::System.IntPtr.Zero) ? null : new Group(cPtr, false);
    return ret;
  }

  public bool IsInSameGroupOrRaidGroup(Client client1, Client client2) {
    bool ret = questinterfacePINVOKE.EntityList_IsInSameGroupOrRaidGroup(swigCPtr, Client.getCPtr(client1), Client.getCPtr(client2));
    return ret;
  }

  public Group GetGroupByClient(Client client) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetGroupByClient(swigCPtr, Client.getCPtr(client));
    Group ret = (cPtr == global::System.IntPtr.Zero) ? null : new Group(cPtr, false);
    return ret;
  }

  public Group GetGroupByID(uint id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetGroupByID(swigCPtr, id);
    Group ret = (cPtr == global::System.IntPtr.Zero) ? null : new Group(cPtr, false);
    return ret;
  }

  public Group GetGroupByLeaderName(string leader) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetGroupByLeaderName(swigCPtr, leader);
    Group ret = (cPtr == global::System.IntPtr.Zero) ? null : new Group(cPtr, false);
    return ret;
  }

  public Raid GetRaidByClient(Client client) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetRaidByClient(swigCPtr, Client.getCPtr(client));
    Raid ret = (cPtr == global::System.IntPtr.Zero) ? null : new Raid(cPtr, false);
    return ret;
  }

  public Raid GetRaidByID(uint id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetRaidByID(swigCPtr, id);
    Raid ret = (cPtr == global::System.IntPtr.Zero) ? null : new Raid(cPtr, false);
    return ret;
  }

  public Raid GetRaidByBotName(string name) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetRaidByBotName(swigCPtr, name);
    Raid ret = (cPtr == global::System.IntPtr.Zero) ? null : new Raid(cPtr, false);
    return ret;
  }

  public Raid GetRaidByBot(SWIGTYPE_p_Bot bot) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetRaidByBot(swigCPtr, SWIGTYPE_p_Bot.getCPtr(bot));
    Raid ret = (cPtr == global::System.IntPtr.Zero) ? null : new Raid(cPtr, false);
    return ret;
  }

  public Raid GetRaidByName(string name) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetRaidByName(swigCPtr, name);
    Raid ret = (cPtr == global::System.IntPtr.Zero) ? null : new Raid(cPtr, false);
    return ret;
  }

  public Corpse GetCorpseByOwner(Client client) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetCorpseByOwner(swigCPtr, Client.getCPtr(client));
    Corpse ret = (cPtr == global::System.IntPtr.Zero) ? null : new Corpse(cPtr, false);
    return ret;
  }

  public Corpse GetCorpseByOwnerWithinRange(Client client, Mob center, int range) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetCorpseByOwnerWithinRange(swigCPtr, Client.getCPtr(client), Mob.getCPtr(center), range);
    Corpse ret = (cPtr == global::System.IntPtr.Zero) ? null : new Corpse(cPtr, false);
    return ret;
  }

  public Corpse GetCorpseByID(ushort id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetCorpseByID(swigCPtr, id);
    Corpse ret = (cPtr == global::System.IntPtr.Zero) ? null : new Corpse(cPtr, false);
    return ret;
  }

  public Corpse GetCorpseByDBID(uint dbid) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetCorpseByDBID(swigCPtr, dbid);
    Corpse ret = (cPtr == global::System.IntPtr.Zero) ? null : new Corpse(cPtr, false);
    return ret;
  }

  public Corpse GetCorpseByName(string name) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetCorpseByName(swigCPtr, name);
    Corpse ret = (cPtr == global::System.IntPtr.Zero) ? null : new Corpse(cPtr, false);
    return ret;
  }

  public Spawn2 GetSpawnByID(uint id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetSpawnByID(swigCPtr, id);
    Spawn2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Spawn2(cPtr, false);
    return ret;
  }

  public Client FindCorpseDragger(ushort CorpseID) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_FindCorpseDragger(swigCPtr, CorpseID);
    Client ret = (cPtr == global::System.IntPtr.Zero) ? null : new Client(cPtr, false);
    return ret;
  }

  public Object GetObjectByID(ushort id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetObjectByID(swigCPtr, id);
    Object ret = (cPtr == global::System.IntPtr.Zero) ? null : new Object(cPtr, false);
    return ret;
  }

  public Object GetObjectByDBID(uint id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetObjectByDBID(swigCPtr, id);
    Object ret = (cPtr == global::System.IntPtr.Zero) ? null : new Object(cPtr, false);
    return ret;
  }

  public Doors GetDoorsByID(ushort id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetDoorsByID(swigCPtr, id);
    Doors ret = (cPtr == global::System.IntPtr.Zero) ? null : new Doors(cPtr, false);
    return ret;
  }

  public Doors GetDoorsByDoorID(uint id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetDoorsByDoorID(swigCPtr, id);
    Doors ret = (cPtr == global::System.IntPtr.Zero) ? null : new Doors(cPtr, false);
    return ret;
  }

  public Doors GetDoorsByDBID(uint id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetDoorsByDBID(swigCPtr, id);
    Doors ret = (cPtr == global::System.IntPtr.Zero) ? null : new Doors(cPtr, false);
    return ret;
  }

  public void RemoveAllCorpsesByCharID(uint charid) {
    questinterfacePINVOKE.EntityList_RemoveAllCorpsesByCharID(swigCPtr, charid);
  }

  public void RemoveCorpseByDBID(uint dbid) {
    questinterfacePINVOKE.EntityList_RemoveCorpseByDBID(swigCPtr, dbid);
  }

  public int RezzAllCorpsesByCharID(uint charid) {
    int ret = questinterfacePINVOKE.EntityList_RezzAllCorpsesByCharID(swigCPtr, charid);
    return ret;
  }

  public void DespawnGridNodes(int grid_id) {
    questinterfacePINVOKE.EntityList_DespawnGridNodes(swigCPtr, grid_id);
  }

  public bool IsMobInZone(Mob who) {
    bool ret = questinterfacePINVOKE.EntityList_IsMobInZone(swigCPtr, Mob.getCPtr(who));
    return ret;
  }

  public void ClearClientPetitionQueue() {
    questinterfacePINVOKE.EntityList_ClearClientPetitionQueue(swigCPtr);
  }

  public bool CanAddHateForMob(Mob p) {
    bool ret = questinterfacePINVOKE.EntityList_CanAddHateForMob(swigCPtr, Mob.getCPtr(p));
    return ret;
  }

  public void SendGuildMOTD(uint guild_id) {
    questinterfacePINVOKE.EntityList_SendGuildMOTD(swigCPtr, guild_id);
  }

  public void SendGuildChannel(uint guild_id) {
    questinterfacePINVOKE.EntityList_SendGuildChannel(swigCPtr, guild_id);
  }

  public void SendGuildURL(uint guild_id) {
    questinterfacePINVOKE.EntityList_SendGuildURL(swigCPtr, guild_id);
  }

  public void SendGuildSpawnAppearance(uint guild_id) {
    questinterfacePINVOKE.EntityList_SendGuildSpawnAppearance(swigCPtr, guild_id);
  }

  public void SendGuildMembers(uint guild_id) {
    questinterfacePINVOKE.EntityList_SendGuildMembers(swigCPtr, guild_id);
  }

  public void SendGuildMembersList(uint guild_id) {
    questinterfacePINVOKE.EntityList_SendGuildMembersList(swigCPtr, guild_id);
  }

  public void SendGuildMemberAdd(uint guild_id, uint level, uint _class, uint rank, uint spirit, uint zone_id, SWIGTYPE_p_std__string player_name) {
    questinterfacePINVOKE.EntityList_SendGuildMemberAdd(swigCPtr, guild_id, level, _class, rank, spirit, zone_id, SWIGTYPE_p_std__string.getCPtr(player_name));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SendGuildMemberRename(uint guild_id, SWIGTYPE_p_std__string player_name, SWIGTYPE_p_std__string new_player_name) {
    questinterfacePINVOKE.EntityList_SendGuildMemberRename(swigCPtr, guild_id, SWIGTYPE_p_std__string.getCPtr(player_name), SWIGTYPE_p_std__string.getCPtr(new_player_name));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SendGuildMemberRemove(uint guild_id, SWIGTYPE_p_std__string player_name) {
    questinterfacePINVOKE.EntityList_SendGuildMemberRemove(swigCPtr, guild_id, SWIGTYPE_p_std__string.getCPtr(player_name));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SendGuildMemberLevel(uint guild_id, uint level, SWIGTYPE_p_std__string player_name) {
    questinterfacePINVOKE.EntityList_SendGuildMemberLevel(swigCPtr, guild_id, level, SWIGTYPE_p_std__string.getCPtr(player_name));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SendGuildMemberRankAltBanker(uint guild_id, uint rank, SWIGTYPE_p_std__string player_name, bool alt, bool banker) {
    questinterfacePINVOKE.EntityList_SendGuildMemberRankAltBanker(swigCPtr, guild_id, rank, SWIGTYPE_p_std__string.getCPtr(player_name), alt, banker);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SendGuildMemberPublicNote(uint guild_id, SWIGTYPE_p_std__string player_name, SWIGTYPE_p_std__string public_note) {
    questinterfacePINVOKE.EntityList_SendGuildMemberPublicNote(swigCPtr, guild_id, SWIGTYPE_p_std__string.getCPtr(player_name), SWIGTYPE_p_std__string.getCPtr(public_note));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SendGuildMemberDetails(uint guild_id, uint zone_id, uint offline_mode, SWIGTYPE_p_std__string player_name) {
    questinterfacePINVOKE.EntityList_SendGuildMemberDetails(swigCPtr, guild_id, zone_id, offline_mode, SWIGTYPE_p_std__string.getCPtr(player_name));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SendGuildRenameGuild(uint guild_id, SWIGTYPE_p_std__string new_guild_name) {
    questinterfacePINVOKE.EntityList_SendGuildRenameGuild(swigCPtr, guild_id, SWIGTYPE_p_std__string.getCPtr(new_guild_name));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RefreshAllGuildInfo(uint guild_id) {
    questinterfacePINVOKE.EntityList_RefreshAllGuildInfo(swigCPtr, guild_id);
  }

  public void SendGuildList() {
    questinterfacePINVOKE.EntityList_SendGuildList(swigCPtr);
  }

  public void GuildSetPreRoFBankerFlag(uint guild_id, uint guild_rank, bool banker_status) {
    questinterfacePINVOKE.EntityList_GuildSetPreRoFBankerFlag(swigCPtr, guild_id, guild_rank, banker_status);
  }

  public void CheckGroupList(string fname, int fline) {
    questinterfacePINVOKE.EntityList_CheckGroupList(swigCPtr, fname, fline);
  }

  public void GroupProcess() {
    questinterfacePINVOKE.EntityList_GroupProcess(swigCPtr);
  }

  public void RaidProcess() {
    questinterfacePINVOKE.EntityList_RaidProcess(swigCPtr);
  }

  public void DoorProcess() {
    questinterfacePINVOKE.EntityList_DoorProcess(swigCPtr);
  }

  public void ObjectProcess() {
    questinterfacePINVOKE.EntityList_ObjectProcess(swigCPtr);
  }

  public void CorpseProcess() {
    questinterfacePINVOKE.EntityList_CorpseProcess(swigCPtr);
  }

  public void MobProcess() {
    questinterfacePINVOKE.EntityList_MobProcess(swigCPtr);
  }

  public void TrapProcess() {
    questinterfacePINVOKE.EntityList_TrapProcess(swigCPtr);
  }

  public void BeaconProcess() {
    questinterfacePINVOKE.EntityList_BeaconProcess(swigCPtr);
  }

  public void EncounterProcess() {
    questinterfacePINVOKE.EntityList_EncounterProcess(swigCPtr);
  }

  public void ProcessMove(Client c, SWIGTYPE_p_glm__vec3 location) {
    questinterfacePINVOKE.EntityList_ProcessMove__SWIG_0(swigCPtr, Client.getCPtr(c), SWIGTYPE_p_glm__vec3.getCPtr(location));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ProcessMove(NPC n, float x, float y, float z) {
    questinterfacePINVOKE.EntityList_ProcessMove__SWIG_1(swigCPtr, NPC.getCPtr(n), x, y, z);
  }

  public void AddArea(int id, int type, float min_x, float max_x, float min_y, float max_y, float min_z, float max_z) {
    questinterfacePINVOKE.EntityList_AddArea(swigCPtr, id, type, min_x, max_x, min_y, max_y, min_z, max_z);
  }

  public void RemoveArea(int id) {
    questinterfacePINVOKE.EntityList_RemoveArea(swigCPtr, id);
  }

  public void ClearAreas() {
    questinterfacePINVOKE.EntityList_ClearAreas(swigCPtr);
  }

  public void ReloadMerchants() {
    questinterfacePINVOKE.EntityList_ReloadMerchants(swigCPtr);
  }

  public void ProcessProximitySay(string message, Client c, byte language) {
    questinterfacePINVOKE.EntityList_ProcessProximitySay__SWIG_0(swigCPtr, message, Client.getCPtr(c), language);
  }

  public void ProcessProximitySay(string message, Client c) {
    questinterfacePINVOKE.EntityList_ProcessProximitySay__SWIG_1(swigCPtr, message, Client.getCPtr(c));
  }

  public Doors FindDoor(byte door_id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_FindDoor(swigCPtr, door_id);
    Doors ret = (cPtr == global::System.IntPtr.Zero) ? null : new Doors(cPtr, false);
    return ret;
  }

  public Object FindObject(uint object_id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_FindObject(swigCPtr, object_id);
    Object ret = (cPtr == global::System.IntPtr.Zero) ? null : new Object(cPtr, false);
    return ret;
  }

  public Object FindNearbyObject(float x, float y, float z, float radius) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_FindNearbyObject(swigCPtr, x, y, z, radius);
    Object ret = (cPtr == global::System.IntPtr.Zero) ? null : new Object(cPtr, false);
    return ret;
  }

  public bool MakeDoorSpawnPacket(SWIGTYPE_p_EQApplicationPacket app, Client client) {
    bool ret = questinterfacePINVOKE.EntityList_MakeDoorSpawnPacket(swigCPtr, SWIGTYPE_p_EQApplicationPacket.getCPtr(app), Client.getCPtr(client));
    return ret;
  }

  public bool MakeTrackPacket(Client client) {
    bool ret = questinterfacePINVOKE.EntityList_MakeTrackPacket(swigCPtr, Client.getCPtr(client));
    return ret;
  }

  public void SendTraders(Client client) {
    questinterfacePINVOKE.EntityList_SendTraders(swigCPtr, Client.getCPtr(client));
  }

  public void AddClient(Client arg0) {
    questinterfacePINVOKE.EntityList_AddClient(swigCPtr, Client.getCPtr(arg0));
  }

  public void AddNPC(NPC arg0, bool send_spawn_packet, bool dont_queue) {
    questinterfacePINVOKE.EntityList_AddNPC__SWIG_0(swigCPtr, NPC.getCPtr(arg0), send_spawn_packet, dont_queue);
  }

  public void AddNPC(NPC arg0, bool send_spawn_packet) {
    questinterfacePINVOKE.EntityList_AddNPC__SWIG_1(swigCPtr, NPC.getCPtr(arg0), send_spawn_packet);
  }

  public void AddNPC(NPC arg0) {
    questinterfacePINVOKE.EntityList_AddNPC__SWIG_2(swigCPtr, NPC.getCPtr(arg0));
  }

  public void AddMerc(SWIGTYPE_p_Merc arg0, bool SendSpawnPacket, bool dontqueue) {
    questinterfacePINVOKE.EntityList_AddMerc__SWIG_0(swigCPtr, SWIGTYPE_p_Merc.getCPtr(arg0), SendSpawnPacket, dontqueue);
  }

  public void AddMerc(SWIGTYPE_p_Merc arg0, bool SendSpawnPacket) {
    questinterfacePINVOKE.EntityList_AddMerc__SWIG_1(swigCPtr, SWIGTYPE_p_Merc.getCPtr(arg0), SendSpawnPacket);
  }

  public void AddMerc(SWIGTYPE_p_Merc arg0) {
    questinterfacePINVOKE.EntityList_AddMerc__SWIG_2(swigCPtr, SWIGTYPE_p_Merc.getCPtr(arg0));
  }

  public void AddCorpse(Corpse pc, uint in_id) {
    questinterfacePINVOKE.EntityList_AddCorpse__SWIG_0(swigCPtr, Corpse.getCPtr(pc), in_id);
  }

  public void AddCorpse(Corpse pc) {
    questinterfacePINVOKE.EntityList_AddCorpse__SWIG_1(swigCPtr, Corpse.getCPtr(pc));
  }

  public void AddObject(Object arg0, bool SendSpawnPacket) {
    questinterfacePINVOKE.EntityList_AddObject__SWIG_0(swigCPtr, Object.getCPtr(arg0), SendSpawnPacket);
  }

  public void AddObject(Object arg0) {
    questinterfacePINVOKE.EntityList_AddObject__SWIG_1(swigCPtr, Object.getCPtr(arg0));
  }

  public void AddGroup(Group arg0) {
    questinterfacePINVOKE.EntityList_AddGroup__SWIG_0(swigCPtr, Group.getCPtr(arg0));
  }

  public void AddGroup(Group arg0, uint id) {
    questinterfacePINVOKE.EntityList_AddGroup__SWIG_1(swigCPtr, Group.getCPtr(arg0), id);
  }

  public void AddRaid(Raid raid) {
    questinterfacePINVOKE.EntityList_AddRaid__SWIG_0(swigCPtr, Raid.getCPtr(raid));
  }

  public void AddRaid(Raid arg0, uint id) {
    questinterfacePINVOKE.EntityList_AddRaid__SWIG_1(swigCPtr, Raid.getCPtr(arg0), id);
  }

  public void AddDoor(Doors door) {
    questinterfacePINVOKE.EntityList_AddDoor(swigCPtr, Doors.getCPtr(door));
  }

  public void AddTrap(Trap trap) {
    questinterfacePINVOKE.EntityList_AddTrap(swigCPtr, Trap.getCPtr(trap));
  }

  public void AddBeacon(Beacon beacon) {
    questinterfacePINVOKE.EntityList_AddBeacon(swigCPtr, Beacon.getCPtr(beacon));
  }

  public void AddEncounter(Encounter encounter) {
    questinterfacePINVOKE.EntityList_AddEncounter(swigCPtr, Encounter.getCPtr(encounter));
  }

  public void AddProximity(NPC proximity_for) {
    questinterfacePINVOKE.EntityList_AddProximity(swigCPtr, NPC.getCPtr(proximity_for));
  }

  public void Clear() {
    questinterfacePINVOKE.EntityList_Clear(swigCPtr);
  }

  public bool RemoveMob(ushort delete_id) {
    bool ret = questinterfacePINVOKE.EntityList_RemoveMob(swigCPtr, delete_id);
    return ret;
  }

  public bool RemoveClient(ushort delete_id) {
    bool ret = questinterfacePINVOKE.EntityList_RemoveClient__SWIG_0(swigCPtr, delete_id);
    return ret;
  }

  public bool RemoveClient(Client delete_client) {
    bool ret = questinterfacePINVOKE.EntityList_RemoveClient__SWIG_1(swigCPtr, Client.getCPtr(delete_client));
    return ret;
  }

  public bool RemoveNPC(ushort delete_id) {
    bool ret = questinterfacePINVOKE.EntityList_RemoveNPC(swigCPtr, delete_id);
    return ret;
  }

  public bool RemoveMerc(ushort delete_id) {
    bool ret = questinterfacePINVOKE.EntityList_RemoveMerc(swigCPtr, delete_id);
    return ret;
  }

  public bool RemoveGroup(uint delete_id) {
    bool ret = questinterfacePINVOKE.EntityList_RemoveGroup(swigCPtr, delete_id);
    return ret;
  }

  public bool RemoveCorpse(ushort delete_id) {
    bool ret = questinterfacePINVOKE.EntityList_RemoveCorpse(swigCPtr, delete_id);
    return ret;
  }

  public bool RemoveDoor(ushort delete_id) {
    bool ret = questinterfacePINVOKE.EntityList_RemoveDoor(swigCPtr, delete_id);
    return ret;
  }

  public bool RemoveTrap(ushort delete_id) {
    bool ret = questinterfacePINVOKE.EntityList_RemoveTrap(swigCPtr, delete_id);
    return ret;
  }

  public bool RemoveObject(ushort delete_id) {
    bool ret = questinterfacePINVOKE.EntityList_RemoveObject(swigCPtr, delete_id);
    return ret;
  }

  public bool RemoveProximity(ushort delete_npc_id) {
    bool ret = questinterfacePINVOKE.EntityList_RemoveProximity(swigCPtr, delete_npc_id);
    return ret;
  }

  public bool RemoveMobFromCloseLists(Mob mob) {
    bool ret = questinterfacePINVOKE.EntityList_RemoveMobFromCloseLists(swigCPtr, Mob.getCPtr(mob));
    return ret;
  }

  public void RemoveAuraFromMobs(Mob aura) {
    questinterfacePINVOKE.EntityList_RemoveAuraFromMobs(swigCPtr, Mob.getCPtr(aura));
  }

  public void RemoveAllMobs() {
    questinterfacePINVOKE.EntityList_RemoveAllMobs(swigCPtr);
  }

  public void RemoveAllClients() {
    questinterfacePINVOKE.EntityList_RemoveAllClients(swigCPtr);
  }

  public void RemoveAllNPCs() {
    questinterfacePINVOKE.EntityList_RemoveAllNPCs(swigCPtr);
  }

  public void RemoveAllBots() {
    questinterfacePINVOKE.EntityList_RemoveAllBots(swigCPtr);
  }

  public void RemoveAllMercs() {
    questinterfacePINVOKE.EntityList_RemoveAllMercs(swigCPtr);
  }

  public void RemoveAllGroups() {
    questinterfacePINVOKE.EntityList_RemoveAllGroups(swigCPtr);
  }

  public void RemoveAllCorpses() {
    questinterfacePINVOKE.EntityList_RemoveAllCorpses(swigCPtr);
  }

  public void RemoveAllDoors() {
    questinterfacePINVOKE.EntityList_RemoveAllDoors(swigCPtr);
  }

  public void DespawnAllDoors() {
    questinterfacePINVOKE.EntityList_DespawnAllDoors(swigCPtr);
  }

  public void RespawnAllDoors() {
    questinterfacePINVOKE.EntityList_RespawnAllDoors(swigCPtr);
  }

  public void RemoveAllTraps() {
    questinterfacePINVOKE.EntityList_RemoveAllTraps(swigCPtr);
  }

  public void RemoveAllObjects() {
    questinterfacePINVOKE.EntityList_RemoveAllObjects(swigCPtr);
  }

  public void RemoveAllLocalities() {
    questinterfacePINVOKE.EntityList_RemoveAllLocalities(swigCPtr);
  }

  public void RemoveAllRaids() {
    questinterfacePINVOKE.EntityList_RemoveAllRaids(swigCPtr);
  }

  public void RemoveAllEncounters() {
    questinterfacePINVOKE.EntityList_RemoveAllEncounters(swigCPtr);
  }

  public void DestroyTempPets(Mob owner) {
    questinterfacePINVOKE.EntityList_DestroyTempPets(swigCPtr, Mob.getCPtr(owner));
  }

  public void AddTempPetsToHateList(Mob owner, Mob other, bool bFrenzy) {
    questinterfacePINVOKE.EntityList_AddTempPetsToHateList__SWIG_0(swigCPtr, Mob.getCPtr(owner), Mob.getCPtr(other), bFrenzy);
  }

  public void AddTempPetsToHateList(Mob owner, Mob other) {
    questinterfacePINVOKE.EntityList_AddTempPetsToHateList__SWIG_1(swigCPtr, Mob.getCPtr(owner), Mob.getCPtr(other));
  }

  public void AddTempPetsToHateListOnOwnerDamage(Mob owner, Mob attacker, int spell_id) {
    questinterfacePINVOKE.EntityList_AddTempPetsToHateListOnOwnerDamage(swigCPtr, Mob.getCPtr(owner), Mob.getCPtr(attacker), spell_id);
  }

  public Entity GetEntityMob(ushort id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetEntityMob__SWIG_0(swigCPtr, id);
    Entity ret = (cPtr == global::System.IntPtr.Zero) ? null : new Entity(cPtr, false);
    return ret;
  }

  public Entity GetEntityMerc(ushort id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetEntityMerc(swigCPtr, id);
    Entity ret = (cPtr == global::System.IntPtr.Zero) ? null : new Entity(cPtr, false);
    return ret;
  }

  public Entity GetEntityDoor(ushort id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetEntityDoor(swigCPtr, id);
    Entity ret = (cPtr == global::System.IntPtr.Zero) ? null : new Entity(cPtr, false);
    return ret;
  }

  public Entity GetEntityObject(ushort id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetEntityObject(swigCPtr, id);
    Entity ret = (cPtr == global::System.IntPtr.Zero) ? null : new Entity(cPtr, false);
    return ret;
  }

  public Entity GetEntityCorpse(ushort id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetEntityCorpse__SWIG_0(swigCPtr, id);
    Entity ret = (cPtr == global::System.IntPtr.Zero) ? null : new Entity(cPtr, false);
    return ret;
  }

  public Entity GetEntityTrap(ushort id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetEntityTrap(swigCPtr, id);
    Entity ret = (cPtr == global::System.IntPtr.Zero) ? null : new Entity(cPtr, false);
    return ret;
  }

  public Entity GetEntityBeacon(ushort id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetEntityBeacon(swigCPtr, id);
    Entity ret = (cPtr == global::System.IntPtr.Zero) ? null : new Entity(cPtr, false);
    return ret;
  }

  public Entity GetEntityEncounter(ushort id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetEntityEncounter(swigCPtr, id);
    Entity ret = (cPtr == global::System.IntPtr.Zero) ? null : new Entity(cPtr, false);
    return ret;
  }

  public Entity GetEntityMob(string name) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetEntityMob__SWIG_1(swigCPtr, name);
    Entity ret = (cPtr == global::System.IntPtr.Zero) ? null : new Entity(cPtr, false);
    return ret;
  }

  public Entity GetEntityCorpse(string name) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetEntityCorpse__SWIG_1(swigCPtr, name);
    Entity ret = (cPtr == global::System.IntPtr.Zero) ? null : new Entity(cPtr, false);
    return ret;
  }

  public void StopMobAI() {
    questinterfacePINVOKE.EntityList_StopMobAI(swigCPtr);
  }

  public void DescribeAggro(Client to_who, NPC from_who, float dist, bool verbose) {
    questinterfacePINVOKE.EntityList_DescribeAggro(swigCPtr, Client.getCPtr(to_who), NPC.getCPtr(from_who), dist, verbose);
  }

  public SWIGTYPE_p_std__vectorT_Mob_p_t GetFilteredEntityList(Mob sender, uint distance, SWIGTYPE_p_EntityFilterType filter_type) {
    SWIGTYPE_p_std__vectorT_Mob_p_t ret = new SWIGTYPE_p_std__vectorT_Mob_p_t(questinterfacePINVOKE.EntityList_GetFilteredEntityList__SWIG_0(swigCPtr, Mob.getCPtr(sender), distance, SWIGTYPE_p_EntityFilterType.getCPtr(filter_type)), true);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_Mob_p_t GetFilteredEntityList(Mob sender, uint distance) {
    SWIGTYPE_p_std__vectorT_Mob_p_t ret = new SWIGTYPE_p_std__vectorT_Mob_p_t(questinterfacePINVOKE.EntityList_GetFilteredEntityList__SWIG_1(swigCPtr, Mob.getCPtr(sender), distance), true);
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_Mob_p_t GetFilteredEntityList(Mob sender) {
    SWIGTYPE_p_std__vectorT_Mob_p_t ret = new SWIGTYPE_p_std__vectorT_Mob_p_t(questinterfacePINVOKE.EntityList_GetFilteredEntityList__SWIG_2(swigCPtr, Mob.getCPtr(sender)), true);
    return ret;
  }

  public void DamageArea(Mob sender, long damage, uint distance, SWIGTYPE_p_EntityFilterType filter_type, bool is_percentage) {
    questinterfacePINVOKE.EntityList_DamageArea__SWIG_0(swigCPtr, Mob.getCPtr(sender), damage, distance, SWIGTYPE_p_EntityFilterType.getCPtr(filter_type), is_percentage);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void DamageArea(Mob sender, long damage, uint distance, SWIGTYPE_p_EntityFilterType filter_type) {
    questinterfacePINVOKE.EntityList_DamageArea__SWIG_1(swigCPtr, Mob.getCPtr(sender), damage, distance, SWIGTYPE_p_EntityFilterType.getCPtr(filter_type));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void DamageArea(Mob sender, long damage, uint distance) {
    questinterfacePINVOKE.EntityList_DamageArea__SWIG_2(swigCPtr, Mob.getCPtr(sender), damage, distance);
  }

  public void DamageArea(Mob sender, long damage) {
    questinterfacePINVOKE.EntityList_DamageArea__SWIG_3(swigCPtr, Mob.getCPtr(sender), damage);
  }

  public void Marquee(uint type, SWIGTYPE_p_std__string message, uint duration) {
    questinterfacePINVOKE.EntityList_Marquee__SWIG_0(swigCPtr, type, SWIGTYPE_p_std__string.getCPtr(message), duration);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Marquee(uint type, SWIGTYPE_p_std__string message) {
    questinterfacePINVOKE.EntityList_Marquee__SWIG_1(swigCPtr, type, SWIGTYPE_p_std__string.getCPtr(message));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Marquee(uint type, uint priority, uint fade_in, uint fade_out, uint duration, SWIGTYPE_p_std__string message) {
    questinterfacePINVOKE.EntityList_Marquee__SWIG_2(swigCPtr, type, priority, fade_in, fade_out, duration, SWIGTYPE_p_std__string.getCPtr(message));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Message(uint to_guilddbid, uint type, string message) {
    questinterfacePINVOKE.EntityList_Message(swigCPtr, to_guilddbid, type, message);
  }

  public void MessageStatus(uint to_guilddbid, int to_minstatus, uint type, string message) {
    questinterfacePINVOKE.EntityList_MessageStatus(swigCPtr, to_guilddbid, to_minstatus, type, message);
  }

  public void MessageClose(Mob sender, bool skipsender, float dist, uint type, string message) {
    questinterfacePINVOKE.EntityList_MessageClose(swigCPtr, Mob.getCPtr(sender), skipsender, dist, type, message);
  }

  public void FilteredMessageClose(Mob sender, bool skipsender, float dist, uint type, SWIGTYPE_p_eqFilterType filter, string message) {
    questinterfacePINVOKE.EntityList_FilteredMessageClose(swigCPtr, Mob.getCPtr(sender), skipsender, dist, type, SWIGTYPE_p_eqFilterType.getCPtr(filter), message);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void MessageString(Mob sender, bool skipsender, uint type, uint string_id, string message1, string message2, string message3, string message4, string message5, string message6, string message7, string message8, string message9) {
    questinterfacePINVOKE.EntityList_MessageString__SWIG_0(swigCPtr, Mob.getCPtr(sender), skipsender, type, string_id, message1, message2, message3, message4, message5, message6, message7, message8, message9);
  }

  public void MessageString(Mob sender, bool skipsender, uint type, uint string_id, string message1, string message2, string message3, string message4, string message5, string message6, string message7, string message8) {
    questinterfacePINVOKE.EntityList_MessageString__SWIG_1(swigCPtr, Mob.getCPtr(sender), skipsender, type, string_id, message1, message2, message3, message4, message5, message6, message7, message8);
  }

  public void MessageString(Mob sender, bool skipsender, uint type, uint string_id, string message1, string message2, string message3, string message4, string message5, string message6, string message7) {
    questinterfacePINVOKE.EntityList_MessageString__SWIG_2(swigCPtr, Mob.getCPtr(sender), skipsender, type, string_id, message1, message2, message3, message4, message5, message6, message7);
  }

  public void MessageString(Mob sender, bool skipsender, uint type, uint string_id, string message1, string message2, string message3, string message4, string message5, string message6) {
    questinterfacePINVOKE.EntityList_MessageString__SWIG_3(swigCPtr, Mob.getCPtr(sender), skipsender, type, string_id, message1, message2, message3, message4, message5, message6);
  }

  public void MessageString(Mob sender, bool skipsender, uint type, uint string_id, string message1, string message2, string message3, string message4, string message5) {
    questinterfacePINVOKE.EntityList_MessageString__SWIG_4(swigCPtr, Mob.getCPtr(sender), skipsender, type, string_id, message1, message2, message3, message4, message5);
  }

  public void MessageString(Mob sender, bool skipsender, uint type, uint string_id, string message1, string message2, string message3, string message4) {
    questinterfacePINVOKE.EntityList_MessageString__SWIG_5(swigCPtr, Mob.getCPtr(sender), skipsender, type, string_id, message1, message2, message3, message4);
  }

  public void MessageString(Mob sender, bool skipsender, uint type, uint string_id, string message1, string message2, string message3) {
    questinterfacePINVOKE.EntityList_MessageString__SWIG_6(swigCPtr, Mob.getCPtr(sender), skipsender, type, string_id, message1, message2, message3);
  }

  public void MessageString(Mob sender, bool skipsender, uint type, uint string_id, string message1, string message2) {
    questinterfacePINVOKE.EntityList_MessageString__SWIG_7(swigCPtr, Mob.getCPtr(sender), skipsender, type, string_id, message1, message2);
  }

  public void MessageString(Mob sender, bool skipsender, uint type, uint string_id, string message1) {
    questinterfacePINVOKE.EntityList_MessageString__SWIG_8(swigCPtr, Mob.getCPtr(sender), skipsender, type, string_id, message1);
  }

  public void MessageString(Mob sender, bool skipsender, uint type, uint string_id) {
    questinterfacePINVOKE.EntityList_MessageString__SWIG_9(swigCPtr, Mob.getCPtr(sender), skipsender, type, string_id);
  }

  public void FilteredMessageString(Mob sender, bool skipsender, uint type, SWIGTYPE_p_eqFilterType filter, uint string_id, string message1, string message2, string message3, string message4, string message5, string message6, string message7, string message8, string message9) {
    questinterfacePINVOKE.EntityList_FilteredMessageString__SWIG_0(swigCPtr, Mob.getCPtr(sender), skipsender, type, SWIGTYPE_p_eqFilterType.getCPtr(filter), string_id, message1, message2, message3, message4, message5, message6, message7, message8, message9);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void FilteredMessageString(Mob sender, bool skipsender, uint type, SWIGTYPE_p_eqFilterType filter, uint string_id, string message1, string message2, string message3, string message4, string message5, string message6, string message7, string message8) {
    questinterfacePINVOKE.EntityList_FilteredMessageString__SWIG_1(swigCPtr, Mob.getCPtr(sender), skipsender, type, SWIGTYPE_p_eqFilterType.getCPtr(filter), string_id, message1, message2, message3, message4, message5, message6, message7, message8);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void FilteredMessageString(Mob sender, bool skipsender, uint type, SWIGTYPE_p_eqFilterType filter, uint string_id, string message1, string message2, string message3, string message4, string message5, string message6, string message7) {
    questinterfacePINVOKE.EntityList_FilteredMessageString__SWIG_2(swigCPtr, Mob.getCPtr(sender), skipsender, type, SWIGTYPE_p_eqFilterType.getCPtr(filter), string_id, message1, message2, message3, message4, message5, message6, message7);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void FilteredMessageString(Mob sender, bool skipsender, uint type, SWIGTYPE_p_eqFilterType filter, uint string_id, string message1, string message2, string message3, string message4, string message5, string message6) {
    questinterfacePINVOKE.EntityList_FilteredMessageString__SWIG_3(swigCPtr, Mob.getCPtr(sender), skipsender, type, SWIGTYPE_p_eqFilterType.getCPtr(filter), string_id, message1, message2, message3, message4, message5, message6);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void FilteredMessageString(Mob sender, bool skipsender, uint type, SWIGTYPE_p_eqFilterType filter, uint string_id, string message1, string message2, string message3, string message4, string message5) {
    questinterfacePINVOKE.EntityList_FilteredMessageString__SWIG_4(swigCPtr, Mob.getCPtr(sender), skipsender, type, SWIGTYPE_p_eqFilterType.getCPtr(filter), string_id, message1, message2, message3, message4, message5);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void FilteredMessageString(Mob sender, bool skipsender, uint type, SWIGTYPE_p_eqFilterType filter, uint string_id, string message1, string message2, string message3, string message4) {
    questinterfacePINVOKE.EntityList_FilteredMessageString__SWIG_5(swigCPtr, Mob.getCPtr(sender), skipsender, type, SWIGTYPE_p_eqFilterType.getCPtr(filter), string_id, message1, message2, message3, message4);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void FilteredMessageString(Mob sender, bool skipsender, uint type, SWIGTYPE_p_eqFilterType filter, uint string_id, string message1, string message2, string message3) {
    questinterfacePINVOKE.EntityList_FilteredMessageString__SWIG_6(swigCPtr, Mob.getCPtr(sender), skipsender, type, SWIGTYPE_p_eqFilterType.getCPtr(filter), string_id, message1, message2, message3);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void FilteredMessageString(Mob sender, bool skipsender, uint type, SWIGTYPE_p_eqFilterType filter, uint string_id, string message1, string message2) {
    questinterfacePINVOKE.EntityList_FilteredMessageString__SWIG_7(swigCPtr, Mob.getCPtr(sender), skipsender, type, SWIGTYPE_p_eqFilterType.getCPtr(filter), string_id, message1, message2);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void FilteredMessageString(Mob sender, bool skipsender, uint type, SWIGTYPE_p_eqFilterType filter, uint string_id, string message1) {
    questinterfacePINVOKE.EntityList_FilteredMessageString__SWIG_8(swigCPtr, Mob.getCPtr(sender), skipsender, type, SWIGTYPE_p_eqFilterType.getCPtr(filter), string_id, message1);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void FilteredMessageString(Mob sender, bool skipsender, uint type, SWIGTYPE_p_eqFilterType filter, uint string_id) {
    questinterfacePINVOKE.EntityList_FilteredMessageString__SWIG_9(swigCPtr, Mob.getCPtr(sender), skipsender, type, SWIGTYPE_p_eqFilterType.getCPtr(filter), string_id);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void MessageCloseString(Mob sender, bool skipsender, float dist, uint type, uint string_id, string message1, string message2, string message3, string message4, string message5, string message6, string message7, string message8, string message9) {
    questinterfacePINVOKE.EntityList_MessageCloseString__SWIG_0(swigCPtr, Mob.getCPtr(sender), skipsender, dist, type, string_id, message1, message2, message3, message4, message5, message6, message7, message8, message9);
  }

  public void MessageCloseString(Mob sender, bool skipsender, float dist, uint type, uint string_id, string message1, string message2, string message3, string message4, string message5, string message6, string message7, string message8) {
    questinterfacePINVOKE.EntityList_MessageCloseString__SWIG_1(swigCPtr, Mob.getCPtr(sender), skipsender, dist, type, string_id, message1, message2, message3, message4, message5, message6, message7, message8);
  }

  public void MessageCloseString(Mob sender, bool skipsender, float dist, uint type, uint string_id, string message1, string message2, string message3, string message4, string message5, string message6, string message7) {
    questinterfacePINVOKE.EntityList_MessageCloseString__SWIG_2(swigCPtr, Mob.getCPtr(sender), skipsender, dist, type, string_id, message1, message2, message3, message4, message5, message6, message7);
  }

  public void MessageCloseString(Mob sender, bool skipsender, float dist, uint type, uint string_id, string message1, string message2, string message3, string message4, string message5, string message6) {
    questinterfacePINVOKE.EntityList_MessageCloseString__SWIG_3(swigCPtr, Mob.getCPtr(sender), skipsender, dist, type, string_id, message1, message2, message3, message4, message5, message6);
  }

  public void MessageCloseString(Mob sender, bool skipsender, float dist, uint type, uint string_id, string message1, string message2, string message3, string message4, string message5) {
    questinterfacePINVOKE.EntityList_MessageCloseString__SWIG_4(swigCPtr, Mob.getCPtr(sender), skipsender, dist, type, string_id, message1, message2, message3, message4, message5);
  }

  public void MessageCloseString(Mob sender, bool skipsender, float dist, uint type, uint string_id, string message1, string message2, string message3, string message4) {
    questinterfacePINVOKE.EntityList_MessageCloseString__SWIG_5(swigCPtr, Mob.getCPtr(sender), skipsender, dist, type, string_id, message1, message2, message3, message4);
  }

  public void MessageCloseString(Mob sender, bool skipsender, float dist, uint type, uint string_id, string message1, string message2, string message3) {
    questinterfacePINVOKE.EntityList_MessageCloseString__SWIG_6(swigCPtr, Mob.getCPtr(sender), skipsender, dist, type, string_id, message1, message2, message3);
  }

  public void MessageCloseString(Mob sender, bool skipsender, float dist, uint type, uint string_id, string message1, string message2) {
    questinterfacePINVOKE.EntityList_MessageCloseString__SWIG_7(swigCPtr, Mob.getCPtr(sender), skipsender, dist, type, string_id, message1, message2);
  }

  public void MessageCloseString(Mob sender, bool skipsender, float dist, uint type, uint string_id, string message1) {
    questinterfacePINVOKE.EntityList_MessageCloseString__SWIG_8(swigCPtr, Mob.getCPtr(sender), skipsender, dist, type, string_id, message1);
  }

  public void MessageCloseString(Mob sender, bool skipsender, float dist, uint type, uint string_id) {
    questinterfacePINVOKE.EntityList_MessageCloseString__SWIG_9(swigCPtr, Mob.getCPtr(sender), skipsender, dist, type, string_id);
  }

  public void FilteredMessageCloseString(Mob sender, bool skipsender, float dist, uint type, SWIGTYPE_p_eqFilterType filter, uint string_id, Mob skip, string message1, string message2, string message3, string message4, string message5, string message6, string message7, string message8, string message9) {
    questinterfacePINVOKE.EntityList_FilteredMessageCloseString__SWIG_0(swigCPtr, Mob.getCPtr(sender), skipsender, dist, type, SWIGTYPE_p_eqFilterType.getCPtr(filter), string_id, Mob.getCPtr(skip), message1, message2, message3, message4, message5, message6, message7, message8, message9);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void FilteredMessageCloseString(Mob sender, bool skipsender, float dist, uint type, SWIGTYPE_p_eqFilterType filter, uint string_id, Mob skip, string message1, string message2, string message3, string message4, string message5, string message6, string message7, string message8) {
    questinterfacePINVOKE.EntityList_FilteredMessageCloseString__SWIG_1(swigCPtr, Mob.getCPtr(sender), skipsender, dist, type, SWIGTYPE_p_eqFilterType.getCPtr(filter), string_id, Mob.getCPtr(skip), message1, message2, message3, message4, message5, message6, message7, message8);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void FilteredMessageCloseString(Mob sender, bool skipsender, float dist, uint type, SWIGTYPE_p_eqFilterType filter, uint string_id, Mob skip, string message1, string message2, string message3, string message4, string message5, string message6, string message7) {
    questinterfacePINVOKE.EntityList_FilteredMessageCloseString__SWIG_2(swigCPtr, Mob.getCPtr(sender), skipsender, dist, type, SWIGTYPE_p_eqFilterType.getCPtr(filter), string_id, Mob.getCPtr(skip), message1, message2, message3, message4, message5, message6, message7);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void FilteredMessageCloseString(Mob sender, bool skipsender, float dist, uint type, SWIGTYPE_p_eqFilterType filter, uint string_id, Mob skip, string message1, string message2, string message3, string message4, string message5, string message6) {
    questinterfacePINVOKE.EntityList_FilteredMessageCloseString__SWIG_3(swigCPtr, Mob.getCPtr(sender), skipsender, dist, type, SWIGTYPE_p_eqFilterType.getCPtr(filter), string_id, Mob.getCPtr(skip), message1, message2, message3, message4, message5, message6);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void FilteredMessageCloseString(Mob sender, bool skipsender, float dist, uint type, SWIGTYPE_p_eqFilterType filter, uint string_id, Mob skip, string message1, string message2, string message3, string message4, string message5) {
    questinterfacePINVOKE.EntityList_FilteredMessageCloseString__SWIG_4(swigCPtr, Mob.getCPtr(sender), skipsender, dist, type, SWIGTYPE_p_eqFilterType.getCPtr(filter), string_id, Mob.getCPtr(skip), message1, message2, message3, message4, message5);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void FilteredMessageCloseString(Mob sender, bool skipsender, float dist, uint type, SWIGTYPE_p_eqFilterType filter, uint string_id, Mob skip, string message1, string message2, string message3, string message4) {
    questinterfacePINVOKE.EntityList_FilteredMessageCloseString__SWIG_5(swigCPtr, Mob.getCPtr(sender), skipsender, dist, type, SWIGTYPE_p_eqFilterType.getCPtr(filter), string_id, Mob.getCPtr(skip), message1, message2, message3, message4);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void FilteredMessageCloseString(Mob sender, bool skipsender, float dist, uint type, SWIGTYPE_p_eqFilterType filter, uint string_id, Mob skip, string message1, string message2, string message3) {
    questinterfacePINVOKE.EntityList_FilteredMessageCloseString__SWIG_6(swigCPtr, Mob.getCPtr(sender), skipsender, dist, type, SWIGTYPE_p_eqFilterType.getCPtr(filter), string_id, Mob.getCPtr(skip), message1, message2, message3);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void FilteredMessageCloseString(Mob sender, bool skipsender, float dist, uint type, SWIGTYPE_p_eqFilterType filter, uint string_id, Mob skip, string message1, string message2) {
    questinterfacePINVOKE.EntityList_FilteredMessageCloseString__SWIG_7(swigCPtr, Mob.getCPtr(sender), skipsender, dist, type, SWIGTYPE_p_eqFilterType.getCPtr(filter), string_id, Mob.getCPtr(skip), message1, message2);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void FilteredMessageCloseString(Mob sender, bool skipsender, float dist, uint type, SWIGTYPE_p_eqFilterType filter, uint string_id, Mob skip, string message1) {
    questinterfacePINVOKE.EntityList_FilteredMessageCloseString__SWIG_8(swigCPtr, Mob.getCPtr(sender), skipsender, dist, type, SWIGTYPE_p_eqFilterType.getCPtr(filter), string_id, Mob.getCPtr(skip), message1);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void FilteredMessageCloseString(Mob sender, bool skipsender, float dist, uint type, SWIGTYPE_p_eqFilterType filter, uint string_id, Mob skip) {
    questinterfacePINVOKE.EntityList_FilteredMessageCloseString__SWIG_9(swigCPtr, Mob.getCPtr(sender), skipsender, dist, type, SWIGTYPE_p_eqFilterType.getCPtr(filter), string_id, Mob.getCPtr(skip));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void FilteredMessageCloseString(Mob sender, bool skipsender, float dist, uint type, SWIGTYPE_p_eqFilterType filter, uint string_id) {
    questinterfacePINVOKE.EntityList_FilteredMessageCloseString__SWIG_10(swigCPtr, Mob.getCPtr(sender), skipsender, dist, type, SWIGTYPE_p_eqFilterType.getCPtr(filter), string_id);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ChannelMessageFromWorld(string from, string to, byte chan_num, uint guilddbid, byte language, byte lang_skill, string message) {
    questinterfacePINVOKE.EntityList_ChannelMessageFromWorld(swigCPtr, from, to, chan_num, guilddbid, language, lang_skill, message);
  }

  public void ChannelMessage(Mob from, byte chan_num, byte language, string message) {
    questinterfacePINVOKE.EntityList_ChannelMessage__SWIG_0(swigCPtr, Mob.getCPtr(from), chan_num, language, message);
  }

  public void ChannelMessage(Mob from, byte chan_num, byte language, byte lang_skill, string message) {
    questinterfacePINVOKE.EntityList_ChannelMessage__SWIG_1(swigCPtr, Mob.getCPtr(from), chan_num, language, lang_skill, message);
  }

  public void SendZoneSpawns(Client arg0) {
    questinterfacePINVOKE.EntityList_SendZoneSpawns(swigCPtr, Client.getCPtr(arg0));
  }

  public void SendZonePVPUpdates(Client arg0) {
    questinterfacePINVOKE.EntityList_SendZonePVPUpdates(swigCPtr, Client.getCPtr(arg0));
  }

  public void SendZoneSpawnsBulk(Client client) {
    questinterfacePINVOKE.EntityList_SendZoneSpawnsBulk(swigCPtr, Client.getCPtr(client));
  }

  public void Save() {
    questinterfacePINVOKE.EntityList_Save(swigCPtr);
  }

  public void SendZoneCorpses(Client arg0) {
    questinterfacePINVOKE.EntityList_SendZoneCorpses(swigCPtr, Client.getCPtr(arg0));
  }

  public void SendZoneCorpsesBulk(Client arg0) {
    questinterfacePINVOKE.EntityList_SendZoneCorpsesBulk(swigCPtr, Client.getCPtr(arg0));
  }

  public void SendZoneObjects(Client client) {
    questinterfacePINVOKE.EntityList_SendZoneObjects(swigCPtr, Client.getCPtr(client));
  }

  public void SendZoneAppearance(Client c) {
    questinterfacePINVOKE.EntityList_SendZoneAppearance(swigCPtr, Client.getCPtr(c));
  }

  public void SendNimbusEffects(Client c) {
    questinterfacePINVOKE.EntityList_SendNimbusEffects(swigCPtr, Client.getCPtr(c));
  }

  public void SendUntargetable(Client c) {
    questinterfacePINVOKE.EntityList_SendUntargetable(swigCPtr, Client.getCPtr(c));
  }

  public void SendAppearanceEffects(Client c) {
    questinterfacePINVOKE.EntityList_SendAppearanceEffects(swigCPtr, Client.getCPtr(c));
  }

  public void SendIllusionWearChange(Client c) {
    questinterfacePINVOKE.EntityList_SendIllusionWearChange(swigCPtr, Client.getCPtr(c));
  }

  public void DuelMessage(Mob winner, Mob loser, bool flee) {
    questinterfacePINVOKE.EntityList_DuelMessage(swigCPtr, Mob.getCPtr(winner), Mob.getCPtr(loser), flee);
  }

  public void QuestJournalledSayClose(Mob sender, float dist, string mobname, string message, Options opts) {
    questinterfacePINVOKE.EntityList_QuestJournalledSayClose(swigCPtr, Mob.getCPtr(sender), dist, mobname, message, Options.getCPtr(opts));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void GroupMessage(uint gid, string from, string message) {
    questinterfacePINVOKE.EntityList_GroupMessage(swigCPtr, gid, from, message);
  }

  public void ExpeditionWarning(uint minutes_left) {
    questinterfacePINVOKE.EntityList_ExpeditionWarning(swigCPtr, minutes_left);
  }

  public void UpdateGuildTributes(uint guild_id) {
    questinterfacePINVOKE.EntityList_UpdateGuildTributes(swigCPtr, guild_id);
  }

  public void RemoveFromTargets(Mob mob, bool RemoveFromXTargets) {
    questinterfacePINVOKE.EntityList_RemoveFromTargets__SWIG_0(swigCPtr, Mob.getCPtr(mob), RemoveFromXTargets);
  }

  public void RemoveFromTargets(Mob mob) {
    questinterfacePINVOKE.EntityList_RemoveFromTargets__SWIG_1(swigCPtr, Mob.getCPtr(mob));
  }

  public void RemoveFromTargetsFadingMemories(Mob spell_target, bool RemoveFromXTargets, uint max_level) {
    questinterfacePINVOKE.EntityList_RemoveFromTargetsFadingMemories__SWIG_0(swigCPtr, Mob.getCPtr(spell_target), RemoveFromXTargets, max_level);
  }

  public void RemoveFromTargetsFadingMemories(Mob spell_target, bool RemoveFromXTargets) {
    questinterfacePINVOKE.EntityList_RemoveFromTargetsFadingMemories__SWIG_1(swigCPtr, Mob.getCPtr(spell_target), RemoveFromXTargets);
  }

  public void RemoveFromTargetsFadingMemories(Mob spell_target) {
    questinterfacePINVOKE.EntityList_RemoveFromTargetsFadingMemories__SWIG_2(swigCPtr, Mob.getCPtr(spell_target));
  }

  public void RemoveFromXTargets(Mob mob) {
    questinterfacePINVOKE.EntityList_RemoveFromXTargets(swigCPtr, Mob.getCPtr(mob));
  }

  public void RemoveFromAutoXTargets(Mob mob) {
    questinterfacePINVOKE.EntityList_RemoveFromAutoXTargets(swigCPtr, Mob.getCPtr(mob));
  }

  public void ReplaceWithTarget(Mob pOldMob, Mob pNewTarget) {
    questinterfacePINVOKE.EntityList_ReplaceWithTarget(swigCPtr, Mob.getCPtr(pOldMob), Mob.getCPtr(pNewTarget));
  }

  public void QueueCloseClients(Mob sender, SWIGTYPE_p_EQApplicationPacket app, bool ignore_sender, float distance, Mob skipped_mob, bool is_ack_required, SWIGTYPE_p_eqFilterType filter) {
    questinterfacePINVOKE.EntityList_QueueCloseClients__SWIG_0(swigCPtr, Mob.getCPtr(sender), SWIGTYPE_p_EQApplicationPacket.getCPtr(app), ignore_sender, distance, Mob.getCPtr(skipped_mob), is_ack_required, SWIGTYPE_p_eqFilterType.getCPtr(filter));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void QueueCloseClients(Mob sender, SWIGTYPE_p_EQApplicationPacket app, bool ignore_sender, float distance, Mob skipped_mob, bool is_ack_required) {
    questinterfacePINVOKE.EntityList_QueueCloseClients__SWIG_1(swigCPtr, Mob.getCPtr(sender), SWIGTYPE_p_EQApplicationPacket.getCPtr(app), ignore_sender, distance, Mob.getCPtr(skipped_mob), is_ack_required);
  }

  public void QueueCloseClients(Mob sender, SWIGTYPE_p_EQApplicationPacket app, bool ignore_sender, float distance, Mob skipped_mob) {
    questinterfacePINVOKE.EntityList_QueueCloseClients__SWIG_2(swigCPtr, Mob.getCPtr(sender), SWIGTYPE_p_EQApplicationPacket.getCPtr(app), ignore_sender, distance, Mob.getCPtr(skipped_mob));
  }

  public void QueueCloseClients(Mob sender, SWIGTYPE_p_EQApplicationPacket app, bool ignore_sender, float distance) {
    questinterfacePINVOKE.EntityList_QueueCloseClients__SWIG_3(swigCPtr, Mob.getCPtr(sender), SWIGTYPE_p_EQApplicationPacket.getCPtr(app), ignore_sender, distance);
  }

  public void QueueCloseClients(Mob sender, SWIGTYPE_p_EQApplicationPacket app, bool ignore_sender) {
    questinterfacePINVOKE.EntityList_QueueCloseClients__SWIG_4(swigCPtr, Mob.getCPtr(sender), SWIGTYPE_p_EQApplicationPacket.getCPtr(app), ignore_sender);
  }

  public void QueueCloseClients(Mob sender, SWIGTYPE_p_EQApplicationPacket app) {
    questinterfacePINVOKE.EntityList_QueueCloseClients__SWIG_5(swigCPtr, Mob.getCPtr(sender), SWIGTYPE_p_EQApplicationPacket.getCPtr(app));
  }

  public void QueueClients(Mob sender, SWIGTYPE_p_EQApplicationPacket app, bool ignore_sender, bool ackreq) {
    questinterfacePINVOKE.EntityList_QueueClients__SWIG_0(swigCPtr, Mob.getCPtr(sender), SWIGTYPE_p_EQApplicationPacket.getCPtr(app), ignore_sender, ackreq);
  }

  public void QueueClients(Mob sender, SWIGTYPE_p_EQApplicationPacket app, bool ignore_sender) {
    questinterfacePINVOKE.EntityList_QueueClients__SWIG_1(swigCPtr, Mob.getCPtr(sender), SWIGTYPE_p_EQApplicationPacket.getCPtr(app), ignore_sender);
  }

  public void QueueClients(Mob sender, SWIGTYPE_p_EQApplicationPacket app) {
    questinterfacePINVOKE.EntityList_QueueClients__SWIG_2(swigCPtr, Mob.getCPtr(sender), SWIGTYPE_p_EQApplicationPacket.getCPtr(app));
  }

  public void QueueClientsStatus(Mob sender, SWIGTYPE_p_EQApplicationPacket app, bool ignore_sender, byte minstatus, byte maxstatus) {
    questinterfacePINVOKE.EntityList_QueueClientsStatus__SWIG_0(swigCPtr, Mob.getCPtr(sender), SWIGTYPE_p_EQApplicationPacket.getCPtr(app), ignore_sender, minstatus, maxstatus);
  }

  public void QueueClientsStatus(Mob sender, SWIGTYPE_p_EQApplicationPacket app, bool ignore_sender, byte minstatus) {
    questinterfacePINVOKE.EntityList_QueueClientsStatus__SWIG_1(swigCPtr, Mob.getCPtr(sender), SWIGTYPE_p_EQApplicationPacket.getCPtr(app), ignore_sender, minstatus);
  }

  public void QueueClientsStatus(Mob sender, SWIGTYPE_p_EQApplicationPacket app, bool ignore_sender) {
    questinterfacePINVOKE.EntityList_QueueClientsStatus__SWIG_2(swigCPtr, Mob.getCPtr(sender), SWIGTYPE_p_EQApplicationPacket.getCPtr(app), ignore_sender);
  }

  public void QueueClientsStatus(Mob sender, SWIGTYPE_p_EQApplicationPacket app) {
    questinterfacePINVOKE.EntityList_QueueClientsStatus__SWIG_3(swigCPtr, Mob.getCPtr(sender), SWIGTYPE_p_EQApplicationPacket.getCPtr(app));
  }

  public void QueueClientsGuild(SWIGTYPE_p_EQApplicationPacket app, uint guildeqid) {
    questinterfacePINVOKE.EntityList_QueueClientsGuild__SWIG_0(swigCPtr, SWIGTYPE_p_EQApplicationPacket.getCPtr(app), guildeqid);
  }

  public void QueueClientsGuild(SWIGTYPE_p_EQApplicationPacket app) {
    questinterfacePINVOKE.EntityList_QueueClientsGuild__SWIG_1(swigCPtr, SWIGTYPE_p_EQApplicationPacket.getCPtr(app));
  }

  public void QueueClientsGuildBankItemUpdate(SWIGTYPE_p_GuildBankItemUpdate_Struct gbius, uint GuildID) {
    questinterfacePINVOKE.EntityList_QueueClientsGuildBankItemUpdate(swigCPtr, SWIGTYPE_p_GuildBankItemUpdate_Struct.getCPtr(gbius), GuildID);
  }

  public void QueueClientsByTarget(Mob sender, SWIGTYPE_p_EQApplicationPacket app, bool iSendToSender, Mob SkipThisMob, bool ackreq, bool HoTT, uint ClientVersionBits, bool inspect_buffs, bool clear_target_window) {
    questinterfacePINVOKE.EntityList_QueueClientsByTarget__SWIG_0(swigCPtr, Mob.getCPtr(sender), SWIGTYPE_p_EQApplicationPacket.getCPtr(app), iSendToSender, Mob.getCPtr(SkipThisMob), ackreq, HoTT, ClientVersionBits, inspect_buffs, clear_target_window);
  }

  public void QueueClientsByTarget(Mob sender, SWIGTYPE_p_EQApplicationPacket app, bool iSendToSender, Mob SkipThisMob, bool ackreq, bool HoTT, uint ClientVersionBits, bool inspect_buffs) {
    questinterfacePINVOKE.EntityList_QueueClientsByTarget__SWIG_1(swigCPtr, Mob.getCPtr(sender), SWIGTYPE_p_EQApplicationPacket.getCPtr(app), iSendToSender, Mob.getCPtr(SkipThisMob), ackreq, HoTT, ClientVersionBits, inspect_buffs);
  }

  public void QueueClientsByTarget(Mob sender, SWIGTYPE_p_EQApplicationPacket app, bool iSendToSender, Mob SkipThisMob, bool ackreq, bool HoTT, uint ClientVersionBits) {
    questinterfacePINVOKE.EntityList_QueueClientsByTarget__SWIG_2(swigCPtr, Mob.getCPtr(sender), SWIGTYPE_p_EQApplicationPacket.getCPtr(app), iSendToSender, Mob.getCPtr(SkipThisMob), ackreq, HoTT, ClientVersionBits);
  }

  public void QueueClientsByTarget(Mob sender, SWIGTYPE_p_EQApplicationPacket app, bool iSendToSender, Mob SkipThisMob, bool ackreq, bool HoTT) {
    questinterfacePINVOKE.EntityList_QueueClientsByTarget__SWIG_3(swigCPtr, Mob.getCPtr(sender), SWIGTYPE_p_EQApplicationPacket.getCPtr(app), iSendToSender, Mob.getCPtr(SkipThisMob), ackreq, HoTT);
  }

  public void QueueClientsByTarget(Mob sender, SWIGTYPE_p_EQApplicationPacket app, bool iSendToSender, Mob SkipThisMob, bool ackreq) {
    questinterfacePINVOKE.EntityList_QueueClientsByTarget__SWIG_4(swigCPtr, Mob.getCPtr(sender), SWIGTYPE_p_EQApplicationPacket.getCPtr(app), iSendToSender, Mob.getCPtr(SkipThisMob), ackreq);
  }

  public void QueueClientsByTarget(Mob sender, SWIGTYPE_p_EQApplicationPacket app, bool iSendToSender, Mob SkipThisMob) {
    questinterfacePINVOKE.EntityList_QueueClientsByTarget__SWIG_5(swigCPtr, Mob.getCPtr(sender), SWIGTYPE_p_EQApplicationPacket.getCPtr(app), iSendToSender, Mob.getCPtr(SkipThisMob));
  }

  public void QueueClientsByTarget(Mob sender, SWIGTYPE_p_EQApplicationPacket app, bool iSendToSender) {
    questinterfacePINVOKE.EntityList_QueueClientsByTarget__SWIG_6(swigCPtr, Mob.getCPtr(sender), SWIGTYPE_p_EQApplicationPacket.getCPtr(app), iSendToSender);
  }

  public void QueueClientsByTarget(Mob sender, SWIGTYPE_p_EQApplicationPacket app) {
    questinterfacePINVOKE.EntityList_QueueClientsByTarget__SWIG_7(swigCPtr, Mob.getCPtr(sender), SWIGTYPE_p_EQApplicationPacket.getCPtr(app));
  }

  public void QueueClientsByXTarget(Mob sender, SWIGTYPE_p_EQApplicationPacket app, bool iSendToSender, SWIGTYPE_p_EQ__versions__ClientVersionBitmask client_version_bits) {
    questinterfacePINVOKE.EntityList_QueueClientsByXTarget__SWIG_0(swigCPtr, Mob.getCPtr(sender), SWIGTYPE_p_EQApplicationPacket.getCPtr(app), iSendToSender, SWIGTYPE_p_EQ__versions__ClientVersionBitmask.getCPtr(client_version_bits));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void QueueClientsByXTarget(Mob sender, SWIGTYPE_p_EQApplicationPacket app, bool iSendToSender) {
    questinterfacePINVOKE.EntityList_QueueClientsByXTarget__SWIG_1(swigCPtr, Mob.getCPtr(sender), SWIGTYPE_p_EQApplicationPacket.getCPtr(app), iSendToSender);
  }

  public void QueueClientsByXTarget(Mob sender, SWIGTYPE_p_EQApplicationPacket app) {
    questinterfacePINVOKE.EntityList_QueueClientsByXTarget__SWIG_2(swigCPtr, Mob.getCPtr(sender), SWIGTYPE_p_EQApplicationPacket.getCPtr(app));
  }

  public void QueueToGroupsForNPCHealthAA(Mob sender, SWIGTYPE_p_EQApplicationPacket app) {
    questinterfacePINVOKE.EntityList_QueueToGroupsForNPCHealthAA(swigCPtr, Mob.getCPtr(sender), SWIGTYPE_p_EQApplicationPacket.getCPtr(app));
  }

  public void AEAttack(Mob attacker, float distance, int Hand, int count, bool is_from_spell, int attack_rounds) {
    questinterfacePINVOKE.EntityList_AEAttack__SWIG_0(swigCPtr, Mob.getCPtr(attacker), distance, Hand, count, is_from_spell, attack_rounds);
  }

  public void AEAttack(Mob attacker, float distance, int Hand, int count, bool is_from_spell) {
    questinterfacePINVOKE.EntityList_AEAttack__SWIG_1(swigCPtr, Mob.getCPtr(attacker), distance, Hand, count, is_from_spell);
  }

  public void AEAttack(Mob attacker, float distance, int Hand, int count) {
    questinterfacePINVOKE.EntityList_AEAttack__SWIG_2(swigCPtr, Mob.getCPtr(attacker), distance, Hand, count);
  }

  public void AEAttack(Mob attacker, float distance, int Hand) {
    questinterfacePINVOKE.EntityList_AEAttack__SWIG_3(swigCPtr, Mob.getCPtr(attacker), distance, Hand);
  }

  public void AEAttack(Mob attacker, float distance) {
    questinterfacePINVOKE.EntityList_AEAttack__SWIG_4(swigCPtr, Mob.getCPtr(attacker), distance);
  }

  public void AETaunt(Client caster, float range, int bonus_hate) {
    questinterfacePINVOKE.EntityList_AETaunt__SWIG_0(swigCPtr, Client.getCPtr(caster), range, bonus_hate);
  }

  public void AETaunt(Client caster, float range) {
    questinterfacePINVOKE.EntityList_AETaunt__SWIG_1(swigCPtr, Client.getCPtr(caster), range);
  }

  public void AETaunt(Client caster) {
    questinterfacePINVOKE.EntityList_AETaunt__SWIG_2(swigCPtr, Client.getCPtr(caster));
  }

  public void AESpell(Mob caster, Mob center, ushort spell_id, bool affect_caster, short resist_adjust, SWIGTYPE_p_int max_targets) {
    questinterfacePINVOKE.EntityList_AESpell__SWIG_0(swigCPtr, Mob.getCPtr(caster), Mob.getCPtr(center), spell_id, affect_caster, resist_adjust, SWIGTYPE_p_int.getCPtr(max_targets));
  }

  public void AESpell(Mob caster, Mob center, ushort spell_id, bool affect_caster, short resist_adjust) {
    questinterfacePINVOKE.EntityList_AESpell__SWIG_1(swigCPtr, Mob.getCPtr(caster), Mob.getCPtr(center), spell_id, affect_caster, resist_adjust);
  }

  public void AESpell(Mob caster, Mob center, ushort spell_id, bool affect_caster) {
    questinterfacePINVOKE.EntityList_AESpell__SWIG_2(swigCPtr, Mob.getCPtr(caster), Mob.getCPtr(center), spell_id, affect_caster);
  }

  public void AESpell(Mob caster, Mob center, ushort spell_id) {
    questinterfacePINVOKE.EntityList_AESpell__SWIG_3(swigCPtr, Mob.getCPtr(caster), Mob.getCPtr(center), spell_id);
  }

  public void MassGroupBuff(Mob caster, Mob center, ushort spell_id, bool affect_caster) {
    questinterfacePINVOKE.EntityList_MassGroupBuff__SWIG_0(swigCPtr, Mob.getCPtr(caster), Mob.getCPtr(center), spell_id, affect_caster);
  }

  public void MassGroupBuff(Mob caster, Mob center, ushort spell_id) {
    questinterfacePINVOKE.EntityList_MassGroupBuff__SWIG_1(swigCPtr, Mob.getCPtr(caster), Mob.getCPtr(center), spell_id);
  }

  public Mob GetTrapTrigger(Trap trap) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetTrapTrigger(swigCPtr, Trap.getCPtr(trap));
    Mob ret = (cPtr == global::System.IntPtr.Zero) ? null : new Mob(cPtr, false);
    return ret;
  }

  public void SendAlarm(Trap trap, Mob currenttarget, byte kos) {
    questinterfacePINVOKE.EntityList_SendAlarm(swigCPtr, Trap.getCPtr(trap), Mob.getCPtr(currenttarget), kos);
  }

  public Trap FindNearbyTrap(Mob searcher, float max_dist, SWIGTYPE_p_float curdist, bool detected) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_FindNearbyTrap__SWIG_0(swigCPtr, Mob.getCPtr(searcher), max_dist, SWIGTYPE_p_float.getCPtr(curdist), detected);
    Trap ret = (cPtr == global::System.IntPtr.Zero) ? null : new Trap(cPtr, false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Trap FindNearbyTrap(Mob searcher, float max_dist, SWIGTYPE_p_float curdist) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_FindNearbyTrap__SWIG_1(swigCPtr, Mob.getCPtr(searcher), max_dist, SWIGTYPE_p_float.getCPtr(curdist));
    Trap ret = (cPtr == global::System.IntPtr.Zero) ? null : new Trap(cPtr, false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void AddHealAggro(Mob target, Mob caster, ushort hate) {
    questinterfacePINVOKE.EntityList_AddHealAggro(swigCPtr, Mob.getCPtr(target), Mob.getCPtr(caster), hate);
  }

  public void OpenDoorsNear(Mob opener) {
    questinterfacePINVOKE.EntityList_OpenDoorsNear(swigCPtr, Mob.getCPtr(opener));
  }

  public void UpdateWho(bool iSendFullUpdate) {
    questinterfacePINVOKE.EntityList_UpdateWho__SWIG_0(swigCPtr, iSendFullUpdate);
  }

  public void UpdateWho() {
    questinterfacePINVOKE.EntityList_UpdateWho__SWIG_1(swigCPtr);
  }

  public string MakeNameUnique(string name) {
    string ret = questinterfacePINVOKE.EntityList_MakeNameUnique(swigCPtr, name);
    return ret;
  }

  public static string RemoveNumbers(string name) {
    string ret = questinterfacePINVOKE.EntityList_RemoveNumbers(name);
    return ret;
  }

  public void SignalMobsByNPCID(uint npc_type, int signal_id) {
    questinterfacePINVOKE.EntityList_SignalMobsByNPCID(swigCPtr, npc_type, signal_id);
  }

  public void RemoveEntity(ushort id) {
    questinterfacePINVOKE.EntityList_RemoveEntity(swigCPtr, id);
  }

  public void SendPetitionToAdmins(SWIGTYPE_p_Petition pet) {
    questinterfacePINVOKE.EntityList_SendPetitionToAdmins__SWIG_0(swigCPtr, SWIGTYPE_p_Petition.getCPtr(pet));
  }

  public void SendPetitionToAdmins() {
    questinterfacePINVOKE.EntityList_SendPetitionToAdmins__SWIG_1(swigCPtr);
  }

  public void AddLootToNPCS(uint item_id, uint count) {
    questinterfacePINVOKE.EntityList_AddLootToNPCS(swigCPtr, item_id, count);
  }

  public void ListNPCCorpses(Client client) {
    questinterfacePINVOKE.EntityList_ListNPCCorpses(swigCPtr, Client.getCPtr(client));
  }

  public void ListPlayerCorpses(Client client) {
    questinterfacePINVOKE.EntityList_ListPlayerCorpses(swigCPtr, Client.getCPtr(client));
  }

  public uint DeleteNPCCorpses() {
    uint ret = questinterfacePINVOKE.EntityList_DeleteNPCCorpses(swigCPtr);
    return ret;
  }

  public uint DeletePlayerCorpses() {
    uint ret = questinterfacePINVOKE.EntityList_DeletePlayerCorpses(swigCPtr);
    return ret;
  }

  public void CorpseFix(Client c) {
    questinterfacePINVOKE.EntityList_CorpseFix(swigCPtr, Client.getCPtr(c));
  }

  public void HalveAggro(Mob who) {
    questinterfacePINVOKE.EntityList_HalveAggro(swigCPtr, Mob.getCPtr(who));
  }

  public void DoubleAggro(Mob who) {
    questinterfacePINVOKE.EntityList_DoubleAggro(swigCPtr, Mob.getCPtr(who));
  }

  public void UpdateHoTT(Mob target) {
    questinterfacePINVOKE.EntityList_UpdateHoTT(swigCPtr, Mob.getCPtr(target));
  }

  public void Process() {
    questinterfacePINVOKE.EntityList_Process(swigCPtr);
  }

  public void ClearAggro(Mob targ, bool clear_caster_id) {
    questinterfacePINVOKE.EntityList_ClearAggro__SWIG_0(swigCPtr, Mob.getCPtr(targ), clear_caster_id);
  }

  public void ClearAggro(Mob targ) {
    questinterfacePINVOKE.EntityList_ClearAggro__SWIG_1(swigCPtr, Mob.getCPtr(targ));
  }

  public void ClearWaterAggro(Mob targ) {
    questinterfacePINVOKE.EntityList_ClearWaterAggro(swigCPtr, Mob.getCPtr(targ));
  }

  public void ClearFeignAggro(Mob targ) {
    questinterfacePINVOKE.EntityList_ClearFeignAggro(swigCPtr, Mob.getCPtr(targ));
  }

  public void ClearZoneFeignAggro(Mob targ) {
    questinterfacePINVOKE.EntityList_ClearZoneFeignAggro(swigCPtr, Mob.getCPtr(targ));
  }

  public void AggroZone(Mob who, long hate) {
    questinterfacePINVOKE.EntityList_AggroZone__SWIG_0(swigCPtr, Mob.getCPtr(who), hate);
  }

  public void AggroZone(Mob who) {
    questinterfacePINVOKE.EntityList_AggroZone__SWIG_1(swigCPtr, Mob.getCPtr(who));
  }

  public bool Fighting(Mob targ) {
    bool ret = questinterfacePINVOKE.EntityList_Fighting(swigCPtr, Mob.getCPtr(targ));
    return ret;
  }

  public void RemoveFromHateLists(Mob mob, bool settoone) {
    questinterfacePINVOKE.EntityList_RemoveFromHateLists__SWIG_0(swigCPtr, Mob.getCPtr(mob), settoone);
  }

  public void RemoveFromHateLists(Mob mob) {
    questinterfacePINVOKE.EntityList_RemoveFromHateLists__SWIG_1(swigCPtr, Mob.getCPtr(mob));
  }

  public void RemoveDebuffs(Mob caster) {
    questinterfacePINVOKE.EntityList_RemoveDebuffs(swigCPtr, Mob.getCPtr(caster));
  }

  public void MessageGroup(Mob sender, bool skipclose, uint type, string message) {
    questinterfacePINVOKE.EntityList_MessageGroup(swigCPtr, Mob.getCPtr(sender), skipclose, type, message);
  }

  public void LimitAddNPC(NPC npc) {
    questinterfacePINVOKE.EntityList_LimitAddNPC(swigCPtr, NPC.getCPtr(npc));
  }

  public void LimitRemoveNPC(NPC npc) {
    questinterfacePINVOKE.EntityList_LimitRemoveNPC(swigCPtr, NPC.getCPtr(npc));
  }

  public bool LimitCheckType(uint npc_type, int count) {
    bool ret = questinterfacePINVOKE.EntityList_LimitCheckType(swigCPtr, npc_type, count);
    return ret;
  }

  public bool LimitCheckGroup(uint spawngroup_id, int count) {
    bool ret = questinterfacePINVOKE.EntityList_LimitCheckGroup(swigCPtr, spawngroup_id, count);
    return ret;
  }

  public bool LimitCheckName(string npc_name) {
    bool ret = questinterfacePINVOKE.EntityList_LimitCheckName(swigCPtr, npc_name);
    return ret;
  }

  public int GetHatedCount(Mob attacker, Mob exclude, bool inc_gray_con) {
    int ret = questinterfacePINVOKE.EntityList_GetHatedCount(swigCPtr, Mob.getCPtr(attacker), Mob.getCPtr(exclude), inc_gray_con);
    return ret;
  }

  public bool Merc_AICheckCloseBeneficialSpells(SWIGTYPE_p_Merc caster, byte iChance, float iRange, uint iSpellTypes) {
    bool ret = questinterfacePINVOKE.EntityList_Merc_AICheckCloseBeneficialSpells(swigCPtr, SWIGTYPE_p_Merc.getCPtr(caster), iChance, iRange, iSpellTypes);
    return ret;
  }

  public Mob GetTargetForMez(Mob caster) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetTargetForMez(swigCPtr, Mob.getCPtr(caster));
    Mob ret = (cPtr == global::System.IntPtr.Zero) ? null : new Mob(cPtr, false);
    return ret;
  }

  public uint CheckNPCsClose(Mob center) {
    uint ret = questinterfacePINVOKE.EntityList_CheckNPCsClose(swigCPtr, Mob.getCPtr(center));
    return ret;
  }

  public Corpse GetClosestCorpse(Mob sender, string Name) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetClosestCorpse(swigCPtr, Mob.getCPtr(sender), Name);
    Corpse ret = (cPtr == global::System.IntPtr.Zero) ? null : new Corpse(cPtr, false);
    return ret;
  }

  public void TryWakeTheDead(Mob sender, Mob target, int spell_id, uint max_distance, uint duration, uint amount_pets) {
    questinterfacePINVOKE.EntityList_TryWakeTheDead(swigCPtr, Mob.getCPtr(sender), Mob.getCPtr(target), spell_id, max_distance, duration, amount_pets);
  }

  public NPC GetClosestBanker(Mob sender, SWIGTYPE_p_unsigned_int distance) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetClosestBanker(swigCPtr, Mob.getCPtr(sender), SWIGTYPE_p_unsigned_int.getCPtr(distance));
    NPC ret = (cPtr == global::System.IntPtr.Zero) ? null : new NPC(cPtr, false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void CameraEffect(uint duration, float intensity) {
    questinterfacePINVOKE.EntityList_CameraEffect(swigCPtr, duration, intensity);
  }

  public Mob GetClosestMobByBodyType(Mob sender, SWIGTYPE_p_bodyType BodyType, bool skip_client_pets) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetClosestMobByBodyType__SWIG_0(swigCPtr, Mob.getCPtr(sender), SWIGTYPE_p_bodyType.getCPtr(BodyType), skip_client_pets);
    Mob ret = (cPtr == global::System.IntPtr.Zero) ? null : new Mob(cPtr, false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Mob GetClosestMobByBodyType(Mob sender, SWIGTYPE_p_bodyType BodyType) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetClosestMobByBodyType__SWIG_1(swigCPtr, Mob.getCPtr(sender), SWIGTYPE_p_bodyType.getCPtr(BodyType));
    Mob ret = (cPtr == global::System.IntPtr.Zero) ? null : new Mob(cPtr, false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void ForceGroupUpdate(uint gid) {
    questinterfacePINVOKE.EntityList_ForceGroupUpdate(swigCPtr, gid);
  }

  public void SendGroupLeave(uint gid, string name) {
    questinterfacePINVOKE.EntityList_SendGroupLeave(swigCPtr, gid, name);
  }

  public void SendGroupJoin(uint gid, string name) {
    questinterfacePINVOKE.EntityList_SendGroupJoin(swigCPtr, gid, name);
  }

  public void SaveAllClientsTaskState() {
    questinterfacePINVOKE.EntityList_SaveAllClientsTaskState(swigCPtr);
  }

  public void ReloadAllClientsTaskState(int task_id) {
    questinterfacePINVOKE.EntityList_ReloadAllClientsTaskState__SWIG_0(swigCPtr, task_id);
  }

  public void ReloadAllClientsTaskState() {
    questinterfacePINVOKE.EntityList_ReloadAllClientsTaskState__SWIG_1(swigCPtr);
  }

  public ushort CreateGroundObject(uint itemid, SWIGTYPE_p_glm__vec4 position, uint decay_time) {
    ushort ret = questinterfacePINVOKE.EntityList_CreateGroundObject__SWIG_0(swigCPtr, itemid, SWIGTYPE_p_glm__vec4.getCPtr(position), decay_time);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort CreateGroundObject(uint itemid, SWIGTYPE_p_glm__vec4 position) {
    ushort ret = questinterfacePINVOKE.EntityList_CreateGroundObject__SWIG_1(swigCPtr, itemid, SWIGTYPE_p_glm__vec4.getCPtr(position));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort CreateGroundObjectFromModel(string model, SWIGTYPE_p_glm__vec4 position, byte type, uint decay_time) {
    ushort ret = questinterfacePINVOKE.EntityList_CreateGroundObjectFromModel__SWIG_0(swigCPtr, model, SWIGTYPE_p_glm__vec4.getCPtr(position), type, decay_time);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort CreateGroundObjectFromModel(string model, SWIGTYPE_p_glm__vec4 position, byte type) {
    ushort ret = questinterfacePINVOKE.EntityList_CreateGroundObjectFromModel__SWIG_1(swigCPtr, model, SWIGTYPE_p_glm__vec4.getCPtr(position), type);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort CreateGroundObjectFromModel(string model, SWIGTYPE_p_glm__vec4 position) {
    ushort ret = questinterfacePINVOKE.EntityList_CreateGroundObjectFromModel__SWIG_2(swigCPtr, model, SWIGTYPE_p_glm__vec4.getCPtr(position));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort CreateDoor(string model, SWIGTYPE_p_glm__vec4 position, byte type, ushort size) {
    ushort ret = questinterfacePINVOKE.EntityList_CreateDoor__SWIG_0(swigCPtr, model, SWIGTYPE_p_glm__vec4.getCPtr(position), type, size);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort CreateDoor(string model, SWIGTYPE_p_glm__vec4 position, byte type) {
    ushort ret = questinterfacePINVOKE.EntityList_CreateDoor__SWIG_1(swigCPtr, model, SWIGTYPE_p_glm__vec4.getCPtr(position), type);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort CreateDoor(string model, SWIGTYPE_p_glm__vec4 position) {
    ushort ret = questinterfacePINVOKE.EntityList_CreateDoor__SWIG_2(swigCPtr, model, SWIGTYPE_p_glm__vec4.getCPtr(position));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void ZoneWho(Client c, SWIGTYPE_p_Who_All_Struct Who) {
    questinterfacePINVOKE.EntityList_ZoneWho(swigCPtr, Client.getCPtr(c), SWIGTYPE_p_Who_All_Struct.getCPtr(Who));
  }

  public void UnMarkNPC(ushort ID) {
    questinterfacePINVOKE.EntityList_UnMarkNPC(swigCPtr, ID);
  }

  public void SignalAllClients(int signal_id) {
    questinterfacePINVOKE.EntityList_SignalAllClients(swigCPtr, signal_id);
  }

  public void UpdateQGlobal(uint qid, SWIGTYPE_p_QGlobal newGlobal) {
    questinterfacePINVOKE.EntityList_UpdateQGlobal(swigCPtr, qid, SWIGTYPE_p_QGlobal.getCPtr(newGlobal));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void DeleteQGlobal(SWIGTYPE_p_std__string name, uint npcID, uint charID, uint zoneID) {
    questinterfacePINVOKE.EntityList_DeleteQGlobal(swigCPtr, SWIGTYPE_p_std__string.getCPtr(name), npcID, charID, zoneID);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SendFindableNPCList(Client c) {
    questinterfacePINVOKE.EntityList_SendFindableNPCList(swigCPtr, Client.getCPtr(c));
  }

  public void UpdateFindableNPCState(NPC n, bool Remove) {
    questinterfacePINVOKE.EntityList_UpdateFindableNPCState(swigCPtr, NPC.getCPtr(n), Remove);
  }

  public void HideCorpses(Client c, byte CurrentMode, byte NewMode) {
    questinterfacePINVOKE.EntityList_HideCorpses(swigCPtr, Client.getCPtr(c), CurrentMode, NewMode);
  }

  public void GateAllClientsToSafeReturn() {
    questinterfacePINVOKE.EntityList_GateAllClientsToSafeReturn(swigCPtr);
  }

  public void GetMobList(SWIGTYPE_p_std__listT_Mob_p_t m_list) {
    questinterfacePINVOKE.EntityList_GetMobList__SWIG_0(swigCPtr, SWIGTYPE_p_std__listT_Mob_p_t.getCPtr(m_list));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetNPCList(ProximityList n_list) {
    questinterfacePINVOKE.EntityList_GetNPCList__SWIG_0(swigCPtr, ProximityList.getCPtr(n_list));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetClientList(SWIGTYPE_p_std__listT_Client_p_t c_list) {
    questinterfacePINVOKE.EntityList_GetClientList__SWIG_0(swigCPtr, SWIGTYPE_p_std__listT_Client_p_t.getCPtr(c_list));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetCorpseList(SWIGTYPE_p_std__listT_Corpse_p_t c_list) {
    questinterfacePINVOKE.EntityList_GetCorpseList__SWIG_0(swigCPtr, SWIGTYPE_p_std__listT_Corpse_p_t.getCPtr(c_list));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetObjectList(SWIGTYPE_p_std__listT_Object_p_t o_list) {
    questinterfacePINVOKE.EntityList_GetObjectList__SWIG_0(swigCPtr, SWIGTYPE_p_std__listT_Object_p_t.getCPtr(o_list));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetDoorsList(SWIGTYPE_p_std__listT_Doors_p_t d_list) {
    questinterfacePINVOKE.EntityList_GetDoorsList__SWIG_0(swigCPtr, SWIGTYPE_p_std__listT_Doors_p_t.getCPtr(d_list));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetSpawnList(SWIGTYPE_p_std__listT_Spawn2_p_t d_list) {
    questinterfacePINVOKE.EntityList_GetSpawnList(swigCPtr, SWIGTYPE_p_std__listT_Spawn2_p_t.getCPtr(d_list));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetTargetsForConeArea(Mob start, float min_radius, float radius, float height, int pcnpc, SWIGTYPE_p_std__listT_Mob_p_t m_list) {
    questinterfacePINVOKE.EntityList_GetTargetsForConeArea(swigCPtr, Mob.getCPtr(start), min_radius, radius, height, pcnpc, SWIGTYPE_p_std__listT_Mob_p_t.getCPtr(m_list));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__vectorT_Mob_p_t GetTargetsForVirusEffect(Mob spreader, Mob orginal_caster, int range, int pcnpc, int spell_id) {
    SWIGTYPE_p_std__vectorT_Mob_p_t ret = new SWIGTYPE_p_std__vectorT_Mob_p_t(questinterfacePINVOKE.EntityList_GetTargetsForVirusEffect(swigCPtr, Mob.getCPtr(spreader), Mob.getCPtr(orginal_caster), range, pcnpc, spell_id), true);
    return ret;
  }

  public IntMobMap GetMobList() {
    IntMobMap ret = new IntMobMap(questinterfacePINVOKE.EntityList_GetMobList__SWIG_1(swigCPtr), false);
    return ret;
  }

  public IntNpcMap2 GetNPCList() {
    IntNpcMap2 ret = new IntNpcMap2(questinterfacePINVOKE.EntityList_GetNPCList__SWIG_1(swigCPtr), false);
    return ret;
  }

  public IntMercMap GetMercList() {
    IntMercMap ret = new IntMercMap(questinterfacePINVOKE.EntityList_GetMercList(swigCPtr), false);
    return ret;
  }

  public IntClientMap GetClientList() {
    IntClientMap ret = new IntClientMap(questinterfacePINVOKE.EntityList_GetClientList__SWIG_1(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_std__listT_Bot_p_t GetBotList() {
    SWIGTYPE_p_std__listT_Bot_p_t ret = new SWIGTYPE_p_std__listT_Bot_p_t(questinterfacePINVOKE.EntityList_GetBotList__SWIG_0(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_Bot_p_t GetBotListByCharacterID(uint character_id, byte class_id) {
    SWIGTYPE_p_std__vectorT_Bot_p_t ret = new SWIGTYPE_p_std__vectorT_Bot_p_t(questinterfacePINVOKE.EntityList_GetBotListByCharacterID__SWIG_0(swigCPtr, character_id, class_id), true);
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_Bot_p_t GetBotListByCharacterID(uint character_id) {
    SWIGTYPE_p_std__vectorT_Bot_p_t ret = new SWIGTYPE_p_std__vectorT_Bot_p_t(questinterfacePINVOKE.EntityList_GetBotListByCharacterID__SWIG_1(swigCPtr, character_id), true);
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_Bot_p_t GetBotListByClientName(SWIGTYPE_p_std__string client_name, byte class_id) {
    SWIGTYPE_p_std__vectorT_Bot_p_t ret = new SWIGTYPE_p_std__vectorT_Bot_p_t(questinterfacePINVOKE.EntityList_GetBotListByClientName__SWIG_0(swigCPtr, SWIGTYPE_p_std__string.getCPtr(client_name), class_id), true);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_Bot_p_t GetBotListByClientName(SWIGTYPE_p_std__string client_name) {
    SWIGTYPE_p_std__vectorT_Bot_p_t ret = new SWIGTYPE_p_std__vectorT_Bot_p_t(questinterfacePINVOKE.EntityList_GetBotListByClientName__SWIG_1(swigCPtr, SWIGTYPE_p_std__string.getCPtr(client_name)), true);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SignalAllBotsByOwnerCharacterID(uint character_id, int signal_id) {
    questinterfacePINVOKE.EntityList_SignalAllBotsByOwnerCharacterID(swigCPtr, character_id, signal_id);
  }

  public void SignalAllBotsByOwnerName(SWIGTYPE_p_std__string owner_name, int signal_id) {
    questinterfacePINVOKE.EntityList_SignalAllBotsByOwnerName(swigCPtr, SWIGTYPE_p_std__string.getCPtr(owner_name), signal_id);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SignalBotByBotID(uint bot_id, int signal_id) {
    questinterfacePINVOKE.EntityList_SignalBotByBotID(swigCPtr, bot_id, signal_id);
  }

  public void SignalBotByBotName(SWIGTYPE_p_std__string bot_name, int signal_id) {
    questinterfacePINVOKE.EntityList_SignalBotByBotName(swigCPtr, SWIGTYPE_p_std__string.getCPtr(bot_name), signal_id);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public IntCorpseMap GetCorpseList() {
    IntCorpseMap ret = new IntCorpseMap(questinterfacePINVOKE.EntityList_GetCorpseList__SWIG_1(swigCPtr), false);
    return ret;
  }

  public IntObjectMap GetObjectList() {
    IntObjectMap ret = new IntObjectMap(questinterfacePINVOKE.EntityList_GetObjectList__SWIG_1(swigCPtr), false);
    return ret;
  }

  public IntDoorMap GetDoorsList() {
    IntDoorMap ret = new IntDoorMap(questinterfacePINVOKE.EntityList_GetDoorsList__SWIG_1(swigCPtr), false);
    return ret;
  }

  public IntMobMap GetCloseMobList(Mob mob, float distance) {
    IntMobMap ret = new IntMobMap(questinterfacePINVOKE.EntityList_GetCloseMobList__SWIG_0(swigCPtr, Mob.getCPtr(mob), distance), false);
    return ret;
  }

  public IntMobMap GetCloseMobList(Mob mob) {
    IntMobMap ret = new IntMobMap(questinterfacePINVOKE.EntityList_GetCloseMobList__SWIG_1(swigCPtr, Mob.getCPtr(mob)), false);
    return ret;
  }

  public void DepopAll(int NPCTypeID, bool StartSpawnTimer) {
    questinterfacePINVOKE.EntityList_DepopAll__SWIG_0(swigCPtr, NPCTypeID, StartSpawnTimer);
  }

  public void DepopAll(int NPCTypeID) {
    questinterfacePINVOKE.EntityList_DepopAll__SWIG_1(swigCPtr, NPCTypeID);
  }

  public ushort GetFreeID() {
    ushort ret = questinterfacePINVOKE.EntityList_GetFreeID(swigCPtr);
    return ret;
  }

  public void RefreshAutoXTargets(Client c) {
    questinterfacePINVOKE.EntityList_RefreshAutoXTargets(swigCPtr, Client.getCPtr(c));
  }

  public void RefreshClientXTargets(Client c) {
    questinterfacePINVOKE.EntityList_RefreshClientXTargets(swigCPtr, Client.getCPtr(c));
  }

  public void SendAlternateAdvancementStats() {
    questinterfacePINVOKE.EntityList_SendAlternateAdvancementStats(swigCPtr);
  }

  public void ScanCloseMobs(IntMobMap close_mobs, Mob scanning_mob, bool add_self_to_other_lists) {
    questinterfacePINVOKE.EntityList_ScanCloseMobs__SWIG_0(swigCPtr, IntMobMap.getCPtr(close_mobs), Mob.getCPtr(scanning_mob), add_self_to_other_lists);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ScanCloseMobs(IntMobMap close_mobs, Mob scanning_mob) {
    questinterfacePINVOKE.EntityList_ScanCloseMobs__SWIG_1(swigCPtr, IntMobMap.getCPtr(close_mobs), Mob.getCPtr(scanning_mob));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetTrapInfo(Client c) {
    questinterfacePINVOKE.EntityList_GetTrapInfo(swigCPtr, Client.getCPtr(c));
  }

  public bool IsTrapGroupSpawned(uint trap_id, byte group) {
    bool ret = questinterfacePINVOKE.EntityList_IsTrapGroupSpawned(swigCPtr, trap_id, group);
    return ret;
  }

  public void UpdateAllTraps(bool respawn, bool repopnow) {
    questinterfacePINVOKE.EntityList_UpdateAllTraps__SWIG_0(swigCPtr, respawn, repopnow);
  }

  public void UpdateAllTraps(bool respawn) {
    questinterfacePINVOKE.EntityList_UpdateAllTraps__SWIG_1(swigCPtr, respawn);
  }

  public void ClearTrapPointers() {
    questinterfacePINVOKE.EntityList_ClearTrapPointers(swigCPtr);
  }

  public int MovePlayerCorpsesToGraveyard(bool force_move_from_instance) {
    int ret = questinterfacePINVOKE.EntityList_MovePlayerCorpsesToGraveyard__SWIG_0(swigCPtr, force_move_from_instance);
    return ret;
  }

  public int MovePlayerCorpsesToGraveyard() {
    int ret = questinterfacePINVOKE.EntityList_MovePlayerCorpsesToGraveyard__SWIG_1(swigCPtr);
    return ret;
  }

  public IntClientMap client_list {
    set {
      questinterfacePINVOKE.EntityList_client_list_set(swigCPtr, IntClientMap.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_client_list_get(swigCPtr);
      IntClientMap ret = (cPtr == global::System.IntPtr.Zero) ? null : new IntClientMap(cPtr, false);
      return ret;
    } 
  }

  public IntMobMap mob_list {
    set {
      questinterfacePINVOKE.EntityList_mob_list_set(swigCPtr, IntMobMap.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_mob_list_get(swigCPtr);
      IntMobMap ret = (cPtr == global::System.IntPtr.Zero) ? null : new IntMobMap(cPtr, false);
      return ret;
    } 
  }

  public IntNpcMap2 npc_list {
    set {
      questinterfacePINVOKE.EntityList_npc_list_set(swigCPtr, IntNpcMap2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_npc_list_get(swigCPtr);
      IntNpcMap2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new IntNpcMap2(cPtr, false);
      return ret;
    } 
  }

  public IntMercMap merc_list {
    set {
      questinterfacePINVOKE.EntityList_merc_list_set(swigCPtr, IntMercMap.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_merc_list_get(swigCPtr);
      IntMercMap ret = (cPtr == global::System.IntPtr.Zero) ? null : new IntMercMap(cPtr, false);
      return ret;
    } 
  }

  public IntCorpseMap corpse_list {
    set {
      questinterfacePINVOKE.EntityList_corpse_list_set(swigCPtr, IntCorpseMap.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_corpse_list_get(swigCPtr);
      IntCorpseMap ret = (cPtr == global::System.IntPtr.Zero) ? null : new IntCorpseMap(cPtr, false);
      return ret;
    } 
  }

  public IntObjectMap object_list {
    set {
      questinterfacePINVOKE.EntityList_object_list_set(swigCPtr, IntObjectMap.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_object_list_get(swigCPtr);
      IntObjectMap ret = (cPtr == global::System.IntPtr.Zero) ? null : new IntObjectMap(cPtr, false);
      return ret;
    } 
  }

  public IntDoorMap door_list {
    set {
      questinterfacePINVOKE.EntityList_door_list_set(swigCPtr, IntDoorMap.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_door_list_get(swigCPtr);
      IntDoorMap ret = (cPtr == global::System.IntPtr.Zero) ? null : new IntDoorMap(cPtr, false);
      return ret;
    } 
  }

  public IntTrapMap trap_list {
    set {
      questinterfacePINVOKE.EntityList_trap_list_set(swigCPtr, IntTrapMap.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_trap_list_get(swigCPtr);
      IntTrapMap ret = (cPtr == global::System.IntPtr.Zero) ? null : new IntTrapMap(cPtr, false);
      return ret;
    } 
  }

  public IntBeaconMap beacon_list {
    set {
      questinterfacePINVOKE.EntityList_beacon_list_set(swigCPtr, IntBeaconMap.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_beacon_list_get(swigCPtr);
      IntBeaconMap ret = (cPtr == global::System.IntPtr.Zero) ? null : new IntBeaconMap(cPtr, false);
      return ret;
    } 
  }

  public IntEncounterMap encounter_list {
    set {
      questinterfacePINVOKE.EntityList_encounter_list_set(swigCPtr, IntEncounterMap.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_encounter_list_get(swigCPtr);
      IntEncounterMap ret = (cPtr == global::System.IntPtr.Zero) ? null : new IntEncounterMap(cPtr, false);
      return ret;
    } 
  }

  public ProximityList proximity_list {
    set {
      questinterfacePINVOKE.EntityList_proximity_list_set(swigCPtr, ProximityList.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_proximity_list_get(swigCPtr);
      ProximityList ret = (cPtr == global::System.IntPtr.Zero) ? null : new ProximityList(cPtr, false);
      return ret;
    } 
  }

  public GroupList group_list {
    set {
      questinterfacePINVOKE.EntityList_group_list_set(swigCPtr, GroupList.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_group_list_get(swigCPtr);
      GroupList ret = (cPtr == global::System.IntPtr.Zero) ? null : new GroupList(cPtr, false);
      return ret;
    } 
  }

  public RaidList raid_list {
    set {
      questinterfacePINVOKE.EntityList_raid_list_set(swigCPtr, RaidList.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_raid_list_get(swigCPtr);
      RaidList ret = (cPtr == global::System.IntPtr.Zero) ? null : new RaidList(cPtr, false);
      return ret;
    } 
  }

  public AreaList area_list {
    set {
      questinterfacePINVOKE.EntityList_area_list_set(swigCPtr, AreaList.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_area_list_get(swigCPtr);
      AreaList ret = (cPtr == global::System.IntPtr.Zero) ? null : new AreaList(cPtr, false);
      return ret;
    } 
  }

  public void AddBot(SWIGTYPE_p_Bot new_bot, bool send_spawn_packet, bool dont_queue) {
    questinterfacePINVOKE.EntityList_AddBot__SWIG_0(swigCPtr, SWIGTYPE_p_Bot.getCPtr(new_bot), send_spawn_packet, dont_queue);
  }

  public void AddBot(SWIGTYPE_p_Bot new_bot, bool send_spawn_packet) {
    questinterfacePINVOKE.EntityList_AddBot__SWIG_1(swigCPtr, SWIGTYPE_p_Bot.getCPtr(new_bot), send_spawn_packet);
  }

  public void AddBot(SWIGTYPE_p_Bot new_bot) {
    questinterfacePINVOKE.EntityList_AddBot__SWIG_2(swigCPtr, SWIGTYPE_p_Bot.getCPtr(new_bot));
  }

  public bool RemoveBot(ushort entityID) {
    bool ret = questinterfacePINVOKE.EntityList_RemoveBot(swigCPtr, entityID);
    return ret;
  }

  public Mob GetMobByBotID(uint botID) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetMobByBotID(swigCPtr, botID);
    Mob ret = (cPtr == global::System.IntPtr.Zero) ? null : new Mob(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_Bot GetBotByBotID(uint botID) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetBotByBotID(swigCPtr, botID);
    SWIGTYPE_p_Bot ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Bot(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_Bot GetBotByBotName(SWIGTYPE_p_std__string_view botName) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetBotByBotName(swigCPtr, SWIGTYPE_p_std__string_view.getCPtr(botName));
    SWIGTYPE_p_Bot ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Bot(cPtr, false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Client GetBotOwnerByBotEntityID(uint entity_id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetBotOwnerByBotEntityID(swigCPtr, entity_id);
    Client ret = (cPtr == global::System.IntPtr.Zero) ? null : new Client(cPtr, false);
    return ret;
  }

  public Client GetBotOwnerByBotID(uint bot_id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.EntityList_GetBotOwnerByBotID(swigCPtr, bot_id);
    Client ret = (cPtr == global::System.IntPtr.Zero) ? null : new Client(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_std__listT_Bot_p_t GetBotsByBotOwnerCharacterID(uint botOwnerCharacterID) {
    SWIGTYPE_p_std__listT_Bot_p_t ret = new SWIGTYPE_p_std__listT_Bot_p_t(questinterfacePINVOKE.EntityList_GetBotsByBotOwnerCharacterID(swigCPtr, botOwnerCharacterID), true);
    return ret;
  }

  public bool Bot_AICheckCloseBeneficialSpells(SWIGTYPE_p_Bot caster, byte iChance, float iRange, uint iSpellTypes) {
    bool ret = questinterfacePINVOKE.EntityList_Bot_AICheckCloseBeneficialSpells(swigCPtr, SWIGTYPE_p_Bot.getCPtr(caster), iChance, iRange, iSpellTypes);
    return ret;
  }

  public void ShowSpawnWindow(Client client, int Distance, bool NamedOnly) {
    questinterfacePINVOKE.EntityList_ShowSpawnWindow(swigCPtr, Client.getCPtr(client), Distance, NamedOnly);
  }

  public void ScanCloseClientMobs(IntMobMap close_mobs, Mob scanning_mob) {
    questinterfacePINVOKE.EntityList_ScanCloseClientMobs(swigCPtr, IntMobMap.getCPtr(close_mobs), Mob.getCPtr(scanning_mob));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetBotList(SWIGTYPE_p_std__listT_Bot_p_t b_list) {
    questinterfacePINVOKE.EntityList_GetBotList__SWIG_1(swigCPtr, SWIGTYPE_p_std__listT_Bot_p_t.getCPtr(b_list));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

}

public class BulkZoneSpawnPacket : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal BulkZoneSpawnPacket(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BulkZoneSpawnPacket obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(BulkZoneSpawnPacket obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~BulkZoneSpawnPacket() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_BulkZoneSpawnPacket(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public BulkZoneSpawnPacket(Client iSendTo, uint iMaxSpawnsPerPacket) : this(questinterfacePINVOKE.new_BulkZoneSpawnPacket(Client.getCPtr(iSendTo), iMaxSpawnsPerPacket), true) {
  }

  public bool AddSpawn(SWIGTYPE_p_NewSpawn_Struct ns) {
    bool ret = questinterfacePINVOKE.BulkZoneSpawnPacket_AddSpawn(swigCPtr, SWIGTYPE_p_NewSpawn_Struct.getCPtr(ns));
    return ret;
  }

  public void SendBuffer() {
    questinterfacePINVOKE.BulkZoneSpawnPacket_SendBuffer(swigCPtr);
  }

}

public enum eSpecialAttacks : int {
  None,
  Rampage,
  AERampage,
  ChaoticStab
}

public class AppearanceStruct : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal AppearanceStruct(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AppearanceStruct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(AppearanceStruct obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~AppearanceStruct() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_AppearanceStruct(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public byte aa_title {
    set {
      questinterfacePINVOKE.AppearanceStruct_aa_title_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.AppearanceStruct_aa_title_get(swigCPtr);
      return ret;
    } 
  }

  public byte beard {
    set {
      questinterfacePINVOKE.AppearanceStruct_beard_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.AppearanceStruct_beard_get(swigCPtr);
      return ret;
    } 
  }

  public byte beard_color {
    set {
      questinterfacePINVOKE.AppearanceStruct_beard_color_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.AppearanceStruct_beard_color_get(swigCPtr);
      return ret;
    } 
  }

  public uint drakkin_details {
    set {
      questinterfacePINVOKE.AppearanceStruct_drakkin_details_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.AppearanceStruct_drakkin_details_get(swigCPtr);
      return ret;
    } 
  }

  public uint drakkin_heritage {
    set {
      questinterfacePINVOKE.AppearanceStruct_drakkin_heritage_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.AppearanceStruct_drakkin_heritage_get(swigCPtr);
      return ret;
    } 
  }

  public uint drakkin_tattoo {
    set {
      questinterfacePINVOKE.AppearanceStruct_drakkin_tattoo_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.AppearanceStruct_drakkin_tattoo_get(swigCPtr);
      return ret;
    } 
  }

  public byte eye_color_one {
    set {
      questinterfacePINVOKE.AppearanceStruct_eye_color_one_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.AppearanceStruct_eye_color_one_get(swigCPtr);
      return ret;
    } 
  }

  public byte eye_color_two {
    set {
      questinterfacePINVOKE.AppearanceStruct_eye_color_two_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.AppearanceStruct_eye_color_two_get(swigCPtr);
      return ret;
    } 
  }

  public byte face {
    set {
      questinterfacePINVOKE.AppearanceStruct_face_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.AppearanceStruct_face_get(swigCPtr);
      return ret;
    } 
  }

  public byte gender_id {
    set {
      questinterfacePINVOKE.AppearanceStruct_gender_id_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.AppearanceStruct_gender_id_get(swigCPtr);
      return ret;
    } 
  }

  public byte hair {
    set {
      questinterfacePINVOKE.AppearanceStruct_hair_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.AppearanceStruct_hair_get(swigCPtr);
      return ret;
    } 
  }

  public byte hair_color {
    set {
      questinterfacePINVOKE.AppearanceStruct_hair_color_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.AppearanceStruct_hair_color_get(swigCPtr);
      return ret;
    } 
  }

  public byte helmet_texture {
    set {
      questinterfacePINVOKE.AppearanceStruct_helmet_texture_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.AppearanceStruct_helmet_texture_get(swigCPtr);
      return ret;
    } 
  }

  public ushort race_id {
    set {
      questinterfacePINVOKE.AppearanceStruct_race_id_set(swigCPtr, value);
    } 
    get {
      ushort ret = questinterfacePINVOKE.AppearanceStruct_race_id_get(swigCPtr);
      return ret;
    } 
  }

  public bool send_effects {
    set {
      questinterfacePINVOKE.AppearanceStruct_send_effects_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.AppearanceStruct_send_effects_get(swigCPtr);
      return ret;
    } 
  }

  public float size {
    set {
      questinterfacePINVOKE.AppearanceStruct_size_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.AppearanceStruct_size_get(swigCPtr);
      return ret;
    } 
  }

  public Client target {
    set {
      questinterfacePINVOKE.AppearanceStruct_target_set(swigCPtr, Client.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.AppearanceStruct_target_get(swigCPtr);
      Client ret = (cPtr == global::System.IntPtr.Zero) ? null : new Client(cPtr, false);
      return ret;
    } 
  }

  public byte texture {
    set {
      questinterfacePINVOKE.AppearanceStruct_texture_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.AppearanceStruct_texture_get(swigCPtr);
      return ret;
    } 
  }

  public AppearanceStruct() : this(questinterfacePINVOKE.new_AppearanceStruct(), true) {
  }

}

public class Mob : Entity {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Mob(global::System.IntPtr cPtr, bool cMemoryOwn) : base(questinterfacePINVOKE.Mob_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Mob obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Mob obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_Mob(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public class SpecialAbility : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal SpecialAbility(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SpecialAbility obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SpecialAbility obj) {
      if (obj != null) {
        if (!obj.swigCMemOwn)
          throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
        global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
        obj.swigCMemOwn = false;
        obj.Dispose();
        return ptr;
      } else {
        return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  
    ~SpecialAbility() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            questinterfacePINVOKE.delete_Mob_SpecialAbility(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public SpecialAbility() : this(questinterfacePINVOKE.new_Mob_SpecialAbility(), true) {
    }
  
    public int level {
      set {
        questinterfacePINVOKE.Mob_SpecialAbility_level_set(swigCPtr, value);
      } 
      get {
        int ret = questinterfacePINVOKE.Mob_SpecialAbility_level_get(swigCPtr);
        return ret;
      } 
    }
  
    public SWIGTYPE_p_Timer timer {
      set {
        questinterfacePINVOKE.Mob_SpecialAbility_timer_set(swigCPtr, SWIGTYPE_p_Timer.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = questinterfacePINVOKE.Mob_SpecialAbility_timer_get(swigCPtr);
        SWIGTYPE_p_Timer ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Timer(cPtr, false);
        return ret;
      } 
    }
  
    public SWIGTYPE_p_int params_ {
      set {
        questinterfacePINVOKE.Mob_SpecialAbility_params__set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = questinterfacePINVOKE.Mob_SpecialAbility_params__get(swigCPtr);
        SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
        return ret;
      } 
    }
  
  }

  public class AuraInfo : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal AuraInfo(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AuraInfo obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef swigRelease(AuraInfo obj) {
      if (obj != null) {
        if (!obj.swigCMemOwn)
          throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
        global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
        obj.swigCMemOwn = false;
        obj.Dispose();
        return ptr;
      } else {
        return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  
    ~AuraInfo() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            questinterfacePINVOKE.delete_Mob_AuraInfo(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public string name {
      set {
        questinterfacePINVOKE.Mob_AuraInfo_name_set(swigCPtr, value);
      } 
      get {
        string ret = questinterfacePINVOKE.Mob_AuraInfo_name_get(swigCPtr);
        return ret;
      } 
    }
  
    public int spawn_id {
      set {
        questinterfacePINVOKE.Mob_AuraInfo_spawn_id_set(swigCPtr, value);
      } 
      get {
        int ret = questinterfacePINVOKE.Mob_AuraInfo_spawn_id_get(swigCPtr);
        return ret;
      } 
    }
  
    public int icon {
      set {
        questinterfacePINVOKE.Mob_AuraInfo_icon_set(swigCPtr, value);
      } 
      get {
        int ret = questinterfacePINVOKE.Mob_AuraInfo_icon_get(swigCPtr);
        return ret;
      } 
    }
  
    public SWIGTYPE_p_Aura aura {
      set {
        questinterfacePINVOKE.Mob_AuraInfo_aura_set(swigCPtr, SWIGTYPE_p_Aura.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = questinterfacePINVOKE.Mob_AuraInfo_aura_get(swigCPtr);
        SWIGTYPE_p_Aura ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Aura(cPtr, false);
        return ret;
      } 
    }
  
    public AuraInfo() : this(questinterfacePINVOKE.new_Mob_AuraInfo(), true) {
    }
  
  }

  public class AuraMgr : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal AuraMgr(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AuraMgr obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef swigRelease(AuraMgr obj) {
      if (obj != null) {
        if (!obj.swigCMemOwn)
          throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
        global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
        obj.swigCMemOwn = false;
        obj.Dispose();
        return ptr;
      } else {
        return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  
    ~AuraMgr() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            questinterfacePINVOKE.delete_Mob_AuraMgr(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public int count {
      set {
        questinterfacePINVOKE.Mob_AuraMgr_count_set(swigCPtr, value);
      } 
      get {
        int ret = questinterfacePINVOKE.Mob_AuraMgr_count_get(swigCPtr);
        return ret;
      } 
    }
  
    public Mob.AuraInfo auras {
      set {
        questinterfacePINVOKE.Mob_AuraMgr_auras_set(swigCPtr, Mob.AuraInfo.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = questinterfacePINVOKE.Mob_AuraMgr_auras_get(swigCPtr);
        Mob.AuraInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new Mob.AuraInfo(cPtr, false);
        return ret;
      } 
    }
  
    public AuraMgr() : this(questinterfacePINVOKE.new_Mob_AuraMgr(), true) {
    }
  
  }

  public override bool IsMob() {
    bool ret = questinterfacePINVOKE.Mob_IsMob(swigCPtr);
    return ret;
  }

  public virtual bool InZone() {
    bool ret = questinterfacePINVOKE.Mob_InZone(swigCPtr);
    return ret;
  }

  public void DisplayInfo(Mob mob) {
    questinterfacePINVOKE.Mob_DisplayInfo(swigCPtr, Mob.getCPtr(mob));
  }

  public IntMobMap close_mobs {
    set {
      questinterfacePINVOKE.Mob_close_mobs_set(swigCPtr, IntMobMap.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.Mob_close_mobs_get(swigCPtr);
      IntMobMap ret = (cPtr == global::System.IntPtr.Zero) ? null : new IntMobMap(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_Timer mob_close_scan_timer {
    set {
      questinterfacePINVOKE.Mob_mob_close_scan_timer_set(swigCPtr, SWIGTYPE_p_Timer.getCPtr(value));
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_Timer ret = new SWIGTYPE_p_Timer(questinterfacePINVOKE.Mob_mob_close_scan_timer_get(swigCPtr), true);
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_Timer mob_check_moving_timer {
    set {
      questinterfacePINVOKE.Mob_mob_check_moving_timer_set(swigCPtr, SWIGTYPE_p_Timer.getCPtr(value));
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_Timer ret = new SWIGTYPE_p_Timer(questinterfacePINVOKE.Mob_mob_check_moving_timer_get(swigCPtr), true);
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public virtual void RogueBackstab(Mob other, bool min_damage, int ReuseTime) {
    questinterfacePINVOKE.Mob_RogueBackstab__SWIG_0(swigCPtr, Mob.getCPtr(other), min_damage, ReuseTime);
  }

  public virtual void RogueBackstab(Mob other, bool min_damage) {
    questinterfacePINVOKE.Mob_RogueBackstab__SWIG_1(swigCPtr, Mob.getCPtr(other), min_damage);
  }

  public virtual void RogueBackstab(Mob other) {
    questinterfacePINVOKE.Mob_RogueBackstab__SWIG_2(swigCPtr, Mob.getCPtr(other));
  }

  public virtual void RogueAssassinate(Mob other) {
    questinterfacePINVOKE.Mob_RogueAssassinate(swigCPtr, Mob.getCPtr(other));
  }

  public float MobAngle(Mob other, float ourx, float oury) {
    float ret = questinterfacePINVOKE.Mob_MobAngle__SWIG_0(swigCPtr, Mob.getCPtr(other), ourx, oury);
    return ret;
  }

  public float MobAngle(Mob other, float ourx) {
    float ret = questinterfacePINVOKE.Mob_MobAngle__SWIG_1(swigCPtr, Mob.getCPtr(other), ourx);
    return ret;
  }

  public float MobAngle(Mob other) {
    float ret = questinterfacePINVOKE.Mob_MobAngle__SWIG_2(swigCPtr, Mob.getCPtr(other));
    return ret;
  }

  public float MobAngle() {
    float ret = questinterfacePINVOKE.Mob_MobAngle__SWIG_3(swigCPtr);
    return ret;
  }

  public bool BehindMob(Mob other, float ourx, float oury) {
    bool ret = questinterfacePINVOKE.Mob_BehindMob__SWIG_0(swigCPtr, Mob.getCPtr(other), ourx, oury);
    return ret;
  }

  public bool BehindMob(Mob other, float ourx) {
    bool ret = questinterfacePINVOKE.Mob_BehindMob__SWIG_1(swigCPtr, Mob.getCPtr(other), ourx);
    return ret;
  }

  public bool BehindMob(Mob other) {
    bool ret = questinterfacePINVOKE.Mob_BehindMob__SWIG_2(swigCPtr, Mob.getCPtr(other));
    return ret;
  }

  public bool BehindMob() {
    bool ret = questinterfacePINVOKE.Mob_BehindMob__SWIG_3(swigCPtr);
    return ret;
  }

  public bool InFrontMob(Mob other, float ourx, float oury) {
    bool ret = questinterfacePINVOKE.Mob_InFrontMob__SWIG_0(swigCPtr, Mob.getCPtr(other), ourx, oury);
    return ret;
  }

  public bool InFrontMob(Mob other, float ourx) {
    bool ret = questinterfacePINVOKE.Mob_InFrontMob__SWIG_1(swigCPtr, Mob.getCPtr(other), ourx);
    return ret;
  }

  public bool InFrontMob(Mob other) {
    bool ret = questinterfacePINVOKE.Mob_InFrontMob__SWIG_2(swigCPtr, Mob.getCPtr(other));
    return ret;
  }

  public bool InFrontMob() {
    bool ret = questinterfacePINVOKE.Mob_InFrontMob__SWIG_3(swigCPtr);
    return ret;
  }

  public bool IsFacingMob(Mob other) {
    bool ret = questinterfacePINVOKE.Mob_IsFacingMob(swigCPtr, Mob.getCPtr(other));
    return ret;
  }

  public float HeadingAngleToMob(Mob other) {
    float ret = questinterfacePINVOKE.Mob_HeadingAngleToMob__SWIG_0(swigCPtr, Mob.getCPtr(other));
    return ret;
  }

  public float HeadingAngleToMob(float other_x, float other_y) {
    float ret = questinterfacePINVOKE.Mob_HeadingAngleToMob__SWIG_1(swigCPtr, other_x, other_y);
    return ret;
  }

  public virtual void RangedAttack(Mob other) {
    questinterfacePINVOKE.Mob_RangedAttack(swigCPtr, Mob.getCPtr(other));
  }

  public virtual void ThrowingAttack(Mob other) {
    questinterfacePINVOKE.Mob_ThrowingAttack(swigCPtr, Mob.getCPtr(other));
  }

  public virtual bool Attack(Mob other, int Hand, bool FromRiposte, bool IsStrikethrough, bool IsFromSpell, ExtraAttackOptions opts) {
    bool ret = questinterfacePINVOKE.Mob_Attack__SWIG_0(swigCPtr, Mob.getCPtr(other), Hand, FromRiposte, IsStrikethrough, IsFromSpell, ExtraAttackOptions.getCPtr(opts));
    return ret;
  }

  public virtual bool Attack(Mob other, int Hand, bool FromRiposte, bool IsStrikethrough, bool IsFromSpell) {
    bool ret = questinterfacePINVOKE.Mob_Attack__SWIG_1(swigCPtr, Mob.getCPtr(other), Hand, FromRiposte, IsStrikethrough, IsFromSpell);
    return ret;
  }

  public virtual bool Attack(Mob other, int Hand, bool FromRiposte, bool IsStrikethrough) {
    bool ret = questinterfacePINVOKE.Mob_Attack__SWIG_2(swigCPtr, Mob.getCPtr(other), Hand, FromRiposte, IsStrikethrough);
    return ret;
  }

  public virtual bool Attack(Mob other, int Hand, bool FromRiposte) {
    bool ret = questinterfacePINVOKE.Mob_Attack__SWIG_3(swigCPtr, Mob.getCPtr(other), Hand, FromRiposte);
    return ret;
  }

  public virtual bool Attack(Mob other, int Hand) {
    bool ret = questinterfacePINVOKE.Mob_Attack__SWIG_4(swigCPtr, Mob.getCPtr(other), Hand);
    return ret;
  }

  public virtual bool Attack(Mob other) {
    bool ret = questinterfacePINVOKE.Mob_Attack__SWIG_5(swigCPtr, Mob.getCPtr(other));
    return ret;
  }

  public void DoAttack(Mob other, DamageHitInfo hit, ExtraAttackOptions opts, bool FromRiposte) {
    questinterfacePINVOKE.Mob_DoAttack__SWIG_0(swigCPtr, Mob.getCPtr(other), DamageHitInfo.getCPtr(hit), ExtraAttackOptions.getCPtr(opts), FromRiposte);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void DoAttack(Mob other, DamageHitInfo hit, ExtraAttackOptions opts) {
    questinterfacePINVOKE.Mob_DoAttack__SWIG_1(swigCPtr, Mob.getCPtr(other), DamageHitInfo.getCPtr(hit), ExtraAttackOptions.getCPtr(opts));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void DoAttack(Mob other, DamageHitInfo hit) {
    questinterfacePINVOKE.Mob_DoAttack__SWIG_2(swigCPtr, Mob.getCPtr(other), DamageHitInfo.getCPtr(hit));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public int MonkSpecialAttack(Mob other, byte skill_used) {
    int ret = questinterfacePINVOKE.Mob_MonkSpecialAttack(swigCPtr, Mob.getCPtr(other), skill_used);
    return ret;
  }

  public virtual void TryBackstab(Mob other, int ReuseTime) {
    questinterfacePINVOKE.Mob_TryBackstab__SWIG_0(swigCPtr, Mob.getCPtr(other), ReuseTime);
  }

  public virtual void TryBackstab(Mob other) {
    questinterfacePINVOKE.Mob_TryBackstab__SWIG_1(swigCPtr, Mob.getCPtr(other));
  }

  public bool AvoidDamage(Mob attacker, DamageHitInfo hit) {
    bool ret = questinterfacePINVOKE.Mob_AvoidDamage(swigCPtr, Mob.getCPtr(attacker), DamageHitInfo.getCPtr(hit));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int compute_tohit(SWIGTYPE_p_EQ__skills__SkillType skillinuse) {
    int ret = questinterfacePINVOKE.Mob_compute_tohit(swigCPtr, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skillinuse));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetTotalToHit(SWIGTYPE_p_EQ__skills__SkillType skill, int chance_mod) {
    int ret = questinterfacePINVOKE.Mob_GetTotalToHit(swigCPtr, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skill), chance_mod);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int compute_defense() {
    int ret = questinterfacePINVOKE.Mob_compute_defense(swigCPtr);
    return ret;
  }

  public int GetTotalDefense() {
    int ret = questinterfacePINVOKE.Mob_GetTotalDefense(swigCPtr);
    return ret;
  }

  public bool CheckHitChance(Mob attacker, DamageHitInfo hit) {
    bool ret = questinterfacePINVOKE.Mob_CheckHitChance(swigCPtr, Mob.getCPtr(attacker), DamageHitInfo.getCPtr(hit));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void TryCriticalHit(Mob defender, DamageHitInfo hit, ExtraAttackOptions opts) {
    questinterfacePINVOKE.Mob_TryCriticalHit__SWIG_0(swigCPtr, Mob.getCPtr(defender), DamageHitInfo.getCPtr(hit), ExtraAttackOptions.getCPtr(opts));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void TryCriticalHit(Mob defender, DamageHitInfo hit) {
    questinterfacePINVOKE.Mob_TryCriticalHit__SWIG_1(swigCPtr, Mob.getCPtr(defender), DamageHitInfo.getCPtr(hit));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void TryPetCriticalHit(Mob defender, DamageHitInfo hit) {
    questinterfacePINVOKE.Mob_TryPetCriticalHit(swigCPtr, Mob.getCPtr(defender), DamageHitInfo.getCPtr(hit));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool TryFinishingBlow(Mob defender, SWIGTYPE_p_long_long damage) {
    bool ret = questinterfacePINVOKE.Mob_TryFinishingBlow(swigCPtr, Mob.getCPtr(defender), SWIGTYPE_p_long_long.getCPtr(damage));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int TryHeadShot(Mob defender, SWIGTYPE_p_EQ__skills__SkillType skillInUse) {
    int ret = questinterfacePINVOKE.Mob_TryHeadShot(swigCPtr, Mob.getCPtr(defender), SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skillInUse));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int TryAssassinate(Mob defender, SWIGTYPE_p_EQ__skills__SkillType skillInUse) {
    int ret = questinterfacePINVOKE.Mob_TryAssassinate(swigCPtr, Mob.getCPtr(defender), SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skillInUse));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void DoRiposte(Mob defender) {
    questinterfacePINVOKE.Mob_DoRiposte(swigCPtr, Mob.getCPtr(defender));
  }

  public void ApplyMeleeDamageMods(ushort skill, SWIGTYPE_p_long_long damage, Mob defender, ExtraAttackOptions opts) {
    questinterfacePINVOKE.Mob_ApplyMeleeDamageMods__SWIG_0(swigCPtr, skill, SWIGTYPE_p_long_long.getCPtr(damage), Mob.getCPtr(defender), ExtraAttackOptions.getCPtr(opts));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ApplyMeleeDamageMods(ushort skill, SWIGTYPE_p_long_long damage, Mob defender) {
    questinterfacePINVOKE.Mob_ApplyMeleeDamageMods__SWIG_1(swigCPtr, skill, SWIGTYPE_p_long_long.getCPtr(damage), Mob.getCPtr(defender));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ApplyMeleeDamageMods(ushort skill, SWIGTYPE_p_long_long damage) {
    questinterfacePINVOKE.Mob_ApplyMeleeDamageMods__SWIG_2(swigCPtr, skill, SWIGTYPE_p_long_long.getCPtr(damage));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public int ACSum(bool skip_caps) {
    int ret = questinterfacePINVOKE.Mob_ACSum__SWIG_0(swigCPtr, skip_caps);
    return ret;
  }

  public int ACSum() {
    int ret = questinterfacePINVOKE.Mob_ACSum__SWIG_1(swigCPtr);
    return ret;
  }

  public int GetDisplayAC() {
    int ret = questinterfacePINVOKE.Mob_GetDisplayAC(swigCPtr);
    return ret;
  }

  public int offense(SWIGTYPE_p_EQ__skills__SkillType skill) {
    int ret = questinterfacePINVOKE.Mob_offense(swigCPtr, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skill));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetBestMeleeSkill() {
    int ret = questinterfacePINVOKE.Mob_GetBestMeleeSkill(swigCPtr);
    return ret;
  }

  public void CalcAC() {
    questinterfacePINVOKE.Mob_CalcAC(swigCPtr);
  }

  public int GetACSoftcap() {
    int ret = questinterfacePINVOKE.Mob_GetACSoftcap(swigCPtr);
    return ret;
  }

  public double GetSoftcapReturns() {
    double ret = questinterfacePINVOKE.Mob_GetSoftcapReturns(swigCPtr);
    return ret;
  }

  public int GetClassRaceACBonus() {
    int ret = questinterfacePINVOKE.Mob_GetClassRaceACBonus(swigCPtr);
    return ret;
  }

  public int GetMitigationAC() {
    int ret = questinterfacePINVOKE.Mob_GetMitigationAC(swigCPtr);
    return ret;
  }

  public void MeleeMitigation(Mob attacker, DamageHitInfo hit, ExtraAttackOptions opts) {
    questinterfacePINVOKE.Mob_MeleeMitigation__SWIG_0(swigCPtr, Mob.getCPtr(attacker), DamageHitInfo.getCPtr(hit), ExtraAttackOptions.getCPtr(opts));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void MeleeMitigation(Mob attacker, DamageHitInfo hit) {
    questinterfacePINVOKE.Mob_MeleeMitigation__SWIG_1(swigCPtr, Mob.getCPtr(attacker), DamageHitInfo.getCPtr(hit));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public double RollD20(int offense, int mitigation) {
    double ret = questinterfacePINVOKE.Mob_RollD20(swigCPtr, offense, mitigation);
    return ret;
  }

  public bool CombatRange(Mob other, float fixed_size_mod, bool aeRampage, ExtraAttackOptions opts) {
    bool ret = questinterfacePINVOKE.Mob_CombatRange__SWIG_0(swigCPtr, Mob.getCPtr(other), fixed_size_mod, aeRampage, ExtraAttackOptions.getCPtr(opts));
    return ret;
  }

  public bool CombatRange(Mob other, float fixed_size_mod, bool aeRampage) {
    bool ret = questinterfacePINVOKE.Mob_CombatRange__SWIG_1(swigCPtr, Mob.getCPtr(other), fixed_size_mod, aeRampage);
    return ret;
  }

  public bool CombatRange(Mob other, float fixed_size_mod) {
    bool ret = questinterfacePINVOKE.Mob_CombatRange__SWIG_2(swigCPtr, Mob.getCPtr(other), fixed_size_mod);
    return ret;
  }

  public bool CombatRange(Mob other) {
    bool ret = questinterfacePINVOKE.Mob_CombatRange__SWIG_3(swigCPtr, Mob.getCPtr(other));
    return ret;
  }

  public virtual bool IsBerserk() {
    bool ret = questinterfacePINVOKE.Mob_IsBerserk(swigCPtr);
    return ret;
  }

  public void RogueEvade(Mob other) {
    questinterfacePINVOKE.Mob_RogueEvade(swigCPtr, Mob.getCPtr(other));
  }

  public void CommonOutgoingHitSuccess(Mob defender, DamageHitInfo hit, ExtraAttackOptions opts) {
    questinterfacePINVOKE.Mob_CommonOutgoingHitSuccess__SWIG_0(swigCPtr, Mob.getCPtr(defender), DamageHitInfo.getCPtr(hit), ExtraAttackOptions.getCPtr(opts));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void CommonOutgoingHitSuccess(Mob defender, DamageHitInfo hit) {
    questinterfacePINVOKE.Mob_CommonOutgoingHitSuccess__SWIG_1(swigCPtr, Mob.getCPtr(defender), DamageHitInfo.getCPtr(hit));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool HasDied() {
    bool ret = questinterfacePINVOKE.Mob_HasDied(swigCPtr);
    return ret;
  }

  public virtual bool CheckDualWield() {
    bool ret = questinterfacePINVOKE.Mob_CheckDualWield(swigCPtr);
    return ret;
  }

  public void DoMainHandAttackRounds(Mob target, ExtraAttackOptions opts, bool rampage) {
    questinterfacePINVOKE.Mob_DoMainHandAttackRounds__SWIG_0(swigCPtr, Mob.getCPtr(target), ExtraAttackOptions.getCPtr(opts), rampage);
  }

  public void DoMainHandAttackRounds(Mob target, ExtraAttackOptions opts) {
    questinterfacePINVOKE.Mob_DoMainHandAttackRounds__SWIG_1(swigCPtr, Mob.getCPtr(target), ExtraAttackOptions.getCPtr(opts));
  }

  public void DoMainHandAttackRounds(Mob target) {
    questinterfacePINVOKE.Mob_DoMainHandAttackRounds__SWIG_2(swigCPtr, Mob.getCPtr(target));
  }

  public void DoOffHandAttackRounds(Mob target, ExtraAttackOptions opts, bool rampage) {
    questinterfacePINVOKE.Mob_DoOffHandAttackRounds__SWIG_0(swigCPtr, Mob.getCPtr(target), ExtraAttackOptions.getCPtr(opts), rampage);
  }

  public void DoOffHandAttackRounds(Mob target, ExtraAttackOptions opts) {
    questinterfacePINVOKE.Mob_DoOffHandAttackRounds__SWIG_1(swigCPtr, Mob.getCPtr(target), ExtraAttackOptions.getCPtr(opts));
  }

  public void DoOffHandAttackRounds(Mob target) {
    questinterfacePINVOKE.Mob_DoOffHandAttackRounds__SWIG_2(swigCPtr, Mob.getCPtr(target));
  }

  public virtual bool CheckDoubleAttack() {
    bool ret = questinterfacePINVOKE.Mob_CheckDoubleAttack(swigCPtr);
    return ret;
  }

  public void ProcessAttackRounds(Mob target, ExtraAttackOptions opts, bool rampage) {
    questinterfacePINVOKE.Mob_ProcessAttackRounds__SWIG_0(swigCPtr, Mob.getCPtr(target), ExtraAttackOptions.getCPtr(opts), rampage);
  }

  public void ProcessAttackRounds(Mob target, ExtraAttackOptions opts) {
    questinterfacePINVOKE.Mob_ProcessAttackRounds__SWIG_1(swigCPtr, Mob.getCPtr(target), ExtraAttackOptions.getCPtr(opts));
  }

  public void ProcessAttackRounds(Mob target) {
    questinterfacePINVOKE.Mob_ProcessAttackRounds__SWIG_2(swigCPtr, Mob.getCPtr(target));
  }

  public bool HasAnInvisibilityEffect() {
    bool ret = questinterfacePINVOKE.Mob_HasAnInvisibilityEffect(swigCPtr);
    return ret;
  }

  public void BreakCharmPetIfConditionsMet() {
    questinterfacePINVOKE.Mob_BreakCharmPetIfConditionsMet(swigCPtr);
  }

  public bool IsInvisible(Mob other) {
    bool ret = questinterfacePINVOKE.Mob_IsInvisible__SWIG_0(swigCPtr, Mob.getCPtr(other));
    return ret;
  }

  public bool IsInvisible() {
    bool ret = questinterfacePINVOKE.Mob_IsInvisible__SWIG_1(swigCPtr);
    return ret;
  }

  public void SetInvisible(byte state, bool set_on_bonus_calc) {
    questinterfacePINVOKE.Mob_SetInvisible__SWIG_0(swigCPtr, state, set_on_bonus_calc);
  }

  public void SetInvisible(byte state) {
    questinterfacePINVOKE.Mob_SetInvisible__SWIG_1(swigCPtr, state);
  }

  public void CalcSeeInvisibleLevel() {
    questinterfacePINVOKE.Mob_CalcSeeInvisibleLevel(swigCPtr);
  }

  public void CalcInvisibleLevel() {
    questinterfacePINVOKE.Mob_CalcInvisibleLevel(swigCPtr);
  }

  public void ZeroInvisibleVars(byte invisible_type) {
    questinterfacePINVOKE.Mob_ZeroInvisibleVars(swigCPtr, invisible_type);
  }

  public void BreakInvisibleSpells() {
    questinterfacePINVOKE.Mob_BreakInvisibleSpells(swigCPtr);
  }

  public virtual void CancelSneakHide() {
    questinterfacePINVOKE.Mob_CancelSneakHide(swigCPtr);
  }

  public void CommonBreakInvisible() {
    questinterfacePINVOKE.Mob_CommonBreakInvisible(swigCPtr);
  }

  public void CommonBreakInvisibleFromCombat() {
    questinterfacePINVOKE.Mob_CommonBreakInvisibleFromCombat(swigCPtr);
  }

  public byte GetInvisibleLevel() {
    byte ret = questinterfacePINVOKE.Mob_GetInvisibleLevel(swigCPtr);
    return ret;
  }

  public byte GetInvisibleUndeadLevel() {
    byte ret = questinterfacePINVOKE.Mob_GetInvisibleUndeadLevel(swigCPtr);
    return ret;
  }

  public bool SeeHide() {
    bool ret = questinterfacePINVOKE.Mob_SeeHide(swigCPtr);
    return ret;
  }

  public bool SeeImprovedHide() {
    bool ret = questinterfacePINVOKE.Mob_SeeImprovedHide(swigCPtr);
    return ret;
  }

  public byte SeeInvisibleUndead() {
    byte ret = questinterfacePINVOKE.Mob_SeeInvisibleUndead(swigCPtr);
    return ret;
  }

  public byte SeeInvisible() {
    byte ret = questinterfacePINVOKE.Mob_SeeInvisible(swigCPtr);
    return ret;
  }

  public void SetInnateSeeInvisible(byte val) {
    questinterfacePINVOKE.Mob_SetInnateSeeInvisible(swigCPtr, val);
  }

  public void SetSeeInvisibleUndead(byte val) {
    questinterfacePINVOKE.Mob_SetSeeInvisibleUndead(swigCPtr, val);
  }

  public uint tmHidden {
    set {
      questinterfacePINVOKE.Mob_tmHidden_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.Mob_tmHidden_get(swigCPtr);
      return ret;
    } 
  }

  public byte invisible {
    set {
      questinterfacePINVOKE.Mob_invisible_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.Mob_invisible_get(swigCPtr);
      return ret;
    } 
  }

  public byte nobuff_invisible {
    set {
      questinterfacePINVOKE.Mob_nobuff_invisible_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.Mob_nobuff_invisible_get(swigCPtr);
      return ret;
    } 
  }

  public byte invisible_undead {
    set {
      questinterfacePINVOKE.Mob_invisible_undead_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.Mob_invisible_undead_get(swigCPtr);
      return ret;
    } 
  }

  public byte invisible_animals {
    set {
      questinterfacePINVOKE.Mob_invisible_animals_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.Mob_invisible_animals_get(swigCPtr);
      return ret;
    } 
  }

  public byte see_invis {
    set {
      questinterfacePINVOKE.Mob_see_invis_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.Mob_see_invis_get(swigCPtr);
      return ret;
    } 
  }

  public byte innate_see_invis {
    set {
      questinterfacePINVOKE.Mob_innate_see_invis_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.Mob_innate_see_invis_get(swigCPtr);
      return ret;
    } 
  }

  public byte see_invis_undead {
    set {
      questinterfacePINVOKE.Mob_see_invis_undead_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.Mob_see_invis_undead_get(swigCPtr);
      return ret;
    } 
  }

  public bool sneaking {
    set {
      questinterfacePINVOKE.Mob_sneaking_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.Mob_sneaking_get(swigCPtr);
      return ret;
    } 
  }

  public bool hidden {
    set {
      questinterfacePINVOKE.Mob_hidden_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.Mob_hidden_get(swigCPtr);
      return ret;
    } 
  }

  public bool improved_hidden {
    set {
      questinterfacePINVOKE.Mob_improved_hidden_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.Mob_improved_hidden_get(swigCPtr);
      return ret;
    } 
  }

  public bool see_hide {
    set {
      questinterfacePINVOKE.Mob_see_hide_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.Mob_see_hide_get(swigCPtr);
      return ret;
    } 
  }

  public bool see_improved_hide {
    set {
      questinterfacePINVOKE.Mob_see_improved_hide_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.Mob_see_improved_hide_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_EQ__InternalTextureProfile mob_texture_profile {
    set {
      questinterfacePINVOKE.Mob_mob_texture_profile_set(swigCPtr, SWIGTYPE_p_EQ__InternalTextureProfile.getCPtr(value));
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_EQ__InternalTextureProfile ret = new SWIGTYPE_p_EQ__InternalTextureProfile(questinterfacePINVOKE.Mob_mob_texture_profile_get(swigCPtr), true);
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_EQ__skills__SkillType AttackAnimation(int Hand, SWIGTYPE_p_EQ__ItemInstance weapon, SWIGTYPE_p_EQ__skills__SkillType skillinuse) {
    SWIGTYPE_p_EQ__skills__SkillType ret = new SWIGTYPE_p_EQ__skills__SkillType(questinterfacePINVOKE.Mob_AttackAnimation__SWIG_0(swigCPtr, Hand, SWIGTYPE_p_EQ__ItemInstance.getCPtr(weapon), SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skillinuse)), true);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_EQ__skills__SkillType AttackAnimation(int Hand, SWIGTYPE_p_EQ__ItemInstance weapon) {
    SWIGTYPE_p_EQ__skills__SkillType ret = new SWIGTYPE_p_EQ__skills__SkillType(questinterfacePINVOKE.Mob_AttackAnimation__SWIG_1(swigCPtr, Hand, SWIGTYPE_p_EQ__ItemInstance.getCPtr(weapon)), true);
    return ret;
  }

  public uint GetTextureProfileMaterial(byte material_slot) {
    uint ret = questinterfacePINVOKE.Mob_GetTextureProfileMaterial(swigCPtr, material_slot);
    return ret;
  }

  public uint GetTextureProfileColor(byte material_slot) {
    uint ret = questinterfacePINVOKE.Mob_GetTextureProfileColor(swigCPtr, material_slot);
    return ret;
  }

  public uint GetTextureProfileHeroForgeModel(byte material_slot) {
    uint ret = questinterfacePINVOKE.Mob_GetTextureProfileHeroForgeModel(swigCPtr, material_slot);
    return ret;
  }

  public virtual void SendArmorAppearance(Client one_client) {
    questinterfacePINVOKE.Mob_SendArmorAppearance__SWIG_0(swigCPtr, Client.getCPtr(one_client));
  }

  public virtual void SendArmorAppearance() {
    questinterfacePINVOKE.Mob_SendArmorAppearance__SWIG_1(swigCPtr);
  }

  public virtual void SendTextureWC(byte slot, uint texture, uint hero_forge_model, uint elite_material, uint unknown06, uint unknown18) {
    questinterfacePINVOKE.Mob_SendTextureWC__SWIG_0(swigCPtr, slot, texture, hero_forge_model, elite_material, unknown06, unknown18);
  }

  public virtual void SendTextureWC(byte slot, uint texture, uint hero_forge_model, uint elite_material, uint unknown06) {
    questinterfacePINVOKE.Mob_SendTextureWC__SWIG_1(swigCPtr, slot, texture, hero_forge_model, elite_material, unknown06);
  }

  public virtual void SendTextureWC(byte slot, uint texture, uint hero_forge_model, uint elite_material) {
    questinterfacePINVOKE.Mob_SendTextureWC__SWIG_2(swigCPtr, slot, texture, hero_forge_model, elite_material);
  }

  public virtual void SendTextureWC(byte slot, uint texture, uint hero_forge_model) {
    questinterfacePINVOKE.Mob_SendTextureWC__SWIG_3(swigCPtr, slot, texture, hero_forge_model);
  }

  public virtual void SendTextureWC(byte slot, uint texture) {
    questinterfacePINVOKE.Mob_SendTextureWC__SWIG_4(swigCPtr, slot, texture);
  }

  public virtual void SendWearChange(byte material_slot, Client one_client) {
    questinterfacePINVOKE.Mob_SendWearChange__SWIG_0(swigCPtr, material_slot, Client.getCPtr(one_client));
  }

  public virtual void SendWearChange(byte material_slot) {
    questinterfacePINVOKE.Mob_SendWearChange__SWIG_1(swigCPtr, material_slot);
  }

  public virtual void SetSlotTint(byte material_slot, byte red_tint, byte green_tint, byte blue_tint) {
    questinterfacePINVOKE.Mob_SetSlotTint(swigCPtr, material_slot, red_tint, green_tint, blue_tint);
  }

  public virtual void WearChange(byte material_slot, uint texture, uint color, uint hero_forge_model) {
    questinterfacePINVOKE.Mob_WearChange__SWIG_0(swigCPtr, material_slot, texture, color, hero_forge_model);
  }

  public virtual void WearChange(byte material_slot, uint texture, uint color) {
    questinterfacePINVOKE.Mob_WearChange__SWIG_1(swigCPtr, material_slot, texture, color);
  }

  public virtual void WearChange(byte material_slot, uint texture) {
    questinterfacePINVOKE.Mob_WearChange__SWIG_2(swigCPtr, material_slot, texture);
  }

  public void ChangeSize(float in_size, bool unrestricted) {
    questinterfacePINVOKE.Mob_ChangeSize__SWIG_0(swigCPtr, in_size, unrestricted);
  }

  public void ChangeSize(float in_size) {
    questinterfacePINVOKE.Mob_ChangeSize__SWIG_1(swigCPtr, in_size);
  }

  public void DoAnim(int animation_id, int animation_speed, bool ackreq, SWIGTYPE_p_eqFilterType filter) {
    questinterfacePINVOKE.Mob_DoAnim__SWIG_0(swigCPtr, animation_id, animation_speed, ackreq, SWIGTYPE_p_eqFilterType.getCPtr(filter));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void DoAnim(int animation_id, int animation_speed, bool ackreq) {
    questinterfacePINVOKE.Mob_DoAnim__SWIG_1(swigCPtr, animation_id, animation_speed, ackreq);
  }

  public void DoAnim(int animation_id, int animation_speed) {
    questinterfacePINVOKE.Mob_DoAnim__SWIG_2(swigCPtr, animation_id, animation_speed);
  }

  public void DoAnim(int animation_id) {
    questinterfacePINVOKE.Mob_DoAnim__SWIG_3(swigCPtr, animation_id);
  }

  public void ProjectileAnimation(Mob to, int item_id, bool IsArrow, float speed, float angle, float tilt, float arc, string IDFile, SWIGTYPE_p_EQ__skills__SkillType skillInUse) {
    questinterfacePINVOKE.Mob_ProjectileAnimation__SWIG_0(swigCPtr, Mob.getCPtr(to), item_id, IsArrow, speed, angle, tilt, arc, IDFile, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skillInUse));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ProjectileAnimation(Mob to, int item_id, bool IsArrow, float speed, float angle, float tilt, float arc, string IDFile) {
    questinterfacePINVOKE.Mob_ProjectileAnimation__SWIG_1(swigCPtr, Mob.getCPtr(to), item_id, IsArrow, speed, angle, tilt, arc, IDFile);
  }

  public void ProjectileAnimation(Mob to, int item_id, bool IsArrow, float speed, float angle, float tilt, float arc) {
    questinterfacePINVOKE.Mob_ProjectileAnimation__SWIG_2(swigCPtr, Mob.getCPtr(to), item_id, IsArrow, speed, angle, tilt, arc);
  }

  public void ProjectileAnimation(Mob to, int item_id, bool IsArrow, float speed, float angle, float tilt) {
    questinterfacePINVOKE.Mob_ProjectileAnimation__SWIG_3(swigCPtr, Mob.getCPtr(to), item_id, IsArrow, speed, angle, tilt);
  }

  public void ProjectileAnimation(Mob to, int item_id, bool IsArrow, float speed, float angle) {
    questinterfacePINVOKE.Mob_ProjectileAnimation__SWIG_4(swigCPtr, Mob.getCPtr(to), item_id, IsArrow, speed, angle);
  }

  public void ProjectileAnimation(Mob to, int item_id, bool IsArrow, float speed) {
    questinterfacePINVOKE.Mob_ProjectileAnimation__SWIG_5(swigCPtr, Mob.getCPtr(to), item_id, IsArrow, speed);
  }

  public void ProjectileAnimation(Mob to, int item_id, bool IsArrow) {
    questinterfacePINVOKE.Mob_ProjectileAnimation__SWIG_6(swigCPtr, Mob.getCPtr(to), item_id, IsArrow);
  }

  public void ProjectileAnimation(Mob to, int item_id) {
    questinterfacePINVOKE.Mob_ProjectileAnimation__SWIG_7(swigCPtr, Mob.getCPtr(to), item_id);
  }

  public void SendAppearanceEffect(uint parm1, uint parm2, uint parm3, uint parm4, uint parm5, Client specific_target, uint value1slot, uint value1ground, uint value2slot, uint value2ground, uint value3slot, uint value3ground, uint value4slot, uint value4ground, uint value5slot, uint value5ground) {
    questinterfacePINVOKE.Mob_SendAppearanceEffect__SWIG_0(swigCPtr, parm1, parm2, parm3, parm4, parm5, Client.getCPtr(specific_target), value1slot, value1ground, value2slot, value2ground, value3slot, value3ground, value4slot, value4ground, value5slot, value5ground);
  }

  public void SendAppearanceEffect(uint parm1, uint parm2, uint parm3, uint parm4, uint parm5, Client specific_target, uint value1slot, uint value1ground, uint value2slot, uint value2ground, uint value3slot, uint value3ground, uint value4slot, uint value4ground, uint value5slot) {
    questinterfacePINVOKE.Mob_SendAppearanceEffect__SWIG_1(swigCPtr, parm1, parm2, parm3, parm4, parm5, Client.getCPtr(specific_target), value1slot, value1ground, value2slot, value2ground, value3slot, value3ground, value4slot, value4ground, value5slot);
  }

  public void SendAppearanceEffect(uint parm1, uint parm2, uint parm3, uint parm4, uint parm5, Client specific_target, uint value1slot, uint value1ground, uint value2slot, uint value2ground, uint value3slot, uint value3ground, uint value4slot, uint value4ground) {
    questinterfacePINVOKE.Mob_SendAppearanceEffect__SWIG_2(swigCPtr, parm1, parm2, parm3, parm4, parm5, Client.getCPtr(specific_target), value1slot, value1ground, value2slot, value2ground, value3slot, value3ground, value4slot, value4ground);
  }

  public void SendAppearanceEffect(uint parm1, uint parm2, uint parm3, uint parm4, uint parm5, Client specific_target, uint value1slot, uint value1ground, uint value2slot, uint value2ground, uint value3slot, uint value3ground, uint value4slot) {
    questinterfacePINVOKE.Mob_SendAppearanceEffect__SWIG_3(swigCPtr, parm1, parm2, parm3, parm4, parm5, Client.getCPtr(specific_target), value1slot, value1ground, value2slot, value2ground, value3slot, value3ground, value4slot);
  }

  public void SendAppearanceEffect(uint parm1, uint parm2, uint parm3, uint parm4, uint parm5, Client specific_target, uint value1slot, uint value1ground, uint value2slot, uint value2ground, uint value3slot, uint value3ground) {
    questinterfacePINVOKE.Mob_SendAppearanceEffect__SWIG_4(swigCPtr, parm1, parm2, parm3, parm4, parm5, Client.getCPtr(specific_target), value1slot, value1ground, value2slot, value2ground, value3slot, value3ground);
  }

  public void SendAppearanceEffect(uint parm1, uint parm2, uint parm3, uint parm4, uint parm5, Client specific_target, uint value1slot, uint value1ground, uint value2slot, uint value2ground, uint value3slot) {
    questinterfacePINVOKE.Mob_SendAppearanceEffect__SWIG_5(swigCPtr, parm1, parm2, parm3, parm4, parm5, Client.getCPtr(specific_target), value1slot, value1ground, value2slot, value2ground, value3slot);
  }

  public void SendAppearanceEffect(uint parm1, uint parm2, uint parm3, uint parm4, uint parm5, Client specific_target, uint value1slot, uint value1ground, uint value2slot, uint value2ground) {
    questinterfacePINVOKE.Mob_SendAppearanceEffect__SWIG_6(swigCPtr, parm1, parm2, parm3, parm4, parm5, Client.getCPtr(specific_target), value1slot, value1ground, value2slot, value2ground);
  }

  public void SendAppearanceEffect(uint parm1, uint parm2, uint parm3, uint parm4, uint parm5, Client specific_target, uint value1slot, uint value1ground, uint value2slot) {
    questinterfacePINVOKE.Mob_SendAppearanceEffect__SWIG_7(swigCPtr, parm1, parm2, parm3, parm4, parm5, Client.getCPtr(specific_target), value1slot, value1ground, value2slot);
  }

  public void SendAppearanceEffect(uint parm1, uint parm2, uint parm3, uint parm4, uint parm5, Client specific_target, uint value1slot, uint value1ground) {
    questinterfacePINVOKE.Mob_SendAppearanceEffect__SWIG_8(swigCPtr, parm1, parm2, parm3, parm4, parm5, Client.getCPtr(specific_target), value1slot, value1ground);
  }

  public void SendAppearanceEffect(uint parm1, uint parm2, uint parm3, uint parm4, uint parm5, Client specific_target, uint value1slot) {
    questinterfacePINVOKE.Mob_SendAppearanceEffect__SWIG_9(swigCPtr, parm1, parm2, parm3, parm4, parm5, Client.getCPtr(specific_target), value1slot);
  }

  public void SendAppearanceEffect(uint parm1, uint parm2, uint parm3, uint parm4, uint parm5, Client specific_target) {
    questinterfacePINVOKE.Mob_SendAppearanceEffect__SWIG_10(swigCPtr, parm1, parm2, parm3, parm4, parm5, Client.getCPtr(specific_target));
  }

  public void SendAppearanceEffect(uint parm1, uint parm2, uint parm3, uint parm4, uint parm5) {
    questinterfacePINVOKE.Mob_SendAppearanceEffect__SWIG_11(swigCPtr, parm1, parm2, parm3, parm4, parm5);
  }

  public void SendLevelAppearance() {
    questinterfacePINVOKE.Mob_SendLevelAppearance(swigCPtr);
  }

  public void SendTargetable(bool on, Client specific_target) {
    questinterfacePINVOKE.Mob_SendTargetable__SWIG_0(swigCPtr, on, Client.getCPtr(specific_target));
  }

  public void SendTargetable(bool on) {
    questinterfacePINVOKE.Mob_SendTargetable__SWIG_1(swigCPtr, on);
  }

  public void SetMobTextureProfile(byte material_slot, uint texture, uint color, uint hero_forge_model) {
    questinterfacePINVOKE.Mob_SetMobTextureProfile__SWIG_0(swigCPtr, material_slot, texture, color, hero_forge_model);
  }

  public void SetMobTextureProfile(byte material_slot, uint texture, uint color) {
    questinterfacePINVOKE.Mob_SetMobTextureProfile__SWIG_1(swigCPtr, material_slot, texture, color);
  }

  public void SetMobTextureProfile(byte material_slot, uint texture) {
    questinterfacePINVOKE.Mob_SetMobTextureProfile__SWIG_2(swigCPtr, material_slot, texture);
  }

  public void SendSpellEffect(uint effect_id, uint duration, uint finish_delay, bool zone_wide, uint unk020, bool perm_effect, Client c, uint caster_id, uint target_id) {
    questinterfacePINVOKE.Mob_SendSpellEffect__SWIG_0(swigCPtr, effect_id, duration, finish_delay, zone_wide, unk020, perm_effect, Client.getCPtr(c), caster_id, target_id);
  }

  public void SendSpellEffect(uint effect_id, uint duration, uint finish_delay, bool zone_wide, uint unk020, bool perm_effect, Client c, uint caster_id) {
    questinterfacePINVOKE.Mob_SendSpellEffect__SWIG_1(swigCPtr, effect_id, duration, finish_delay, zone_wide, unk020, perm_effect, Client.getCPtr(c), caster_id);
  }

  public void SendSpellEffect(uint effect_id, uint duration, uint finish_delay, bool zone_wide, uint unk020, bool perm_effect, Client c) {
    questinterfacePINVOKE.Mob_SendSpellEffect__SWIG_2(swigCPtr, effect_id, duration, finish_delay, zone_wide, unk020, perm_effect, Client.getCPtr(c));
  }

  public void SendSpellEffect(uint effect_id, uint duration, uint finish_delay, bool zone_wide, uint unk020, bool perm_effect) {
    questinterfacePINVOKE.Mob_SendSpellEffect__SWIG_3(swigCPtr, effect_id, duration, finish_delay, zone_wide, unk020, perm_effect);
  }

  public void SendSpellEffect(uint effect_id, uint duration, uint finish_delay, bool zone_wide, uint unk020) {
    questinterfacePINVOKE.Mob_SendSpellEffect__SWIG_4(swigCPtr, effect_id, duration, finish_delay, zone_wide, unk020);
  }

  public bool IsBeneficialAllowed(Mob target) {
    bool ret = questinterfacePINVOKE.Mob_IsBeneficialAllowed(swigCPtr, Mob.getCPtr(target));
    return ret;
  }

  public virtual int GetCasterLevel(ushort spell_id) {
    int ret = questinterfacePINVOKE.Mob_GetCasterLevel(swigCPtr, spell_id);
    return ret;
  }

  public void ApplySpellsBonuses(ushort spell_id, byte casterlevel, StatBonuses newbon, ushort casterID, byte WornType, int ticsremaining, int buffslot, int instrument_mod, bool IsAISpellEffect, ushort effect_id, int se_base, int se_limit, int se_max) {
    questinterfacePINVOKE.Mob_ApplySpellsBonuses__SWIG_0(swigCPtr, spell_id, casterlevel, StatBonuses.getCPtr(newbon), casterID, WornType, ticsremaining, buffslot, instrument_mod, IsAISpellEffect, effect_id, se_base, se_limit, se_max);
  }

  public void ApplySpellsBonuses(ushort spell_id, byte casterlevel, StatBonuses newbon, ushort casterID, byte WornType, int ticsremaining, int buffslot, int instrument_mod, bool IsAISpellEffect, ushort effect_id, int se_base, int se_limit) {
    questinterfacePINVOKE.Mob_ApplySpellsBonuses__SWIG_1(swigCPtr, spell_id, casterlevel, StatBonuses.getCPtr(newbon), casterID, WornType, ticsremaining, buffslot, instrument_mod, IsAISpellEffect, effect_id, se_base, se_limit);
  }

  public void ApplySpellsBonuses(ushort spell_id, byte casterlevel, StatBonuses newbon, ushort casterID, byte WornType, int ticsremaining, int buffslot, int instrument_mod, bool IsAISpellEffect, ushort effect_id, int se_base) {
    questinterfacePINVOKE.Mob_ApplySpellsBonuses__SWIG_2(swigCPtr, spell_id, casterlevel, StatBonuses.getCPtr(newbon), casterID, WornType, ticsremaining, buffslot, instrument_mod, IsAISpellEffect, effect_id, se_base);
  }

  public void ApplySpellsBonuses(ushort spell_id, byte casterlevel, StatBonuses newbon, ushort casterID, byte WornType, int ticsremaining, int buffslot, int instrument_mod, bool IsAISpellEffect, ushort effect_id) {
    questinterfacePINVOKE.Mob_ApplySpellsBonuses__SWIG_3(swigCPtr, spell_id, casterlevel, StatBonuses.getCPtr(newbon), casterID, WornType, ticsremaining, buffslot, instrument_mod, IsAISpellEffect, effect_id);
  }

  public void ApplySpellsBonuses(ushort spell_id, byte casterlevel, StatBonuses newbon, ushort casterID, byte WornType, int ticsremaining, int buffslot, int instrument_mod, bool IsAISpellEffect) {
    questinterfacePINVOKE.Mob_ApplySpellsBonuses__SWIG_4(swigCPtr, spell_id, casterlevel, StatBonuses.getCPtr(newbon), casterID, WornType, ticsremaining, buffslot, instrument_mod, IsAISpellEffect);
  }

  public void ApplySpellsBonuses(ushort spell_id, byte casterlevel, StatBonuses newbon, ushort casterID, byte WornType, int ticsremaining, int buffslot, int instrument_mod) {
    questinterfacePINVOKE.Mob_ApplySpellsBonuses__SWIG_5(swigCPtr, spell_id, casterlevel, StatBonuses.getCPtr(newbon), casterID, WornType, ticsremaining, buffslot, instrument_mod);
  }

  public void ApplySpellsBonuses(ushort spell_id, byte casterlevel, StatBonuses newbon, ushort casterID, byte WornType, int ticsremaining, int buffslot) {
    questinterfacePINVOKE.Mob_ApplySpellsBonuses__SWIG_6(swigCPtr, spell_id, casterlevel, StatBonuses.getCPtr(newbon), casterID, WornType, ticsremaining, buffslot);
  }

  public void ApplySpellsBonuses(ushort spell_id, byte casterlevel, StatBonuses newbon, ushort casterID, byte WornType, int ticsremaining) {
    questinterfacePINVOKE.Mob_ApplySpellsBonuses__SWIG_7(swigCPtr, spell_id, casterlevel, StatBonuses.getCPtr(newbon), casterID, WornType, ticsremaining);
  }

  public void ApplySpellsBonuses(ushort spell_id, byte casterlevel, StatBonuses newbon, ushort casterID, byte WornType) {
    questinterfacePINVOKE.Mob_ApplySpellsBonuses__SWIG_8(swigCPtr, spell_id, casterlevel, StatBonuses.getCPtr(newbon), casterID, WornType);
  }

  public void ApplySpellsBonuses(ushort spell_id, byte casterlevel, StatBonuses newbon, ushort casterID) {
    questinterfacePINVOKE.Mob_ApplySpellsBonuses__SWIG_9(swigCPtr, spell_id, casterlevel, StatBonuses.getCPtr(newbon), casterID);
  }

  public void ApplySpellsBonuses(ushort spell_id, byte casterlevel, StatBonuses newbon) {
    questinterfacePINVOKE.Mob_ApplySpellsBonuses__SWIG_10(swigCPtr, spell_id, casterlevel, StatBonuses.getCPtr(newbon));
  }

  public void NegateSpellEffectBonuses(ushort spell_id) {
    questinterfacePINVOKE.Mob_NegateSpellEffectBonuses(swigCPtr, spell_id);
  }

  public bool NegateSpellEffect(ushort spell_id, int effect_id) {
    bool ret = questinterfacePINVOKE.Mob_NegateSpellEffect(swigCPtr, spell_id, effect_id);
    return ret;
  }

  public float GetActSpellRange(ushort spell_id, float range) {
    float ret = questinterfacePINVOKE.Mob_GetActSpellRange(swigCPtr, spell_id, range);
    return ret;
  }

  public long GetActSpellDamage(ushort spell_id, long value, Mob target) {
    long ret = questinterfacePINVOKE.Mob_GetActSpellDamage__SWIG_0(swigCPtr, spell_id, value, Mob.getCPtr(target));
    return ret;
  }

  public long GetActSpellDamage(ushort spell_id, long value) {
    long ret = questinterfacePINVOKE.Mob_GetActSpellDamage__SWIG_1(swigCPtr, spell_id, value);
    return ret;
  }

  public long GetActDoTDamage(ushort spell_id, long value, Mob target, bool from_buff_tic) {
    long ret = questinterfacePINVOKE.Mob_GetActDoTDamage__SWIG_0(swigCPtr, spell_id, value, Mob.getCPtr(target), from_buff_tic);
    return ret;
  }

  public long GetActDoTDamage(ushort spell_id, long value, Mob target) {
    long ret = questinterfacePINVOKE.Mob_GetActDoTDamage__SWIG_1(swigCPtr, spell_id, value, Mob.getCPtr(target));
    return ret;
  }

  public long GetActSpellHealing(ushort spell_id, long value, Mob target, bool from_buff_tic) {
    long ret = questinterfacePINVOKE.Mob_GetActSpellHealing__SWIG_0(swigCPtr, spell_id, value, Mob.getCPtr(target), from_buff_tic);
    return ret;
  }

  public long GetActSpellHealing(ushort spell_id, long value, Mob target) {
    long ret = questinterfacePINVOKE.Mob_GetActSpellHealing__SWIG_1(swigCPtr, spell_id, value, Mob.getCPtr(target));
    return ret;
  }

  public long GetActSpellHealing(ushort spell_id, long value) {
    long ret = questinterfacePINVOKE.Mob_GetActSpellHealing__SWIG_2(swigCPtr, spell_id, value);
    return ret;
  }

  public int GetActSpellCost(ushort spell_id, int cost) {
    int ret = questinterfacePINVOKE.Mob_GetActSpellCost(swigCPtr, spell_id, cost);
    return ret;
  }

  public virtual int GetActSpellDuration(ushort spell_id, int duration) {
    int ret = questinterfacePINVOKE.Mob_GetActSpellDuration(swigCPtr, spell_id, duration);
    return ret;
  }

  public int GetActSpellCasttime(ushort spell_id, int casttime) {
    int ret = questinterfacePINVOKE.Mob_GetActSpellCasttime(swigCPtr, spell_id, casttime);
    return ret;
  }

  public virtual long GetActReflectedSpellDamage(ushort spell_id, long value, int effectiveness) {
    long ret = questinterfacePINVOKE.Mob_GetActReflectedSpellDamage(swigCPtr, spell_id, value, effectiveness);
    return ret;
  }

  public float ResistSpell(byte resist_type, ushort spell_id, Mob caster, bool use_resist_override, int resist_override, bool CharismaCheck, bool CharmTick, bool IsRoot, int level_override) {
    float ret = questinterfacePINVOKE.Mob_ResistSpell__SWIG_0(swigCPtr, resist_type, spell_id, Mob.getCPtr(caster), use_resist_override, resist_override, CharismaCheck, CharmTick, IsRoot, level_override);
    return ret;
  }

  public float ResistSpell(byte resist_type, ushort spell_id, Mob caster, bool use_resist_override, int resist_override, bool CharismaCheck, bool CharmTick, bool IsRoot) {
    float ret = questinterfacePINVOKE.Mob_ResistSpell__SWIG_1(swigCPtr, resist_type, spell_id, Mob.getCPtr(caster), use_resist_override, resist_override, CharismaCheck, CharmTick, IsRoot);
    return ret;
  }

  public float ResistSpell(byte resist_type, ushort spell_id, Mob caster, bool use_resist_override, int resist_override, bool CharismaCheck, bool CharmTick) {
    float ret = questinterfacePINVOKE.Mob_ResistSpell__SWIG_2(swigCPtr, resist_type, spell_id, Mob.getCPtr(caster), use_resist_override, resist_override, CharismaCheck, CharmTick);
    return ret;
  }

  public float ResistSpell(byte resist_type, ushort spell_id, Mob caster, bool use_resist_override, int resist_override, bool CharismaCheck) {
    float ret = questinterfacePINVOKE.Mob_ResistSpell__SWIG_3(swigCPtr, resist_type, spell_id, Mob.getCPtr(caster), use_resist_override, resist_override, CharismaCheck);
    return ret;
  }

  public float ResistSpell(byte resist_type, ushort spell_id, Mob caster, bool use_resist_override, int resist_override) {
    float ret = questinterfacePINVOKE.Mob_ResistSpell__SWIG_4(swigCPtr, resist_type, spell_id, Mob.getCPtr(caster), use_resist_override, resist_override);
    return ret;
  }

  public float ResistSpell(byte resist_type, ushort spell_id, Mob caster, bool use_resist_override) {
    float ret = questinterfacePINVOKE.Mob_ResistSpell__SWIG_5(swigCPtr, resist_type, spell_id, Mob.getCPtr(caster), use_resist_override);
    return ret;
  }

  public float ResistSpell(byte resist_type, ushort spell_id, Mob caster) {
    float ret = questinterfacePINVOKE.Mob_ResistSpell__SWIG_6(swigCPtr, resist_type, spell_id, Mob.getCPtr(caster));
    return ret;
  }

  public int GetResist(byte resist_type) {
    int ret = questinterfacePINVOKE.Mob_GetResist(swigCPtr, resist_type);
    return ret;
  }

  public int ResistPhysical(int level_diff, byte caster_level) {
    int ret = questinterfacePINVOKE.Mob_ResistPhysical(swigCPtr, level_diff, caster_level);
    return ret;
  }

  public int ResistElementalWeaponDmg(SWIGTYPE_p_EQ__ItemInstance item) {
    int ret = questinterfacePINVOKE.Mob_ResistElementalWeaponDmg(swigCPtr, SWIGTYPE_p_EQ__ItemInstance.getCPtr(item));
    return ret;
  }

  public int CheckBaneDamage(SWIGTYPE_p_EQ__ItemInstance item) {
    int ret = questinterfacePINVOKE.Mob_CheckBaneDamage(swigCPtr, SWIGTYPE_p_EQ__ItemInstance.getCPtr(item));
    return ret;
  }

  public ushort GetSpecializeSkillValue(ushort spell_id) {
    ushort ret = questinterfacePINVOKE.Mob_GetSpecializeSkillValue(swigCPtr, spell_id);
    return ret;
  }

  public void SendSpellBarDisable() {
    questinterfacePINVOKE.Mob_SendSpellBarDisable(swigCPtr);
  }

  public void SendSpellBarEnable(ushort spellid) {
    questinterfacePINVOKE.Mob_SendSpellBarEnable(swigCPtr, spellid);
  }

  public void ZeroCastingVars() {
    questinterfacePINVOKE.Mob_ZeroCastingVars(swigCPtr);
  }

  public virtual void SpellProcess() {
    questinterfacePINVOKE.Mob_SpellProcess(swigCPtr);
  }

  public virtual bool CastSpell(ushort spell_id, ushort target_id, SWIGTYPE_p_EQ__spells__CastingSlot slot, int casttime, int mana_cost, SWIGTYPE_p_unsigned_int oSpellWillFinish, uint item_slot, uint timer, uint timer_duration, SWIGTYPE_p_short resist_adjust, uint aa_id) {
    bool ret = questinterfacePINVOKE.Mob_CastSpell__SWIG_0(swigCPtr, spell_id, target_id, SWIGTYPE_p_EQ__spells__CastingSlot.getCPtr(slot), casttime, mana_cost, SWIGTYPE_p_unsigned_int.getCPtr(oSpellWillFinish), item_slot, timer, timer_duration, SWIGTYPE_p_short.getCPtr(resist_adjust), aa_id);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool CastSpell(ushort spell_id, ushort target_id, SWIGTYPE_p_EQ__spells__CastingSlot slot, int casttime, int mana_cost, SWIGTYPE_p_unsigned_int oSpellWillFinish, uint item_slot, uint timer, uint timer_duration, SWIGTYPE_p_short resist_adjust) {
    bool ret = questinterfacePINVOKE.Mob_CastSpell__SWIG_1(swigCPtr, spell_id, target_id, SWIGTYPE_p_EQ__spells__CastingSlot.getCPtr(slot), casttime, mana_cost, SWIGTYPE_p_unsigned_int.getCPtr(oSpellWillFinish), item_slot, timer, timer_duration, SWIGTYPE_p_short.getCPtr(resist_adjust));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool CastSpell(ushort spell_id, ushort target_id, SWIGTYPE_p_EQ__spells__CastingSlot slot, int casttime, int mana_cost, SWIGTYPE_p_unsigned_int oSpellWillFinish, uint item_slot, uint timer, uint timer_duration) {
    bool ret = questinterfacePINVOKE.Mob_CastSpell__SWIG_2(swigCPtr, spell_id, target_id, SWIGTYPE_p_EQ__spells__CastingSlot.getCPtr(slot), casttime, mana_cost, SWIGTYPE_p_unsigned_int.getCPtr(oSpellWillFinish), item_slot, timer, timer_duration);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool CastSpell(ushort spell_id, ushort target_id, SWIGTYPE_p_EQ__spells__CastingSlot slot, int casttime, int mana_cost, SWIGTYPE_p_unsigned_int oSpellWillFinish, uint item_slot, uint timer) {
    bool ret = questinterfacePINVOKE.Mob_CastSpell__SWIG_3(swigCPtr, spell_id, target_id, SWIGTYPE_p_EQ__spells__CastingSlot.getCPtr(slot), casttime, mana_cost, SWIGTYPE_p_unsigned_int.getCPtr(oSpellWillFinish), item_slot, timer);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool CastSpell(ushort spell_id, ushort target_id, SWIGTYPE_p_EQ__spells__CastingSlot slot, int casttime, int mana_cost, SWIGTYPE_p_unsigned_int oSpellWillFinish, uint item_slot) {
    bool ret = questinterfacePINVOKE.Mob_CastSpell__SWIG_4(swigCPtr, spell_id, target_id, SWIGTYPE_p_EQ__spells__CastingSlot.getCPtr(slot), casttime, mana_cost, SWIGTYPE_p_unsigned_int.getCPtr(oSpellWillFinish), item_slot);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool CastSpell(ushort spell_id, ushort target_id, SWIGTYPE_p_EQ__spells__CastingSlot slot, int casttime, int mana_cost, SWIGTYPE_p_unsigned_int oSpellWillFinish) {
    bool ret = questinterfacePINVOKE.Mob_CastSpell__SWIG_5(swigCPtr, spell_id, target_id, SWIGTYPE_p_EQ__spells__CastingSlot.getCPtr(slot), casttime, mana_cost, SWIGTYPE_p_unsigned_int.getCPtr(oSpellWillFinish));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool CastSpell(ushort spell_id, ushort target_id, SWIGTYPE_p_EQ__spells__CastingSlot slot, int casttime, int mana_cost) {
    bool ret = questinterfacePINVOKE.Mob_CastSpell__SWIG_6(swigCPtr, spell_id, target_id, SWIGTYPE_p_EQ__spells__CastingSlot.getCPtr(slot), casttime, mana_cost);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool CastSpell(ushort spell_id, ushort target_id, SWIGTYPE_p_EQ__spells__CastingSlot slot, int casttime) {
    bool ret = questinterfacePINVOKE.Mob_CastSpell__SWIG_7(swigCPtr, spell_id, target_id, SWIGTYPE_p_EQ__spells__CastingSlot.getCPtr(slot), casttime);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool CastSpell(ushort spell_id, ushort target_id, SWIGTYPE_p_EQ__spells__CastingSlot slot) {
    bool ret = questinterfacePINVOKE.Mob_CastSpell__SWIG_8(swigCPtr, spell_id, target_id, SWIGTYPE_p_EQ__spells__CastingSlot.getCPtr(slot));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool CastSpell(ushort spell_id, ushort target_id) {
    bool ret = questinterfacePINVOKE.Mob_CastSpell__SWIG_9(swigCPtr, spell_id, target_id);
    return ret;
  }

  public virtual bool DoCastSpell(ushort spell_id, ushort target_id, SWIGTYPE_p_EQ__spells__CastingSlot slot, int casttime, int mana_cost, SWIGTYPE_p_unsigned_int oSpellWillFinish, uint item_slot, uint timer, uint timer_duration, short resist_adjust, uint aa_id) {
    bool ret = questinterfacePINVOKE.Mob_DoCastSpell__SWIG_0(swigCPtr, spell_id, target_id, SWIGTYPE_p_EQ__spells__CastingSlot.getCPtr(slot), casttime, mana_cost, SWIGTYPE_p_unsigned_int.getCPtr(oSpellWillFinish), item_slot, timer, timer_duration, resist_adjust, aa_id);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool DoCastSpell(ushort spell_id, ushort target_id, SWIGTYPE_p_EQ__spells__CastingSlot slot, int casttime, int mana_cost, SWIGTYPE_p_unsigned_int oSpellWillFinish, uint item_slot, uint timer, uint timer_duration, short resist_adjust) {
    bool ret = questinterfacePINVOKE.Mob_DoCastSpell__SWIG_1(swigCPtr, spell_id, target_id, SWIGTYPE_p_EQ__spells__CastingSlot.getCPtr(slot), casttime, mana_cost, SWIGTYPE_p_unsigned_int.getCPtr(oSpellWillFinish), item_slot, timer, timer_duration, resist_adjust);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool DoCastSpell(ushort spell_id, ushort target_id, SWIGTYPE_p_EQ__spells__CastingSlot slot, int casttime, int mana_cost, SWIGTYPE_p_unsigned_int oSpellWillFinish, uint item_slot, uint timer, uint timer_duration) {
    bool ret = questinterfacePINVOKE.Mob_DoCastSpell__SWIG_2(swigCPtr, spell_id, target_id, SWIGTYPE_p_EQ__spells__CastingSlot.getCPtr(slot), casttime, mana_cost, SWIGTYPE_p_unsigned_int.getCPtr(oSpellWillFinish), item_slot, timer, timer_duration);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool DoCastSpell(ushort spell_id, ushort target_id, SWIGTYPE_p_EQ__spells__CastingSlot slot, int casttime, int mana_cost, SWIGTYPE_p_unsigned_int oSpellWillFinish, uint item_slot, uint timer) {
    bool ret = questinterfacePINVOKE.Mob_DoCastSpell__SWIG_3(swigCPtr, spell_id, target_id, SWIGTYPE_p_EQ__spells__CastingSlot.getCPtr(slot), casttime, mana_cost, SWIGTYPE_p_unsigned_int.getCPtr(oSpellWillFinish), item_slot, timer);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool DoCastSpell(ushort spell_id, ushort target_id, SWIGTYPE_p_EQ__spells__CastingSlot slot, int casttime, int mana_cost, SWIGTYPE_p_unsigned_int oSpellWillFinish, uint item_slot) {
    bool ret = questinterfacePINVOKE.Mob_DoCastSpell__SWIG_4(swigCPtr, spell_id, target_id, SWIGTYPE_p_EQ__spells__CastingSlot.getCPtr(slot), casttime, mana_cost, SWIGTYPE_p_unsigned_int.getCPtr(oSpellWillFinish), item_slot);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool DoCastSpell(ushort spell_id, ushort target_id, SWIGTYPE_p_EQ__spells__CastingSlot slot, int casttime, int mana_cost, SWIGTYPE_p_unsigned_int oSpellWillFinish) {
    bool ret = questinterfacePINVOKE.Mob_DoCastSpell__SWIG_5(swigCPtr, spell_id, target_id, SWIGTYPE_p_EQ__spells__CastingSlot.getCPtr(slot), casttime, mana_cost, SWIGTYPE_p_unsigned_int.getCPtr(oSpellWillFinish));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool DoCastSpell(ushort spell_id, ushort target_id, SWIGTYPE_p_EQ__spells__CastingSlot slot, int casttime, int mana_cost) {
    bool ret = questinterfacePINVOKE.Mob_DoCastSpell__SWIG_6(swigCPtr, spell_id, target_id, SWIGTYPE_p_EQ__spells__CastingSlot.getCPtr(slot), casttime, mana_cost);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool DoCastSpell(ushort spell_id, ushort target_id, SWIGTYPE_p_EQ__spells__CastingSlot slot, int casttime) {
    bool ret = questinterfacePINVOKE.Mob_DoCastSpell__SWIG_7(swigCPtr, spell_id, target_id, SWIGTYPE_p_EQ__spells__CastingSlot.getCPtr(slot), casttime);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool DoCastSpell(ushort spell_id, ushort target_id, SWIGTYPE_p_EQ__spells__CastingSlot slot) {
    bool ret = questinterfacePINVOKE.Mob_DoCastSpell__SWIG_8(swigCPtr, spell_id, target_id, SWIGTYPE_p_EQ__spells__CastingSlot.getCPtr(slot));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool DoCastSpell(ushort spell_id, ushort target_id) {
    bool ret = questinterfacePINVOKE.Mob_DoCastSpell__SWIG_9(swigCPtr, spell_id, target_id);
    return ret;
  }

  public void CastedSpellFinished(ushort spell_id, uint target_id, SWIGTYPE_p_EQ__spells__CastingSlot slot, int mana_used, uint inventory_slot, short resist_adjust) {
    questinterfacePINVOKE.Mob_CastedSpellFinished__SWIG_0(swigCPtr, spell_id, target_id, SWIGTYPE_p_EQ__spells__CastingSlot.getCPtr(slot), mana_used, inventory_slot, resist_adjust);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void CastedSpellFinished(ushort spell_id, uint target_id, SWIGTYPE_p_EQ__spells__CastingSlot slot, int mana_used, uint inventory_slot) {
    questinterfacePINVOKE.Mob_CastedSpellFinished__SWIG_1(swigCPtr, spell_id, target_id, SWIGTYPE_p_EQ__spells__CastingSlot.getCPtr(slot), mana_used, inventory_slot);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void CastedSpellFinished(ushort spell_id, uint target_id, SWIGTYPE_p_EQ__spells__CastingSlot slot, int mana_used) {
    questinterfacePINVOKE.Mob_CastedSpellFinished__SWIG_2(swigCPtr, spell_id, target_id, SWIGTYPE_p_EQ__spells__CastingSlot.getCPtr(slot), mana_used);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool SpellFinished(ushort spell_id, Mob target, SWIGTYPE_p_EQ__spells__CastingSlot slot, int mana_used, uint inventory_slot, short resist_adjust, bool isproc, int level_override, uint timer, uint timer_duration, bool from_casted_spell, uint aa_id) {
    bool ret = questinterfacePINVOKE.Mob_SpellFinished__SWIG_0(swigCPtr, spell_id, Mob.getCPtr(target), SWIGTYPE_p_EQ__spells__CastingSlot.getCPtr(slot), mana_used, inventory_slot, resist_adjust, isproc, level_override, timer, timer_duration, from_casted_spell, aa_id);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SpellFinished(ushort spell_id, Mob target, SWIGTYPE_p_EQ__spells__CastingSlot slot, int mana_used, uint inventory_slot, short resist_adjust, bool isproc, int level_override, uint timer, uint timer_duration, bool from_casted_spell) {
    bool ret = questinterfacePINVOKE.Mob_SpellFinished__SWIG_1(swigCPtr, spell_id, Mob.getCPtr(target), SWIGTYPE_p_EQ__spells__CastingSlot.getCPtr(slot), mana_used, inventory_slot, resist_adjust, isproc, level_override, timer, timer_duration, from_casted_spell);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SpellFinished(ushort spell_id, Mob target, SWIGTYPE_p_EQ__spells__CastingSlot slot, int mana_used, uint inventory_slot, short resist_adjust, bool isproc, int level_override, uint timer, uint timer_duration) {
    bool ret = questinterfacePINVOKE.Mob_SpellFinished__SWIG_2(swigCPtr, spell_id, Mob.getCPtr(target), SWIGTYPE_p_EQ__spells__CastingSlot.getCPtr(slot), mana_used, inventory_slot, resist_adjust, isproc, level_override, timer, timer_duration);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SpellFinished(ushort spell_id, Mob target, SWIGTYPE_p_EQ__spells__CastingSlot slot, int mana_used, uint inventory_slot, short resist_adjust, bool isproc, int level_override, uint timer) {
    bool ret = questinterfacePINVOKE.Mob_SpellFinished__SWIG_3(swigCPtr, spell_id, Mob.getCPtr(target), SWIGTYPE_p_EQ__spells__CastingSlot.getCPtr(slot), mana_used, inventory_slot, resist_adjust, isproc, level_override, timer);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SpellFinished(ushort spell_id, Mob target, SWIGTYPE_p_EQ__spells__CastingSlot slot, int mana_used, uint inventory_slot, short resist_adjust, bool isproc, int level_override) {
    bool ret = questinterfacePINVOKE.Mob_SpellFinished__SWIG_4(swigCPtr, spell_id, Mob.getCPtr(target), SWIGTYPE_p_EQ__spells__CastingSlot.getCPtr(slot), mana_used, inventory_slot, resist_adjust, isproc, level_override);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SpellFinished(ushort spell_id, Mob target, SWIGTYPE_p_EQ__spells__CastingSlot slot, int mana_used, uint inventory_slot, short resist_adjust, bool isproc) {
    bool ret = questinterfacePINVOKE.Mob_SpellFinished__SWIG_5(swigCPtr, spell_id, Mob.getCPtr(target), SWIGTYPE_p_EQ__spells__CastingSlot.getCPtr(slot), mana_used, inventory_slot, resist_adjust, isproc);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SpellFinished(ushort spell_id, Mob target, SWIGTYPE_p_EQ__spells__CastingSlot slot, int mana_used, uint inventory_slot, short resist_adjust) {
    bool ret = questinterfacePINVOKE.Mob_SpellFinished__SWIG_6(swigCPtr, spell_id, Mob.getCPtr(target), SWIGTYPE_p_EQ__spells__CastingSlot.getCPtr(slot), mana_used, inventory_slot, resist_adjust);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SpellFinished(ushort spell_id, Mob target, SWIGTYPE_p_EQ__spells__CastingSlot slot, int mana_used, uint inventory_slot) {
    bool ret = questinterfacePINVOKE.Mob_SpellFinished__SWIG_7(swigCPtr, spell_id, Mob.getCPtr(target), SWIGTYPE_p_EQ__spells__CastingSlot.getCPtr(slot), mana_used, inventory_slot);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SpellFinished(ushort spell_id, Mob target, SWIGTYPE_p_EQ__spells__CastingSlot slot, int mana_used) {
    bool ret = questinterfacePINVOKE.Mob_SpellFinished__SWIG_8(swigCPtr, spell_id, Mob.getCPtr(target), SWIGTYPE_p_EQ__spells__CastingSlot.getCPtr(slot), mana_used);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SpellFinished(ushort spell_id, Mob target, SWIGTYPE_p_EQ__spells__CastingSlot slot) {
    bool ret = questinterfacePINVOKE.Mob_SpellFinished__SWIG_9(swigCPtr, spell_id, Mob.getCPtr(target), SWIGTYPE_p_EQ__spells__CastingSlot.getCPtr(slot));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SpellFinished(ushort spell_id, Mob target) {
    bool ret = questinterfacePINVOKE.Mob_SpellFinished__SWIG_10(swigCPtr, spell_id, Mob.getCPtr(target));
    return ret;
  }

  public void SendBeginCast(ushort spell_id, uint casttime) {
    questinterfacePINVOKE.Mob_SendBeginCast(swigCPtr, spell_id, casttime);
  }

  public virtual bool SpellOnTarget(ushort spell_id, Mob spelltar, int reflect_effectiveness, bool use_resist_adjust, short resist_adjust, bool isproc, int level_override, int duration_override, bool disable_buff_overwrite) {
    bool ret = questinterfacePINVOKE.Mob_SpellOnTarget__SWIG_0(swigCPtr, spell_id, Mob.getCPtr(spelltar), reflect_effectiveness, use_resist_adjust, resist_adjust, isproc, level_override, duration_override, disable_buff_overwrite);
    return ret;
  }

  public virtual bool SpellOnTarget(ushort spell_id, Mob spelltar, int reflect_effectiveness, bool use_resist_adjust, short resist_adjust, bool isproc, int level_override, int duration_override) {
    bool ret = questinterfacePINVOKE.Mob_SpellOnTarget__SWIG_1(swigCPtr, spell_id, Mob.getCPtr(spelltar), reflect_effectiveness, use_resist_adjust, resist_adjust, isproc, level_override, duration_override);
    return ret;
  }

  public virtual bool SpellOnTarget(ushort spell_id, Mob spelltar, int reflect_effectiveness, bool use_resist_adjust, short resist_adjust, bool isproc, int level_override) {
    bool ret = questinterfacePINVOKE.Mob_SpellOnTarget__SWIG_2(swigCPtr, spell_id, Mob.getCPtr(spelltar), reflect_effectiveness, use_resist_adjust, resist_adjust, isproc, level_override);
    return ret;
  }

  public virtual bool SpellOnTarget(ushort spell_id, Mob spelltar, int reflect_effectiveness, bool use_resist_adjust, short resist_adjust, bool isproc) {
    bool ret = questinterfacePINVOKE.Mob_SpellOnTarget__SWIG_3(swigCPtr, spell_id, Mob.getCPtr(spelltar), reflect_effectiveness, use_resist_adjust, resist_adjust, isproc);
    return ret;
  }

  public virtual bool SpellOnTarget(ushort spell_id, Mob spelltar, int reflect_effectiveness, bool use_resist_adjust, short resist_adjust) {
    bool ret = questinterfacePINVOKE.Mob_SpellOnTarget__SWIG_4(swigCPtr, spell_id, Mob.getCPtr(spelltar), reflect_effectiveness, use_resist_adjust, resist_adjust);
    return ret;
  }

  public virtual bool SpellOnTarget(ushort spell_id, Mob spelltar, int reflect_effectiveness, bool use_resist_adjust) {
    bool ret = questinterfacePINVOKE.Mob_SpellOnTarget__SWIG_5(swigCPtr, spell_id, Mob.getCPtr(spelltar), reflect_effectiveness, use_resist_adjust);
    return ret;
  }

  public virtual bool SpellOnTarget(ushort spell_id, Mob spelltar, int reflect_effectiveness) {
    bool ret = questinterfacePINVOKE.Mob_SpellOnTarget__SWIG_6(swigCPtr, spell_id, Mob.getCPtr(spelltar), reflect_effectiveness);
    return ret;
  }

  public virtual bool SpellOnTarget(ushort spell_id, Mob spelltar) {
    bool ret = questinterfacePINVOKE.Mob_SpellOnTarget__SWIG_7(swigCPtr, spell_id, Mob.getCPtr(spelltar));
    return ret;
  }

  public virtual bool SpellEffect(Mob caster, ushort spell_id, float partial, int level_override, int reflect_effectiveness, int duration_override, bool disable_buff_overwrite) {
    bool ret = questinterfacePINVOKE.Mob_SpellEffect__SWIG_0(swigCPtr, Mob.getCPtr(caster), spell_id, partial, level_override, reflect_effectiveness, duration_override, disable_buff_overwrite);
    return ret;
  }

  public virtual bool SpellEffect(Mob caster, ushort spell_id, float partial, int level_override, int reflect_effectiveness, int duration_override) {
    bool ret = questinterfacePINVOKE.Mob_SpellEffect__SWIG_1(swigCPtr, Mob.getCPtr(caster), spell_id, partial, level_override, reflect_effectiveness, duration_override);
    return ret;
  }

  public virtual bool SpellEffect(Mob caster, ushort spell_id, float partial, int level_override, int reflect_effectiveness) {
    bool ret = questinterfacePINVOKE.Mob_SpellEffect__SWIG_2(swigCPtr, Mob.getCPtr(caster), spell_id, partial, level_override, reflect_effectiveness);
    return ret;
  }

  public virtual bool SpellEffect(Mob caster, ushort spell_id, float partial, int level_override) {
    bool ret = questinterfacePINVOKE.Mob_SpellEffect__SWIG_3(swigCPtr, Mob.getCPtr(caster), spell_id, partial, level_override);
    return ret;
  }

  public virtual bool SpellEffect(Mob caster, ushort spell_id, float partial) {
    bool ret = questinterfacePINVOKE.Mob_SpellEffect__SWIG_4(swigCPtr, Mob.getCPtr(caster), spell_id, partial);
    return ret;
  }

  public virtual bool SpellEffect(Mob caster, ushort spell_id) {
    bool ret = questinterfacePINVOKE.Mob_SpellEffect__SWIG_5(swigCPtr, Mob.getCPtr(caster), spell_id);
    return ret;
  }

  public virtual bool DetermineSpellTargets(ushort spell_id, SWIGTYPE_p_p_Mob spell_target, SWIGTYPE_p_p_Mob ae_center, SWIGTYPE_p_CastAction_type CastAction, SWIGTYPE_p_EQ__spells__CastingSlot slot, bool isproc) {
    bool ret = questinterfacePINVOKE.Mob_DetermineSpellTargets__SWIG_0(swigCPtr, spell_id, SWIGTYPE_p_p_Mob.getCPtr(spell_target), SWIGTYPE_p_p_Mob.getCPtr(ae_center), SWIGTYPE_p_CastAction_type.getCPtr(CastAction), SWIGTYPE_p_EQ__spells__CastingSlot.getCPtr(slot), isproc);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool DetermineSpellTargets(ushort spell_id, SWIGTYPE_p_p_Mob spell_target, SWIGTYPE_p_p_Mob ae_center, SWIGTYPE_p_CastAction_type CastAction, SWIGTYPE_p_EQ__spells__CastingSlot slot) {
    bool ret = questinterfacePINVOKE.Mob_DetermineSpellTargets__SWIG_1(swigCPtr, spell_id, SWIGTYPE_p_p_Mob.getCPtr(spell_target), SWIGTYPE_p_p_Mob.getCPtr(ae_center), SWIGTYPE_p_CastAction_type.getCPtr(CastAction), SWIGTYPE_p_EQ__spells__CastingSlot.getCPtr(slot));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool DoCastingChecksOnCaster(int spell_id, SWIGTYPE_p_EQ__spells__CastingSlot slot) {
    bool ret = questinterfacePINVOKE.Mob_DoCastingChecksOnCaster(swigCPtr, spell_id, SWIGTYPE_p_EQ__spells__CastingSlot.getCPtr(slot));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool DoCastingChecksZoneRestrictions(bool check_on_casting, int spell_id) {
    bool ret = questinterfacePINVOKE.Mob_DoCastingChecksZoneRestrictions(swigCPtr, check_on_casting, spell_id);
    return ret;
  }

  public bool DoCastingChecksOnTarget(bool check_on_casting, int spell_id, Mob spell_target) {
    bool ret = questinterfacePINVOKE.Mob_DoCastingChecksOnTarget(swigCPtr, check_on_casting, spell_id, Mob.getCPtr(spell_target));
    return ret;
  }

  public virtual bool CheckFizzle(ushort spell_id) {
    bool ret = questinterfacePINVOKE.Mob_CheckFizzle(swigCPtr, spell_id);
    return ret;
  }

  public virtual bool CheckSpellLevelRestriction(Mob caster, ushort spell_id) {
    bool ret = questinterfacePINVOKE.Mob_CheckSpellLevelRestriction(swigCPtr, Mob.getCPtr(caster), spell_id);
    return ret;
  }

  public virtual bool IsImmuneToSpell(ushort spell_id, Mob caster) {
    bool ret = questinterfacePINVOKE.Mob_IsImmuneToSpell(swigCPtr, spell_id, Mob.getCPtr(caster));
    return ret;
  }

  public virtual float GetAOERange(ushort spell_id) {
    float ret = questinterfacePINVOKE.Mob_GetAOERange(swigCPtr, spell_id);
    return ret;
  }

  public void InterruptSpell(ushort spellid) {
    questinterfacePINVOKE.Mob_InterruptSpell__SWIG_0(swigCPtr, spellid);
  }

  public void InterruptSpell() {
    questinterfacePINVOKE.Mob_InterruptSpell__SWIG_1(swigCPtr);
  }

  public void InterruptSpell(ushort arg0, ushort arg1, ushort spellid) {
    questinterfacePINVOKE.Mob_InterruptSpell__SWIG_2(swigCPtr, arg0, arg1, spellid);
  }

  public void InterruptSpell(ushort arg0, ushort arg1) {
    questinterfacePINVOKE.Mob_InterruptSpell__SWIG_3(swigCPtr, arg0, arg1);
  }

  public void StopCasting() {
    questinterfacePINVOKE.Mob_StopCasting(swigCPtr);
  }

  public void StopCastSpell(int spell_id, bool send_spellbar_enable) {
    questinterfacePINVOKE.Mob_StopCastSpell(swigCPtr, spell_id, send_spellbar_enable);
  }

  public bool IsCasting() {
    bool ret = questinterfacePINVOKE.Mob_IsCasting(swigCPtr);
    return ret;
  }

  public ushort CastingSpellID() {
    ushort ret = questinterfacePINVOKE.Mob_CastingSpellID(swigCPtr);
    return ret;
  }

  public bool TryDispel(byte caster_level, byte buff_level, int level_modifier) {
    bool ret = questinterfacePINVOKE.Mob_TryDispel(swigCPtr, caster_level, buff_level, level_modifier);
    return ret;
  }

  public bool TrySpellProjectile(Mob spell_target, ushort spell_id, float speed) {
    bool ret = questinterfacePINVOKE.Mob_TrySpellProjectile__SWIG_0(swigCPtr, Mob.getCPtr(spell_target), spell_id, speed);
    return ret;
  }

  public bool TrySpellProjectile(Mob spell_target, ushort spell_id) {
    bool ret = questinterfacePINVOKE.Mob_TrySpellProjectile__SWIG_1(swigCPtr, Mob.getCPtr(spell_target), spell_id);
    return ret;
  }

  public void ResourceTap(long damage, ushort spell_id) {
    questinterfacePINVOKE.Mob_ResourceTap(swigCPtr, damage, spell_id);
  }

  public void TryTriggerThreshHold(long damage, int effect_id, Mob attacker) {
    questinterfacePINVOKE.Mob_TryTriggerThreshHold(swigCPtr, damage, effect_id, Mob.getCPtr(attacker));
  }

  public void CalcDestFromHeading(float heading, float distance, float MaxZDiff, float StartX, float StartY, SWIGTYPE_p_float dX, SWIGTYPE_p_float dY, SWIGTYPE_p_float dZ) {
    questinterfacePINVOKE.Mob_CalcDestFromHeading(swigCPtr, heading, distance, MaxZDiff, StartX, StartY, SWIGTYPE_p_float.getCPtr(dX), SWIGTYPE_p_float.getCPtr(dY), SWIGTYPE_p_float.getCPtr(dZ));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void BeamDirectional(ushort spell_id, short resist_adjust) {
    questinterfacePINVOKE.Mob_BeamDirectional(swigCPtr, spell_id, resist_adjust);
  }

  public void ConeDirectional(ushort spell_id, short resist_adjust) {
    questinterfacePINVOKE.Mob_ConeDirectional(swigCPtr, spell_id, resist_adjust);
  }

  public void ApplyHealthTransferDamage(Mob caster, Mob target, ushort spell_id) {
    questinterfacePINVOKE.Mob_ApplyHealthTransferDamage(swigCPtr, Mob.getCPtr(caster), Mob.getCPtr(target), spell_id);
  }

  public void ApplySpellEffectIllusion(int spell_id, Mob caster, int buffslot, int base_, int limit, int max) {
    questinterfacePINVOKE.Mob_ApplySpellEffectIllusion(swigCPtr, spell_id, Mob.getCPtr(caster), buffslot, base_, limit, max);
  }

  public void ApplyIllusionToCorpse(int spell_id, Corpse new_corpse) {
    questinterfacePINVOKE.Mob_ApplyIllusionToCorpse(swigCPtr, spell_id, Corpse.getCPtr(new_corpse));
  }

  public void SendIllusionWearChange(Client c) {
    questinterfacePINVOKE.Mob_SendIllusionWearChange(swigCPtr, Client.getCPtr(c));
  }

  public short GetItemSlotToConsumeCharge(int spell_id, uint inventory_slot) {
    short ret = questinterfacePINVOKE.Mob_GetItemSlotToConsumeCharge(swigCPtr, spell_id, inventory_slot);
    return ret;
  }

  public bool CheckItemRaceClassDietyRestrictionsOnCast(uint inventory_slot) {
    bool ret = questinterfacePINVOKE.Mob_CheckItemRaceClassDietyRestrictionsOnCast(swigCPtr, inventory_slot);
    return ret;
  }

  public bool IsFromTriggeredSpell(SWIGTYPE_p_EQ__spells__CastingSlot slot, uint item_slot) {
    bool ret = questinterfacePINVOKE.Mob_IsFromTriggeredSpell__SWIG_0(swigCPtr, SWIGTYPE_p_EQ__spells__CastingSlot.getCPtr(slot), item_slot);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsFromTriggeredSpell(SWIGTYPE_p_EQ__spells__CastingSlot slot) {
    bool ret = questinterfacePINVOKE.Mob_IsFromTriggeredSpell__SWIG_1(swigCPtr, SWIGTYPE_p_EQ__spells__CastingSlot.getCPtr(slot));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool ApplyBardPulse(int spell_id, Mob spell_target, SWIGTYPE_p_EQ__spells__CastingSlot slot) {
    bool ret = questinterfacePINVOKE.Mob_ApplyBardPulse(swigCPtr, spell_id, Mob.getCPtr(spell_target), SWIGTYPE_p_EQ__spells__CastingSlot.getCPtr(slot));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsActiveBardSong(int spell_id) {
    bool ret = questinterfacePINVOKE.Mob_IsActiveBardSong(swigCPtr, spell_id);
    return ret;
  }

  public bool HasActiveSong() {
    bool ret = questinterfacePINVOKE.Mob_HasActiveSong(swigCPtr);
    return ret;
  }

  public void ZeroBardPulseVars() {
    questinterfacePINVOKE.Mob_ZeroBardPulseVars(swigCPtr);
  }

  public void DoBardCastingFromItemClick(bool is_casting_bard_song, uint cast_time, int spell_id, ushort target_id, SWIGTYPE_p_EQ__spells__CastingSlot slot, uint item_slot, uint recast_type, uint recast_delay) {
    questinterfacePINVOKE.Mob_DoBardCastingFromItemClick(swigCPtr, is_casting_bard_song, cast_time, spell_id, target_id, SWIGTYPE_p_EQ__spells__CastingSlot.getCPtr(slot), item_slot, recast_type, recast_delay);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool UseBardSpellLogic(ushort spell_id, int slot) {
    bool ret = questinterfacePINVOKE.Mob_UseBardSpellLogic__SWIG_0(swigCPtr, spell_id, slot);
    return ret;
  }

  public bool UseBardSpellLogic(ushort spell_id) {
    bool ret = questinterfacePINVOKE.Mob_UseBardSpellLogic__SWIG_1(swigCPtr, spell_id);
    return ret;
  }

  public bool UseBardSpellLogic() {
    bool ret = questinterfacePINVOKE.Mob_UseBardSpellLogic__SWIG_2(swigCPtr);
    return ret;
  }

  public void BuffProcess() {
    questinterfacePINVOKE.Mob_BuffProcess(swigCPtr);
  }

  public virtual void DoBuffTic(Buffs_Struct buff, int slot, Mob caster) {
    questinterfacePINVOKE.Mob_DoBuffTic__SWIG_0(swigCPtr, Buffs_Struct.getCPtr(buff), slot, Mob.getCPtr(caster));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void DoBuffTic(Buffs_Struct buff, int slot) {
    questinterfacePINVOKE.Mob_DoBuffTic__SWIG_1(swigCPtr, Buffs_Struct.getCPtr(buff), slot);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void BuffFadeBySpellID(ushort spell_id) {
    questinterfacePINVOKE.Mob_BuffFadeBySpellID(swigCPtr, spell_id);
  }

  public void BuffFadeBySpellIDAndCaster(ushort spell_id, ushort caster_id) {
    questinterfacePINVOKE.Mob_BuffFadeBySpellIDAndCaster(swigCPtr, spell_id, caster_id);
  }

  public void BuffFadeByEffect(int effect_id, int slot_to_skip) {
    questinterfacePINVOKE.Mob_BuffFadeByEffect__SWIG_0(swigCPtr, effect_id, slot_to_skip);
  }

  public void BuffFadeByEffect(int effect_id) {
    questinterfacePINVOKE.Mob_BuffFadeByEffect__SWIG_1(swigCPtr, effect_id);
  }

  public void BuffFadeAll() {
    questinterfacePINVOKE.Mob_BuffFadeAll(swigCPtr);
  }

  public void BuffFadeBeneficial() {
    questinterfacePINVOKE.Mob_BuffFadeBeneficial(swigCPtr);
  }

  public void BuffFadeNonPersistDeath() {
    questinterfacePINVOKE.Mob_BuffFadeNonPersistDeath(swigCPtr);
  }

  public void BuffFadeDetrimental() {
    questinterfacePINVOKE.Mob_BuffFadeDetrimental(swigCPtr);
  }

  public void BuffFadeBySlot(int slot, bool iRecalcBonuses) {
    questinterfacePINVOKE.Mob_BuffFadeBySlot__SWIG_0(swigCPtr, slot, iRecalcBonuses);
  }

  public void BuffFadeBySlot(int slot) {
    questinterfacePINVOKE.Mob_BuffFadeBySlot__SWIG_1(swigCPtr, slot);
  }

  public void BuffFadeDetrimentalByCaster(Mob caster) {
    questinterfacePINVOKE.Mob_BuffFadeDetrimentalByCaster(swigCPtr, Mob.getCPtr(caster));
  }

  public void BuffFadeBySitModifier() {
    questinterfacePINVOKE.Mob_BuffFadeBySitModifier(swigCPtr);
  }

  public void BuffDetachCaster(Mob caster) {
    questinterfacePINVOKE.Mob_BuffDetachCaster(swigCPtr, Mob.getCPtr(caster));
  }

  public bool IsAffectedByBuffByGlobalGroup(SWIGTYPE_p_GlobalGroup group) {
    bool ret = questinterfacePINVOKE.Mob_IsAffectedByBuffByGlobalGroup(swigCPtr, SWIGTYPE_p_GlobalGroup.getCPtr(group));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void BuffModifyDurationBySpellID(ushort spell_id, int newDuration) {
    questinterfacePINVOKE.Mob_BuffModifyDurationBySpellID(swigCPtr, spell_id, newDuration);
  }

  public int AddBuff(Mob caster, ushort spell_id, int duration, int level_override, bool disable_buff_overwrite) {
    int ret = questinterfacePINVOKE.Mob_AddBuff__SWIG_0(swigCPtr, Mob.getCPtr(caster), spell_id, duration, level_override, disable_buff_overwrite);
    return ret;
  }

  public int AddBuff(Mob caster, ushort spell_id, int duration, int level_override) {
    int ret = questinterfacePINVOKE.Mob_AddBuff__SWIG_1(swigCPtr, Mob.getCPtr(caster), spell_id, duration, level_override);
    return ret;
  }

  public int AddBuff(Mob caster, ushort spell_id, int duration) {
    int ret = questinterfacePINVOKE.Mob_AddBuff__SWIG_2(swigCPtr, Mob.getCPtr(caster), spell_id, duration);
    return ret;
  }

  public int AddBuff(Mob caster, ushort spell_id) {
    int ret = questinterfacePINVOKE.Mob_AddBuff__SWIG_3(swigCPtr, Mob.getCPtr(caster), spell_id);
    return ret;
  }

  public int CanBuffStack(ushort spellid, byte caster_level, bool iFailIfOverwrite) {
    int ret = questinterfacePINVOKE.Mob_CanBuffStack__SWIG_0(swigCPtr, spellid, caster_level, iFailIfOverwrite);
    return ret;
  }

  public int CanBuffStack(ushort spellid, byte caster_level) {
    int ret = questinterfacePINVOKE.Mob_CanBuffStack__SWIG_1(swigCPtr, spellid, caster_level);
    return ret;
  }

  public int CalcBuffDuration(Mob caster, Mob target, ushort spell_id, int caster_level_override) {
    int ret = questinterfacePINVOKE.Mob_CalcBuffDuration__SWIG_0(swigCPtr, Mob.getCPtr(caster), Mob.getCPtr(target), spell_id, caster_level_override);
    return ret;
  }

  public int CalcBuffDuration(Mob caster, Mob target, ushort spell_id) {
    int ret = questinterfacePINVOKE.Mob_CalcBuffDuration__SWIG_1(swigCPtr, Mob.getCPtr(caster), Mob.getCPtr(target), spell_id);
    return ret;
  }

  public void SendPetBuffsToClient() {
    questinterfacePINVOKE.Mob_SendPetBuffsToClient(swigCPtr);
  }

  public virtual int GetCurrentBuffSlots() {
    int ret = questinterfacePINVOKE.Mob_GetCurrentBuffSlots(swigCPtr);
    return ret;
  }

  public virtual int GetCurrentSongSlots() {
    int ret = questinterfacePINVOKE.Mob_GetCurrentSongSlots(swigCPtr);
    return ret;
  }

  public virtual int GetCurrentDiscSlots() {
    int ret = questinterfacePINVOKE.Mob_GetCurrentDiscSlots(swigCPtr);
    return ret;
  }

  public virtual int GetMaxBuffSlots() {
    int ret = questinterfacePINVOKE.Mob_GetMaxBuffSlots(swigCPtr);
    return ret;
  }

  public virtual int GetMaxSongSlots() {
    int ret = questinterfacePINVOKE.Mob_GetMaxSongSlots(swigCPtr);
    return ret;
  }

  public virtual int GetMaxDiscSlots() {
    int ret = questinterfacePINVOKE.Mob_GetMaxDiscSlots(swigCPtr);
    return ret;
  }

  public virtual int GetMaxTotalSlots() {
    int ret = questinterfacePINVOKE.Mob_GetMaxTotalSlots(swigCPtr);
    return ret;
  }

  public bool HasDiscBuff() {
    bool ret = questinterfacePINVOKE.Mob_HasDiscBuff(swigCPtr);
    return ret;
  }

  public virtual uint GetFirstBuffSlot(bool disc, bool song) {
    uint ret = questinterfacePINVOKE.Mob_GetFirstBuffSlot(swigCPtr, disc, song);
    return ret;
  }

  public virtual uint GetLastBuffSlot(bool disc, bool song) {
    uint ret = questinterfacePINVOKE.Mob_GetLastBuffSlot(swigCPtr, disc, song);
    return ret;
  }

  public virtual void InitializeBuffSlots() {
    questinterfacePINVOKE.Mob_InitializeBuffSlots(swigCPtr);
  }

  public virtual void UninitializeBuffSlots() {
    questinterfacePINVOKE.Mob_UninitializeBuffSlots(swigCPtr);
  }

  public SWIGTYPE_p_EQApplicationPacket MakeBuffsPacket(bool for_target, bool clear_buffs) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Mob_MakeBuffsPacket__SWIG_0(swigCPtr, for_target, clear_buffs);
    SWIGTYPE_p_EQApplicationPacket ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_EQApplicationPacket(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_EQApplicationPacket MakeBuffsPacket(bool for_target) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Mob_MakeBuffsPacket__SWIG_1(swigCPtr, for_target);
    SWIGTYPE_p_EQApplicationPacket ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_EQApplicationPacket(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_EQApplicationPacket MakeBuffsPacket() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Mob_MakeBuffsPacket__SWIG_2(swigCPtr);
    SWIGTYPE_p_EQApplicationPacket ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_EQApplicationPacket(cPtr, false);
    return ret;
  }

  public void SendBuffsToClient(Client c) {
    questinterfacePINVOKE.Mob_SendBuffsToClient(swigCPtr, Client.getCPtr(c));
  }

  public Buffs_Struct GetBuffs() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Mob_GetBuffs(swigCPtr);
    Buffs_Struct ret = (cPtr == global::System.IntPtr.Zero) ? null : new Buffs_Struct(cPtr, false);
    return ret;
  }

  public void DoGravityEffect() {
    questinterfacePINVOKE.Mob_DoGravityEffect(swigCPtr);
  }

  public void DamageShield(Mob other, bool spell_ds) {
    questinterfacePINVOKE.Mob_DamageShield__SWIG_0(swigCPtr, Mob.getCPtr(other), spell_ds);
  }

  public void DamageShield(Mob other) {
    questinterfacePINVOKE.Mob_DamageShield__SWIG_1(swigCPtr, Mob.getCPtr(other));
  }

  public int RuneAbsorb(long damage, ushort type) {
    int ret = questinterfacePINVOKE.Mob_RuneAbsorb(swigCPtr, damage, type);
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_unsigned_short_t GetBuffSpellIDs() {
    SWIGTYPE_p_std__vectorT_unsigned_short_t ret = new SWIGTYPE_p_std__vectorT_unsigned_short_t(questinterfacePINVOKE.Mob_GetBuffSpellIDs(swigCPtr), true);
    return ret;
  }

  public bool FindBuff(ushort spell_id, ushort caster_id) {
    bool ret = questinterfacePINVOKE.Mob_FindBuff__SWIG_0(swigCPtr, spell_id, caster_id);
    return ret;
  }

  public bool FindBuff(ushort spell_id) {
    bool ret = questinterfacePINVOKE.Mob_FindBuff__SWIG_1(swigCPtr, spell_id);
    return ret;
  }

  public ushort FindBuffBySlot(int slot) {
    ushort ret = questinterfacePINVOKE.Mob_FindBuffBySlot(swigCPtr, slot);
    return ret;
  }

  public uint BuffCount(bool is_beneficial, bool is_detrimental) {
    uint ret = questinterfacePINVOKE.Mob_BuffCount__SWIG_0(swigCPtr, is_beneficial, is_detrimental);
    return ret;
  }

  public uint BuffCount(bool is_beneficial) {
    uint ret = questinterfacePINVOKE.Mob_BuffCount__SWIG_1(swigCPtr, is_beneficial);
    return ret;
  }

  public uint BuffCount() {
    uint ret = questinterfacePINVOKE.Mob_BuffCount__SWIG_2(swigCPtr);
    return ret;
  }

  public bool FindType(ushort type, bool bOffensive, ushort threshold) {
    bool ret = questinterfacePINVOKE.Mob_FindType__SWIG_0(swigCPtr, type, bOffensive, threshold);
    return ret;
  }

  public bool FindType(ushort type, bool bOffensive) {
    bool ret = questinterfacePINVOKE.Mob_FindType__SWIG_1(swigCPtr, type, bOffensive);
    return ret;
  }

  public bool FindType(ushort type) {
    bool ret = questinterfacePINVOKE.Mob_FindType__SWIG_2(swigCPtr, type);
    return ret;
  }

  public short GetBuffSlotFromType(ushort type) {
    short ret = questinterfacePINVOKE.Mob_GetBuffSlotFromType(swigCPtr, type);
    return ret;
  }

  public ushort GetSpellIDFromSlot(byte slot) {
    ushort ret = questinterfacePINVOKE.Mob_GetSpellIDFromSlot(swigCPtr, slot);
    return ret;
  }

  public int CountDispellableBuffs() {
    int ret = questinterfacePINVOKE.Mob_CountDispellableBuffs(swigCPtr);
    return ret;
  }

  public void CheckNumHitsRemaining(NumHit type, int buff_slot, ushort spell_id) {
    questinterfacePINVOKE.Mob_CheckNumHitsRemaining__SWIG_0(swigCPtr, (int)type, buff_slot, spell_id);
  }

  public void CheckNumHitsRemaining(NumHit type, int buff_slot) {
    questinterfacePINVOKE.Mob_CheckNumHitsRemaining__SWIG_1(swigCPtr, (int)type, buff_slot);
  }

  public void CheckNumHitsRemaining(NumHit type) {
    questinterfacePINVOKE.Mob_CheckNumHitsRemaining__SWIG_2(swigCPtr, (int)type);
  }

  public bool HasNumhits() {
    bool ret = questinterfacePINVOKE.Mob_HasNumhits(swigCPtr);
    return ret;
  }

  public void Numhits(bool val) {
    questinterfacePINVOKE.Mob_Numhits(swigCPtr, val);
  }

  public bool HasMGB() {
    bool ret = questinterfacePINVOKE.Mob_HasMGB(swigCPtr);
    return ret;
  }

  public void SetMGB(bool val) {
    questinterfacePINVOKE.Mob_SetMGB(swigCPtr, val);
  }

  public bool HasProjectIllusion() {
    bool ret = questinterfacePINVOKE.Mob_HasProjectIllusion(swigCPtr);
    return ret;
  }

  public void SetProjectIllusion(bool val) {
    questinterfacePINVOKE.Mob_SetProjectIllusion(swigCPtr, val);
  }

  public bool IsNimbusEffectActive(uint nimbus_effect) {
    bool ret = questinterfacePINVOKE.Mob_IsNimbusEffectActive(swigCPtr, nimbus_effect);
    return ret;
  }

  public void SetNimbusEffect(uint nimbus_effect) {
    questinterfacePINVOKE.Mob_SetNimbusEffect(swigCPtr, nimbus_effect);
  }

  public virtual uint GetNimbusEffect1() {
    uint ret = questinterfacePINVOKE.Mob_GetNimbusEffect1(swigCPtr);
    return ret;
  }

  public virtual uint GetNimbusEffect2() {
    uint ret = questinterfacePINVOKE.Mob_GetNimbusEffect2(swigCPtr);
    return ret;
  }

  public virtual uint GetNimbusEffect3() {
    uint ret = questinterfacePINVOKE.Mob_GetNimbusEffect3(swigCPtr);
    return ret;
  }

  public void AddNimbusEffect(int effect_id) {
    questinterfacePINVOKE.Mob_AddNimbusEffect(swigCPtr, effect_id);
  }

  public void RemoveNimbusEffect(int effect_id) {
    questinterfacePINVOKE.Mob_RemoveNimbusEffect(swigCPtr, effect_id);
  }

  public void RemoveAllNimbusEffects() {
    questinterfacePINVOKE.Mob_RemoveAllNimbusEffects(swigCPtr);
  }

  public SWIGTYPE_p_glm__vec3 GetTargetRingLocation() {
    SWIGTYPE_p_glm__vec3 ret = new SWIGTYPE_p_glm__vec3(questinterfacePINVOKE.Mob_GetTargetRingLocation(swigCPtr), false);
    return ret;
  }

  public float GetTargetRingX() {
    float ret = questinterfacePINVOKE.Mob_GetTargetRingX(swigCPtr);
    return ret;
  }

  public float GetTargetRingY() {
    float ret = questinterfacePINVOKE.Mob_GetTargetRingY(swigCPtr);
    return ret;
  }

  public float GetTargetRingZ() {
    float ret = questinterfacePINVOKE.Mob_GetTargetRingZ(swigCPtr);
    return ret;
  }

  public bool HasEndurUpkeep() {
    bool ret = questinterfacePINVOKE.Mob_HasEndurUpkeep(swigCPtr);
    return ret;
  }

  public void SetEndurUpkeep(bool val) {
    questinterfacePINVOKE.Mob_SetEndurUpkeep(swigCPtr, val);
  }

  public bool HasBuffWithSpellGroup(int spell_group) {
    bool ret = questinterfacePINVOKE.Mob_HasBuffWithSpellGroup(swigCPtr, spell_group);
    return ret;
  }

  public void SetAppearanceEffects(int slot, int value) {
    questinterfacePINVOKE.Mob_SetAppearanceEffects(swigCPtr, slot, value);
  }

  public void ListAppearanceEffects(Client c) {
    questinterfacePINVOKE.Mob_ListAppearanceEffects(swigCPtr, Client.getCPtr(c));
  }

  public void ClearAppearanceEffects() {
    questinterfacePINVOKE.Mob_ClearAppearanceEffects(swigCPtr);
  }

  public void SendSavedAppearanceEffects(Client receiver) {
    questinterfacePINVOKE.Mob_SendSavedAppearanceEffects(swigCPtr, Client.getCPtr(receiver));
  }

  public void SetBuffDuration(int spell_id, int duration, int level_override) {
    questinterfacePINVOKE.Mob_SetBuffDuration__SWIG_0(swigCPtr, spell_id, duration, level_override);
  }

  public void SetBuffDuration(int spell_id, int duration) {
    questinterfacePINVOKE.Mob_SetBuffDuration__SWIG_1(swigCPtr, spell_id, duration);
  }

  public void SetBuffDuration(int spell_id) {
    questinterfacePINVOKE.Mob_SetBuffDuration__SWIG_2(swigCPtr, spell_id);
  }

  public void ApplySpellBuff(int spell_id, int duration, int level_override) {
    questinterfacePINVOKE.Mob_ApplySpellBuff__SWIG_0(swigCPtr, spell_id, duration, level_override);
  }

  public void ApplySpellBuff(int spell_id, int duration) {
    questinterfacePINVOKE.Mob_ApplySpellBuff__SWIG_1(swigCPtr, spell_id, duration);
  }

  public void ApplySpellBuff(int spell_id) {
    questinterfacePINVOKE.Mob_ApplySpellBuff__SWIG_2(swigCPtr, spell_id);
  }

  public int GetBuffStatValueBySpell(int spell_id, string stat_identifier) {
    int ret = questinterfacePINVOKE.Mob_GetBuffStatValueBySpell(swigCPtr, spell_id, stat_identifier);
    return ret;
  }

  public int GetBuffStatValueBySlot(byte slot, string stat_identifier) {
    int ret = questinterfacePINVOKE.Mob_GetBuffStatValueBySlot(swigCPtr, slot, stat_identifier);
    return ret;
  }

  public virtual void SetLevel(byte in_level, bool command) {
    questinterfacePINVOKE.Mob_SetLevel__SWIG_0(swigCPtr, in_level, command);
  }

  public virtual void SetLevel(byte in_level) {
    questinterfacePINVOKE.Mob_SetLevel__SWIG_1(swigCPtr, in_level);
  }

  public void TempName(string newname) {
    questinterfacePINVOKE.Mob_TempName__SWIG_0(swigCPtr, newname);
  }

  public void TempName() {
    questinterfacePINVOKE.Mob_TempName__SWIG_1(swigCPtr);
  }

  public void SetTargetable(bool on) {
    questinterfacePINVOKE.Mob_SetTargetable(swigCPtr, on);
  }

  public bool IsTargetable() {
    bool ret = questinterfacePINVOKE.Mob_IsTargetable(swigCPtr);
    return ret;
  }

  public bool HasShieldEquipped() {
    bool ret = questinterfacePINVOKE.Mob_HasShieldEquipped(swigCPtr);
    return ret;
  }

  public void SetShieldEquipped(bool val) {
    questinterfacePINVOKE.Mob_SetShieldEquipped(swigCPtr, val);
  }

  public bool HasTwoHandBluntEquipped() {
    bool ret = questinterfacePINVOKE.Mob_HasTwoHandBluntEquipped(swigCPtr);
    return ret;
  }

  public void SetTwoHandBluntEquipped(bool val) {
    questinterfacePINVOKE.Mob_SetTwoHandBluntEquipped(swigCPtr, val);
  }

  public bool HasTwoHanderEquipped() {
    bool ret = questinterfacePINVOKE.Mob_HasTwoHanderEquipped(swigCPtr);
    return ret;
  }

  public void SetTwoHanderEquipped(bool val) {
    questinterfacePINVOKE.Mob_SetTwoHanderEquipped(swigCPtr, val);
  }

  public bool HasDualWeaponsEquipped() {
    bool ret = questinterfacePINVOKE.Mob_HasDualWeaponsEquipped(swigCPtr);
    return ret;
  }

  public bool HasBowEquipped() {
    bool ret = questinterfacePINVOKE.Mob_HasBowEquipped(swigCPtr);
    return ret;
  }

  public void SetBowEquipped(bool val) {
    questinterfacePINVOKE.Mob_SetBowEquipped(swigCPtr, val);
  }

  public bool HasArrowEquipped() {
    bool ret = questinterfacePINVOKE.Mob_HasArrowEquipped(swigCPtr);
    return ret;
  }

  public void SetArrowEquipped(bool val) {
    questinterfacePINVOKE.Mob_SetArrowEquipped(swigCPtr, val);
  }

  public bool HasBowAndArrowEquipped() {
    bool ret = questinterfacePINVOKE.Mob_HasBowAndArrowEquipped(swigCPtr);
    return ret;
  }

  public void SetDualWeaponsEquipped(bool val) {
    questinterfacePINVOKE.Mob_SetDualWeaponsEquipped(swigCPtr, val);
  }

  public bool CanFacestab() {
    bool ret = questinterfacePINVOKE.Mob_CanFacestab(swigCPtr);
    return ret;
  }

  public void SetFacestab(bool val) {
    questinterfacePINVOKE.Mob_SetFacestab(swigCPtr, val);
  }

  public virtual byte ConvertItemTypeToSkillID(byte item_type) {
    byte ret = questinterfacePINVOKE.Mob_ConvertItemTypeToSkillID(swigCPtr, item_type);
    return ret;
  }

  public virtual ushort GetSkill(SWIGTYPE_p_EQ__skills__SkillType skill_num) {
    ushort ret = questinterfacePINVOKE.Mob_GetSkill(swigCPtr, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skill_num));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint GetEquippedItemFromTextureSlot(byte material_slot) {
    uint ret = questinterfacePINVOKE.Mob_GetEquippedItemFromTextureSlot(swigCPtr, material_slot);
    return ret;
  }

  public virtual uint GetEquipmentMaterial(byte material_slot) {
    uint ret = questinterfacePINVOKE.Mob_GetEquipmentMaterial(swigCPtr, material_slot);
    return ret;
  }

  public virtual byte GetEquipmentType(byte material_slot) {
    byte ret = questinterfacePINVOKE.Mob_GetEquipmentType(swigCPtr, material_slot);
    return ret;
  }

  public virtual uint GetHerosForgeModel(byte material_slot) {
    uint ret = questinterfacePINVOKE.Mob_GetHerosForgeModel(swigCPtr, material_slot);
    return ret;
  }

  public virtual uint GetEquipmentColor(byte material_slot) {
    uint ret = questinterfacePINVOKE.Mob_GetEquipmentColor(swigCPtr, material_slot);
    return ret;
  }

  public virtual uint IsEliteMaterialItem(byte material_slot) {
    uint ret = questinterfacePINVOKE.Mob_IsEliteMaterialItem(swigCPtr, material_slot);
    return ret;
  }

  public bool CanClassEquipItem(uint item_id) {
    bool ret = questinterfacePINVOKE.Mob_CanClassEquipItem(swigCPtr, item_id);
    return ret;
  }

  public bool CanRaceEquipItem(uint item_id) {
    bool ret = questinterfacePINVOKE.Mob_CanRaceEquipItem(swigCPtr, item_id);
    return ret;
  }

  public bool AffectedBySpellExcludingSlot(int slot, int effect) {
    bool ret = questinterfacePINVOKE.Mob_AffectedBySpellExcludingSlot(swigCPtr, slot, effect);
    return ret;
  }

  public virtual bool Death(Mob killer_mob, long damage, ushort spell_id, SWIGTYPE_p_EQ__skills__SkillType attack_skill, KilledByTypes killed_by) {
    bool ret = questinterfacePINVOKE.Mob_Death__SWIG_0(swigCPtr, Mob.getCPtr(killer_mob), damage, spell_id, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(attack_skill), (int)killed_by);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool Death(Mob killer_mob, long damage, ushort spell_id, SWIGTYPE_p_EQ__skills__SkillType attack_skill) {
    bool ret = questinterfacePINVOKE.Mob_Death__SWIG_1(swigCPtr, Mob.getCPtr(killer_mob), damage, spell_id, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(attack_skill));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Damage(Mob from, long damage, ushort spell_id, SWIGTYPE_p_EQ__skills__SkillType attack_skill, bool avoidable, sbyte buffslot, bool iBuffTic, eSpecialAttacks special) {
    questinterfacePINVOKE.Mob_Damage__SWIG_0(swigCPtr, Mob.getCPtr(from), damage, spell_id, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(attack_skill), avoidable, buffslot, iBuffTic, (int)special);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Damage(Mob from, long damage, ushort spell_id, SWIGTYPE_p_EQ__skills__SkillType attack_skill, bool avoidable, sbyte buffslot, bool iBuffTic) {
    questinterfacePINVOKE.Mob_Damage__SWIG_1(swigCPtr, Mob.getCPtr(from), damage, spell_id, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(attack_skill), avoidable, buffslot, iBuffTic);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Damage(Mob from, long damage, ushort spell_id, SWIGTYPE_p_EQ__skills__SkillType attack_skill, bool avoidable, sbyte buffslot) {
    questinterfacePINVOKE.Mob_Damage__SWIG_2(swigCPtr, Mob.getCPtr(from), damage, spell_id, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(attack_skill), avoidable, buffslot);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Damage(Mob from, long damage, ushort spell_id, SWIGTYPE_p_EQ__skills__SkillType attack_skill, bool avoidable) {
    questinterfacePINVOKE.Mob_Damage__SWIG_3(swigCPtr, Mob.getCPtr(from), damage, spell_id, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(attack_skill), avoidable);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Damage(Mob from, long damage, ushort spell_id, SWIGTYPE_p_EQ__skills__SkillType attack_skill) {
    questinterfacePINVOKE.Mob_Damage__SWIG_4(swigCPtr, Mob.getCPtr(from), damage, spell_id, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(attack_skill));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetHP(long hp) {
    questinterfacePINVOKE.Mob_SetHP(swigCPtr, hp);
  }

  public void SetOOCRegen(long new_ooc_regen) {
    questinterfacePINVOKE.Mob_SetOOCRegen(swigCPtr, new_ooc_regen);
  }

  public virtual void Heal() {
    questinterfacePINVOKE.Mob_Heal(swigCPtr);
  }

  public virtual void HealDamage(ulong ammount, Mob caster, ushort spell_id) {
    questinterfacePINVOKE.Mob_HealDamage__SWIG_0(swigCPtr, ammount, Mob.getCPtr(caster), spell_id);
  }

  public virtual void HealDamage(ulong ammount, Mob caster) {
    questinterfacePINVOKE.Mob_HealDamage__SWIG_1(swigCPtr, ammount, Mob.getCPtr(caster));
  }

  public virtual void HealDamage(ulong ammount) {
    questinterfacePINVOKE.Mob_HealDamage__SWIG_2(swigCPtr, ammount);
  }

  public virtual void SetMaxHP() {
    questinterfacePINVOKE.Mob_SetMaxHP(swigCPtr);
  }

  public virtual ushort GetBaseRace() {
    ushort ret = questinterfacePINVOKE.Mob_GetBaseRace(swigCPtr);
    return ret;
  }

  public virtual byte GetBaseGender() {
    byte ret = questinterfacePINVOKE.Mob_GetBaseGender(swigCPtr);
    return ret;
  }

  public virtual ushort GetFactionRace() {
    ushort ret = questinterfacePINVOKE.Mob_GetFactionRace(swigCPtr);
    return ret;
  }

  public virtual ushort GetDeity() {
    ushort ret = questinterfacePINVOKE.Mob_GetDeity(swigCPtr);
    return ret;
  }

  public virtual SWIGTYPE_p_EQ__deity__DeityTypeBit GetDeityBit() {
    SWIGTYPE_p_EQ__deity__DeityTypeBit ret = new SWIGTYPE_p_EQ__deity__DeityTypeBit(questinterfacePINVOKE.Mob_GetDeityBit(swigCPtr), true);
    return ret;
  }

  public ushort GetRace() {
    ushort ret = questinterfacePINVOKE.Mob_GetRace(swigCPtr);
    return ret;
  }

  public ushort GetModel() {
    ushort ret = questinterfacePINVOKE.Mob_GetModel(swigCPtr);
    return ret;
  }

  public byte GetGender() {
    byte ret = questinterfacePINVOKE.Mob_GetGender(swigCPtr);
    return ret;
  }

  public byte GetTexture() {
    byte ret = questinterfacePINVOKE.Mob_GetTexture(swigCPtr);
    return ret;
  }

  public byte GetHelmTexture() {
    byte ret = questinterfacePINVOKE.Mob_GetHelmTexture(swigCPtr);
    return ret;
  }

  public byte GetHairColor() {
    byte ret = questinterfacePINVOKE.Mob_GetHairColor(swigCPtr);
    return ret;
  }

  public byte GetBeardColor() {
    byte ret = questinterfacePINVOKE.Mob_GetBeardColor(swigCPtr);
    return ret;
  }

  public byte GetEyeColor1() {
    byte ret = questinterfacePINVOKE.Mob_GetEyeColor1(swigCPtr);
    return ret;
  }

  public byte GetEyeColor2() {
    byte ret = questinterfacePINVOKE.Mob_GetEyeColor2(swigCPtr);
    return ret;
  }

  public byte GetHairStyle() {
    byte ret = questinterfacePINVOKE.Mob_GetHairStyle(swigCPtr);
    return ret;
  }

  public byte GetLuclinFace() {
    byte ret = questinterfacePINVOKE.Mob_GetLuclinFace(swigCPtr);
    return ret;
  }

  public byte GetBeard() {
    byte ret = questinterfacePINVOKE.Mob_GetBeard(swigCPtr);
    return ret;
  }

  public byte GetDrakkinHeritage() {
    byte ret = questinterfacePINVOKE.Mob_GetDrakkinHeritage(swigCPtr);
    return ret;
  }

  public byte GetDrakkinTattoo() {
    byte ret = questinterfacePINVOKE.Mob_GetDrakkinTattoo(swigCPtr);
    return ret;
  }

  public byte GetDrakkinDetails() {
    byte ret = questinterfacePINVOKE.Mob_GetDrakkinDetails(swigCPtr);
    return ret;
  }

  public void ChangeRace(ushort in_) {
    questinterfacePINVOKE.Mob_ChangeRace(swigCPtr, in_);
  }

  public void ChangeGender(byte in_) {
    questinterfacePINVOKE.Mob_ChangeGender(swigCPtr, in_);
  }

  public void ChangeTexture(byte in_) {
    questinterfacePINVOKE.Mob_ChangeTexture(swigCPtr, in_);
  }

  public void ChangeHelmTexture(byte in_) {
    questinterfacePINVOKE.Mob_ChangeHelmTexture(swigCPtr, in_);
  }

  public void ChangeHairColor(byte in_) {
    questinterfacePINVOKE.Mob_ChangeHairColor(swigCPtr, in_);
  }

  public void ChangeBeardColor(byte in_) {
    questinterfacePINVOKE.Mob_ChangeBeardColor(swigCPtr, in_);
  }

  public void ChangeEyeColor1(byte in_) {
    questinterfacePINVOKE.Mob_ChangeEyeColor1(swigCPtr, in_);
  }

  public void ChangeEyeColor2(byte in_) {
    questinterfacePINVOKE.Mob_ChangeEyeColor2(swigCPtr, in_);
  }

  public void ChangeHairStyle(byte in_) {
    questinterfacePINVOKE.Mob_ChangeHairStyle(swigCPtr, in_);
  }

  public void ChangeLuclinFace(byte in_) {
    questinterfacePINVOKE.Mob_ChangeLuclinFace(swigCPtr, in_);
  }

  public void ChangeBeard(byte in_) {
    questinterfacePINVOKE.Mob_ChangeBeard(swigCPtr, in_);
  }

  public void ChangeDrakkinHeritage(byte in_) {
    questinterfacePINVOKE.Mob_ChangeDrakkinHeritage(swigCPtr, in_);
  }

  public void ChangeDrakkinTattoo(byte in_) {
    questinterfacePINVOKE.Mob_ChangeDrakkinTattoo(swigCPtr, in_);
  }

  public void ChangeDrakkinDetails(byte in_) {
    questinterfacePINVOKE.Mob_ChangeDrakkinDetails(swigCPtr, in_);
  }

  public uint GetArmorTint(byte i) {
    uint ret = questinterfacePINVOKE.Mob_GetArmorTint(swigCPtr, i);
    return ret;
  }

  public byte GetClass() {
    byte ret = questinterfacePINVOKE.Mob_GetClass(swigCPtr);
    return ret;
  }

  public byte GetLevel() {
    byte ret = questinterfacePINVOKE.Mob_GetLevel(swigCPtr);
    return ret;
  }

  public byte GetOrigLevel() {
    byte ret = questinterfacePINVOKE.Mob_GetOrigLevel(swigCPtr);
    return ret;
  }

  public string GetName() {
    string ret = questinterfacePINVOKE.Mob_GetName(swigCPtr);
    return ret;
  }

  public string GetOrigName() {
    string ret = questinterfacePINVOKE.Mob_GetOrigName(swigCPtr);
    return ret;
  }

  public string GetLastName() {
    string ret = questinterfacePINVOKE.Mob_GetLastName(swigCPtr);
    return ret;
  }

  public string GetCleanName() {
    string ret = questinterfacePINVOKE.Mob_GetCleanName(swigCPtr);
    return ret;
  }

  public virtual void SetName(string new_name) {
    questinterfacePINVOKE.Mob_SetName__SWIG_0(swigCPtr, new_name);
  }

  public virtual void SetName() {
    questinterfacePINVOKE.Mob_SetName__SWIG_1(swigCPtr);
  }

  public Mob GetTarget() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Mob_GetTarget(swigCPtr);
    Mob ret = (cPtr == global::System.IntPtr.Zero) ? null : new Mob(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_std__string GetTargetDescription(Mob target, byte description_type, ushort entity_id_override) {
    SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(questinterfacePINVOKE.Mob_GetTargetDescription__SWIG_0(swigCPtr, Mob.getCPtr(target), description_type, entity_id_override), true);
    return ret;
  }

  public SWIGTYPE_p_std__string GetTargetDescription(Mob target, byte description_type) {
    SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(questinterfacePINVOKE.Mob_GetTargetDescription__SWIG_1(swigCPtr, Mob.getCPtr(target), description_type), true);
    return ret;
  }

  public SWIGTYPE_p_std__string GetTargetDescription(Mob target) {
    SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(questinterfacePINVOKE.Mob_GetTargetDescription__SWIG_2(swigCPtr, Mob.getCPtr(target)), true);
    return ret;
  }

  public virtual void SetTarget(Mob mob) {
    questinterfacePINVOKE.Mob_SetTarget(swigCPtr, Mob.getCPtr(mob));
  }

  public bool HasTargetReflection() {
    bool ret = questinterfacePINVOKE.Mob_HasTargetReflection(swigCPtr);
    return ret;
  }

  public virtual float GetHPRatio() {
    float ret = questinterfacePINVOKE.Mob_GetHPRatio(swigCPtr);
    return ret;
  }

  public virtual int GetIntHPRatio() {
    int ret = questinterfacePINVOKE.Mob_GetIntHPRatio(swigCPtr);
    return ret;
  }

  public int GetAC() {
    int ret = questinterfacePINVOKE.Mob_GetAC(swigCPtr);
    return ret;
  }

  public virtual int GetATK() {
    int ret = questinterfacePINVOKE.Mob_GetATK(swigCPtr);
    return ret;
  }

  public virtual int GetATKBonus() {
    int ret = questinterfacePINVOKE.Mob_GetATKBonus(swigCPtr);
    return ret;
  }

  public virtual int GetSTR() {
    int ret = questinterfacePINVOKE.Mob_GetSTR(swigCPtr);
    return ret;
  }

  public virtual int GetSTA() {
    int ret = questinterfacePINVOKE.Mob_GetSTA(swigCPtr);
    return ret;
  }

  public virtual int GetDEX() {
    int ret = questinterfacePINVOKE.Mob_GetDEX(swigCPtr);
    return ret;
  }

  public virtual int GetAGI() {
    int ret = questinterfacePINVOKE.Mob_GetAGI(swigCPtr);
    return ret;
  }

  public virtual int GetINT() {
    int ret = questinterfacePINVOKE.Mob_GetINT(swigCPtr);
    return ret;
  }

  public virtual int GetWIS() {
    int ret = questinterfacePINVOKE.Mob_GetWIS(swigCPtr);
    return ret;
  }

  public virtual int GetCHA() {
    int ret = questinterfacePINVOKE.Mob_GetCHA(swigCPtr);
    return ret;
  }

  public virtual int GetHeroicMR() {
    int ret = questinterfacePINVOKE.Mob_GetHeroicMR(swigCPtr);
    return ret;
  }

  public virtual int GetHeroicFR() {
    int ret = questinterfacePINVOKE.Mob_GetHeroicFR(swigCPtr);
    return ret;
  }

  public virtual int GetHeroicDR() {
    int ret = questinterfacePINVOKE.Mob_GetHeroicDR(swigCPtr);
    return ret;
  }

  public virtual int GetHeroicPR() {
    int ret = questinterfacePINVOKE.Mob_GetHeroicPR(swigCPtr);
    return ret;
  }

  public virtual int GetHeroicCR() {
    int ret = questinterfacePINVOKE.Mob_GetHeroicCR(swigCPtr);
    return ret;
  }

  public virtual int GetMR() {
    int ret = questinterfacePINVOKE.Mob_GetMR(swigCPtr);
    return ret;
  }

  public virtual int GetFR() {
    int ret = questinterfacePINVOKE.Mob_GetFR(swigCPtr);
    return ret;
  }

  public virtual int GetDR() {
    int ret = questinterfacePINVOKE.Mob_GetDR(swigCPtr);
    return ret;
  }

  public virtual int GetPR() {
    int ret = questinterfacePINVOKE.Mob_GetPR(swigCPtr);
    return ret;
  }

  public virtual int GetCR() {
    int ret = questinterfacePINVOKE.Mob_GetCR(swigCPtr);
    return ret;
  }

  public virtual int GetCorrup() {
    int ret = questinterfacePINVOKE.Mob_GetCorrup(swigCPtr);
    return ret;
  }

  public virtual int GetPhR() {
    int ret = questinterfacePINVOKE.Mob_GetPhR(swigCPtr);
    return ret;
  }

  public StatBonuses GetItemBonuses() {
    StatBonuses ret = new StatBonuses(questinterfacePINVOKE.Mob_GetItemBonuses(swigCPtr), true);
    return ret;
  }

  public StatBonuses GetSpellBonuses() {
    StatBonuses ret = new StatBonuses(questinterfacePINVOKE.Mob_GetSpellBonuses(swigCPtr), true);
    return ret;
  }

  public StatBonuses GetAABonuses() {
    StatBonuses ret = new StatBonuses(questinterfacePINVOKE.Mob_GetAABonuses(swigCPtr), true);
    return ret;
  }

  public StatBonuses GetItemBonusesPtr() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Mob_GetItemBonusesPtr(swigCPtr);
    StatBonuses ret = (cPtr == global::System.IntPtr.Zero) ? null : new StatBonuses(cPtr, false);
    return ret;
  }

  public StatBonuses GetSpellBonusesPtr() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Mob_GetSpellBonusesPtr(swigCPtr);
    StatBonuses ret = (cPtr == global::System.IntPtr.Zero) ? null : new StatBonuses(cPtr, false);
    return ret;
  }

  public StatBonuses GetAABonusesPtr() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Mob_GetAABonusesPtr(swigCPtr);
    StatBonuses ret = (cPtr == global::System.IntPtr.Zero) ? null : new StatBonuses(cPtr, false);
    return ret;
  }

  public virtual int GetHeroicSTR() {
    int ret = questinterfacePINVOKE.Mob_GetHeroicSTR(swigCPtr);
    return ret;
  }

  public virtual int GetHeroicSTA() {
    int ret = questinterfacePINVOKE.Mob_GetHeroicSTA(swigCPtr);
    return ret;
  }

  public virtual int GetHeroicDEX() {
    int ret = questinterfacePINVOKE.Mob_GetHeroicDEX(swigCPtr);
    return ret;
  }

  public virtual int GetHeroicAGI() {
    int ret = questinterfacePINVOKE.Mob_GetHeroicAGI(swigCPtr);
    return ret;
  }

  public virtual int GetHeroicINT() {
    int ret = questinterfacePINVOKE.Mob_GetHeroicINT(swigCPtr);
    return ret;
  }

  public virtual int GetHeroicWIS() {
    int ret = questinterfacePINVOKE.Mob_GetHeroicWIS(swigCPtr);
    return ret;
  }

  public virtual int GetHeroicCHA() {
    int ret = questinterfacePINVOKE.Mob_GetHeroicCHA(swigCPtr);
    return ret;
  }

  public virtual int GetMaxSTR() {
    int ret = questinterfacePINVOKE.Mob_GetMaxSTR(swigCPtr);
    return ret;
  }

  public virtual int GetMaxSTA() {
    int ret = questinterfacePINVOKE.Mob_GetMaxSTA(swigCPtr);
    return ret;
  }

  public virtual int GetMaxDEX() {
    int ret = questinterfacePINVOKE.Mob_GetMaxDEX(swigCPtr);
    return ret;
  }

  public virtual int GetMaxAGI() {
    int ret = questinterfacePINVOKE.Mob_GetMaxAGI(swigCPtr);
    return ret;
  }

  public virtual int GetMaxINT() {
    int ret = questinterfacePINVOKE.Mob_GetMaxINT(swigCPtr);
    return ret;
  }

  public virtual int GetMaxWIS() {
    int ret = questinterfacePINVOKE.Mob_GetMaxWIS(swigCPtr);
    return ret;
  }

  public virtual int GetMaxCHA() {
    int ret = questinterfacePINVOKE.Mob_GetMaxCHA(swigCPtr);
    return ret;
  }

  public virtual int GetMaxMR() {
    int ret = questinterfacePINVOKE.Mob_GetMaxMR(swigCPtr);
    return ret;
  }

  public virtual int GetMaxPR() {
    int ret = questinterfacePINVOKE.Mob_GetMaxPR(swigCPtr);
    return ret;
  }

  public virtual int GetMaxDR() {
    int ret = questinterfacePINVOKE.Mob_GetMaxDR(swigCPtr);
    return ret;
  }

  public virtual int GetMaxCR() {
    int ret = questinterfacePINVOKE.Mob_GetMaxCR(swigCPtr);
    return ret;
  }

  public virtual int GetMaxFR() {
    int ret = questinterfacePINVOKE.Mob_GetMaxFR(swigCPtr);
    return ret;
  }

  public virtual int GetDelayDeath() {
    int ret = questinterfacePINVOKE.Mob_GetDelayDeath(swigCPtr);
    return ret;
  }

  public long GetHP() {
    long ret = questinterfacePINVOKE.Mob_GetHP(swigCPtr);
    return ret;
  }

  public long GetMaxHP() {
    long ret = questinterfacePINVOKE.Mob_GetMaxHP(swigCPtr);
    return ret;
  }

  public virtual long CalcMaxHP() {
    long ret = questinterfacePINVOKE.Mob_CalcMaxHP(swigCPtr);
    return ret;
  }

  public virtual long CalcHPRegenCap() {
    long ret = questinterfacePINVOKE.Mob_CalcHPRegenCap(swigCPtr);
    return ret;
  }

  public long GetMaxMana() {
    long ret = questinterfacePINVOKE.Mob_GetMaxMana(swigCPtr);
    return ret;
  }

  public virtual long CalcManaRegenCap() {
    long ret = questinterfacePINVOKE.Mob_CalcManaRegenCap(swigCPtr);
    return ret;
  }

  public long GetMana() {
    long ret = questinterfacePINVOKE.Mob_GetMana(swigCPtr);
    return ret;
  }

  public virtual long GetEndurance() {
    long ret = questinterfacePINVOKE.Mob_GetEndurance(swigCPtr);
    return ret;
  }

  public virtual long GetMaxEndurance() {
    long ret = questinterfacePINVOKE.Mob_GetMaxEndurance(swigCPtr);
    return ret;
  }

  public virtual long CalcEnduranceRegenCap() {
    long ret = questinterfacePINVOKE.Mob_CalcEnduranceRegenCap(swigCPtr);
    return ret;
  }

  public virtual void SetEndurance(int newEnd) {
    questinterfacePINVOKE.Mob_SetEndurance(swigCPtr, newEnd);
  }

  public long GetItemHPBonuses() {
    long ret = questinterfacePINVOKE.Mob_GetItemHPBonuses(swigCPtr);
    return ret;
  }

  public long GetSpellHPBonuses() {
    long ret = questinterfacePINVOKE.Mob_GetSpellHPBonuses(swigCPtr);
    return ret;
  }

  public long SetMana(long amount) {
    long ret = questinterfacePINVOKE.Mob_SetMana(swigCPtr, amount);
    return ret;
  }

  public float GetManaRatio() {
    float ret = questinterfacePINVOKE.Mob_GetManaRatio(swigCPtr);
    return ret;
  }

  public virtual long CalcMaxMana() {
    long ret = questinterfacePINVOKE.Mob_CalcMaxMana(swigCPtr);
    return ret;
  }

  public uint GetNPCTypeID() {
    uint ret = questinterfacePINVOKE.Mob_GetNPCTypeID(swigCPtr);
    return ret;
  }

  public void SetNPCTypeID(uint npctypeid) {
    questinterfacePINVOKE.Mob_SetNPCTypeID(swigCPtr, npctypeid);
  }

  public SWIGTYPE_p_glm__vec4 GetPosition() {
    SWIGTYPE_p_glm__vec4 ret = new SWIGTYPE_p_glm__vec4(questinterfacePINVOKE.Mob_GetPosition(swigCPtr), false);
    return ret;
  }

  public void SetPosition(float x, float y, float z) {
    questinterfacePINVOKE.Mob_SetPosition(swigCPtr, x, y, z);
  }

  public float GetX() {
    float ret = questinterfacePINVOKE.Mob_GetX(swigCPtr);
    return ret;
  }

  public float GetY() {
    float ret = questinterfacePINVOKE.Mob_GetY(swigCPtr);
    return ret;
  }

  public float GetZ() {
    float ret = questinterfacePINVOKE.Mob_GetZ(swigCPtr);
    return ret;
  }

  public float GetHeading() {
    float ret = questinterfacePINVOKE.Mob_GetHeading(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_glm__vec4 GetRelativePosition() {
    SWIGTYPE_p_glm__vec4 ret = new SWIGTYPE_p_glm__vec4(questinterfacePINVOKE.Mob_GetRelativePosition(swigCPtr), false);
    return ret;
  }

  public void SetRelativePosition(float x, float y, float z) {
    questinterfacePINVOKE.Mob_SetRelativePosition(swigCPtr, x, y, z);
  }

  public float GetRelativeX() {
    float ret = questinterfacePINVOKE.Mob_GetRelativeX(swigCPtr);
    return ret;
  }

  public float GetRelativeY() {
    float ret = questinterfacePINVOKE.Mob_GetRelativeY(swigCPtr);
    return ret;
  }

  public float GetRelativeZ() {
    float ret = questinterfacePINVOKE.Mob_GetRelativeZ(swigCPtr);
    return ret;
  }

  public float GetRelativeHeading() {
    float ret = questinterfacePINVOKE.Mob_GetRelativeHeading(swigCPtr);
    return ret;
  }

  public float GetSize() {
    float ret = questinterfacePINVOKE.Mob_GetSize(swigCPtr);
    return ret;
  }

  public float GetBaseSize() {
    float ret = questinterfacePINVOKE.Mob_GetBaseSize(swigCPtr);
    return ret;
  }

  public GravityBehavior GetFlyMode() {
    GravityBehavior ret = (GravityBehavior)questinterfacePINVOKE.Mob_GetFlyMode(swigCPtr);
    return ret;
  }

  public bool IsBoat() {
    bool ret = questinterfacePINVOKE.Mob_IsBoat(swigCPtr);
    return ret;
  }

  public bool GetIsBoat() {
    bool ret = questinterfacePINVOKE.Mob_GetIsBoat(swigCPtr);
    return ret;
  }

  public void SetIsBoat(bool boat) {
    questinterfacePINVOKE.Mob_SetIsBoat(swigCPtr, boat);
  }

  public bool IsControllableBoat() {
    bool ret = questinterfacePINVOKE.Mob_IsControllableBoat(swigCPtr);
    return ret;
  }

  public bool AlwaysAggro() {
    bool ret = questinterfacePINVOKE.Mob_AlwaysAggro(swigCPtr);
    return ret;
  }

  public int GetHeroicStrikethrough() {
    int ret = questinterfacePINVOKE.Mob_GetHeroicStrikethrough(swigCPtr);
    return ret;
  }

  public bool GetKeepsSoldItems() {
    bool ret = questinterfacePINVOKE.Mob_GetKeepsSoldItems(swigCPtr);
    return ret;
  }

  public void SetKeepsSoldItems(bool in_keeps_sold_items) {
    questinterfacePINVOKE.Mob_SetKeepsSoldItems(swigCPtr, in_keeps_sold_items);
  }

  public virtual int GetHealAmt() {
    int ret = questinterfacePINVOKE.Mob_GetHealAmt(swigCPtr);
    return ret;
  }

  public virtual int GetSpellDmg() {
    int ret = questinterfacePINVOKE.Mob_GetSpellDmg(swigCPtr);
    return ret;
  }

  public void ProcessItemCaps() {
    questinterfacePINVOKE.Mob_ProcessItemCaps(swigCPtr);
  }

  public virtual int CalcItemATKCap() {
    int ret = questinterfacePINVOKE.Mob_CalcItemATKCap(swigCPtr);
    return ret;
  }

  public virtual bool IsSitting() {
    bool ret = questinterfacePINVOKE.Mob_IsSitting(swigCPtr);
    return ret;
  }

  public void CopyHateList(Mob to) {
    questinterfacePINVOKE.Mob_CopyHateList(swigCPtr, Mob.getCPtr(to));
  }

  public virtual bool HasRaid() {
    bool ret = questinterfacePINVOKE.Mob_HasRaid(swigCPtr);
    return ret;
  }

  public virtual bool HasGroup() {
    bool ret = questinterfacePINVOKE.Mob_HasGroup(swigCPtr);
    return ret;
  }

  public virtual Raid GetRaid() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Mob_GetRaid(swigCPtr);
    Raid ret = (cPtr == global::System.IntPtr.Zero) ? null : new Raid(cPtr, false);
    return ret;
  }

  public virtual Group GetGroup() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Mob_GetGroup(swigCPtr);
    Group ret = (cPtr == global::System.IntPtr.Zero) ? null : new Group(cPtr, false);
    return ret;
  }

  public virtual int GetPrimaryFaction() {
    int ret = questinterfacePINVOKE.Mob_GetPrimaryFaction(swigCPtr);
    return ret;
  }

  public bool IsMoving() {
    bool ret = questinterfacePINVOKE.Mob_IsMoving(swigCPtr);
    return ret;
  }

  public virtual void SetMoving(bool move) {
    questinterfacePINVOKE.Mob_SetMoving(swigCPtr, move);
  }

  public virtual void GoToBind(byte bindnum) {
    questinterfacePINVOKE.Mob_GoToBind__SWIG_0(swigCPtr, bindnum);
  }

  public virtual void GoToBind() {
    questinterfacePINVOKE.Mob_GoToBind__SWIG_1(swigCPtr);
  }

  public virtual void Gate(byte bindnum) {
    questinterfacePINVOKE.Mob_Gate__SWIG_0(swigCPtr, bindnum);
  }

  public virtual void Gate() {
    questinterfacePINVOKE.Mob_Gate__SWIG_1(swigCPtr);
  }

  public virtual int GetWalkspeed() {
    int ret = questinterfacePINVOKE.Mob_GetWalkspeed(swigCPtr);
    return ret;
  }

  public virtual int GetRunspeed() {
    int ret = questinterfacePINVOKE.Mob_GetRunspeed(swigCPtr);
    return ret;
  }

  public int GetBaseRunspeed() {
    int ret = questinterfacePINVOKE.Mob_GetBaseRunspeed(swigCPtr);
    return ret;
  }

  public int GetBaseWalkspeed() {
    int ret = questinterfacePINVOKE.Mob_GetBaseWalkspeed(swigCPtr);
    return ret;
  }

  public int GetBaseFearSpeed() {
    int ret = questinterfacePINVOKE.Mob_GetBaseFearSpeed(swigCPtr);
    return ret;
  }

  public float GetMovespeed() {
    float ret = questinterfacePINVOKE.Mob_GetMovespeed(swigCPtr);
    return ret;
  }

  public bool IsRunning() {
    bool ret = questinterfacePINVOKE.Mob_IsRunning(swigCPtr);
    return ret;
  }

  public void SetRunning(bool val) {
    questinterfacePINVOKE.Mob_SetRunning(swigCPtr, val);
  }

  public virtual void GMMove(float x, float y, float z, float heading, bool save_guard_spot) {
    questinterfacePINVOKE.Mob_GMMove__SWIG_0(swigCPtr, x, y, z, heading, save_guard_spot);
  }

  public virtual void GMMove(float x, float y, float z, float heading) {
    questinterfacePINVOKE.Mob_GMMove__SWIG_1(swigCPtr, x, y, z, heading);
  }

  public virtual void GMMove(float x, float y, float z) {
    questinterfacePINVOKE.Mob_GMMove__SWIG_2(swigCPtr, x, y, z);
  }

  public virtual void GMMove(SWIGTYPE_p_glm__vec4 position, bool save_guard_spot) {
    questinterfacePINVOKE.Mob_GMMove__SWIG_3(swigCPtr, SWIGTYPE_p_glm__vec4.getCPtr(position), save_guard_spot);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void GMMove(SWIGTYPE_p_glm__vec4 position) {
    questinterfacePINVOKE.Mob_GMMove__SWIG_4(swigCPtr, SWIGTYPE_p_glm__vec4.getCPtr(position));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetDelta(SWIGTYPE_p_glm__vec4 delta) {
    questinterfacePINVOKE.Mob_SetDelta(swigCPtr, SWIGTYPE_p_glm__vec4.getCPtr(delta));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void MakeSpawnUpdate(SWIGTYPE_p_PlayerPositionUpdateServer_Struct spu) {
    questinterfacePINVOKE.Mob_MakeSpawnUpdate(swigCPtr, SWIGTYPE_p_PlayerPositionUpdateServer_Struct.getCPtr(spu));
  }

  public void SentPositionPacket(float dx, float dy, float dz, float dh, int anim, bool send_to_self) {
    questinterfacePINVOKE.Mob_SentPositionPacket__SWIG_0(swigCPtr, dx, dy, dz, dh, anim, send_to_self);
  }

  public void SentPositionPacket(float dx, float dy, float dz, float dh, int anim) {
    questinterfacePINVOKE.Mob_SentPositionPacket__SWIG_1(swigCPtr, dx, dy, dz, dh, anim);
  }

  public virtual void StopMoving() {
    questinterfacePINVOKE.Mob_StopMoving__SWIG_0(swigCPtr);
  }

  public virtual void StopMoving(float new_heading) {
    questinterfacePINVOKE.Mob_StopMoving__SWIG_1(swigCPtr, new_heading);
  }

  public void SetSpawned() {
    questinterfacePINVOKE.Mob_SetSpawned(swigCPtr);
  }

  public bool Spawned() {
    bool ret = questinterfacePINVOKE.Mob_Spawned(swigCPtr);
    return ret;
  }

  public virtual bool ShouldISpawnFor(Client c) {
    bool ret = questinterfacePINVOKE.Mob_ShouldISpawnFor(swigCPtr, Client.getCPtr(c));
    return ret;
  }

  public void SetFlyMode(GravityBehavior in_flymode) {
    questinterfacePINVOKE.Mob_SetFlyMode(swigCPtr, (int)in_flymode);
  }

  public void Teleport(SWIGTYPE_p_glm__vec3 pos) {
    questinterfacePINVOKE.Mob_Teleport__SWIG_0(swigCPtr, SWIGTYPE_p_glm__vec3.getCPtr(pos));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Teleport(SWIGTYPE_p_glm__vec4 pos) {
    questinterfacePINVOKE.Mob_Teleport__SWIG_1(swigCPtr, SWIGTYPE_p_glm__vec4.getCPtr(pos));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void TryMoveAlong(float distance, float angle, bool send) {
    questinterfacePINVOKE.Mob_TryMoveAlong__SWIG_0(swigCPtr, distance, angle, send);
  }

  public void TryMoveAlong(float distance, float angle) {
    questinterfacePINVOKE.Mob_TryMoveAlong__SWIG_1(swigCPtr, distance, angle);
  }

  public SWIGTYPE_p_glm__vec4 TryMoveAlong(SWIGTYPE_p_glm__vec4 start, float distance, float angle) {
    SWIGTYPE_p_glm__vec4 ret = new SWIGTYPE_p_glm__vec4(questinterfacePINVOKE.Mob_TryMoveAlong__SWIG_2(swigCPtr, SWIGTYPE_p_glm__vec4.getCPtr(start), distance, angle), true);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void ProcessForcedMovement() {
    questinterfacePINVOKE.Mob_ProcessForcedMovement(swigCPtr);
  }

  public void IncDeltaX(float in_) {
    questinterfacePINVOKE.Mob_IncDeltaX(swigCPtr, in_);
  }

  public void IncDeltaY(float in_) {
    questinterfacePINVOKE.Mob_IncDeltaY(swigCPtr, in_);
  }

  public void IncDeltaZ(float in_) {
    questinterfacePINVOKE.Mob_IncDeltaZ(swigCPtr, in_);
  }

  public void SetForcedMovement(int in_) {
    questinterfacePINVOKE.Mob_SetForcedMovement(swigCPtr, in_);
  }

  public void SetHeading(float iHeading) {
    questinterfacePINVOKE.Mob_SetHeading(swigCPtr, iHeading);
  }

  public static uint GetLevelCon(byte mylevel, byte iOtherLevel) {
    uint ret = questinterfacePINVOKE.Mob_GetLevelCon__SWIG_0(mylevel, iOtherLevel);
    return ret;
  }

  public uint GetLevelCon(byte iOtherLevel) {
    uint ret = questinterfacePINVOKE.Mob_GetLevelCon__SWIG_1(swigCPtr, iOtherLevel);
    return ret;
  }

  public void AddToHateList(Mob other, long hate, long damage, bool iYellForHelp, bool bFrenzy, bool iBuffTic, ushort spell_id, bool pet_comand) {
    questinterfacePINVOKE.Mob_AddToHateList__SWIG_0(swigCPtr, Mob.getCPtr(other), hate, damage, iYellForHelp, bFrenzy, iBuffTic, spell_id, pet_comand);
  }

  public void AddToHateList(Mob other, long hate, long damage, bool iYellForHelp, bool bFrenzy, bool iBuffTic, ushort spell_id) {
    questinterfacePINVOKE.Mob_AddToHateList__SWIG_1(swigCPtr, Mob.getCPtr(other), hate, damage, iYellForHelp, bFrenzy, iBuffTic, spell_id);
  }

  public void AddToHateList(Mob other, long hate, long damage, bool iYellForHelp, bool bFrenzy, bool iBuffTic) {
    questinterfacePINVOKE.Mob_AddToHateList__SWIG_2(swigCPtr, Mob.getCPtr(other), hate, damage, iYellForHelp, bFrenzy, iBuffTic);
  }

  public void AddToHateList(Mob other, long hate, long damage, bool iYellForHelp, bool bFrenzy) {
    questinterfacePINVOKE.Mob_AddToHateList__SWIG_3(swigCPtr, Mob.getCPtr(other), hate, damage, iYellForHelp, bFrenzy);
  }

  public void AddToHateList(Mob other, long hate, long damage, bool iYellForHelp) {
    questinterfacePINVOKE.Mob_AddToHateList__SWIG_4(swigCPtr, Mob.getCPtr(other), hate, damage, iYellForHelp);
  }

  public void AddToHateList(Mob other, long hate, long damage) {
    questinterfacePINVOKE.Mob_AddToHateList__SWIG_5(swigCPtr, Mob.getCPtr(other), hate, damage);
  }

  public void AddToHateList(Mob other, long hate) {
    questinterfacePINVOKE.Mob_AddToHateList__SWIG_6(swigCPtr, Mob.getCPtr(other), hate);
  }

  public void AddToHateList(Mob other) {
    questinterfacePINVOKE.Mob_AddToHateList__SWIG_7(swigCPtr, Mob.getCPtr(other));
  }

  public bool RemoveFromHateList(Mob mob) {
    bool ret = questinterfacePINVOKE.Mob_RemoveFromHateList(swigCPtr, Mob.getCPtr(mob));
    return ret;
  }

  public void SetHateAmountOnEnt(Mob other, long hate, long damage) {
    questinterfacePINVOKE.Mob_SetHateAmountOnEnt__SWIG_0(swigCPtr, Mob.getCPtr(other), hate, damage);
  }

  public void SetHateAmountOnEnt(Mob other, long hate) {
    questinterfacePINVOKE.Mob_SetHateAmountOnEnt__SWIG_1(swigCPtr, Mob.getCPtr(other), hate);
  }

  public void SetHateAmountOnEnt(Mob other) {
    questinterfacePINVOKE.Mob_SetHateAmountOnEnt__SWIG_2(swigCPtr, Mob.getCPtr(other));
  }

  public void HalveAggro(Mob other) {
    questinterfacePINVOKE.Mob_HalveAggro(swigCPtr, Mob.getCPtr(other));
  }

  public void DoubleAggro(Mob other) {
    questinterfacePINVOKE.Mob_DoubleAggro(swigCPtr, Mob.getCPtr(other));
  }

  public long GetHateAmount(Mob tmob, bool is_dam) {
    long ret = questinterfacePINVOKE.Mob_GetHateAmount__SWIG_0(swigCPtr, Mob.getCPtr(tmob), is_dam);
    return ret;
  }

  public long GetHateAmount(Mob tmob) {
    long ret = questinterfacePINVOKE.Mob_GetHateAmount__SWIG_1(swigCPtr, Mob.getCPtr(tmob));
    return ret;
  }

  public long GetDamageAmount(Mob tmob) {
    long ret = questinterfacePINVOKE.Mob_GetDamageAmount(swigCPtr, Mob.getCPtr(tmob));
    return ret;
  }

  public int GetHateRatio(Mob first, Mob with) {
    int ret = questinterfacePINVOKE.Mob_GetHateRatio(swigCPtr, Mob.getCPtr(first), Mob.getCPtr(with));
    return ret;
  }

  public Mob GetHateTop() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Mob_GetHateTop(swigCPtr);
    Mob ret = (cPtr == global::System.IntPtr.Zero) ? null : new Mob(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_Bot GetHateTopBot() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Mob_GetHateTopBot(swigCPtr);
    SWIGTYPE_p_Bot ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Bot(cPtr, false);
    return ret;
  }

  public Client GetHateTopClient() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Mob_GetHateTopClient(swigCPtr);
    Client ret = (cPtr == global::System.IntPtr.Zero) ? null : new Client(cPtr, false);
    return ret;
  }

  public NPC GetHateTopNPC() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Mob_GetHateTopNPC(swigCPtr);
    NPC ret = (cPtr == global::System.IntPtr.Zero) ? null : new NPC(cPtr, false);
    return ret;
  }

  public Mob GetSecondaryHate(Mob skip) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Mob_GetSecondaryHate(swigCPtr, Mob.getCPtr(skip));
    Mob ret = (cPtr == global::System.IntPtr.Zero) ? null : new Mob(cPtr, false);
    return ret;
  }

  public Mob GetHateDamageTop(Mob other) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Mob_GetHateDamageTop(swigCPtr, Mob.getCPtr(other));
    Mob ret = (cPtr == global::System.IntPtr.Zero) ? null : new Mob(cPtr, false);
    return ret;
  }

  public Mob GetHateRandom() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Mob_GetHateRandom(swigCPtr);
    Mob ret = (cPtr == global::System.IntPtr.Zero) ? null : new Mob(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_Bot GetHateRandomBot() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Mob_GetHateRandomBot(swigCPtr);
    SWIGTYPE_p_Bot ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Bot(cPtr, false);
    return ret;
  }

  public Client GetHateRandomClient() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Mob_GetHateRandomClient(swigCPtr);
    Client ret = (cPtr == global::System.IntPtr.Zero) ? null : new Client(cPtr, false);
    return ret;
  }

  public NPC GetHateRandomNPC() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Mob_GetHateRandomNPC(swigCPtr);
    NPC ret = (cPtr == global::System.IntPtr.Zero) ? null : new NPC(cPtr, false);
    return ret;
  }

  public Mob GetHateMost() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Mob_GetHateMost(swigCPtr);
    Mob ret = (cPtr == global::System.IntPtr.Zero) ? null : new Mob(cPtr, false);
    return ret;
  }

  public Mob GetHateClosest(bool skip_mezzed) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Mob_GetHateClosest__SWIG_0(swigCPtr, skip_mezzed);
    Mob ret = (cPtr == global::System.IntPtr.Zero) ? null : new Mob(cPtr, false);
    return ret;
  }

  public Mob GetHateClosest() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Mob_GetHateClosest__SWIG_1(swigCPtr);
    Mob ret = (cPtr == global::System.IntPtr.Zero) ? null : new Mob(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_Bot GetHateClosestBot(bool skip_mezzed) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Mob_GetHateClosestBot__SWIG_0(swigCPtr, skip_mezzed);
    SWIGTYPE_p_Bot ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Bot(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_Bot GetHateClosestBot() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Mob_GetHateClosestBot__SWIG_1(swigCPtr);
    SWIGTYPE_p_Bot ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Bot(cPtr, false);
    return ret;
  }

  public Client GetHateClosestClient(bool skip_mezzed) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Mob_GetHateClosestClient__SWIG_0(swigCPtr, skip_mezzed);
    Client ret = (cPtr == global::System.IntPtr.Zero) ? null : new Client(cPtr, false);
    return ret;
  }

  public Client GetHateClosestClient() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Mob_GetHateClosestClient__SWIG_1(swigCPtr);
    Client ret = (cPtr == global::System.IntPtr.Zero) ? null : new Client(cPtr, false);
    return ret;
  }

  public NPC GetHateClosestNPC(bool skip_mezzed) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Mob_GetHateClosestNPC__SWIG_0(swigCPtr, skip_mezzed);
    NPC ret = (cPtr == global::System.IntPtr.Zero) ? null : new NPC(cPtr, false);
    return ret;
  }

  public NPC GetHateClosestNPC() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Mob_GetHateClosestNPC__SWIG_1(swigCPtr);
    NPC ret = (cPtr == global::System.IntPtr.Zero) ? null : new NPC(cPtr, false);
    return ret;
  }

  public bool IsEngaged() {
    bool ret = questinterfacePINVOKE.Mob_IsEngaged(swigCPtr);
    return ret;
  }

  public uint GetHateListCount(SWIGTYPE_p_HateListCountType count_type) {
    uint ret = questinterfacePINVOKE.Mob_GetHateListCount__SWIG_0(swigCPtr, SWIGTYPE_p_HateListCountType.getCPtr(count_type));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetHateListCount() {
    uint ret = questinterfacePINVOKE.Mob_GetHateListCount__SWIG_1(swigCPtr);
    return ret;
  }

  public bool HasPrimaryAggro() {
    bool ret = questinterfacePINVOKE.Mob_HasPrimaryAggro(swigCPtr);
    return ret;
  }

  public bool HasAssistAggro() {
    bool ret = questinterfacePINVOKE.Mob_HasAssistAggro(swigCPtr);
    return ret;
  }

  public void SetPrimaryAggro(bool value) {
    questinterfacePINVOKE.Mob_SetPrimaryAggro(swigCPtr, value);
  }

  public void SetAssistAggro(bool value) {
    questinterfacePINVOKE.Mob_SetAssistAggro(swigCPtr, value);
  }

  public bool HateSummon() {
    bool ret = questinterfacePINVOKE.Mob_HateSummon(swigCPtr);
    return ret;
  }

  public void FaceTarget(Mob mob_to_face) {
    questinterfacePINVOKE.Mob_FaceTarget__SWIG_0(swigCPtr, Mob.getCPtr(mob_to_face));
  }

  public void FaceTarget() {
    questinterfacePINVOKE.Mob_FaceTarget__SWIG_1(swigCPtr);
  }

  public void WipeHateList(bool npc_only) {
    questinterfacePINVOKE.Mob_WipeHateList__SWIG_0(swigCPtr, npc_only);
  }

  public void WipeHateList() {
    questinterfacePINVOKE.Mob_WipeHateList__SWIG_1(swigCPtr);
  }

  public void AddFeignMemory(Mob attacker) {
    questinterfacePINVOKE.Mob_AddFeignMemory(swigCPtr, Mob.getCPtr(attacker));
  }

  public void RemoveFromFeignMemory(Mob attacker) {
    questinterfacePINVOKE.Mob_RemoveFromFeignMemory(swigCPtr, Mob.getCPtr(attacker));
  }

  public void ClearFeignMemory() {
    questinterfacePINVOKE.Mob_ClearFeignMemory(swigCPtr);
  }

  public bool IsOnFeignMemory(Mob attacker) {
    bool ret = questinterfacePINVOKE.Mob_IsOnFeignMemory(swigCPtr, Mob.getCPtr(attacker));
    return ret;
  }

  public void PrintHateListToClient(Client who) {
    questinterfacePINVOKE.Mob_PrintHateListToClient(swigCPtr, Client.getCPtr(who));
  }

  public SWIGTYPE_p_std__listT_struct_HateList_p_t GetHateList() {
    SWIGTYPE_p_std__listT_struct_HateList_p_t ret = new SWIGTYPE_p_std__listT_struct_HateList_p_t(questinterfacePINVOKE.Mob_GetHateList(swigCPtr), false);
    return ret;
  }

  public bool CheckLosFN(Mob other) {
    bool ret = questinterfacePINVOKE.Mob_CheckLosFN__SWIG_0(swigCPtr, Mob.getCPtr(other));
    return ret;
  }

  public bool CheckLosFN(float posX, float posY, float posZ, float mobSize) {
    bool ret = questinterfacePINVOKE.Mob_CheckLosFN__SWIG_1(swigCPtr, posX, posY, posZ, mobSize);
    return ret;
  }

  public static bool CheckLosFN(SWIGTYPE_p_glm__vec3 posWatcher, float sizeWatcher, SWIGTYPE_p_glm__vec3 posTarget, float sizeTarget) {
    bool ret = questinterfacePINVOKE.Mob_CheckLosFN__SWIG_2(SWIGTYPE_p_glm__vec3.getCPtr(posWatcher), sizeWatcher, SWIGTYPE_p_glm__vec3.getCPtr(posTarget), sizeTarget);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool CheckWaterLoS(Mob m) {
    bool ret = questinterfacePINVOKE.Mob_CheckWaterLoS(swigCPtr, Mob.getCPtr(m));
    return ret;
  }

  public void SetLastLosState(bool value) {
    questinterfacePINVOKE.Mob_SetLastLosState(swigCPtr, value);
  }

  public bool CheckLastLosState() {
    bool ret = questinterfacePINVOKE.Mob_CheckLastLosState(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_std__string GetMobDescription() {
    SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(questinterfacePINVOKE.Mob_GetMobDescription(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_std__listT_struct_HateList_p_t GetFilteredHateList(SWIGTYPE_p_EntityFilterType filter_type, uint distance) {
    SWIGTYPE_p_std__listT_struct_HateList_p_t ret = new SWIGTYPE_p_std__listT_struct_HateList_p_t(questinterfacePINVOKE.Mob_GetFilteredHateList__SWIG_0(swigCPtr, SWIGTYPE_p_EntityFilterType.getCPtr(filter_type), distance), true);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__listT_struct_HateList_p_t GetFilteredHateList(SWIGTYPE_p_EntityFilterType filter_type) {
    SWIGTYPE_p_std__listT_struct_HateList_p_t ret = new SWIGTYPE_p_std__listT_struct_HateList_p_t(questinterfacePINVOKE.Mob_GetFilteredHateList__SWIG_1(swigCPtr, SWIGTYPE_p_EntityFilterType.getCPtr(filter_type)), true);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__listT_struct_HateList_p_t GetFilteredHateList() {
    SWIGTYPE_p_std__listT_struct_HateList_p_t ret = new SWIGTYPE_p_std__listT_struct_HateList_p_t(questinterfacePINVOKE.Mob_GetFilteredHateList__SWIG_2(swigCPtr), true);
    return ret;
  }

  public void DamageHateList(long damage, uint distance, SWIGTYPE_p_EntityFilterType filter_type, bool is_percentage) {
    questinterfacePINVOKE.Mob_DamageHateList__SWIG_0(swigCPtr, damage, distance, SWIGTYPE_p_EntityFilterType.getCPtr(filter_type), is_percentage);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void DamageHateList(long damage, uint distance, SWIGTYPE_p_EntityFilterType filter_type) {
    questinterfacePINVOKE.Mob_DamageHateList__SWIG_1(swigCPtr, damage, distance, SWIGTYPE_p_EntityFilterType.getCPtr(filter_type));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void DamageHateList(long damage, uint distance) {
    questinterfacePINVOKE.Mob_DamageHateList__SWIG_2(swigCPtr, damage, distance);
  }

  public void DamageHateList(long damage) {
    questinterfacePINVOKE.Mob_DamageHateList__SWIG_3(swigCPtr, damage);
  }

  public void DamageArea(long damage, uint distance, SWIGTYPE_p_EntityFilterType filter_type, bool is_percentage) {
    questinterfacePINVOKE.Mob_DamageArea__SWIG_0(swigCPtr, damage, distance, SWIGTYPE_p_EntityFilterType.getCPtr(filter_type), is_percentage);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void DamageArea(long damage, uint distance, SWIGTYPE_p_EntityFilterType filter_type) {
    questinterfacePINVOKE.Mob_DamageArea__SWIG_1(swigCPtr, damage, distance, SWIGTYPE_p_EntityFilterType.getCPtr(filter_type));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void DamageArea(long damage, uint distance) {
    questinterfacePINVOKE.Mob_DamageArea__SWIG_2(swigCPtr, damage, distance);
  }

  public void DamageArea(long damage) {
    questinterfacePINVOKE.Mob_DamageArea__SWIG_3(swigCPtr, damage);
  }

  public void CameraEffect(uint duration, float intensity, Client c, bool global) {
    questinterfacePINVOKE.Mob_CameraEffect__SWIG_0(swigCPtr, duration, intensity, Client.getCPtr(c), global);
  }

  public void CameraEffect(uint duration, float intensity, Client c) {
    questinterfacePINVOKE.Mob_CameraEffect__SWIG_1(swigCPtr, duration, intensity, Client.getCPtr(c));
  }

  public void CameraEffect(uint duration, float intensity) {
    questinterfacePINVOKE.Mob_CameraEffect__SWIG_2(swigCPtr, duration, intensity);
  }

  public bool GetQglobal() {
    bool ret = questinterfacePINVOKE.Mob_GetQglobal(swigCPtr);
    return ret;
  }

  public void CreateDespawnPacket(SWIGTYPE_p_EQApplicationPacket app, bool Decay) {
    questinterfacePINVOKE.Mob_CreateDespawnPacket(swigCPtr, SWIGTYPE_p_EQApplicationPacket.getCPtr(app), Decay);
  }

  public void CreateHorseSpawnPacket(SWIGTYPE_p_EQApplicationPacket app, Mob m) {
    questinterfacePINVOKE.Mob_CreateHorseSpawnPacket__SWIG_0(swigCPtr, SWIGTYPE_p_EQApplicationPacket.getCPtr(app), Mob.getCPtr(m));
  }

  public void CreateHorseSpawnPacket(SWIGTYPE_p_EQApplicationPacket app) {
    questinterfacePINVOKE.Mob_CreateHorseSpawnPacket__SWIG_1(swigCPtr, SWIGTYPE_p_EQApplicationPacket.getCPtr(app));
  }

  public void CreateSpawnPacket(SWIGTYPE_p_EQApplicationPacket app, Mob ForWho) {
    questinterfacePINVOKE.Mob_CreateSpawnPacket__SWIG_0(swigCPtr, SWIGTYPE_p_EQApplicationPacket.getCPtr(app), Mob.getCPtr(ForWho));
  }

  public void CreateSpawnPacket(SWIGTYPE_p_EQApplicationPacket app) {
    questinterfacePINVOKE.Mob_CreateSpawnPacket__SWIG_1(swigCPtr, SWIGTYPE_p_EQApplicationPacket.getCPtr(app));
  }

  public static void CreateSpawnPacket(SWIGTYPE_p_EQApplicationPacket app, SWIGTYPE_p_NewSpawn_Struct ns) {
    questinterfacePINVOKE.Mob_CreateSpawnPacket__SWIG_2(SWIGTYPE_p_EQApplicationPacket.getCPtr(app), SWIGTYPE_p_NewSpawn_Struct.getCPtr(ns));
  }

  public virtual void FillSpawnStruct(SWIGTYPE_p_NewSpawn_Struct ns, Mob ForWho) {
    questinterfacePINVOKE.Mob_FillSpawnStruct(swigCPtr, SWIGTYPE_p_NewSpawn_Struct.getCPtr(ns), Mob.getCPtr(ForWho));
  }

  public void CreateHPPacket(SWIGTYPE_p_EQApplicationPacket app) {
    questinterfacePINVOKE.Mob_CreateHPPacket(swigCPtr, SWIGTYPE_p_EQApplicationPacket.getCPtr(app));
  }

  public void SendHPUpdate(bool force_update_all) {
    questinterfacePINVOKE.Mob_SendHPUpdate__SWIG_0(swigCPtr, force_update_all);
  }

  public void SendHPUpdate() {
    questinterfacePINVOKE.Mob_SendHPUpdate__SWIG_1(swigCPtr);
  }

  public virtual void ResetHPUpdateTimer() {
    questinterfacePINVOKE.Mob_ResetHPUpdateTimer(swigCPtr);
  }

  public static void SetSpawnLastNameByClass(SWIGTYPE_p_NewSpawn_Struct ns) {
    questinterfacePINVOKE.Mob_SetSpawnLastNameByClass(SWIGTYPE_p_NewSpawn_Struct.getCPtr(ns));
  }

  public static uint RandomTimer(int min, int max) {
    uint ret = questinterfacePINVOKE.Mob_RandomTimer(min, max);
    return ret;
  }

  public static byte GetDefaultGender(ushort in_race, byte in_gender) {
    byte ret = questinterfacePINVOKE.Mob_GetDefaultGender__SWIG_0(in_race, in_gender);
    return ret;
  }

  public static byte GetDefaultGender(ushort in_race) {
    byte ret = questinterfacePINVOKE.Mob_GetDefaultGender__SWIG_1(in_race);
    return ret;
  }

  public SWIGTYPE_p_EQ__skills__SkillType GetSkillByItemType(int ItemType) {
    SWIGTYPE_p_EQ__skills__SkillType ret = new SWIGTYPE_p_EQ__skills__SkillType(questinterfacePINVOKE.Mob_GetSkillByItemType(swigCPtr, ItemType), true);
    return ret;
  }

  public byte GetItemTypeBySkill(SWIGTYPE_p_EQ__skills__SkillType skill) {
    byte ret = questinterfacePINVOKE.Mob_GetItemTypeBySkill(swigCPtr, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skill));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void MakePet(ushort spell_id, string pettype, string petname) {
    questinterfacePINVOKE.Mob_MakePet__SWIG_0(swigCPtr, spell_id, pettype, petname);
  }

  public virtual void MakePet(ushort spell_id, string pettype) {
    questinterfacePINVOKE.Mob_MakePet__SWIG_1(swigCPtr, spell_id, pettype);
  }

  public virtual void MakePoweredPet(ushort spell_id, string pettype, short petpower, string petname, float in_size) {
    questinterfacePINVOKE.Mob_MakePoweredPet__SWIG_0(swigCPtr, spell_id, pettype, petpower, petname, in_size);
  }

  public virtual void MakePoweredPet(ushort spell_id, string pettype, short petpower, string petname) {
    questinterfacePINVOKE.Mob_MakePoweredPet__SWIG_1(swigCPtr, spell_id, pettype, petpower, petname);
  }

  public virtual void MakePoweredPet(ushort spell_id, string pettype, short petpower) {
    questinterfacePINVOKE.Mob_MakePoweredPet__SWIG_2(swigCPtr, spell_id, pettype, petpower);
  }

  public bool IsWarriorClass() {
    bool ret = questinterfacePINVOKE.Mob_IsWarriorClass(swigCPtr);
    return ret;
  }

  public char GetCasterClass() {
    char ret = questinterfacePINVOKE.Mob_GetCasterClass(swigCPtr);
    return ret;
  }

  public byte GetArchetype() {
    byte ret = questinterfacePINVOKE.Mob_GetArchetype(swigCPtr);
    return ret;
  }

  public void SetZone(uint zone_id, uint instance_id) {
    questinterfacePINVOKE.Mob_SetZone(swigCPtr, zone_id, instance_id);
  }

  public void SendStatsWindow(Client c, bool use_window) {
    questinterfacePINVOKE.Mob_SendStatsWindow(swigCPtr, Client.getCPtr(c), use_window);
  }

  public void ShowStats(Client client) {
    questinterfacePINVOKE.Mob_ShowStats(swigCPtr, Client.getCPtr(client));
  }

  public void ShowBuffs(Client c) {
    questinterfacePINVOKE.Mob_ShowBuffs(swigCPtr, Client.getCPtr(c));
  }

  public bool PlotPositionAroundTarget(Mob target, SWIGTYPE_p_float x_dest, SWIGTYPE_p_float y_dest, SWIGTYPE_p_float z_dest, bool lookForAftArc) {
    bool ret = questinterfacePINVOKE.Mob_PlotPositionAroundTarget__SWIG_0(swigCPtr, Mob.getCPtr(target), SWIGTYPE_p_float.getCPtr(x_dest), SWIGTYPE_p_float.getCPtr(y_dest), SWIGTYPE_p_float.getCPtr(z_dest), lookForAftArc);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool PlotPositionAroundTarget(Mob target, SWIGTYPE_p_float x_dest, SWIGTYPE_p_float y_dest, SWIGTYPE_p_float z_dest) {
    bool ret = questinterfacePINVOKE.Mob_PlotPositionAroundTarget__SWIG_1(swigCPtr, Mob.getCPtr(target), SWIGTYPE_p_float.getCPtr(x_dest), SWIGTYPE_p_float.getCPtr(y_dest), SWIGTYPE_p_float.getCPtr(z_dest));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetKillExpMod() {
    int ret = questinterfacePINVOKE.Mob_GetKillExpMod(swigCPtr);
    return ret;
  }

  public void MakeAura(ushort spell_id) {
    questinterfacePINVOKE.Mob_MakeAura(swigCPtr, spell_id);
  }

  public int GetAuraSlots() {
    int ret = questinterfacePINVOKE.Mob_GetAuraSlots(swigCPtr);
    return ret;
  }

  public int GetTrapSlots() {
    int ret = questinterfacePINVOKE.Mob_GetTrapSlots(swigCPtr);
    return ret;
  }

  public bool HasFreeAuraSlots() {
    bool ret = questinterfacePINVOKE.Mob_HasFreeAuraSlots(swigCPtr);
    return ret;
  }

  public bool HasFreeTrapSlots() {
    bool ret = questinterfacePINVOKE.Mob_HasFreeTrapSlots(swigCPtr);
    return ret;
  }

  public void AddAura(SWIGTYPE_p_Aura aura, AuraRecord record) {
    questinterfacePINVOKE.Mob_AddAura(swigCPtr, SWIGTYPE_p_Aura.getCPtr(aura), AuraRecord.getCPtr(record));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddTrap(SWIGTYPE_p_Aura aura, AuraRecord record) {
    questinterfacePINVOKE.Mob_AddTrap(swigCPtr, SWIGTYPE_p_Aura.getCPtr(aura), AuraRecord.getCPtr(record));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool CanSpawnAura(bool trap) {
    bool ret = questinterfacePINVOKE.Mob_CanSpawnAura(swigCPtr, trap);
    return ret;
  }

  public void RemoveAura(int spawn_id, bool skip_strip, bool expired) {
    questinterfacePINVOKE.Mob_RemoveAura__SWIG_0(swigCPtr, spawn_id, skip_strip, expired);
  }

  public void RemoveAura(int spawn_id, bool skip_strip) {
    questinterfacePINVOKE.Mob_RemoveAura__SWIG_1(swigCPtr, spawn_id, skip_strip);
  }

  public void RemoveAura(int spawn_id) {
    questinterfacePINVOKE.Mob_RemoveAura__SWIG_2(swigCPtr, spawn_id);
  }

  public void RemoveAllAuras() {
    questinterfacePINVOKE.Mob_RemoveAllAuras(swigCPtr);
  }

  public Mob.AuraMgr GetAuraMgr() {
    Mob.AuraMgr ret = new Mob.AuraMgr(questinterfacePINVOKE.Mob_GetAuraMgr(swigCPtr), false);
    return ret;
  }

  public void TriggerDefensiveProcs(Mob on, ushort hand, bool FromSkillProc, long damage) {
    questinterfacePINVOKE.Mob_TriggerDefensiveProcs__SWIG_0(swigCPtr, Mob.getCPtr(on), hand, FromSkillProc, damage);
  }

  public void TriggerDefensiveProcs(Mob on, ushort hand, bool FromSkillProc) {
    questinterfacePINVOKE.Mob_TriggerDefensiveProcs__SWIG_1(swigCPtr, Mob.getCPtr(on), hand, FromSkillProc);
  }

  public void TriggerDefensiveProcs(Mob on, ushort hand) {
    questinterfacePINVOKE.Mob_TriggerDefensiveProcs__SWIG_2(swigCPtr, Mob.getCPtr(on), hand);
  }

  public void TriggerDefensiveProcs(Mob on) {
    questinterfacePINVOKE.Mob_TriggerDefensiveProcs__SWIG_3(swigCPtr, Mob.getCPtr(on));
  }

  public bool AddRangedProc(ushort spell_id, ushort iChance, ushort base_spell_id, uint proc_reuse_time) {
    bool ret = questinterfacePINVOKE.Mob_AddRangedProc__SWIG_0(swigCPtr, spell_id, iChance, base_spell_id, proc_reuse_time);
    return ret;
  }

  public bool AddRangedProc(ushort spell_id, ushort iChance, ushort base_spell_id) {
    bool ret = questinterfacePINVOKE.Mob_AddRangedProc__SWIG_1(swigCPtr, spell_id, iChance, base_spell_id);
    return ret;
  }

  public bool AddRangedProc(ushort spell_id, ushort iChance) {
    bool ret = questinterfacePINVOKE.Mob_AddRangedProc__SWIG_2(swigCPtr, spell_id, iChance);
    return ret;
  }

  public bool AddRangedProc(ushort spell_id) {
    bool ret = questinterfacePINVOKE.Mob_AddRangedProc__SWIG_3(swigCPtr, spell_id);
    return ret;
  }

  public bool RemoveRangedProc(ushort spell_id, bool bAll) {
    bool ret = questinterfacePINVOKE.Mob_RemoveRangedProc__SWIG_0(swigCPtr, spell_id, bAll);
    return ret;
  }

  public bool RemoveRangedProc(ushort spell_id) {
    bool ret = questinterfacePINVOKE.Mob_RemoveRangedProc__SWIG_1(swigCPtr, spell_id);
    return ret;
  }

  public bool HasRangedProcs() {
    bool ret = questinterfacePINVOKE.Mob_HasRangedProcs(swigCPtr);
    return ret;
  }

  public bool AddDefensiveProc(ushort spell_id, ushort iChance, ushort base_spell_id, uint proc_reuse_time) {
    bool ret = questinterfacePINVOKE.Mob_AddDefensiveProc__SWIG_0(swigCPtr, spell_id, iChance, base_spell_id, proc_reuse_time);
    return ret;
  }

  public bool AddDefensiveProc(ushort spell_id, ushort iChance, ushort base_spell_id) {
    bool ret = questinterfacePINVOKE.Mob_AddDefensiveProc__SWIG_1(swigCPtr, spell_id, iChance, base_spell_id);
    return ret;
  }

  public bool AddDefensiveProc(ushort spell_id, ushort iChance) {
    bool ret = questinterfacePINVOKE.Mob_AddDefensiveProc__SWIG_2(swigCPtr, spell_id, iChance);
    return ret;
  }

  public bool AddDefensiveProc(ushort spell_id) {
    bool ret = questinterfacePINVOKE.Mob_AddDefensiveProc__SWIG_3(swigCPtr, spell_id);
    return ret;
  }

  public bool RemoveDefensiveProc(ushort spell_id, bool bAll) {
    bool ret = questinterfacePINVOKE.Mob_RemoveDefensiveProc__SWIG_0(swigCPtr, spell_id, bAll);
    return ret;
  }

  public bool RemoveDefensiveProc(ushort spell_id) {
    bool ret = questinterfacePINVOKE.Mob_RemoveDefensiveProc__SWIG_1(swigCPtr, spell_id);
    return ret;
  }

  public bool HasDefensiveProcs() {
    bool ret = questinterfacePINVOKE.Mob_HasDefensiveProcs(swigCPtr);
    return ret;
  }

  public bool HasSkillProcs() {
    bool ret = questinterfacePINVOKE.Mob_HasSkillProcs(swigCPtr);
    return ret;
  }

  public bool HasSkillProcSuccess() {
    bool ret = questinterfacePINVOKE.Mob_HasSkillProcSuccess(swigCPtr);
    return ret;
  }

  public bool AddProcToWeapon(ushort spell_id, bool bPerma, ushort iChance, ushort base_spell_id, int level_override, uint proc_reuse_time) {
    bool ret = questinterfacePINVOKE.Mob_AddProcToWeapon__SWIG_0(swigCPtr, spell_id, bPerma, iChance, base_spell_id, level_override, proc_reuse_time);
    return ret;
  }

  public bool AddProcToWeapon(ushort spell_id, bool bPerma, ushort iChance, ushort base_spell_id, int level_override) {
    bool ret = questinterfacePINVOKE.Mob_AddProcToWeapon__SWIG_1(swigCPtr, spell_id, bPerma, iChance, base_spell_id, level_override);
    return ret;
  }

  public bool AddProcToWeapon(ushort spell_id, bool bPerma, ushort iChance, ushort base_spell_id) {
    bool ret = questinterfacePINVOKE.Mob_AddProcToWeapon__SWIG_2(swigCPtr, spell_id, bPerma, iChance, base_spell_id);
    return ret;
  }

  public bool AddProcToWeapon(ushort spell_id, bool bPerma, ushort iChance) {
    bool ret = questinterfacePINVOKE.Mob_AddProcToWeapon__SWIG_3(swigCPtr, spell_id, bPerma, iChance);
    return ret;
  }

  public bool AddProcToWeapon(ushort spell_id, bool bPerma) {
    bool ret = questinterfacePINVOKE.Mob_AddProcToWeapon__SWIG_4(swigCPtr, spell_id, bPerma);
    return ret;
  }

  public bool AddProcToWeapon(ushort spell_id) {
    bool ret = questinterfacePINVOKE.Mob_AddProcToWeapon__SWIG_5(swigCPtr, spell_id);
    return ret;
  }

  public bool RemoveProcFromWeapon(ushort spell_id, bool bAll) {
    bool ret = questinterfacePINVOKE.Mob_RemoveProcFromWeapon__SWIG_0(swigCPtr, spell_id, bAll);
    return ret;
  }

  public bool RemoveProcFromWeapon(ushort spell_id) {
    bool ret = questinterfacePINVOKE.Mob_RemoveProcFromWeapon__SWIG_1(swigCPtr, spell_id);
    return ret;
  }

  public bool HasProcs() {
    bool ret = questinterfacePINVOKE.Mob_HasProcs(swigCPtr);
    return ret;
  }

  public bool IsCombatProc(ushort spell_id) {
    bool ret = questinterfacePINVOKE.Mob_IsCombatProc(swigCPtr, spell_id);
    return ret;
  }

  public virtual bool IsRaidTarget() {
    bool ret = questinterfacePINVOKE.Mob_IsRaidTarget(swigCPtr);
    return ret;
  }

  public virtual bool IsAttackAllowed(Mob target, bool isSpellAttack) {
    bool ret = questinterfacePINVOKE.Mob_IsAttackAllowed__SWIG_0(swigCPtr, Mob.getCPtr(target), isSpellAttack);
    return ret;
  }

  public virtual bool IsAttackAllowed(Mob target) {
    bool ret = questinterfacePINVOKE.Mob_IsAttackAllowed__SWIG_1(swigCPtr, Mob.getCPtr(target));
    return ret;
  }

  public bool IsTargeted() {
    bool ret = questinterfacePINVOKE.Mob_IsTargeted__SWIG_0(swigCPtr);
    return ret;
  }

  public void IsTargeted(int in_tar) {
    questinterfacePINVOKE.Mob_IsTargeted__SWIG_1(swigCPtr, in_tar);
  }

  public void SetFollowID(uint id) {
    questinterfacePINVOKE.Mob_SetFollowID(swigCPtr, id);
  }

  public void SetFollowDistance(uint dist) {
    questinterfacePINVOKE.Mob_SetFollowDistance(swigCPtr, dist);
  }

  public void SetFollowCanRun(bool v) {
    questinterfacePINVOKE.Mob_SetFollowCanRun(swigCPtr, v);
  }

  public uint GetFollowID() {
    uint ret = questinterfacePINVOKE.Mob_GetFollowID(swigCPtr);
    return ret;
  }

  public uint GetFollowDistance() {
    uint ret = questinterfacePINVOKE.Mob_GetFollowDistance(swigCPtr);
    return ret;
  }

  public bool GetFollowCanRun() {
    bool ret = questinterfacePINVOKE.Mob_GetFollowCanRun(swigCPtr);
    return ret;
  }

  public bool IsRareSpawn() {
    bool ret = questinterfacePINVOKE.Mob_IsRareSpawn(swigCPtr);
    return ret;
  }

  public void SetRareSpawn(bool in_) {
    questinterfacePINVOKE.Mob_SetRareSpawn(swigCPtr, in_);
  }

  public virtual void Message(uint type, string message) {
    questinterfacePINVOKE.Mob_Message(swigCPtr, type, message);
  }

  public virtual void MessageString(uint type, uint string_id, uint distance) {
    questinterfacePINVOKE.Mob_MessageString__SWIG_0(swigCPtr, type, string_id, distance);
  }

  public virtual void MessageString(uint type, uint string_id) {
    questinterfacePINVOKE.Mob_MessageString__SWIG_1(swigCPtr, type, string_id);
  }

  public virtual void MessageString(uint type, uint string_id, string message, string message2, string message3, string message4, string message5, string message6, string message7, string message8, string message9, uint distance) {
    questinterfacePINVOKE.Mob_MessageString__SWIG_2(swigCPtr, type, string_id, message, message2, message3, message4, message5, message6, message7, message8, message9, distance);
  }

  public virtual void MessageString(uint type, uint string_id, string message, string message2, string message3, string message4, string message5, string message6, string message7, string message8, string message9) {
    questinterfacePINVOKE.Mob_MessageString__SWIG_3(swigCPtr, type, string_id, message, message2, message3, message4, message5, message6, message7, message8, message9);
  }

  public virtual void MessageString(uint type, uint string_id, string message, string message2, string message3, string message4, string message5, string message6, string message7, string message8) {
    questinterfacePINVOKE.Mob_MessageString__SWIG_4(swigCPtr, type, string_id, message, message2, message3, message4, message5, message6, message7, message8);
  }

  public virtual void MessageString(uint type, uint string_id, string message, string message2, string message3, string message4, string message5, string message6, string message7) {
    questinterfacePINVOKE.Mob_MessageString__SWIG_5(swigCPtr, type, string_id, message, message2, message3, message4, message5, message6, message7);
  }

  public virtual void MessageString(uint type, uint string_id, string message, string message2, string message3, string message4, string message5, string message6) {
    questinterfacePINVOKE.Mob_MessageString__SWIG_6(swigCPtr, type, string_id, message, message2, message3, message4, message5, message6);
  }

  public virtual void MessageString(uint type, uint string_id, string message, string message2, string message3, string message4, string message5) {
    questinterfacePINVOKE.Mob_MessageString__SWIG_7(swigCPtr, type, string_id, message, message2, message3, message4, message5);
  }

  public virtual void MessageString(uint type, uint string_id, string message, string message2, string message3, string message4) {
    questinterfacePINVOKE.Mob_MessageString__SWIG_8(swigCPtr, type, string_id, message, message2, message3, message4);
  }

  public virtual void MessageString(uint type, uint string_id, string message, string message2, string message3) {
    questinterfacePINVOKE.Mob_MessageString__SWIG_9(swigCPtr, type, string_id, message, message2, message3);
  }

  public virtual void MessageString(uint type, uint string_id, string message, string message2) {
    questinterfacePINVOKE.Mob_MessageString__SWIG_10(swigCPtr, type, string_id, message, message2);
  }

  public virtual void MessageString(uint type, uint string_id, string message) {
    questinterfacePINVOKE.Mob_MessageString__SWIG_11(swigCPtr, type, string_id, message);
  }

  public virtual void FilteredMessageString(Mob sender, uint type, SWIGTYPE_p_eqFilterType filter, uint string_id) {
    questinterfacePINVOKE.Mob_FilteredMessageString__SWIG_0(swigCPtr, Mob.getCPtr(sender), type, SWIGTYPE_p_eqFilterType.getCPtr(filter), string_id);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void FilteredMessageString(Mob sender, uint type, SWIGTYPE_p_eqFilterType filter, uint string_id, string message1, string message2, string message3, string message4, string message5, string message6, string message7, string message8, string message9) {
    questinterfacePINVOKE.Mob_FilteredMessageString__SWIG_1(swigCPtr, Mob.getCPtr(sender), type, SWIGTYPE_p_eqFilterType.getCPtr(filter), string_id, message1, message2, message3, message4, message5, message6, message7, message8, message9);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void FilteredMessageString(Mob sender, uint type, SWIGTYPE_p_eqFilterType filter, uint string_id, string message1, string message2, string message3, string message4, string message5, string message6, string message7, string message8) {
    questinterfacePINVOKE.Mob_FilteredMessageString__SWIG_2(swigCPtr, Mob.getCPtr(sender), type, SWIGTYPE_p_eqFilterType.getCPtr(filter), string_id, message1, message2, message3, message4, message5, message6, message7, message8);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void FilteredMessageString(Mob sender, uint type, SWIGTYPE_p_eqFilterType filter, uint string_id, string message1, string message2, string message3, string message4, string message5, string message6, string message7) {
    questinterfacePINVOKE.Mob_FilteredMessageString__SWIG_3(swigCPtr, Mob.getCPtr(sender), type, SWIGTYPE_p_eqFilterType.getCPtr(filter), string_id, message1, message2, message3, message4, message5, message6, message7);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void FilteredMessageString(Mob sender, uint type, SWIGTYPE_p_eqFilterType filter, uint string_id, string message1, string message2, string message3, string message4, string message5, string message6) {
    questinterfacePINVOKE.Mob_FilteredMessageString__SWIG_4(swigCPtr, Mob.getCPtr(sender), type, SWIGTYPE_p_eqFilterType.getCPtr(filter), string_id, message1, message2, message3, message4, message5, message6);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void FilteredMessageString(Mob sender, uint type, SWIGTYPE_p_eqFilterType filter, uint string_id, string message1, string message2, string message3, string message4, string message5) {
    questinterfacePINVOKE.Mob_FilteredMessageString__SWIG_5(swigCPtr, Mob.getCPtr(sender), type, SWIGTYPE_p_eqFilterType.getCPtr(filter), string_id, message1, message2, message3, message4, message5);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void FilteredMessageString(Mob sender, uint type, SWIGTYPE_p_eqFilterType filter, uint string_id, string message1, string message2, string message3, string message4) {
    questinterfacePINVOKE.Mob_FilteredMessageString__SWIG_6(swigCPtr, Mob.getCPtr(sender), type, SWIGTYPE_p_eqFilterType.getCPtr(filter), string_id, message1, message2, message3, message4);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void FilteredMessageString(Mob sender, uint type, SWIGTYPE_p_eqFilterType filter, uint string_id, string message1, string message2, string message3) {
    questinterfacePINVOKE.Mob_FilteredMessageString__SWIG_7(swigCPtr, Mob.getCPtr(sender), type, SWIGTYPE_p_eqFilterType.getCPtr(filter), string_id, message1, message2, message3);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void FilteredMessageString(Mob sender, uint type, SWIGTYPE_p_eqFilterType filter, uint string_id, string message1, string message2) {
    questinterfacePINVOKE.Mob_FilteredMessageString__SWIG_8(swigCPtr, Mob.getCPtr(sender), type, SWIGTYPE_p_eqFilterType.getCPtr(filter), string_id, message1, message2);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void FilteredMessageString(Mob sender, uint type, SWIGTYPE_p_eqFilterType filter, uint string_id, string message1) {
    questinterfacePINVOKE.Mob_FilteredMessageString__SWIG_9(swigCPtr, Mob.getCPtr(sender), type, SWIGTYPE_p_eqFilterType.getCPtr(filter), string_id, message1);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Say(string format) {
    questinterfacePINVOKE.Mob_Say(swigCPtr, format);
  }

  public void SayString(uint string_id, string message3, string message4, string message5, string message6, string message7, string message8, string message9) {
    questinterfacePINVOKE.Mob_SayString__SWIG_0(swigCPtr, string_id, message3, message4, message5, message6, message7, message8, message9);
  }

  public void SayString(uint string_id, string message3, string message4, string message5, string message6, string message7, string message8) {
    questinterfacePINVOKE.Mob_SayString__SWIG_1(swigCPtr, string_id, message3, message4, message5, message6, message7, message8);
  }

  public void SayString(uint string_id, string message3, string message4, string message5, string message6, string message7) {
    questinterfacePINVOKE.Mob_SayString__SWIG_2(swigCPtr, string_id, message3, message4, message5, message6, message7);
  }

  public void SayString(uint string_id, string message3, string message4, string message5, string message6) {
    questinterfacePINVOKE.Mob_SayString__SWIG_3(swigCPtr, string_id, message3, message4, message5, message6);
  }

  public void SayString(uint string_id, string message3, string message4, string message5) {
    questinterfacePINVOKE.Mob_SayString__SWIG_4(swigCPtr, string_id, message3, message4, message5);
  }

  public void SayString(uint string_id, string message3, string message4) {
    questinterfacePINVOKE.Mob_SayString__SWIG_5(swigCPtr, string_id, message3, message4);
  }

  public void SayString(uint string_id, string message3) {
    questinterfacePINVOKE.Mob_SayString__SWIG_6(swigCPtr, string_id, message3);
  }

  public void SayString(uint string_id) {
    questinterfacePINVOKE.Mob_SayString__SWIG_7(swigCPtr, string_id);
  }

  public void SayString(uint type, uint string_id, string message3, string message4, string message5, string message6, string message7, string message8, string message9) {
    questinterfacePINVOKE.Mob_SayString__SWIG_8(swigCPtr, type, string_id, message3, message4, message5, message6, message7, message8, message9);
  }

  public void SayString(uint type, uint string_id, string message3, string message4, string message5, string message6, string message7, string message8) {
    questinterfacePINVOKE.Mob_SayString__SWIG_9(swigCPtr, type, string_id, message3, message4, message5, message6, message7, message8);
  }

  public void SayString(uint type, uint string_id, string message3, string message4, string message5, string message6, string message7) {
    questinterfacePINVOKE.Mob_SayString__SWIG_10(swigCPtr, type, string_id, message3, message4, message5, message6, message7);
  }

  public void SayString(uint type, uint string_id, string message3, string message4, string message5, string message6) {
    questinterfacePINVOKE.Mob_SayString__SWIG_11(swigCPtr, type, string_id, message3, message4, message5, message6);
  }

  public void SayString(uint type, uint string_id, string message3, string message4, string message5) {
    questinterfacePINVOKE.Mob_SayString__SWIG_12(swigCPtr, type, string_id, message3, message4, message5);
  }

  public void SayString(uint type, uint string_id, string message3, string message4) {
    questinterfacePINVOKE.Mob_SayString__SWIG_13(swigCPtr, type, string_id, message3, message4);
  }

  public void SayString(uint type, uint string_id, string message3) {
    questinterfacePINVOKE.Mob_SayString__SWIG_14(swigCPtr, type, string_id, message3);
  }

  public void SayString(uint type, uint string_id) {
    questinterfacePINVOKE.Mob_SayString__SWIG_15(swigCPtr, type, string_id);
  }

  public void SayString(Client to, uint string_id, string message3, string message4, string message5, string message6, string message7, string message8, string message9) {
    questinterfacePINVOKE.Mob_SayString__SWIG_16(swigCPtr, Client.getCPtr(to), string_id, message3, message4, message5, message6, message7, message8, message9);
  }

  public void SayString(Client to, uint string_id, string message3, string message4, string message5, string message6, string message7, string message8) {
    questinterfacePINVOKE.Mob_SayString__SWIG_17(swigCPtr, Client.getCPtr(to), string_id, message3, message4, message5, message6, message7, message8);
  }

  public void SayString(Client to, uint string_id, string message3, string message4, string message5, string message6, string message7) {
    questinterfacePINVOKE.Mob_SayString__SWIG_18(swigCPtr, Client.getCPtr(to), string_id, message3, message4, message5, message6, message7);
  }

  public void SayString(Client to, uint string_id, string message3, string message4, string message5, string message6) {
    questinterfacePINVOKE.Mob_SayString__SWIG_19(swigCPtr, Client.getCPtr(to), string_id, message3, message4, message5, message6);
  }

  public void SayString(Client to, uint string_id, string message3, string message4, string message5) {
    questinterfacePINVOKE.Mob_SayString__SWIG_20(swigCPtr, Client.getCPtr(to), string_id, message3, message4, message5);
  }

  public void SayString(Client to, uint string_id, string message3, string message4) {
    questinterfacePINVOKE.Mob_SayString__SWIG_21(swigCPtr, Client.getCPtr(to), string_id, message3, message4);
  }

  public void SayString(Client to, uint string_id, string message3) {
    questinterfacePINVOKE.Mob_SayString__SWIG_22(swigCPtr, Client.getCPtr(to), string_id, message3);
  }

  public void SayString(Client to, uint string_id) {
    questinterfacePINVOKE.Mob_SayString__SWIG_23(swigCPtr, Client.getCPtr(to), string_id);
  }

  public void SayString(Client to, uint type, uint string_id, string message3, string message4, string message5, string message6, string message7, string message8, string message9) {
    questinterfacePINVOKE.Mob_SayString__SWIG_24(swigCPtr, Client.getCPtr(to), type, string_id, message3, message4, message5, message6, message7, message8, message9);
  }

  public void SayString(Client to, uint type, uint string_id, string message3, string message4, string message5, string message6, string message7, string message8) {
    questinterfacePINVOKE.Mob_SayString__SWIG_25(swigCPtr, Client.getCPtr(to), type, string_id, message3, message4, message5, message6, message7, message8);
  }

  public void SayString(Client to, uint type, uint string_id, string message3, string message4, string message5, string message6, string message7) {
    questinterfacePINVOKE.Mob_SayString__SWIG_26(swigCPtr, Client.getCPtr(to), type, string_id, message3, message4, message5, message6, message7);
  }

  public void SayString(Client to, uint type, uint string_id, string message3, string message4, string message5, string message6) {
    questinterfacePINVOKE.Mob_SayString__SWIG_27(swigCPtr, Client.getCPtr(to), type, string_id, message3, message4, message5, message6);
  }

  public void SayString(Client to, uint type, uint string_id, string message3, string message4, string message5) {
    questinterfacePINVOKE.Mob_SayString__SWIG_28(swigCPtr, Client.getCPtr(to), type, string_id, message3, message4, message5);
  }

  public void SayString(Client to, uint type, uint string_id, string message3, string message4) {
    questinterfacePINVOKE.Mob_SayString__SWIG_29(swigCPtr, Client.getCPtr(to), type, string_id, message3, message4);
  }

  public void SayString(Client to, uint type, uint string_id, string message3) {
    questinterfacePINVOKE.Mob_SayString__SWIG_30(swigCPtr, Client.getCPtr(to), type, string_id, message3);
  }

  public void SayString(Client to, uint type, uint string_id) {
    questinterfacePINVOKE.Mob_SayString__SWIG_31(swigCPtr, Client.getCPtr(to), type, string_id);
  }

  public void Shout(string format) {
    questinterfacePINVOKE.Mob_Shout(swigCPtr, format);
  }

  public void Emote(string format) {
    questinterfacePINVOKE.Mob_Emote(swigCPtr, format);
  }

  public void QuestJournalledSay(Client QuestInitiator, string str, Options opts) {
    questinterfacePINVOKE.Mob_QuestJournalledSay(swigCPtr, Client.getCPtr(QuestInitiator), str, Options.getCPtr(opts));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetItemStat(uint item_id, SWIGTYPE_p_std__string identifier) {
    int ret = questinterfacePINVOKE.Mob_GetItemStat(swigCPtr, item_id, SWIGTYPE_p_std__string.getCPtr(identifier));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public long CalcFocusEffect(focusType type, ushort focus_id, ushort spell_id, bool best_focus, ushort casterid, Mob caster) {
    long ret = questinterfacePINVOKE.Mob_CalcFocusEffect__SWIG_0(swigCPtr, (int)type, focus_id, spell_id, best_focus, casterid, Mob.getCPtr(caster));
    return ret;
  }

  public long CalcFocusEffect(focusType type, ushort focus_id, ushort spell_id, bool best_focus, ushort casterid) {
    long ret = questinterfacePINVOKE.Mob_CalcFocusEffect__SWIG_1(swigCPtr, (int)type, focus_id, spell_id, best_focus, casterid);
    return ret;
  }

  public long CalcFocusEffect(focusType type, ushort focus_id, ushort spell_id, bool best_focus) {
    long ret = questinterfacePINVOKE.Mob_CalcFocusEffect__SWIG_2(swigCPtr, (int)type, focus_id, spell_id, best_focus);
    return ret;
  }

  public long CalcFocusEffect(focusType type, ushort focus_id, ushort spell_id) {
    long ret = questinterfacePINVOKE.Mob_CalcFocusEffect__SWIG_3(swigCPtr, (int)type, focus_id, spell_id);
    return ret;
  }

  public byte IsFocusEffect(ushort spellid, int effect_index, bool AA, uint aa_effect) {
    byte ret = questinterfacePINVOKE.Mob_IsFocusEffect__SWIG_0(swigCPtr, spellid, effect_index, AA, aa_effect);
    return ret;
  }

  public byte IsFocusEffect(ushort spellid, int effect_index, bool AA) {
    byte ret = questinterfacePINVOKE.Mob_IsFocusEffect__SWIG_1(swigCPtr, spellid, effect_index, AA);
    return ret;
  }

  public byte IsFocusEffect(ushort spellid, int effect_index) {
    byte ret = questinterfacePINVOKE.Mob_IsFocusEffect__SWIG_2(swigCPtr, spellid, effect_index);
    return ret;
  }

  public void SendIllusionPacket(AppearanceStruct a) {
    questinterfacePINVOKE.Mob_SendIllusionPacket(swigCPtr, AppearanceStruct.getCPtr(a));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void CloneAppearance(Mob other, bool clone_name) {
    questinterfacePINVOKE.Mob_CloneAppearance__SWIG_0(swigCPtr, Mob.getCPtr(other), clone_name);
  }

  public void CloneAppearance(Mob other) {
    questinterfacePINVOKE.Mob_CloneAppearance__SWIG_1(swigCPtr, Mob.getCPtr(other));
  }

  public void SetFaceAppearance(SWIGTYPE_p_FaceChange_Struct face, bool skip_sender) {
    questinterfacePINVOKE.Mob_SetFaceAppearance__SWIG_0(swigCPtr, SWIGTYPE_p_FaceChange_Struct.getCPtr(face), skip_sender);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFaceAppearance(SWIGTYPE_p_FaceChange_Struct face) {
    questinterfacePINVOKE.Mob_SetFaceAppearance__SWIG_1(swigCPtr, SWIGTYPE_p_FaceChange_Struct.getCPtr(face));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool RandomizeFeatures(bool send_illusion, bool set_variables) {
    bool ret = questinterfacePINVOKE.Mob_RandomizeFeatures__SWIG_0(swigCPtr, send_illusion, set_variables);
    return ret;
  }

  public bool RandomizeFeatures(bool send_illusion) {
    bool ret = questinterfacePINVOKE.Mob_RandomizeFeatures__SWIG_1(swigCPtr, send_illusion);
    return ret;
  }

  public bool RandomizeFeatures() {
    bool ret = questinterfacePINVOKE.Mob_RandomizeFeatures__SWIG_2(swigCPtr);
    return ret;
  }

  public virtual void Stun(int duration) {
    questinterfacePINVOKE.Mob_Stun(swigCPtr, duration);
  }

  public virtual void UnStun() {
    questinterfacePINVOKE.Mob_UnStun(swigCPtr);
  }

  public void Silence(bool newval) {
    questinterfacePINVOKE.Mob_Silence(swigCPtr, newval);
  }

  public void Amnesia(bool newval) {
    questinterfacePINVOKE.Mob_Amnesia(swigCPtr, newval);
  }

  public void TemporaryPets(ushort spell_id, Mob target, string name_override, uint duration_override, bool followme, bool sticktarg, SWIGTYPE_p_unsigned_short controlled_pet_id) {
    questinterfacePINVOKE.Mob_TemporaryPets__SWIG_0(swigCPtr, spell_id, Mob.getCPtr(target), name_override, duration_override, followme, sticktarg, SWIGTYPE_p_unsigned_short.getCPtr(controlled_pet_id));
  }

  public void TemporaryPets(ushort spell_id, Mob target, string name_override, uint duration_override, bool followme, bool sticktarg) {
    questinterfacePINVOKE.Mob_TemporaryPets__SWIG_1(swigCPtr, spell_id, Mob.getCPtr(target), name_override, duration_override, followme, sticktarg);
  }

  public void TemporaryPets(ushort spell_id, Mob target, string name_override, uint duration_override, bool followme) {
    questinterfacePINVOKE.Mob_TemporaryPets__SWIG_2(swigCPtr, spell_id, Mob.getCPtr(target), name_override, duration_override, followme);
  }

  public void TemporaryPets(ushort spell_id, Mob target, string name_override, uint duration_override) {
    questinterfacePINVOKE.Mob_TemporaryPets__SWIG_3(swigCPtr, spell_id, Mob.getCPtr(target), name_override, duration_override);
  }

  public void TemporaryPets(ushort spell_id, Mob target, string name_override) {
    questinterfacePINVOKE.Mob_TemporaryPets__SWIG_4(swigCPtr, spell_id, Mob.getCPtr(target), name_override);
  }

  public void TemporaryPets(ushort spell_id, Mob target) {
    questinterfacePINVOKE.Mob_TemporaryPets__SWIG_5(swigCPtr, spell_id, Mob.getCPtr(target));
  }

  public void TypesTemporaryPets(uint typesid, Mob target, string name_override, uint duration_override, bool followme, bool sticktarg) {
    questinterfacePINVOKE.Mob_TypesTemporaryPets__SWIG_0(swigCPtr, typesid, Mob.getCPtr(target), name_override, duration_override, followme, sticktarg);
  }

  public void TypesTemporaryPets(uint typesid, Mob target, string name_override, uint duration_override, bool followme) {
    questinterfacePINVOKE.Mob_TypesTemporaryPets__SWIG_1(swigCPtr, typesid, Mob.getCPtr(target), name_override, duration_override, followme);
  }

  public void TypesTemporaryPets(uint typesid, Mob target, string name_override, uint duration_override) {
    questinterfacePINVOKE.Mob_TypesTemporaryPets__SWIG_2(swigCPtr, typesid, Mob.getCPtr(target), name_override, duration_override);
  }

  public void TypesTemporaryPets(uint typesid, Mob target, string name_override) {
    questinterfacePINVOKE.Mob_TypesTemporaryPets__SWIG_3(swigCPtr, typesid, Mob.getCPtr(target), name_override);
  }

  public void TypesTemporaryPets(uint typesid, Mob target) {
    questinterfacePINVOKE.Mob_TypesTemporaryPets__SWIG_4(swigCPtr, typesid, Mob.getCPtr(target));
  }

  public void WakeTheDead(ushort spell_id, Corpse corpse_to_use, Mob target, uint duration) {
    questinterfacePINVOKE.Mob_WakeTheDead(swigCPtr, spell_id, Corpse.getCPtr(corpse_to_use), Mob.getCPtr(target), duration);
  }

  public void Spin() {
    questinterfacePINVOKE.Mob_Spin(swigCPtr);
  }

  public void Kill() {
    questinterfacePINVOKE.Mob_Kill(swigCPtr);
  }

  public bool PassCharismaCheck(Mob caster, ushort spell_id) {
    bool ret = questinterfacePINVOKE.Mob_PassCharismaCheck(swigCPtr, Mob.getCPtr(caster), spell_id);
    return ret;
  }

  public bool TryDeathSave() {
    bool ret = questinterfacePINVOKE.Mob_TryDeathSave(swigCPtr);
    return ret;
  }

  public bool TryDivineSave() {
    bool ret = questinterfacePINVOKE.Mob_TryDivineSave(swigCPtr);
    return ret;
  }

  public void TryTriggerOnCastFocusEffect(focusType type, ushort spell_id) {
    questinterfacePINVOKE.Mob_TryTriggerOnCastFocusEffect(swigCPtr, (int)type, spell_id);
  }

  public bool TryTriggerOnCastProc(ushort focusspellid, ushort spell_id, ushort proc_spellid) {
    bool ret = questinterfacePINVOKE.Mob_TryTriggerOnCastProc(swigCPtr, focusspellid, spell_id, proc_spellid);
    return ret;
  }

  public bool TrySpellTrigger(Mob target, uint spell_id, int effect) {
    bool ret = questinterfacePINVOKE.Mob_TrySpellTrigger(swigCPtr, Mob.getCPtr(target), spell_id, effect);
    return ret;
  }

  public void TryTriggerOnCastRequirement() {
    questinterfacePINVOKE.Mob_TryTriggerOnCastRequirement(swigCPtr);
  }

  public void TryTwincast(Mob caster, Mob target, uint spell_id) {
    questinterfacePINVOKE.Mob_TryTwincast(swigCPtr, Mob.getCPtr(caster), Mob.getCPtr(target), spell_id);
  }

  public void TrySympatheticProc(Mob target, uint spell_id) {
    questinterfacePINVOKE.Mob_TrySympatheticProc(swigCPtr, Mob.getCPtr(target), spell_id);
  }

  public ushort GetSympatheticFocusEffect(focusType type, ushort spell_id) {
    ushort ret = questinterfacePINVOKE.Mob_GetSympatheticFocusEffect(swigCPtr, (int)type, spell_id);
    return ret;
  }

  public bool TryFadeEffect(int slot) {
    bool ret = questinterfacePINVOKE.Mob_TryFadeEffect(swigCPtr, slot);
    return ret;
  }

  public void DispelMagic(Mob casterm, ushort spell_id, int effect_value) {
    questinterfacePINVOKE.Mob_DispelMagic(swigCPtr, Mob.getCPtr(casterm), spell_id, effect_value);
  }

  public ushort GetSpellEffectResistChance(ushort spell_id) {
    ushort ret = questinterfacePINVOKE.Mob_GetSpellEffectResistChance(swigCPtr, spell_id);
    return ret;
  }

  public int GetVulnerability(Mob caster, uint spell_id, uint ticsremaining, bool from_buff_tic) {
    int ret = questinterfacePINVOKE.Mob_GetVulnerability__SWIG_0(swigCPtr, Mob.getCPtr(caster), spell_id, ticsremaining, from_buff_tic);
    return ret;
  }

  public int GetVulnerability(Mob caster, uint spell_id, uint ticsremaining) {
    int ret = questinterfacePINVOKE.Mob_GetVulnerability__SWIG_1(swigCPtr, Mob.getCPtr(caster), spell_id, ticsremaining);
    return ret;
  }

  public long GetFcDamageAmtIncoming(Mob caster, int spell_id, bool from_buff_tic) {
    long ret = questinterfacePINVOKE.Mob_GetFcDamageAmtIncoming__SWIG_0(swigCPtr, Mob.getCPtr(caster), spell_id, from_buff_tic);
    return ret;
  }

  public long GetFcDamageAmtIncoming(Mob caster, int spell_id) {
    long ret = questinterfacePINVOKE.Mob_GetFcDamageAmtIncoming__SWIG_1(swigCPtr, Mob.getCPtr(caster), spell_id);
    return ret;
  }

  public long GetFocusIncoming(focusType type, int effect, Mob caster, uint spell_id) {
    long ret = questinterfacePINVOKE.Mob_GetFocusIncoming(swigCPtr, (int)type, effect, Mob.getCPtr(caster), spell_id);
    return ret;
  }

  public int GetSkillDmgTaken(SWIGTYPE_p_EQ__skills__SkillType skill_used, ExtraAttackOptions opts) {
    int ret = questinterfacePINVOKE.Mob_GetSkillDmgTaken__SWIG_0(swigCPtr, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skill_used), ExtraAttackOptions.getCPtr(opts));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetSkillDmgTaken(SWIGTYPE_p_EQ__skills__SkillType skill_used) {
    int ret = questinterfacePINVOKE.Mob_GetSkillDmgTaken__SWIG_1(swigCPtr, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skill_used));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetPositionalDmgTaken(Mob attacker) {
    int ret = questinterfacePINVOKE.Mob_GetPositionalDmgTaken(swigCPtr, Mob.getCPtr(attacker));
    return ret;
  }

  public int GetPositionalDmgTakenAmt(Mob attacker) {
    int ret = questinterfacePINVOKE.Mob_GetPositionalDmgTakenAmt(swigCPtr, Mob.getCPtr(attacker));
    return ret;
  }

  public void DoKnockback(Mob caster, uint push_back, uint push_up) {
    questinterfacePINVOKE.Mob_DoKnockback(swigCPtr, Mob.getCPtr(caster), push_back, push_up);
  }

  public short CalcResistChanceBonus() {
    short ret = questinterfacePINVOKE.Mob_CalcResistChanceBonus(swigCPtr);
    return ret;
  }

  public short CalcFearResistChance() {
    short ret = questinterfacePINVOKE.Mob_CalcFearResistChance(swigCPtr);
    return ret;
  }

  public void TrySpellOnKill(byte level, ushort spell_id) {
    questinterfacePINVOKE.Mob_TrySpellOnKill(swigCPtr, level, spell_id);
  }

  public bool TrySpellOnDeath() {
    bool ret = questinterfacePINVOKE.Mob_TrySpellOnDeath(swigCPtr);
    return ret;
  }

  public void CastOnCurer(uint spell_id) {
    questinterfacePINVOKE.Mob_CastOnCurer(swigCPtr, spell_id);
  }

  public void CastOnCure(uint spell_id) {
    questinterfacePINVOKE.Mob_CastOnCure(swigCPtr, spell_id);
  }

  public void CastOnNumHitFade(uint spell_id) {
    questinterfacePINVOKE.Mob_CastOnNumHitFade(swigCPtr, spell_id);
  }

  public void SlowMitigation(Mob caster) {
    questinterfacePINVOKE.Mob_SlowMitigation(swigCPtr, Mob.getCPtr(caster));
  }

  public short GetCritDmgMod(ushort skill, Mob owner) {
    short ret = questinterfacePINVOKE.Mob_GetCritDmgMod__SWIG_0(swigCPtr, skill, Mob.getCPtr(owner));
    return ret;
  }

  public short GetCritDmgMod(ushort skill) {
    short ret = questinterfacePINVOKE.Mob_GetCritDmgMod__SWIG_1(swigCPtr, skill);
    return ret;
  }

  public short GetMeleeDamageMod_SE(ushort skill) {
    short ret = questinterfacePINVOKE.Mob_GetMeleeDamageMod_SE(swigCPtr, skill);
    return ret;
  }

  public short GetMeleeMinDamageMod_SE(ushort skill) {
    short ret = questinterfacePINVOKE.Mob_GetMeleeMinDamageMod_SE(swigCPtr, skill);
    return ret;
  }

  public short GetCrippBlowChance() {
    short ret = questinterfacePINVOKE.Mob_GetCrippBlowChance(swigCPtr);
    return ret;
  }

  public short GetMeleeDmgPositionMod(Mob defender) {
    short ret = questinterfacePINVOKE.Mob_GetMeleeDmgPositionMod(swigCPtr, Mob.getCPtr(defender));
    return ret;
  }

  public short GetSkillReuseTime(ushort skill) {
    short ret = questinterfacePINVOKE.Mob_GetSkillReuseTime(swigCPtr, skill);
    return ret;
  }

  public int GetCriticalChanceBonus(ushort skill) {
    int ret = questinterfacePINVOKE.Mob_GetCriticalChanceBonus(swigCPtr, skill);
    return ret;
  }

  public int GetSkillDmgAmt(int skill_id) {
    int ret = questinterfacePINVOKE.Mob_GetSkillDmgAmt(swigCPtr, skill_id);
    return ret;
  }

  public short GetPositionalDmgAmt(Mob defender) {
    short ret = questinterfacePINVOKE.Mob_GetPositionalDmgAmt(swigCPtr, Mob.getCPtr(defender));
    return ret;
  }

  public bool CanBlockSpell() {
    bool ret = questinterfacePINVOKE.Mob_CanBlockSpell(swigCPtr);
    return ret;
  }

  public bool DoHPToManaCovert(int mana_cost) {
    bool ret = questinterfacePINVOKE.Mob_DoHPToManaCovert__SWIG_0(swigCPtr, mana_cost);
    return ret;
  }

  public bool DoHPToManaCovert() {
    bool ret = questinterfacePINVOKE.Mob_DoHPToManaCovert__SWIG_1(swigCPtr);
    return ret;
  }

  public sbyte GetDecayEffectValue(ushort spell_id, ushort spelleffect) {
    sbyte ret = questinterfacePINVOKE.Mob_GetDecayEffectValue(swigCPtr, spell_id, spelleffect);
    return ret;
  }

  public long GetExtraSpellAmt(ushort spell_id, long extra_spell_amt, long base_spell_dmg) {
    long ret = questinterfacePINVOKE.Mob_GetExtraSpellAmt(swigCPtr, spell_id, extra_spell_amt, base_spell_dmg);
    return ret;
  }

  public void MeleeLifeTap(long damage) {
    questinterfacePINVOKE.Mob_MeleeLifeTap(swigCPtr, damage);
  }

  public bool PassCastRestriction(int value) {
    bool ret = questinterfacePINVOKE.Mob_PassCastRestriction(swigCPtr, value);
    return ret;
  }

  public void SendCastRestrictionMessage(int requirement_id, bool is_target_requirement, bool is_discipline) {
    questinterfacePINVOKE.Mob_SendCastRestrictionMessage__SWIG_0(swigCPtr, requirement_id, is_target_requirement, is_discipline);
  }

  public void SendCastRestrictionMessage(int requirement_id, bool is_target_requirement) {
    questinterfacePINVOKE.Mob_SendCastRestrictionMessage__SWIG_1(swigCPtr, requirement_id, is_target_requirement);
  }

  public void SendCastRestrictionMessage(int requirement_id) {
    questinterfacePINVOKE.Mob_SendCastRestrictionMessage__SWIG_2(swigCPtr, requirement_id);
  }

  public bool ImprovedTaunt() {
    bool ret = questinterfacePINVOKE.Mob_ImprovedTaunt(swigCPtr);
    return ret;
  }

  public bool TryRootFadeByDamage(int buffslot, Mob attacker) {
    bool ret = questinterfacePINVOKE.Mob_TryRootFadeByDamage(swigCPtr, buffslot, Mob.getCPtr(attacker));
    return ret;
  }

  public float GetSlowMitigation() {
    float ret = questinterfacePINVOKE.Mob_GetSlowMitigation(swigCPtr);
    return ret;
  }

  public void CalcSpellPowerDistanceMod(ushort spell_id, float range, Mob caster) {
    questinterfacePINVOKE.Mob_CalcSpellPowerDistanceMod__SWIG_0(swigCPtr, spell_id, range, Mob.getCPtr(caster));
  }

  public void CalcSpellPowerDistanceMod(ushort spell_id, float range) {
    questinterfacePINVOKE.Mob_CalcSpellPowerDistanceMod__SWIG_1(swigCPtr, spell_id, range);
  }

  public short GetSpellPowerDistanceMod() {
    short ret = questinterfacePINVOKE.Mob_GetSpellPowerDistanceMod(swigCPtr);
    return ret;
  }

  public void SetSpellPowerDistanceMod(short value) {
    questinterfacePINVOKE.Mob_SetSpellPowerDistanceMod(swigCPtr, value);
  }

  public int GetSpellStat(uint spell_id, string identifier, byte slot) {
    int ret = questinterfacePINVOKE.Mob_GetSpellStat__SWIG_0(swigCPtr, spell_id, identifier, slot);
    return ret;
  }

  public int GetSpellStat(uint spell_id, string identifier) {
    int ret = questinterfacePINVOKE.Mob_GetSpellStat__SWIG_1(swigCPtr, spell_id, identifier);
    return ret;
  }

  public bool HarmonySpellLevelCheck(int spell_id, Mob target) {
    bool ret = questinterfacePINVOKE.Mob_HarmonySpellLevelCheck__SWIG_0(swigCPtr, spell_id, Mob.getCPtr(target));
    return ret;
  }

  public bool HarmonySpellLevelCheck(int spell_id) {
    bool ret = questinterfacePINVOKE.Mob_HarmonySpellLevelCheck__SWIG_1(swigCPtr, spell_id);
    return ret;
  }

  public bool PassCharmTargetRestriction(Mob target) {
    bool ret = questinterfacePINVOKE.Mob_PassCharmTargetRestriction(swigCPtr, Mob.getCPtr(target));
    return ret;
  }

  public bool CanFocusUseRandomEffectivenessByType(focusType type) {
    bool ret = questinterfacePINVOKE.Mob_CanFocusUseRandomEffectivenessByType(swigCPtr, (int)type);
    return ret;
  }

  public int GetFocusRandomEffectivenessValue(int focus_base, int focus_base2, bool best_focus) {
    int ret = questinterfacePINVOKE.Mob_GetFocusRandomEffectivenessValue__SWIG_0(swigCPtr, focus_base, focus_base2, best_focus);
    return ret;
  }

  public int GetFocusRandomEffectivenessValue(int focus_base, int focus_base2) {
    int ret = questinterfacePINVOKE.Mob_GetFocusRandomEffectivenessValue__SWIG_1(swigCPtr, focus_base, focus_base2);
    return ret;
  }

  public int GetHealRate() {
    int ret = questinterfacePINVOKE.Mob_GetHealRate(swigCPtr);
    return ret;
  }

  public int GetMemoryBlurChance(int base_chance) {
    int ret = questinterfacePINVOKE.Mob_GetMemoryBlurChance(swigCPtr, base_chance);
    return ret;
  }

  public bool HasBaseEffectFocus() {
    bool ret = questinterfacePINVOKE.Mob_HasBaseEffectFocus(swigCPtr);
    return ret;
  }

  public int GetDualWieldingSameDelayWeapons() {
    int ret = questinterfacePINVOKE.Mob_GetDualWieldingSameDelayWeapons(swigCPtr);
    return ret;
  }

  public void SetDualWieldingSameDelayWeapons(int val) {
    questinterfacePINVOKE.Mob_SetDualWieldingSameDelayWeapons(swigCPtr, val);
  }

  public bool IsTargetedFocusEffect(int focus_type) {
    bool ret = questinterfacePINVOKE.Mob_IsTargetedFocusEffect(swigCPtr, focus_type);
    return ret;
  }

  public bool HasPersistDeathIllusion(int spell_id) {
    bool ret = questinterfacePINVOKE.Mob_HasPersistDeathIllusion(swigCPtr, spell_id);
    return ret;
  }

  public bool TryDoubleMeleeRoundEffect() {
    bool ret = questinterfacePINVOKE.Mob_TryDoubleMeleeRoundEffect(swigCPtr);
    return ret;
  }

  public bool GetUseDoubleMeleeRoundDmgBonus() {
    bool ret = questinterfacePINVOKE.Mob_GetUseDoubleMeleeRoundDmgBonus(swigCPtr);
    return ret;
  }

  public void SetUseDoubleMeleeRoundDmgBonus(bool val) {
    questinterfacePINVOKE.Mob_SetUseDoubleMeleeRoundDmgBonus(swigCPtr, val);
  }

  public void CastSpellOnLand(Mob caster, int spell_id) {
    questinterfacePINVOKE.Mob_CastSpellOnLand(swigCPtr, Mob.getCPtr(caster), spell_id);
  }

  public bool IsFocusProcLimitTimerActive(int focus_spell_id) {
    bool ret = questinterfacePINVOKE.Mob_IsFocusProcLimitTimerActive(swigCPtr, focus_spell_id);
    return ret;
  }

  public void SetFocusProcLimitTimer(int focus_spell_id, uint focus_reuse_time) {
    questinterfacePINVOKE.Mob_SetFocusProcLimitTimer(swigCPtr, focus_spell_id, focus_reuse_time);
  }

  public bool IsProcLimitTimerActive(int base_spell_id, uint proc_reuse_time, int proc_type) {
    bool ret = questinterfacePINVOKE.Mob_IsProcLimitTimerActive(swigCPtr, base_spell_id, proc_reuse_time, proc_type);
    return ret;
  }

  public void SetProcLimitTimer(int base_spell_id, uint proc_reuse_time, int proc_type) {
    questinterfacePINVOKE.Mob_SetProcLimitTimer(swigCPtr, base_spell_id, proc_reuse_time, proc_type);
  }

  public void VirusEffectProcess() {
    questinterfacePINVOKE.Mob_VirusEffectProcess(swigCPtr);
  }

  public void SpreadVirusEffect(int spell_id, uint caster_id, int buff_tics_remaining) {
    questinterfacePINVOKE.Mob_SpreadVirusEffect(swigCPtr, spell_id, caster_id, buff_tics_remaining);
  }

  public void ModSkillDmgTaken(SWIGTYPE_p_EQ__skills__SkillType skill_num, int value) {
    questinterfacePINVOKE.Mob_ModSkillDmgTaken(swigCPtr, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skill_num), value);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public short GetModSkillDmgTaken(SWIGTYPE_p_EQ__skills__SkillType skill_num) {
    short ret = questinterfacePINVOKE.Mob_GetModSkillDmgTaken(swigCPtr, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skill_num));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void ModVulnerability(byte resist, short value) {
    questinterfacePINVOKE.Mob_ModVulnerability(swigCPtr, resist, value);
  }

  public short GetModVulnerability(byte resist) {
    short ret = questinterfacePINVOKE.Mob_GetModVulnerability(swigCPtr, resist);
    return ret;
  }

  public void SetAllowBeneficial(bool value) {
    questinterfacePINVOKE.Mob_SetAllowBeneficial(swigCPtr, value);
  }

  public bool GetAllowBeneficial() {
    bool ret = questinterfacePINVOKE.Mob_GetAllowBeneficial(swigCPtr);
    return ret;
  }

  public void SetDisableMelee(bool value) {
    questinterfacePINVOKE.Mob_SetDisableMelee(swigCPtr, value);
  }

  public bool IsMeleeDisabled() {
    bool ret = questinterfacePINVOKE.Mob_IsMeleeDisabled(swigCPtr);
    return ret;
  }

  public bool IsOffHandAtk() {
    bool ret = questinterfacePINVOKE.Mob_IsOffHandAtk(swigCPtr);
    return ret;
  }

  public void OffHandAtk(bool val) {
    questinterfacePINVOKE.Mob_OffHandAtk(swigCPtr, val);
  }

  public void SetFlurryChance(byte value) {
    questinterfacePINVOKE.Mob_SetFlurryChance(swigCPtr, value);
  }

  public byte GetFlurryChance() {
    byte ret = questinterfacePINVOKE.Mob_GetFlurryChance(swigCPtr);
    return ret;
  }

  public static uint GetAppearanceValue(SWIGTYPE_p_EmuAppearance in_appearance) {
    uint ret = questinterfacePINVOKE.Mob_GetAppearanceValue(SWIGTYPE_p_EmuAppearance.getCPtr(in_appearance));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SendAppearancePacket(uint type, uint value, bool whole_zone, bool ignore_self, Client target) {
    questinterfacePINVOKE.Mob_SendAppearancePacket__SWIG_0(swigCPtr, type, value, whole_zone, ignore_self, Client.getCPtr(target));
  }

  public void SendAppearancePacket(uint type, uint value, bool whole_zone, bool ignore_self) {
    questinterfacePINVOKE.Mob_SendAppearancePacket__SWIG_1(swigCPtr, type, value, whole_zone, ignore_self);
  }

  public void SendAppearancePacket(uint type, uint value, bool whole_zone) {
    questinterfacePINVOKE.Mob_SendAppearancePacket__SWIG_2(swigCPtr, type, value, whole_zone);
  }

  public void SendAppearancePacket(uint type, uint value) {
    questinterfacePINVOKE.Mob_SendAppearancePacket__SWIG_3(swigCPtr, type, value);
  }

  public void SetAppearance(SWIGTYPE_p_EmuAppearance app, bool ignore_self) {
    questinterfacePINVOKE.Mob_SetAppearance__SWIG_0(swigCPtr, SWIGTYPE_p_EmuAppearance.getCPtr(app), ignore_self);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetAppearance(SWIGTYPE_p_EmuAppearance app) {
    questinterfacePINVOKE.Mob_SetAppearance__SWIG_1(swigCPtr, SWIGTYPE_p_EmuAppearance.getCPtr(app));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_EmuAppearance GetAppearance() {
    SWIGTYPE_p_EmuAppearance ret = new SWIGTYPE_p_EmuAppearance(questinterfacePINVOKE.Mob_GetAppearance(swigCPtr), true);
    return ret;
  }

  public int GetAnimation() {
    int ret = questinterfacePINVOKE.Mob_GetAnimation(swigCPtr);
    return ret;
  }

  public void SetAnimation(int a) {
    questinterfacePINVOKE.Mob_SetAnimation(swigCPtr, a);
  }

  public byte GetRunAnimSpeed() {
    byte ret = questinterfacePINVOKE.Mob_GetRunAnimSpeed(swigCPtr);
    return ret;
  }

  public void SetRunAnimSpeed(sbyte in_) {
    questinterfacePINVOKE.Mob_SetRunAnimSpeed(swigCPtr, in_);
  }

  public bool IsDestructibleObject() {
    bool ret = questinterfacePINVOKE.Mob_IsDestructibleObject(swigCPtr);
    return ret;
  }

  public void SetDestructibleObject(bool in_) {
    questinterfacePINVOKE.Mob_SetDestructibleObject(swigCPtr, in_);
  }

  public byte GetInnateLightType() {
    byte ret = questinterfacePINVOKE.Mob_GetInnateLightType(swigCPtr);
    return ret;
  }

  public byte GetEquipmentLightType() {
    byte ret = questinterfacePINVOKE.Mob_GetEquipmentLightType(swigCPtr);
    return ret;
  }

  public byte GetSpellLightType() {
    byte ret = questinterfacePINVOKE.Mob_GetSpellLightType(swigCPtr);
    return ret;
  }

  public virtual void UpdateEquipmentLight() {
    questinterfacePINVOKE.Mob_UpdateEquipmentLight(swigCPtr);
  }

  public void SetSpellLightType(byte light_type) {
    questinterfacePINVOKE.Mob_SetSpellLightType(swigCPtr, light_type);
  }

  public void SendWearChangeAndLighting(sbyte last_texture) {
    questinterfacePINVOKE.Mob_SendWearChangeAndLighting(swigCPtr, last_texture);
  }

  public byte GetActiveLightType() {
    byte ret = questinterfacePINVOKE.Mob_GetActiveLightType(swigCPtr);
    return ret;
  }

  public bool UpdateActiveLight() {
    bool ret = questinterfacePINVOKE.Mob_UpdateActiveLight(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_EQ__LightSourceProfile GetLightProfile() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Mob_GetLightProfile(swigCPtr);
    SWIGTYPE_p_EQ__LightSourceProfile ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_EQ__LightSourceProfile(cPtr, false);
    return ret;
  }

  public Mob GetPet() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Mob_GetPet(swigCPtr);
    Mob ret = (cPtr == global::System.IntPtr.Zero) ? null : new Mob(cPtr, false);
    return ret;
  }

  public void SetPet(Mob newpet) {
    questinterfacePINVOKE.Mob_SetPet(swigCPtr, Mob.getCPtr(newpet));
  }

  public virtual Mob GetOwner() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Mob_GetOwner(swigCPtr);
    Mob ret = (cPtr == global::System.IntPtr.Zero) ? null : new Mob(cPtr, false);
    return ret;
  }

  public virtual Mob GetOwnerOrSelf() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Mob_GetOwnerOrSelf(swigCPtr);
    Mob ret = (cPtr == global::System.IntPtr.Zero) ? null : new Mob(cPtr, false);
    return ret;
  }

  public Mob GetUltimateOwner() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Mob_GetUltimateOwner(swigCPtr);
    Mob ret = (cPtr == global::System.IntPtr.Zero) ? null : new Mob(cPtr, false);
    return ret;
  }

  public void SetPetID(ushort NewPetID) {
    questinterfacePINVOKE.Mob_SetPetID(swigCPtr, NewPetID);
  }

  public ushort GetPetID() {
    ushort ret = questinterfacePINVOKE.Mob_GetPetID(swigCPtr);
    return ret;
  }

  public PetType GetPetType() {
    PetType ret = (PetType)questinterfacePINVOKE.Mob_GetPetType(swigCPtr);
    return ret;
  }

  public void SetPetType(PetType p) {
    questinterfacePINVOKE.Mob_SetPetType(swigCPtr, (int)p);
  }

  public short GetPetPower() {
    short ret = questinterfacePINVOKE.Mob_GetPetPower(swigCPtr);
    return ret;
  }

  public void SetPetPower(short p) {
    questinterfacePINVOKE.Mob_SetPetPower(swigCPtr, p);
  }

  public bool IsFamiliar() {
    bool ret = questinterfacePINVOKE.Mob_IsFamiliar(swigCPtr);
    return ret;
  }

  public bool IsAnimation() {
    bool ret = questinterfacePINVOKE.Mob_IsAnimation(swigCPtr);
    return ret;
  }

  public bool IsCharmed() {
    bool ret = questinterfacePINVOKE.Mob_IsCharmed(swigCPtr);
    return ret;
  }

  public bool IsTargetLockPet() {
    bool ret = questinterfacePINVOKE.Mob_IsTargetLockPet(swigCPtr);
    return ret;
  }

  public uint GetPetTargetLockID() {
    uint ret = questinterfacePINVOKE.Mob_GetPetTargetLockID(swigCPtr);
    return ret;
  }

  public void SetPetTargetLockID(uint value) {
    questinterfacePINVOKE.Mob_SetPetTargetLockID(swigCPtr, value);
  }

  public void SetOwnerID(ushort new_owner_id) {
    questinterfacePINVOKE.Mob_SetOwnerID(swigCPtr, new_owner_id);
  }

  public ushort GetOwnerID() {
    ushort ret = questinterfacePINVOKE.Mob_GetOwnerID(swigCPtr);
    return ret;
  }

  public virtual bool HasOwner() {
    bool ret = questinterfacePINVOKE.Mob_HasOwner(swigCPtr);
    return ret;
  }

  public virtual bool IsPet() {
    bool ret = questinterfacePINVOKE.Mob_IsPet(swigCPtr);
    return ret;
  }

  public bool HasPet() {
    bool ret = questinterfacePINVOKE.Mob_HasPet(swigCPtr);
    return ret;
  }

  public bool HasTempPetsActive() {
    bool ret = questinterfacePINVOKE.Mob_HasTempPetsActive(swigCPtr);
    return ret;
  }

  public void SetTempPetsActive(bool i) {
    questinterfacePINVOKE.Mob_SetTempPetsActive(swigCPtr, i);
  }

  public short GetTempPetCount() {
    short ret = questinterfacePINVOKE.Mob_GetTempPetCount(swigCPtr);
    return ret;
  }

  public void SetTempPetCount(short i) {
    questinterfacePINVOKE.Mob_SetTempPetCount(swigCPtr, i);
  }

  public bool HasPetAffinity() {
    bool ret = questinterfacePINVOKE.Mob_HasPetAffinity(swigCPtr);
    return ret;
  }

  public bool IsPetOwnerBot() {
    bool ret = questinterfacePINVOKE.Mob_IsPetOwnerBot(swigCPtr);
    return ret;
  }

  public void SetPetOwnerBot(bool b) {
    questinterfacePINVOKE.Mob_SetPetOwnerBot(swigCPtr, b);
  }

  public bool IsPetOwnerClient() {
    bool ret = questinterfacePINVOKE.Mob_IsPetOwnerClient(swigCPtr);
    return ret;
  }

  public void SetPetOwnerClient(bool b) {
    questinterfacePINVOKE.Mob_SetPetOwnerClient(swigCPtr, b);
  }

  public bool IsPetOwnerNPC() {
    bool ret = questinterfacePINVOKE.Mob_IsPetOwnerNPC(swigCPtr);
    return ret;
  }

  public void SetPetOwnerNPC(bool b) {
    questinterfacePINVOKE.Mob_SetPetOwnerNPC(swigCPtr, b);
  }

  public bool IsTempPet() {
    bool ret = questinterfacePINVOKE.Mob_IsTempPet(swigCPtr);
    return ret;
  }

  public void SetTempPet(bool value) {
    questinterfacePINVOKE.Mob_SetTempPet(swigCPtr, value);
  }

  public bool IsHorse() {
    bool ret = questinterfacePINVOKE.Mob_IsHorse(swigCPtr);
    return ret;
  }

  public int GetPetAvoidanceBonusFromOwner() {
    int ret = questinterfacePINVOKE.Mob_GetPetAvoidanceBonusFromOwner(swigCPtr);
    return ret;
  }

  public int GetPetACBonusFromOwner() {
    int ret = questinterfacePINVOKE.Mob_GetPetACBonusFromOwner(swigCPtr);
    return ret;
  }

  public int GetPetATKBonusFromOwner() {
    int ret = questinterfacePINVOKE.Mob_GetPetATKBonusFromOwner(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_bodyType GetBodyType() {
    SWIGTYPE_p_bodyType ret = new SWIGTYPE_p_bodyType(questinterfacePINVOKE.Mob_GetBodyType(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_bodyType GetOrigBodyType() {
    SWIGTYPE_p_bodyType ret = new SWIGTYPE_p_bodyType(questinterfacePINVOKE.Mob_GetOrigBodyType(swigCPtr), true);
    return ret;
  }

  public void SetBodyType(SWIGTYPE_p_bodyType new_body, bool overwrite_orig) {
    questinterfacePINVOKE.Mob_SetBodyType(swigCPtr, SWIGTYPE_p_bodyType.getCPtr(new_body), overwrite_orig);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool invulnerable {
    set {
      questinterfacePINVOKE.Mob_invulnerable_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.Mob_invulnerable_get(swigCPtr);
      return ret;
    } 
  }

  public bool qglobal {
    set {
      questinterfacePINVOKE.Mob_qglobal_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.Mob_qglobal_get(swigCPtr);
      return ret;
    } 
  }

  public virtual void SetAttackTimer() {
    questinterfacePINVOKE.Mob_SetAttackTimer(swigCPtr);
  }

  public void SetInvul(bool invul) {
    questinterfacePINVOKE.Mob_SetInvul(swigCPtr, invul);
  }

  public bool GetInvul() {
    bool ret = questinterfacePINVOKE.Mob_GetInvul(swigCPtr);
    return ret;
  }

  public void SetExtraHaste(int Haste) {
    questinterfacePINVOKE.Mob_SetExtraHaste(swigCPtr, Haste);
  }

  public virtual int GetHaste() {
    int ret = questinterfacePINVOKE.Mob_GetHaste(swigCPtr);
    return ret;
  }

  public int GetMeleeMitigation() {
    int ret = questinterfacePINVOKE.Mob_GetMeleeMitigation(swigCPtr);
    return ret;
  }

  public byte GetWeaponDamageBonus(SWIGTYPE_p_EQ__ItemData weapon, bool offhand) {
    byte ret = questinterfacePINVOKE.Mob_GetWeaponDamageBonus__SWIG_0(swigCPtr, SWIGTYPE_p_EQ__ItemData.getCPtr(weapon), offhand);
    return ret;
  }

  public byte GetWeaponDamageBonus(SWIGTYPE_p_EQ__ItemData weapon) {
    byte ret = questinterfacePINVOKE.Mob_GetWeaponDamageBonus__SWIG_1(swigCPtr, SWIGTYPE_p_EQ__ItemData.getCPtr(weapon));
    return ret;
  }

  public DamageTable GetDamageTable() {
    DamageTable ret = new DamageTable(questinterfacePINVOKE.Mob_GetDamageTable(swigCPtr), false);
    return ret;
  }

  public void ApplyDamageTable(DamageHitInfo hit) {
    questinterfacePINVOKE.Mob_ApplyDamageTable(swigCPtr, DamageHitInfo.getCPtr(hit));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual int GetHandToHandDamage() {
    int ret = questinterfacePINVOKE.Mob_GetHandToHandDamage(swigCPtr);
    return ret;
  }

  public bool CanThisClassDoubleAttack() {
    bool ret = questinterfacePINVOKE.Mob_CanThisClassDoubleAttack(swigCPtr);
    return ret;
  }

  public bool CanThisClassTripleAttack() {
    bool ret = questinterfacePINVOKE.Mob_CanThisClassTripleAttack(swigCPtr);
    return ret;
  }

  public bool CanThisClassDualWield() {
    bool ret = questinterfacePINVOKE.Mob_CanThisClassDualWield(swigCPtr);
    return ret;
  }

  public bool CanThisClassRiposte() {
    bool ret = questinterfacePINVOKE.Mob_CanThisClassRiposte(swigCPtr);
    return ret;
  }

  public bool CanThisClassDodge() {
    bool ret = questinterfacePINVOKE.Mob_CanThisClassDodge(swigCPtr);
    return ret;
  }

  public bool CanThisClassParry() {
    bool ret = questinterfacePINVOKE.Mob_CanThisClassParry(swigCPtr);
    return ret;
  }

  public bool CanThisClassBlock() {
    bool ret = questinterfacePINVOKE.Mob_CanThisClassBlock(swigCPtr);
    return ret;
  }

  public int GetHandToHandDelay() {
    int ret = questinterfacePINVOKE.Mob_GetHandToHandDelay(swigCPtr);
    return ret;
  }

  public uint GetClassLevelFactor() {
    uint ret = questinterfacePINVOKE.Mob_GetClassLevelFactor(swigCPtr);
    return ret;
  }

  public void Mesmerize() {
    questinterfacePINVOKE.Mob_Mesmerize(swigCPtr);
  }

  public bool IsMezzed() {
    bool ret = questinterfacePINVOKE.Mob_IsMezzed(swigCPtr);
    return ret;
  }

  public bool IsStunned() {
    bool ret = questinterfacePINVOKE.Mob_IsStunned(swigCPtr);
    return ret;
  }

  public bool IsSilenced() {
    bool ret = questinterfacePINVOKE.Mob_IsSilenced(swigCPtr);
    return ret;
  }

  public bool IsAmnesiad() {
    bool ret = questinterfacePINVOKE.Mob_IsAmnesiad(swigCPtr);
    return ret;
  }

  public long ReduceDamage(long damage) {
    long ret = questinterfacePINVOKE.Mob_ReduceDamage(swigCPtr, damage);
    return ret;
  }

  public long AffectMagicalDamage(long damage, ushort spell_id, bool iBuffTic, Mob attacker) {
    long ret = questinterfacePINVOKE.Mob_AffectMagicalDamage(swigCPtr, damage, spell_id, iBuffTic, Mob.getCPtr(attacker));
    return ret;
  }

  public long ReduceAllDamage(long damage) {
    long ret = questinterfacePINVOKE.Mob_ReduceAllDamage(swigCPtr, damage);
    return ret;
  }

  public void DoSpecialAttackDamage(Mob who, SWIGTYPE_p_EQ__skills__SkillType skill, int base_damage, int min_damage, int hate_override, int ReuseTime) {
    questinterfacePINVOKE.Mob_DoSpecialAttackDamage__SWIG_0(swigCPtr, Mob.getCPtr(who), SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skill), base_damage, min_damage, hate_override, ReuseTime);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void DoSpecialAttackDamage(Mob who, SWIGTYPE_p_EQ__skills__SkillType skill, int base_damage, int min_damage, int hate_override) {
    questinterfacePINVOKE.Mob_DoSpecialAttackDamage__SWIG_1(swigCPtr, Mob.getCPtr(who), SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skill), base_damage, min_damage, hate_override);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void DoSpecialAttackDamage(Mob who, SWIGTYPE_p_EQ__skills__SkillType skill, int base_damage, int min_damage) {
    questinterfacePINVOKE.Mob_DoSpecialAttackDamage__SWIG_2(swigCPtr, Mob.getCPtr(who), SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skill), base_damage, min_damage);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void DoSpecialAttackDamage(Mob who, SWIGTYPE_p_EQ__skills__SkillType skill, int base_damage) {
    questinterfacePINVOKE.Mob_DoSpecialAttackDamage__SWIG_3(swigCPtr, Mob.getCPtr(who), SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skill), base_damage);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void DoThrowingAttackDmg(Mob other, SWIGTYPE_p_EQ__ItemInstance RangeWeapon, SWIGTYPE_p_EQ__ItemData AmmoItem, int weapon_damage, short chance_mod, short focus, int ReuseTime, uint range_id, int AmmoSlot, float speed, bool DisableProcs) {
    questinterfacePINVOKE.Mob_DoThrowingAttackDmg__SWIG_0(swigCPtr, Mob.getCPtr(other), SWIGTYPE_p_EQ__ItemInstance.getCPtr(RangeWeapon), SWIGTYPE_p_EQ__ItemData.getCPtr(AmmoItem), weapon_damage, chance_mod, focus, ReuseTime, range_id, AmmoSlot, speed, DisableProcs);
  }

  public void DoThrowingAttackDmg(Mob other, SWIGTYPE_p_EQ__ItemInstance RangeWeapon, SWIGTYPE_p_EQ__ItemData AmmoItem, int weapon_damage, short chance_mod, short focus, int ReuseTime, uint range_id, int AmmoSlot, float speed) {
    questinterfacePINVOKE.Mob_DoThrowingAttackDmg__SWIG_1(swigCPtr, Mob.getCPtr(other), SWIGTYPE_p_EQ__ItemInstance.getCPtr(RangeWeapon), SWIGTYPE_p_EQ__ItemData.getCPtr(AmmoItem), weapon_damage, chance_mod, focus, ReuseTime, range_id, AmmoSlot, speed);
  }

  public void DoThrowingAttackDmg(Mob other, SWIGTYPE_p_EQ__ItemInstance RangeWeapon, SWIGTYPE_p_EQ__ItemData AmmoItem, int weapon_damage, short chance_mod, short focus, int ReuseTime, uint range_id, int AmmoSlot) {
    questinterfacePINVOKE.Mob_DoThrowingAttackDmg__SWIG_2(swigCPtr, Mob.getCPtr(other), SWIGTYPE_p_EQ__ItemInstance.getCPtr(RangeWeapon), SWIGTYPE_p_EQ__ItemData.getCPtr(AmmoItem), weapon_damage, chance_mod, focus, ReuseTime, range_id, AmmoSlot);
  }

  public void DoThrowingAttackDmg(Mob other, SWIGTYPE_p_EQ__ItemInstance RangeWeapon, SWIGTYPE_p_EQ__ItemData AmmoItem, int weapon_damage, short chance_mod, short focus, int ReuseTime, uint range_id) {
    questinterfacePINVOKE.Mob_DoThrowingAttackDmg__SWIG_3(swigCPtr, Mob.getCPtr(other), SWIGTYPE_p_EQ__ItemInstance.getCPtr(RangeWeapon), SWIGTYPE_p_EQ__ItemData.getCPtr(AmmoItem), weapon_damage, chance_mod, focus, ReuseTime, range_id);
  }

  public void DoThrowingAttackDmg(Mob other, SWIGTYPE_p_EQ__ItemInstance RangeWeapon, SWIGTYPE_p_EQ__ItemData AmmoItem, int weapon_damage, short chance_mod, short focus, int ReuseTime) {
    questinterfacePINVOKE.Mob_DoThrowingAttackDmg__SWIG_4(swigCPtr, Mob.getCPtr(other), SWIGTYPE_p_EQ__ItemInstance.getCPtr(RangeWeapon), SWIGTYPE_p_EQ__ItemData.getCPtr(AmmoItem), weapon_damage, chance_mod, focus, ReuseTime);
  }

  public void DoThrowingAttackDmg(Mob other, SWIGTYPE_p_EQ__ItemInstance RangeWeapon, SWIGTYPE_p_EQ__ItemData AmmoItem, int weapon_damage, short chance_mod, short focus) {
    questinterfacePINVOKE.Mob_DoThrowingAttackDmg__SWIG_5(swigCPtr, Mob.getCPtr(other), SWIGTYPE_p_EQ__ItemInstance.getCPtr(RangeWeapon), SWIGTYPE_p_EQ__ItemData.getCPtr(AmmoItem), weapon_damage, chance_mod, focus);
  }

  public void DoThrowingAttackDmg(Mob other, SWIGTYPE_p_EQ__ItemInstance RangeWeapon, SWIGTYPE_p_EQ__ItemData AmmoItem, int weapon_damage, short chance_mod) {
    questinterfacePINVOKE.Mob_DoThrowingAttackDmg__SWIG_6(swigCPtr, Mob.getCPtr(other), SWIGTYPE_p_EQ__ItemInstance.getCPtr(RangeWeapon), SWIGTYPE_p_EQ__ItemData.getCPtr(AmmoItem), weapon_damage, chance_mod);
  }

  public void DoThrowingAttackDmg(Mob other, SWIGTYPE_p_EQ__ItemInstance RangeWeapon, SWIGTYPE_p_EQ__ItemData AmmoItem, int weapon_damage) {
    questinterfacePINVOKE.Mob_DoThrowingAttackDmg__SWIG_7(swigCPtr, Mob.getCPtr(other), SWIGTYPE_p_EQ__ItemInstance.getCPtr(RangeWeapon), SWIGTYPE_p_EQ__ItemData.getCPtr(AmmoItem), weapon_damage);
  }

  public void DoThrowingAttackDmg(Mob other, SWIGTYPE_p_EQ__ItemInstance RangeWeapon, SWIGTYPE_p_EQ__ItemData AmmoItem) {
    questinterfacePINVOKE.Mob_DoThrowingAttackDmg__SWIG_8(swigCPtr, Mob.getCPtr(other), SWIGTYPE_p_EQ__ItemInstance.getCPtr(RangeWeapon), SWIGTYPE_p_EQ__ItemData.getCPtr(AmmoItem));
  }

  public void DoThrowingAttackDmg(Mob other, SWIGTYPE_p_EQ__ItemInstance RangeWeapon) {
    questinterfacePINVOKE.Mob_DoThrowingAttackDmg__SWIG_9(swigCPtr, Mob.getCPtr(other), SWIGTYPE_p_EQ__ItemInstance.getCPtr(RangeWeapon));
  }

  public void DoThrowingAttackDmg(Mob other) {
    questinterfacePINVOKE.Mob_DoThrowingAttackDmg__SWIG_10(swigCPtr, Mob.getCPtr(other));
  }

  public void DoMeleeSkillAttackDmg(Mob other, int weapon_damage, SWIGTYPE_p_EQ__skills__SkillType skillinuse, short chance_mod, short focus, bool can_riposte, int ReuseTime) {
    questinterfacePINVOKE.Mob_DoMeleeSkillAttackDmg__SWIG_0(swigCPtr, Mob.getCPtr(other), weapon_damage, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skillinuse), chance_mod, focus, can_riposte, ReuseTime);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void DoMeleeSkillAttackDmg(Mob other, int weapon_damage, SWIGTYPE_p_EQ__skills__SkillType skillinuse, short chance_mod, short focus, bool can_riposte) {
    questinterfacePINVOKE.Mob_DoMeleeSkillAttackDmg__SWIG_1(swigCPtr, Mob.getCPtr(other), weapon_damage, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skillinuse), chance_mod, focus, can_riposte);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void DoMeleeSkillAttackDmg(Mob other, int weapon_damage, SWIGTYPE_p_EQ__skills__SkillType skillinuse, short chance_mod, short focus) {
    questinterfacePINVOKE.Mob_DoMeleeSkillAttackDmg__SWIG_2(swigCPtr, Mob.getCPtr(other), weapon_damage, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skillinuse), chance_mod, focus);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void DoMeleeSkillAttackDmg(Mob other, int weapon_damage, SWIGTYPE_p_EQ__skills__SkillType skillinuse, short chance_mod) {
    questinterfacePINVOKE.Mob_DoMeleeSkillAttackDmg__SWIG_3(swigCPtr, Mob.getCPtr(other), weapon_damage, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skillinuse), chance_mod);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void DoMeleeSkillAttackDmg(Mob other, int weapon_damage, SWIGTYPE_p_EQ__skills__SkillType skillinuse) {
    questinterfacePINVOKE.Mob_DoMeleeSkillAttackDmg__SWIG_4(swigCPtr, Mob.getCPtr(other), weapon_damage, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skillinuse));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void DoArcheryAttackDmg(Mob other, SWIGTYPE_p_EQ__ItemInstance RangeWeapon, SWIGTYPE_p_EQ__ItemInstance Ammo, int weapon_damage, short chance_mod, short focus, int ReuseTime, uint range_id, uint ammo_id, SWIGTYPE_p_EQ__ItemData AmmoItem, int AmmoSlot, float speed, bool DisableProcs) {
    questinterfacePINVOKE.Mob_DoArcheryAttackDmg__SWIG_0(swigCPtr, Mob.getCPtr(other), SWIGTYPE_p_EQ__ItemInstance.getCPtr(RangeWeapon), SWIGTYPE_p_EQ__ItemInstance.getCPtr(Ammo), weapon_damage, chance_mod, focus, ReuseTime, range_id, ammo_id, SWIGTYPE_p_EQ__ItemData.getCPtr(AmmoItem), AmmoSlot, speed, DisableProcs);
  }

  public void DoArcheryAttackDmg(Mob other, SWIGTYPE_p_EQ__ItemInstance RangeWeapon, SWIGTYPE_p_EQ__ItemInstance Ammo, int weapon_damage, short chance_mod, short focus, int ReuseTime, uint range_id, uint ammo_id, SWIGTYPE_p_EQ__ItemData AmmoItem, int AmmoSlot, float speed) {
    questinterfacePINVOKE.Mob_DoArcheryAttackDmg__SWIG_1(swigCPtr, Mob.getCPtr(other), SWIGTYPE_p_EQ__ItemInstance.getCPtr(RangeWeapon), SWIGTYPE_p_EQ__ItemInstance.getCPtr(Ammo), weapon_damage, chance_mod, focus, ReuseTime, range_id, ammo_id, SWIGTYPE_p_EQ__ItemData.getCPtr(AmmoItem), AmmoSlot, speed);
  }

  public void DoArcheryAttackDmg(Mob other, SWIGTYPE_p_EQ__ItemInstance RangeWeapon, SWIGTYPE_p_EQ__ItemInstance Ammo, int weapon_damage, short chance_mod, short focus, int ReuseTime, uint range_id, uint ammo_id, SWIGTYPE_p_EQ__ItemData AmmoItem, int AmmoSlot) {
    questinterfacePINVOKE.Mob_DoArcheryAttackDmg__SWIG_2(swigCPtr, Mob.getCPtr(other), SWIGTYPE_p_EQ__ItemInstance.getCPtr(RangeWeapon), SWIGTYPE_p_EQ__ItemInstance.getCPtr(Ammo), weapon_damage, chance_mod, focus, ReuseTime, range_id, ammo_id, SWIGTYPE_p_EQ__ItemData.getCPtr(AmmoItem), AmmoSlot);
  }

  public void DoArcheryAttackDmg(Mob other, SWIGTYPE_p_EQ__ItemInstance RangeWeapon, SWIGTYPE_p_EQ__ItemInstance Ammo, int weapon_damage, short chance_mod, short focus, int ReuseTime, uint range_id, uint ammo_id, SWIGTYPE_p_EQ__ItemData AmmoItem) {
    questinterfacePINVOKE.Mob_DoArcheryAttackDmg__SWIG_3(swigCPtr, Mob.getCPtr(other), SWIGTYPE_p_EQ__ItemInstance.getCPtr(RangeWeapon), SWIGTYPE_p_EQ__ItemInstance.getCPtr(Ammo), weapon_damage, chance_mod, focus, ReuseTime, range_id, ammo_id, SWIGTYPE_p_EQ__ItemData.getCPtr(AmmoItem));
  }

  public void DoArcheryAttackDmg(Mob other, SWIGTYPE_p_EQ__ItemInstance RangeWeapon, SWIGTYPE_p_EQ__ItemInstance Ammo, int weapon_damage, short chance_mod, short focus, int ReuseTime, uint range_id, uint ammo_id) {
    questinterfacePINVOKE.Mob_DoArcheryAttackDmg__SWIG_4(swigCPtr, Mob.getCPtr(other), SWIGTYPE_p_EQ__ItemInstance.getCPtr(RangeWeapon), SWIGTYPE_p_EQ__ItemInstance.getCPtr(Ammo), weapon_damage, chance_mod, focus, ReuseTime, range_id, ammo_id);
  }

  public void DoArcheryAttackDmg(Mob other, SWIGTYPE_p_EQ__ItemInstance RangeWeapon, SWIGTYPE_p_EQ__ItemInstance Ammo, int weapon_damage, short chance_mod, short focus, int ReuseTime, uint range_id) {
    questinterfacePINVOKE.Mob_DoArcheryAttackDmg__SWIG_5(swigCPtr, Mob.getCPtr(other), SWIGTYPE_p_EQ__ItemInstance.getCPtr(RangeWeapon), SWIGTYPE_p_EQ__ItemInstance.getCPtr(Ammo), weapon_damage, chance_mod, focus, ReuseTime, range_id);
  }

  public void DoArcheryAttackDmg(Mob other, SWIGTYPE_p_EQ__ItemInstance RangeWeapon, SWIGTYPE_p_EQ__ItemInstance Ammo, int weapon_damage, short chance_mod, short focus, int ReuseTime) {
    questinterfacePINVOKE.Mob_DoArcheryAttackDmg__SWIG_6(swigCPtr, Mob.getCPtr(other), SWIGTYPE_p_EQ__ItemInstance.getCPtr(RangeWeapon), SWIGTYPE_p_EQ__ItemInstance.getCPtr(Ammo), weapon_damage, chance_mod, focus, ReuseTime);
  }

  public void DoArcheryAttackDmg(Mob other, SWIGTYPE_p_EQ__ItemInstance RangeWeapon, SWIGTYPE_p_EQ__ItemInstance Ammo, int weapon_damage, short chance_mod, short focus) {
    questinterfacePINVOKE.Mob_DoArcheryAttackDmg__SWIG_7(swigCPtr, Mob.getCPtr(other), SWIGTYPE_p_EQ__ItemInstance.getCPtr(RangeWeapon), SWIGTYPE_p_EQ__ItemInstance.getCPtr(Ammo), weapon_damage, chance_mod, focus);
  }

  public void DoArcheryAttackDmg(Mob other, SWIGTYPE_p_EQ__ItemInstance RangeWeapon, SWIGTYPE_p_EQ__ItemInstance Ammo, int weapon_damage, short chance_mod) {
    questinterfacePINVOKE.Mob_DoArcheryAttackDmg__SWIG_8(swigCPtr, Mob.getCPtr(other), SWIGTYPE_p_EQ__ItemInstance.getCPtr(RangeWeapon), SWIGTYPE_p_EQ__ItemInstance.getCPtr(Ammo), weapon_damage, chance_mod);
  }

  public void DoArcheryAttackDmg(Mob other, SWIGTYPE_p_EQ__ItemInstance RangeWeapon, SWIGTYPE_p_EQ__ItemInstance Ammo, int weapon_damage) {
    questinterfacePINVOKE.Mob_DoArcheryAttackDmg__SWIG_9(swigCPtr, Mob.getCPtr(other), SWIGTYPE_p_EQ__ItemInstance.getCPtr(RangeWeapon), SWIGTYPE_p_EQ__ItemInstance.getCPtr(Ammo), weapon_damage);
  }

  public void DoArcheryAttackDmg(Mob other, SWIGTYPE_p_EQ__ItemInstance RangeWeapon, SWIGTYPE_p_EQ__ItemInstance Ammo) {
    questinterfacePINVOKE.Mob_DoArcheryAttackDmg__SWIG_10(swigCPtr, Mob.getCPtr(other), SWIGTYPE_p_EQ__ItemInstance.getCPtr(RangeWeapon), SWIGTYPE_p_EQ__ItemInstance.getCPtr(Ammo));
  }

  public void DoArcheryAttackDmg(Mob other, SWIGTYPE_p_EQ__ItemInstance RangeWeapon) {
    questinterfacePINVOKE.Mob_DoArcheryAttackDmg__SWIG_11(swigCPtr, Mob.getCPtr(other), SWIGTYPE_p_EQ__ItemInstance.getCPtr(RangeWeapon));
  }

  public void DoArcheryAttackDmg(Mob other) {
    questinterfacePINVOKE.Mob_DoArcheryAttackDmg__SWIG_12(swigCPtr, Mob.getCPtr(other));
  }

  public bool TryProjectileAttack(Mob other, SWIGTYPE_p_EQ__ItemData item, SWIGTYPE_p_EQ__skills__SkillType skillInUse, ulong weapon_dmg, SWIGTYPE_p_EQ__ItemInstance RangeWeapon, SWIGTYPE_p_EQ__ItemInstance Ammo, int AmmoSlot, float speed, bool DisableProcs) {
    bool ret = questinterfacePINVOKE.Mob_TryProjectileAttack__SWIG_0(swigCPtr, Mob.getCPtr(other), SWIGTYPE_p_EQ__ItemData.getCPtr(item), SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skillInUse), weapon_dmg, SWIGTYPE_p_EQ__ItemInstance.getCPtr(RangeWeapon), SWIGTYPE_p_EQ__ItemInstance.getCPtr(Ammo), AmmoSlot, speed, DisableProcs);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool TryProjectileAttack(Mob other, SWIGTYPE_p_EQ__ItemData item, SWIGTYPE_p_EQ__skills__SkillType skillInUse, ulong weapon_dmg, SWIGTYPE_p_EQ__ItemInstance RangeWeapon, SWIGTYPE_p_EQ__ItemInstance Ammo, int AmmoSlot, float speed) {
    bool ret = questinterfacePINVOKE.Mob_TryProjectileAttack__SWIG_1(swigCPtr, Mob.getCPtr(other), SWIGTYPE_p_EQ__ItemData.getCPtr(item), SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skillInUse), weapon_dmg, SWIGTYPE_p_EQ__ItemInstance.getCPtr(RangeWeapon), SWIGTYPE_p_EQ__ItemInstance.getCPtr(Ammo), AmmoSlot, speed);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void ProjectileAttack() {
    questinterfacePINVOKE.Mob_ProjectileAttack(swigCPtr);
  }

  public bool HasProjectileAttack() {
    bool ret = questinterfacePINVOKE.Mob_HasProjectileAttack(swigCPtr);
    return ret;
  }

  public void SetProjectileAttack(bool value) {
    questinterfacePINVOKE.Mob_SetProjectileAttack(swigCPtr, value);
  }

  public float GetRangeDistTargetSizeMod(Mob other) {
    float ret = questinterfacePINVOKE.Mob_GetRangeDistTargetSizeMod(swigCPtr, Mob.getCPtr(other));
    return ret;
  }

  public bool CanDoSpecialAttack(Mob other) {
    bool ret = questinterfacePINVOKE.Mob_CanDoSpecialAttack(swigCPtr, Mob.getCPtr(other));
    return ret;
  }

  public bool Flurry(ExtraAttackOptions opts) {
    bool ret = questinterfacePINVOKE.Mob_Flurry(swigCPtr, ExtraAttackOptions.getCPtr(opts));
    return ret;
  }

  public bool Rampage(ExtraAttackOptions opts) {
    bool ret = questinterfacePINVOKE.Mob_Rampage(swigCPtr, ExtraAttackOptions.getCPtr(opts));
    return ret;
  }

  public bool AddRampage(Mob arg0) {
    bool ret = questinterfacePINVOKE.Mob_AddRampage(swigCPtr, Mob.getCPtr(arg0));
    return ret;
  }

  public void ClearRampage() {
    questinterfacePINVOKE.Mob_ClearRampage(swigCPtr);
  }

  public void RemoveFromRampageList(Mob mob, bool remove_feigned) {
    questinterfacePINVOKE.Mob_RemoveFromRampageList__SWIG_0(swigCPtr, Mob.getCPtr(mob), remove_feigned);
  }

  public void RemoveFromRampageList(Mob mob) {
    questinterfacePINVOKE.Mob_RemoveFromRampageList__SWIG_1(swigCPtr, Mob.getCPtr(mob));
  }

  public void SetBottomRampageList() {
    questinterfacePINVOKE.Mob_SetBottomRampageList(swigCPtr);
  }

  public void SetTopRampageList() {
    questinterfacePINVOKE.Mob_SetTopRampageList(swigCPtr);
  }

  public void AreaRampage(ExtraAttackOptions opts) {
    questinterfacePINVOKE.Mob_AreaRampage(swigCPtr, ExtraAttackOptions.getCPtr(opts));
  }

  public bool IsSpecialAttack(eSpecialAttacks in_) {
    bool ret = questinterfacePINVOKE.Mob_IsSpecialAttack(swigCPtr, (int)in_);
    return ret;
  }

  public void StartEnrage() {
    questinterfacePINVOKE.Mob_StartEnrage(swigCPtr);
  }

  public void ProcessEnrage() {
    questinterfacePINVOKE.Mob_ProcessEnrage(swigCPtr);
  }

  public bool IsEnraged() {
    bool ret = questinterfacePINVOKE.Mob_IsEnraged(swigCPtr);
    return ret;
  }

  public void Taunt(NPC who, bool always_succeed, int chance_bonus, bool from_spell, int bonus_hate) {
    questinterfacePINVOKE.Mob_Taunt__SWIG_0(swigCPtr, NPC.getCPtr(who), always_succeed, chance_bonus, from_spell, bonus_hate);
  }

  public void Taunt(NPC who, bool always_succeed, int chance_bonus, bool from_spell) {
    questinterfacePINVOKE.Mob_Taunt__SWIG_1(swigCPtr, NPC.getCPtr(who), always_succeed, chance_bonus, from_spell);
  }

  public void Taunt(NPC who, bool always_succeed, int chance_bonus) {
    questinterfacePINVOKE.Mob_Taunt__SWIG_2(swigCPtr, NPC.getCPtr(who), always_succeed, chance_bonus);
  }

  public void Taunt(NPC who, bool always_succeed) {
    questinterfacePINVOKE.Mob_Taunt__SWIG_3(swigCPtr, NPC.getCPtr(who), always_succeed);
  }

  public virtual void AI_Init() {
    questinterfacePINVOKE.Mob_AI_Init(swigCPtr);
  }

  public virtual void AI_Start(uint iMoveDelay) {
    questinterfacePINVOKE.Mob_AI_Start__SWIG_0(swigCPtr, iMoveDelay);
  }

  public virtual void AI_Start() {
    questinterfacePINVOKE.Mob_AI_Start__SWIG_1(swigCPtr);
  }

  public virtual void AI_Stop() {
    questinterfacePINVOKE.Mob_AI_Stop(swigCPtr);
  }

  public virtual void AI_ShutDown() {
    questinterfacePINVOKE.Mob_AI_ShutDown(swigCPtr);
  }

  public virtual void AI_Process() {
    questinterfacePINVOKE.Mob_AI_Process(swigCPtr);
  }

  public bool ClearEntityVariables() {
    bool ret = questinterfacePINVOKE.Mob_ClearEntityVariables(swigCPtr);
    return ret;
  }

  public bool DeleteEntityVariable(SWIGTYPE_p_std__string variable_name) {
    bool ret = questinterfacePINVOKE.Mob_DeleteEntityVariable(swigCPtr, SWIGTYPE_p_std__string.getCPtr(variable_name));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__string GetEntityVariable(SWIGTYPE_p_std__string variable_name) {
    SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(questinterfacePINVOKE.Mob_GetEntityVariable(swigCPtr, SWIGTYPE_p_std__string.getCPtr(variable_name)), true);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_std__string_t GetEntityVariables() {
    SWIGTYPE_p_std__vectorT_std__string_t ret = new SWIGTYPE_p_std__vectorT_std__string_t(questinterfacePINVOKE.Mob_GetEntityVariables(swigCPtr), true);
    return ret;
  }

  public void SetEntityVariable(SWIGTYPE_p_std__string variable_name, SWIGTYPE_p_std__string variable_value) {
    questinterfacePINVOKE.Mob_SetEntityVariable(swigCPtr, SWIGTYPE_p_std__string.getCPtr(variable_name), SWIGTYPE_p_std__string.getCPtr(variable_value));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool EntityVariableExists(SWIGTYPE_p_std__string variable_name) {
    bool ret = questinterfacePINVOKE.Mob_EntityVariableExists(swigCPtr, SWIGTYPE_p_std__string.getCPtr(variable_name));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void AI_Event_Engaged(Mob attacker, bool yell_for_help) {
    questinterfacePINVOKE.Mob_AI_Event_Engaged__SWIG_0(swigCPtr, Mob.getCPtr(attacker), yell_for_help);
  }

  public void AI_Event_Engaged(Mob attacker) {
    questinterfacePINVOKE.Mob_AI_Event_Engaged__SWIG_1(swigCPtr, Mob.getCPtr(attacker));
  }

  public void AI_Event_NoLongerEngaged() {
    questinterfacePINVOKE.Mob_AI_Event_NoLongerEngaged(swigCPtr);
  }

  public SWIGTYPE_p_FACTION_VALUE GetSpecialFactionCon(Mob iOther) {
    SWIGTYPE_p_FACTION_VALUE ret = new SWIGTYPE_p_FACTION_VALUE(questinterfacePINVOKE.Mob_GetSpecialFactionCon(swigCPtr, Mob.getCPtr(iOther)), true);
    return ret;
  }

  public bool IsAIControlled() {
    bool ret = questinterfacePINVOKE.Mob_IsAIControlled(swigCPtr);
    return ret;
  }

  public float GetAggroRange() {
    float ret = questinterfacePINVOKE.Mob_GetAggroRange(swigCPtr);
    return ret;
  }

  public float GetAssistRange() {
    float ret = questinterfacePINVOKE.Mob_GetAssistRange(swigCPtr);
    return ret;
  }

  public void SetPetOrder(Mob.eStandingPetOrder i) {
    questinterfacePINVOKE.Mob_SetPetOrder(swigCPtr, (int)i);
  }

  public Mob.eStandingPetOrder GetPetOrder() {
    Mob.eStandingPetOrder ret = (Mob.eStandingPetOrder)questinterfacePINVOKE.Mob_GetPetOrder(swigCPtr);
    return ret;
  }

  public void SetHeld(bool nState) {
    questinterfacePINVOKE.Mob_SetHeld(swigCPtr, nState);
  }

  public bool IsHeld() {
    bool ret = questinterfacePINVOKE.Mob_IsHeld(swigCPtr);
    return ret;
  }

  public void SetGHeld(bool nState) {
    questinterfacePINVOKE.Mob_SetGHeld(swigCPtr, nState);
  }

  public bool IsGHeld() {
    bool ret = questinterfacePINVOKE.Mob_IsGHeld(swigCPtr);
    return ret;
  }

  public void SetNoCast(bool nState) {
    questinterfacePINVOKE.Mob_SetNoCast(swigCPtr, nState);
  }

  public bool IsNoCast() {
    bool ret = questinterfacePINVOKE.Mob_IsNoCast(swigCPtr);
    return ret;
  }

  public void SetFocused(bool nState) {
    questinterfacePINVOKE.Mob_SetFocused(swigCPtr, nState);
  }

  public bool IsFocused() {
    bool ret = questinterfacePINVOKE.Mob_IsFocused(swigCPtr);
    return ret;
  }

  public void SetPetStop(bool nState) {
    questinterfacePINVOKE.Mob_SetPetStop(swigCPtr, nState);
  }

  public bool IsPetStop() {
    bool ret = questinterfacePINVOKE.Mob_IsPetStop(swigCPtr);
    return ret;
  }

  public void SetPetRegroup(bool nState) {
    questinterfacePINVOKE.Mob_SetPetRegroup(swigCPtr, nState);
  }

  public bool IsPetRegroup() {
    bool ret = questinterfacePINVOKE.Mob_IsPetRegroup(swigCPtr);
    return ret;
  }

  public bool IsRoamer() {
    bool ret = questinterfacePINVOKE.Mob_IsRoamer(swigCPtr);
    return ret;
  }

  public int GetWanderType() {
    int ret = questinterfacePINVOKE.Mob_GetWanderType(swigCPtr);
    return ret;
  }

  public bool IsRooted() {
    bool ret = questinterfacePINVOKE.Mob_IsRooted(swigCPtr);
    return ret;
  }

  public bool IsPermaRooted() {
    bool ret = questinterfacePINVOKE.Mob_IsPermaRooted(swigCPtr);
    return ret;
  }

  public int GetSnaredAmount() {
    int ret = questinterfacePINVOKE.Mob_GetSnaredAmount(swigCPtr);
    return ret;
  }

  public bool IsPseudoRooted() {
    bool ret = questinterfacePINVOKE.Mob_IsPseudoRooted(swigCPtr);
    return ret;
  }

  public void SetPseudoRoot(bool prState) {
    questinterfacePINVOKE.Mob_SetPseudoRoot(swigCPtr, prState);
  }

  public int GetCurWp() {
    int ret = questinterfacePINVOKE.Mob_GetCurWp(swigCPtr);
    return ret;
  }

  public int GetFearSpeed() {
    int ret = questinterfacePINVOKE.Mob_GetFearSpeed(swigCPtr);
    return ret;
  }

  public bool IsFeared() {
    bool ret = questinterfacePINVOKE.Mob_IsFeared(swigCPtr);
    return ret;
  }

  public void StartFleeing() {
    questinterfacePINVOKE.Mob_StartFleeing(swigCPtr);
  }

  public void ProcessFlee() {
    questinterfacePINVOKE.Mob_ProcessFlee(swigCPtr);
  }

  public void CheckFlee() {
    questinterfacePINVOKE.Mob_CheckFlee(swigCPtr);
  }

  public bool IsBlind() {
    bool ret = questinterfacePINVOKE.Mob_IsBlind(swigCPtr);
    return ret;
  }

  public bool CheckAggro(Mob other) {
    bool ret = questinterfacePINVOKE.Mob_CheckAggro(swigCPtr, Mob.getCPtr(other));
    return ret;
  }

  public float CalculateHeadingToTarget(float in_x, float in_y) {
    float ret = questinterfacePINVOKE.Mob_CalculateHeadingToTarget(swigCPtr, in_x, in_y);
    return ret;
  }

  public virtual void WalkTo(float x, float y, float z) {
    questinterfacePINVOKE.Mob_WalkTo(swigCPtr, x, y, z);
  }

  public virtual void RunTo(float x, float y, float z) {
    questinterfacePINVOKE.Mob_RunTo(swigCPtr, x, y, z);
  }

  public void NavigateTo(float x, float y, float z) {
    questinterfacePINVOKE.Mob_NavigateTo(swigCPtr, x, y, z);
  }

  public void RotateTo(float new_heading) {
    questinterfacePINVOKE.Mob_RotateTo(swigCPtr, new_heading);
  }

  public void RotateToWalking(float new_heading) {
    questinterfacePINVOKE.Mob_RotateToWalking(swigCPtr, new_heading);
  }

  public void RotateToRunning(float new_heading) {
    questinterfacePINVOKE.Mob_RotateToRunning(swigCPtr, new_heading);
  }

  public void StopNavigation() {
    questinterfacePINVOKE.Mob_StopNavigation(swigCPtr);
  }

  public float CalculateDistance(float x, float y, float z) {
    float ret = questinterfacePINVOKE.Mob_CalculateDistance__SWIG_0(swigCPtr, x, y, z);
    return ret;
  }

  public float CalculateDistance(Mob mob) {
    float ret = questinterfacePINVOKE.Mob_CalculateDistance__SWIG_1(swigCPtr, Mob.getCPtr(mob));
    return ret;
  }

  public float GetGroundZ(float new_x, float new_y, float z_offset) {
    float ret = questinterfacePINVOKE.Mob_GetGroundZ__SWIG_0(swigCPtr, new_x, new_y, z_offset);
    return ret;
  }

  public float GetGroundZ(float new_x, float new_y) {
    float ret = questinterfacePINVOKE.Mob_GetGroundZ__SWIG_1(swigCPtr, new_x, new_y);
    return ret;
  }

  public void SendTo(float new_x, float new_y, float new_z) {
    questinterfacePINVOKE.Mob_SendTo(swigCPtr, new_x, new_y, new_z);
  }

  public void SendToFixZ(float new_x, float new_y, float new_z) {
    questinterfacePINVOKE.Mob_SendToFixZ(swigCPtr, new_x, new_y, new_z);
  }

  public float GetZOffset() {
    float ret = questinterfacePINVOKE.Mob_GetZOffset(swigCPtr);
    return ret;
  }

  public float GetDefaultRaceSize(int race_id, int gender_id) {
    float ret = questinterfacePINVOKE.Mob_GetDefaultRaceSize__SWIG_0(swigCPtr, race_id, gender_id);
    return ret;
  }

  public float GetDefaultRaceSize(int race_id) {
    float ret = questinterfacePINVOKE.Mob_GetDefaultRaceSize__SWIG_1(swigCPtr, race_id);
    return ret;
  }

  public float GetDefaultRaceSize() {
    float ret = questinterfacePINVOKE.Mob_GetDefaultRaceSize__SWIG_2(swigCPtr);
    return ret;
  }

  public void FixZ(int z_find_offset, bool fix_client_z) {
    questinterfacePINVOKE.Mob_FixZ__SWIG_0(swigCPtr, z_find_offset, fix_client_z);
  }

  public void FixZ(int z_find_offset) {
    questinterfacePINVOKE.Mob_FixZ__SWIG_1(swigCPtr, z_find_offset);
  }

  public void FixZ() {
    questinterfacePINVOKE.Mob_FixZ__SWIG_2(swigCPtr);
  }

  public float GetFixedZ(SWIGTYPE_p_glm__vec3 destination, int z_find_offset) {
    float ret = questinterfacePINVOKE.Mob_GetFixedZ__SWIG_0(swigCPtr, SWIGTYPE_p_glm__vec3.getCPtr(destination), z_find_offset);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float GetFixedZ(SWIGTYPE_p_glm__vec3 destination) {
    float ret = questinterfacePINVOKE.Mob_GetFixedZ__SWIG_1(swigCPtr, SWIGTYPE_p_glm__vec3.getCPtr(destination));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetStuckBehavior() {
    int ret = questinterfacePINVOKE.Mob_GetStuckBehavior(swigCPtr);
    return ret;
  }

  public void NPCSpecialAttacks(string parse, int permtag, bool reset, bool remove) {
    questinterfacePINVOKE.Mob_NPCSpecialAttacks__SWIG_0(swigCPtr, parse, permtag, reset, remove);
  }

  public void NPCSpecialAttacks(string parse, int permtag, bool reset) {
    questinterfacePINVOKE.Mob_NPCSpecialAttacks__SWIG_1(swigCPtr, parse, permtag, reset);
  }

  public void NPCSpecialAttacks(string parse, int permtag) {
    questinterfacePINVOKE.Mob_NPCSpecialAttacks__SWIG_2(swigCPtr, parse, permtag);
  }

  public uint DontHealMeBefore() {
    uint ret = questinterfacePINVOKE.Mob_DontHealMeBefore(swigCPtr);
    return ret;
  }

  public uint DontBuffMeBefore() {
    uint ret = questinterfacePINVOKE.Mob_DontBuffMeBefore(swigCPtr);
    return ret;
  }

  public uint DontDotMeBefore() {
    uint ret = questinterfacePINVOKE.Mob_DontDotMeBefore(swigCPtr);
    return ret;
  }

  public uint DontRootMeBefore() {
    uint ret = questinterfacePINVOKE.Mob_DontRootMeBefore(swigCPtr);
    return ret;
  }

  public uint DontSnareMeBefore() {
    uint ret = questinterfacePINVOKE.Mob_DontSnareMeBefore(swigCPtr);
    return ret;
  }

  public uint DontCureMeBefore() {
    uint ret = questinterfacePINVOKE.Mob_DontCureMeBefore(swigCPtr);
    return ret;
  }

  public void SetDontRootMeBefore(uint time) {
    questinterfacePINVOKE.Mob_SetDontRootMeBefore(swigCPtr, time);
  }

  public void SetDontHealMeBefore(uint time) {
    questinterfacePINVOKE.Mob_SetDontHealMeBefore(swigCPtr, time);
  }

  public void SetDontBuffMeBefore(uint time) {
    questinterfacePINVOKE.Mob_SetDontBuffMeBefore(swigCPtr, time);
  }

  public void SetDontDotMeBefore(uint time) {
    questinterfacePINVOKE.Mob_SetDontDotMeBefore(swigCPtr, time);
  }

  public void SetDontSnareMeBefore(uint time) {
    questinterfacePINVOKE.Mob_SetDontSnareMeBefore(swigCPtr, time);
  }

  public void SetDontCureMeBefore(uint time) {
    questinterfacePINVOKE.Mob_SetDontCureMeBefore(swigCPtr, time);
  }

  public void SaveSpellLoc() {
    questinterfacePINVOKE.Mob_SaveSpellLoc(swigCPtr);
  }

  public float GetSpellX() {
    float ret = questinterfacePINVOKE.Mob_GetSpellX(swigCPtr);
    return ret;
  }

  public float GetSpellY() {
    float ret = questinterfacePINVOKE.Mob_GetSpellY(swigCPtr);
    return ret;
  }

  public float GetSpellZ() {
    float ret = questinterfacePINVOKE.Mob_GetSpellZ(swigCPtr);
    return ret;
  }

  public bool IsGrouped() {
    bool ret = questinterfacePINVOKE.Mob_IsGrouped(swigCPtr);
    return ret;
  }

  public void SetGrouped(bool v) {
    questinterfacePINVOKE.Mob_SetGrouped(swigCPtr, v);
  }

  public bool IsRaidGrouped() {
    bool ret = questinterfacePINVOKE.Mob_IsRaidGrouped(swigCPtr);
    return ret;
  }

  public void SetRaidGrouped(bool v) {
    questinterfacePINVOKE.Mob_SetRaidGrouped(swigCPtr, v);
  }

  public ushort IsLooting() {
    ushort ret = questinterfacePINVOKE.Mob_IsLooting(swigCPtr);
    return ret;
  }

  public void SetLooting(ushort val) {
    questinterfacePINVOKE.Mob_SetLooting(swigCPtr, val);
  }

  public bool CheckWillAggro(Mob mob) {
    bool ret = questinterfacePINVOKE.Mob_CheckWillAggro(swigCPtr, Mob.getCPtr(mob));
    return ret;
  }

  public void InstillDoubt(Mob who) {
    questinterfacePINVOKE.Mob_InstillDoubt(swigCPtr, Mob.getCPtr(who));
  }

  public bool Charmed() {
    bool ret = questinterfacePINVOKE.Mob_Charmed(swigCPtr);
    return ret;
  }

  public static uint GetLevelHP(byte tlevel) {
    uint ret = questinterfacePINVOKE.Mob_GetLevelHP(tlevel);
    return ret;
  }

  public uint GetZoneID() {
    uint ret = questinterfacePINVOKE.Mob_GetZoneID(swigCPtr);
    return ret;
  }

  public ushort GetInstanceVersion() {
    ushort ret = questinterfacePINVOKE.Mob_GetInstanceVersion(swigCPtr);
    return ret;
  }

  public virtual int CheckAggroAmount(ushort spell_id, Mob target, bool isproc) {
    int ret = questinterfacePINVOKE.Mob_CheckAggroAmount__SWIG_0(swigCPtr, spell_id, Mob.getCPtr(target), isproc);
    return ret;
  }

  public virtual int CheckAggroAmount(ushort spell_id, Mob target) {
    int ret = questinterfacePINVOKE.Mob_CheckAggroAmount__SWIG_1(swigCPtr, spell_id, Mob.getCPtr(target));
    return ret;
  }

  public virtual int CheckHealAggroAmount(ushort spell_id, Mob target, uint heal_possible) {
    int ret = questinterfacePINVOKE.Mob_CheckHealAggroAmount__SWIG_0(swigCPtr, spell_id, Mob.getCPtr(target), heal_possible);
    return ret;
  }

  public virtual int CheckHealAggroAmount(ushort spell_id, Mob target) {
    int ret = questinterfacePINVOKE.Mob_CheckHealAggroAmount__SWIG_1(swigCPtr, spell_id, Mob.getCPtr(target));
    return ret;
  }

  public uint GetInstrumentMod(ushort spell_id) {
    uint ret = questinterfacePINVOKE.Mob_GetInstrumentMod(swigCPtr, spell_id);
    return ret;
  }

  public long CalcSpellEffectValue(ushort spell_id, int effect_id, int caster_level, uint instrument_mod, Mob caster, int ticsremaining, ushort casterid) {
    long ret = questinterfacePINVOKE.Mob_CalcSpellEffectValue__SWIG_0(swigCPtr, spell_id, effect_id, caster_level, instrument_mod, Mob.getCPtr(caster), ticsremaining, casterid);
    return ret;
  }

  public long CalcSpellEffectValue(ushort spell_id, int effect_id, int caster_level, uint instrument_mod, Mob caster, int ticsremaining) {
    long ret = questinterfacePINVOKE.Mob_CalcSpellEffectValue__SWIG_1(swigCPtr, spell_id, effect_id, caster_level, instrument_mod, Mob.getCPtr(caster), ticsremaining);
    return ret;
  }

  public long CalcSpellEffectValue(ushort spell_id, int effect_id, int caster_level, uint instrument_mod, Mob caster) {
    long ret = questinterfacePINVOKE.Mob_CalcSpellEffectValue__SWIG_2(swigCPtr, spell_id, effect_id, caster_level, instrument_mod, Mob.getCPtr(caster));
    return ret;
  }

  public long CalcSpellEffectValue(ushort spell_id, int effect_id, int caster_level, uint instrument_mod) {
    long ret = questinterfacePINVOKE.Mob_CalcSpellEffectValue__SWIG_3(swigCPtr, spell_id, effect_id, caster_level, instrument_mod);
    return ret;
  }

  public long CalcSpellEffectValue(ushort spell_id, int effect_id, int caster_level) {
    long ret = questinterfacePINVOKE.Mob_CalcSpellEffectValue__SWIG_4(swigCPtr, spell_id, effect_id, caster_level);
    return ret;
  }

  public long CalcSpellEffectValue(ushort spell_id, int effect_id) {
    long ret = questinterfacePINVOKE.Mob_CalcSpellEffectValue__SWIG_5(swigCPtr, spell_id, effect_id);
    return ret;
  }

  public long CalcSpellEffectValue_formula(uint formula, long base_value, long max_value, int caster_level, ushort spell_id, int ticsremaining) {
    long ret = questinterfacePINVOKE.Mob_CalcSpellEffectValue_formula__SWIG_0(swigCPtr, formula, base_value, max_value, caster_level, spell_id, ticsremaining);
    return ret;
  }

  public long CalcSpellEffectValue_formula(uint formula, long base_value, long max_value, int caster_level, ushort spell_id) {
    long ret = questinterfacePINVOKE.Mob_CalcSpellEffectValue_formula__SWIG_1(swigCPtr, formula, base_value, max_value, caster_level, spell_id);
    return ret;
  }

  public virtual int CheckStackConflict(ushort spellid1, int caster_level1, ushort spellid2, int caster_level2, Mob caster1, Mob caster2, int buffslot) {
    int ret = questinterfacePINVOKE.Mob_CheckStackConflict__SWIG_0(swigCPtr, spellid1, caster_level1, spellid2, caster_level2, Mob.getCPtr(caster1), Mob.getCPtr(caster2), buffslot);
    return ret;
  }

  public virtual int CheckStackConflict(ushort spellid1, int caster_level1, ushort spellid2, int caster_level2, Mob caster1, Mob caster2) {
    int ret = questinterfacePINVOKE.Mob_CheckStackConflict__SWIG_1(swigCPtr, spellid1, caster_level1, spellid2, caster_level2, Mob.getCPtr(caster1), Mob.getCPtr(caster2));
    return ret;
  }

  public virtual int CheckStackConflict(ushort spellid1, int caster_level1, ushort spellid2, int caster_level2, Mob caster1) {
    int ret = questinterfacePINVOKE.Mob_CheckStackConflict__SWIG_2(swigCPtr, spellid1, caster_level1, spellid2, caster_level2, Mob.getCPtr(caster1));
    return ret;
  }

  public virtual int CheckStackConflict(ushort spellid1, int caster_level1, ushort spellid2, int caster_level2) {
    int ret = questinterfacePINVOKE.Mob_CheckStackConflict__SWIG_3(swigCPtr, spellid1, caster_level1, spellid2, caster_level2);
    return ret;
  }

  public uint GetCastedSpellInvSlot() {
    uint ret = questinterfacePINVOKE.Mob_GetCastedSpellInvSlot(swigCPtr);
    return ret;
  }

  public int GetNextHPEvent() {
    int ret = questinterfacePINVOKE.Mob_GetNextHPEvent(swigCPtr);
    return ret;
  }

  public void SetNextHPEvent(int hpevent) {
    questinterfacePINVOKE.Mob_SetNextHPEvent(swigCPtr, hpevent);
  }

  public void SendItemAnimation(Mob to, SWIGTYPE_p_EQ__ItemData item, SWIGTYPE_p_EQ__skills__SkillType skillInUse, float velocity) {
    questinterfacePINVOKE.Mob_SendItemAnimation__SWIG_0(swigCPtr, Mob.getCPtr(to), SWIGTYPE_p_EQ__ItemData.getCPtr(item), SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skillInUse), velocity);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SendItemAnimation(Mob to, SWIGTYPE_p_EQ__ItemData item, SWIGTYPE_p_EQ__skills__SkillType skillInUse) {
    questinterfacePINVOKE.Mob_SendItemAnimation__SWIG_1(swigCPtr, Mob.getCPtr(to), SWIGTYPE_p_EQ__ItemData.getCPtr(item), SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skillInUse));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_int GetNextIncHPEvent() {
    SWIGTYPE_p_int ret = new SWIGTYPE_p_int(questinterfacePINVOKE.Mob_GetNextIncHPEvent(swigCPtr), false);
    return ret;
  }

  public void SetNextIncHPEvent(int inchpevent) {
    questinterfacePINVOKE.Mob_SetNextIncHPEvent(swigCPtr, inchpevent);
  }

  public bool DivineAura() {
    bool ret = questinterfacePINVOKE.Mob_DivineAura(swigCPtr);
    return ret;
  }

  public bool Sanctuary() {
    bool ret = questinterfacePINVOKE.Mob_Sanctuary(swigCPtr);
    return ret;
  }

  public bool HasNPCSpecialAtk(string parse) {
    bool ret = questinterfacePINVOKE.Mob_HasNPCSpecialAtk(swigCPtr, parse);
    return ret;
  }

  public bool HasSpecialAbilities() {
    bool ret = questinterfacePINVOKE.Mob_HasSpecialAbilities(swigCPtr);
    return ret;
  }

  public int GetSpecialAbility(int ability) {
    int ret = questinterfacePINVOKE.Mob_GetSpecialAbility(swigCPtr, ability);
    return ret;
  }

  public int GetSpecialAbilityParam(int ability, int param) {
    int ret = questinterfacePINVOKE.Mob_GetSpecialAbilityParam(swigCPtr, ability, param);
    return ret;
  }

  public void SetSpecialAbility(int ability, int level) {
    questinterfacePINVOKE.Mob_SetSpecialAbility(swigCPtr, ability, level);
  }

  public void SetSpecialAbilityParam(int ability, int param, int value) {
    questinterfacePINVOKE.Mob_SetSpecialAbilityParam(swigCPtr, ability, param, value);
  }

  public void StartSpecialAbilityTimer(int ability, uint time) {
    questinterfacePINVOKE.Mob_StartSpecialAbilityTimer(swigCPtr, ability, time);
  }

  public void StopSpecialAbilityTimer(int ability) {
    questinterfacePINVOKE.Mob_StopSpecialAbilityTimer(swigCPtr, ability);
  }

  public SWIGTYPE_p_Timer GetSpecialAbilityTimer(int ability) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Mob_GetSpecialAbilityTimer(swigCPtr, ability);
    SWIGTYPE_p_Timer ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Timer(cPtr, false);
    return ret;
  }

  public void ClearSpecialAbilities() {
    questinterfacePINVOKE.Mob_ClearSpecialAbilities(swigCPtr);
  }

  public void ProcessSpecialAbilities(SWIGTYPE_p_std__string str) {
    questinterfacePINVOKE.Mob_ProcessSpecialAbilities(swigCPtr, SWIGTYPE_p_std__string.getCPtr(str));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsMoved() {
    bool ret = questinterfacePINVOKE.Mob_IsMoved(swigCPtr);
    return ret;
  }

  public void SetMoved(bool moveflag) {
    questinterfacePINVOKE.Mob_SetMoved(swigCPtr, moveflag);
  }

  public Trade trade {
    set {
      questinterfacePINVOKE.Mob_trade_set(swigCPtr, Trade.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.Mob_trade_get(swigCPtr);
      Trade ret = (cPtr == global::System.IntPtr.Zero) ? null : new Trade(cPtr, false);
      return ret;
    } 
  }

  public bool ShieldAbility(uint target_id, int shielder_max_distance, int shield_duration, int shield_target_mitigation, int shielder_mitigation, bool use_aa, bool can_shield_npc) {
    bool ret = questinterfacePINVOKE.Mob_ShieldAbility__SWIG_0(swigCPtr, target_id, shielder_max_distance, shield_duration, shield_target_mitigation, shielder_mitigation, use_aa, can_shield_npc);
    return ret;
  }

  public bool ShieldAbility(uint target_id, int shielder_max_distance, int shield_duration, int shield_target_mitigation, int shielder_mitigation, bool use_aa) {
    bool ret = questinterfacePINVOKE.Mob_ShieldAbility__SWIG_1(swigCPtr, target_id, shielder_max_distance, shield_duration, shield_target_mitigation, shielder_mitigation, use_aa);
    return ret;
  }

  public bool ShieldAbility(uint target_id, int shielder_max_distance, int shield_duration, int shield_target_mitigation, int shielder_mitigation) {
    bool ret = questinterfacePINVOKE.Mob_ShieldAbility__SWIG_2(swigCPtr, target_id, shielder_max_distance, shield_duration, shield_target_mitigation, shielder_mitigation);
    return ret;
  }

  public bool ShieldAbility(uint target_id, int shielder_max_distance, int shield_duration, int shield_target_mitigation) {
    bool ret = questinterfacePINVOKE.Mob_ShieldAbility__SWIG_3(swigCPtr, target_id, shielder_max_distance, shield_duration, shield_target_mitigation);
    return ret;
  }

  public bool ShieldAbility(uint target_id, int shielder_max_distance, int shield_duration) {
    bool ret = questinterfacePINVOKE.Mob_ShieldAbility__SWIG_4(swigCPtr, target_id, shielder_max_distance, shield_duration);
    return ret;
  }

  public bool ShieldAbility(uint target_id, int shielder_max_distance) {
    bool ret = questinterfacePINVOKE.Mob_ShieldAbility__SWIG_5(swigCPtr, target_id, shielder_max_distance);
    return ret;
  }

  public bool ShieldAbility(uint target_id) {
    bool ret = questinterfacePINVOKE.Mob_ShieldAbility__SWIG_6(swigCPtr, target_id);
    return ret;
  }

  public void DoShieldDamageOnShielder(Mob shield_target, long hit_damage_done, SWIGTYPE_p_EQ__skills__SkillType skillInUse) {
    questinterfacePINVOKE.Mob_DoShieldDamageOnShielder(swigCPtr, Mob.getCPtr(shield_target), hit_damage_done, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skillInUse));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ShieldAbilityFinish() {
    questinterfacePINVOKE.Mob_ShieldAbilityFinish(swigCPtr);
  }

  public void ShieldAbilityClearVariables() {
    questinterfacePINVOKE.Mob_ShieldAbilityClearVariables(swigCPtr);
  }

  public uint GetShielderID() {
    uint ret = questinterfacePINVOKE.Mob_GetShielderID(swigCPtr);
    return ret;
  }

  public void SetShielderID(uint val) {
    questinterfacePINVOKE.Mob_SetShielderID(swigCPtr, val);
  }

  public uint GetShieldTargetID() {
    uint ret = questinterfacePINVOKE.Mob_GetShieldTargetID(swigCPtr);
    return ret;
  }

  public void SetShieldTargetID(uint val) {
    questinterfacePINVOKE.Mob_SetShieldTargetID(swigCPtr, val);
  }

  public int GetShieldTargetMitigation() {
    int ret = questinterfacePINVOKE.Mob_GetShieldTargetMitigation(swigCPtr);
    return ret;
  }

  public void SetShieldTargetMitigation(int val) {
    questinterfacePINVOKE.Mob_SetShieldTargetMitigation(swigCPtr, val);
  }

  public int GetShielderMitigation() {
    int ret = questinterfacePINVOKE.Mob_GetShielderMitigation(swigCPtr);
    return ret;
  }

  public void SetShielderMitigation(int val) {
    questinterfacePINVOKE.Mob_SetShielderMitigation(swigCPtr, val);
  }

  public int GetMaxShielderDistance() {
    int ret = questinterfacePINVOKE.Mob_GetMaxShielderDistance(swigCPtr);
    return ret;
  }

  public void SetShielderMaxDistance(int val) {
    questinterfacePINVOKE.Mob_SetShielderMaxDistance(swigCPtr, val);
  }

  public WeaponStance_Struct weaponstance {
    set {
      questinterfacePINVOKE.Mob_weaponstance_set(swigCPtr, WeaponStance_Struct.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.Mob_weaponstance_get(swigCPtr);
      WeaponStance_Struct ret = (cPtr == global::System.IntPtr.Zero) ? null : new WeaponStance_Struct(cPtr, false);
      return ret;
    } 
  }

  public bool IsWeaponStanceEnabled() {
    bool ret = questinterfacePINVOKE.Mob_IsWeaponStanceEnabled(swigCPtr);
    return ret;
  }

  public void SetWeaponStanceEnabled(bool val) {
    questinterfacePINVOKE.Mob_SetWeaponStanceEnabled(swigCPtr, val);
  }

  public SWIGTYPE_p_glm__vec4 GetCurrentWayPoint() {
    SWIGTYPE_p_glm__vec4 ret = new SWIGTYPE_p_glm__vec4(questinterfacePINVOKE.Mob_GetCurrentWayPoint(swigCPtr), true);
    return ret;
  }

  public float GetCWPP() {
    float ret = questinterfacePINVOKE.Mob_GetCWPP(swigCPtr);
    return ret;
  }

  public int GetCWP() {
    int ret = questinterfacePINVOKE.Mob_GetCWP(swigCPtr);
    return ret;
  }

  public void SetCurrentWP(int waypoint) {
    questinterfacePINVOKE.Mob_SetCurrentWP(swigCPtr, waypoint);
  }

  public virtual SWIGTYPE_p_FACTION_VALUE GetReverseFactionCon(Mob iOther) {
    SWIGTYPE_p_FACTION_VALUE ret = new SWIGTYPE_p_FACTION_VALUE(questinterfacePINVOKE.Mob_GetReverseFactionCon(swigCPtr, Mob.getCPtr(iOther)), true);
    return ret;
  }

  public virtual bool IsUnderwaterOnly() {
    bool ret = questinterfacePINVOKE.Mob_IsUnderwaterOnly(swigCPtr);
    return ret;
  }

  public bool IsTrackable() {
    bool ret = questinterfacePINVOKE.Mob_IsTrackable(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_Timer GetAIThinkTimer() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Mob_GetAIThinkTimer(swigCPtr);
    SWIGTYPE_p_Timer ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Timer(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_Timer GetAIMovementTimer() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Mob_GetAIMovementTimer(swigCPtr);
    SWIGTYPE_p_Timer ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Timer(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_Timer GetAttackTimer() {
    SWIGTYPE_p_Timer ret = new SWIGTYPE_p_Timer(questinterfacePINVOKE.Mob_GetAttackTimer(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_Timer GetAttackDWTimer() {
    SWIGTYPE_p_Timer ret = new SWIGTYPE_p_Timer(questinterfacePINVOKE.Mob_GetAttackDWTimer(swigCPtr), true);
    return ret;
  }

  public bool IsFindable() {
    bool ret = questinterfacePINVOKE.Mob_IsFindable(swigCPtr);
    return ret;
  }

  public byte GetManaPercent() {
    byte ret = questinterfacePINVOKE.Mob_GetManaPercent(swigCPtr);
    return ret;
  }

  public virtual byte GetEndurancePercent() {
    byte ret = questinterfacePINVOKE.Mob_GetEndurancePercent(swigCPtr);
    return ret;
  }

  public virtual bool IsBlockedBuff(int SpellID) {
    bool ret = questinterfacePINVOKE.Mob_IsBlockedBuff(swigCPtr, SpellID);
    return ret;
  }

  public virtual bool IsBlockedPetBuff(int SpellID) {
    bool ret = questinterfacePINVOKE.Mob_IsBlockedPetBuff(swigCPtr, SpellID);
    return ret;
  }

  public SWIGTYPE_p_std__string GetGlobal(string varname) {
    SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(questinterfacePINVOKE.Mob_GetGlobal(swigCPtr, varname), true);
    return ret;
  }

  public void SetGlobal(string varname, string newvalue, int options, string duration, Mob other) {
    questinterfacePINVOKE.Mob_SetGlobal__SWIG_0(swigCPtr, varname, newvalue, options, duration, Mob.getCPtr(other));
  }

  public void SetGlobal(string varname, string newvalue, int options, string duration) {
    questinterfacePINVOKE.Mob_SetGlobal__SWIG_1(swigCPtr, varname, newvalue, options, duration);
  }

  public void TarGlobal(string varname, string value, string duration, int npcid, int charid, int zoneid) {
    questinterfacePINVOKE.Mob_TarGlobal(swigCPtr, varname, value, duration, npcid, charid, zoneid);
  }

  public void DelGlobal(string varname) {
    questinterfacePINVOKE.Mob_DelGlobal(swigCPtr, varname);
  }

  public void SetEmoteID(uint emote) {
    questinterfacePINVOKE.Mob_SetEmoteID(swigCPtr, emote);
  }

  public uint GetEmoteID() {
    uint ret = questinterfacePINVOKE.Mob_GetEmoteID(swigCPtr);
    return ret;
  }

  public bool HasSpellEffect(int effect_id) {
    bool ret = questinterfacePINVOKE.Mob_HasSpellEffect(swigCPtr, effect_id);
    return ret;
  }

  public SWIGTYPE_p_std__string GetRacePlural() {
    SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(questinterfacePINVOKE.Mob_GetRacePlural(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_std__string GetClassPlural() {
    SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(questinterfacePINVOKE.Mob_GetClassPlural(swigCPtr), true);
    return ret;
  }

  public void TuneGetStats(Mob defender, Mob attacker) {
    questinterfacePINVOKE.Mob_TuneGetStats(swigCPtr, Mob.getCPtr(defender), Mob.getCPtr(attacker));
  }

  public void TuneGetACByPctMitigation(Mob defender, Mob attacker, float pct_mitigation, int interval, int max_loop, int atk_override, int Msg) {
    questinterfacePINVOKE.Mob_TuneGetACByPctMitigation__SWIG_0(swigCPtr, Mob.getCPtr(defender), Mob.getCPtr(attacker), pct_mitigation, interval, max_loop, atk_override, Msg);
  }

  public void TuneGetACByPctMitigation(Mob defender, Mob attacker, float pct_mitigation, int interval, int max_loop, int atk_override) {
    questinterfacePINVOKE.Mob_TuneGetACByPctMitigation__SWIG_1(swigCPtr, Mob.getCPtr(defender), Mob.getCPtr(attacker), pct_mitigation, interval, max_loop, atk_override);
  }

  public void TuneGetACByPctMitigation(Mob defender, Mob attacker, float pct_mitigation, int interval, int max_loop) {
    questinterfacePINVOKE.Mob_TuneGetACByPctMitigation__SWIG_2(swigCPtr, Mob.getCPtr(defender), Mob.getCPtr(attacker), pct_mitigation, interval, max_loop);
  }

  public void TuneGetACByPctMitigation(Mob defender, Mob attacker, float pct_mitigation, int interval) {
    questinterfacePINVOKE.Mob_TuneGetACByPctMitigation__SWIG_3(swigCPtr, Mob.getCPtr(defender), Mob.getCPtr(attacker), pct_mitigation, interval);
  }

  public void TuneGetACByPctMitigation(Mob defender, Mob attacker, float pct_mitigation) {
    questinterfacePINVOKE.Mob_TuneGetACByPctMitigation__SWIG_4(swigCPtr, Mob.getCPtr(defender), Mob.getCPtr(attacker), pct_mitigation);
  }

  public void TuneGetATKByPctMitigation(Mob defender, Mob attacker, float pct_mitigation, int interval, int max_loop, int ac_override, int Msg) {
    questinterfacePINVOKE.Mob_TuneGetATKByPctMitigation__SWIG_0(swigCPtr, Mob.getCPtr(defender), Mob.getCPtr(attacker), pct_mitigation, interval, max_loop, ac_override, Msg);
  }

  public void TuneGetATKByPctMitigation(Mob defender, Mob attacker, float pct_mitigation, int interval, int max_loop, int ac_override) {
    questinterfacePINVOKE.Mob_TuneGetATKByPctMitigation__SWIG_1(swigCPtr, Mob.getCPtr(defender), Mob.getCPtr(attacker), pct_mitigation, interval, max_loop, ac_override);
  }

  public void TuneGetATKByPctMitigation(Mob defender, Mob attacker, float pct_mitigation, int interval, int max_loop) {
    questinterfacePINVOKE.Mob_TuneGetATKByPctMitigation__SWIG_2(swigCPtr, Mob.getCPtr(defender), Mob.getCPtr(attacker), pct_mitigation, interval, max_loop);
  }

  public void TuneGetATKByPctMitigation(Mob defender, Mob attacker, float pct_mitigation, int interval) {
    questinterfacePINVOKE.Mob_TuneGetATKByPctMitigation__SWIG_3(swigCPtr, Mob.getCPtr(defender), Mob.getCPtr(attacker), pct_mitigation, interval);
  }

  public void TuneGetATKByPctMitigation(Mob defender, Mob attacker, float pct_mitigation) {
    questinterfacePINVOKE.Mob_TuneGetATKByPctMitigation__SWIG_4(swigCPtr, Mob.getCPtr(defender), Mob.getCPtr(attacker), pct_mitigation);
  }

  public void TuneGetAvoidanceByHitChance(Mob defender, Mob attacker, float hit_chance, int interval, int max_loop, int accuracy_override, int Msg) {
    questinterfacePINVOKE.Mob_TuneGetAvoidanceByHitChance(swigCPtr, Mob.getCPtr(defender), Mob.getCPtr(attacker), hit_chance, interval, max_loop, accuracy_override, Msg);
  }

  public void TuneGetAccuracyByHitChance(Mob defender, Mob attacker, float hit_chance, int interval, int max_loop, int avoidance_override, int Msg) {
    questinterfacePINVOKE.Mob_TuneGetAccuracyByHitChance(swigCPtr, Mob.getCPtr(defender), Mob.getCPtr(attacker), hit_chance, interval, max_loop, avoidance_override, Msg);
  }

  public long TuneClientGetMeanDamage(Mob other, int ac_override, int atk_override, int add_ac, int add_atk) {
    long ret = questinterfacePINVOKE.Mob_TuneClientGetMeanDamage__SWIG_0(swigCPtr, Mob.getCPtr(other), ac_override, atk_override, add_ac, add_atk);
    return ret;
  }

  public long TuneClientGetMeanDamage(Mob other, int ac_override, int atk_override, int add_ac) {
    long ret = questinterfacePINVOKE.Mob_TuneClientGetMeanDamage__SWIG_1(swigCPtr, Mob.getCPtr(other), ac_override, atk_override, add_ac);
    return ret;
  }

  public long TuneClientGetMeanDamage(Mob other, int ac_override, int atk_override) {
    long ret = questinterfacePINVOKE.Mob_TuneClientGetMeanDamage__SWIG_2(swigCPtr, Mob.getCPtr(other), ac_override, atk_override);
    return ret;
  }

  public long TuneClientGetMeanDamage(Mob other, int ac_override) {
    long ret = questinterfacePINVOKE.Mob_TuneClientGetMeanDamage__SWIG_3(swigCPtr, Mob.getCPtr(other), ac_override);
    return ret;
  }

  public long TuneClientGetMeanDamage(Mob other) {
    long ret = questinterfacePINVOKE.Mob_TuneClientGetMeanDamage__SWIG_4(swigCPtr, Mob.getCPtr(other));
    return ret;
  }

  public long TuneClientGetMaxDamage(Mob other) {
    long ret = questinterfacePINVOKE.Mob_TuneClientGetMaxDamage(swigCPtr, Mob.getCPtr(other));
    return ret;
  }

  public long TuneClientGetMinDamage(Mob other, int max_hit) {
    long ret = questinterfacePINVOKE.Mob_TuneClientGetMinDamage(swigCPtr, Mob.getCPtr(other), max_hit);
    return ret;
  }

  public float TuneGetACMitigationPct(Mob defender, Mob attacker) {
    float ret = questinterfacePINVOKE.Mob_TuneGetACMitigationPct(swigCPtr, Mob.getCPtr(defender), Mob.getCPtr(attacker));
    return ret;
  }

  public long TuneGetOffense(Mob defender, Mob attacker, int atk_override) {
    long ret = questinterfacePINVOKE.Mob_TuneGetOffense__SWIG_0(swigCPtr, Mob.getCPtr(defender), Mob.getCPtr(attacker), atk_override);
    return ret;
  }

  public long TuneGetOffense(Mob defender, Mob attacker) {
    long ret = questinterfacePINVOKE.Mob_TuneGetOffense__SWIG_1(swigCPtr, Mob.getCPtr(defender), Mob.getCPtr(attacker));
    return ret;
  }

  public long TuneGetAccuracy(Mob defender, Mob attacker, int accuracy_override, int add_accuracy) {
    long ret = questinterfacePINVOKE.Mob_TuneGetAccuracy__SWIG_0(swigCPtr, Mob.getCPtr(defender), Mob.getCPtr(attacker), accuracy_override, add_accuracy);
    return ret;
  }

  public long TuneGetAccuracy(Mob defender, Mob attacker, int accuracy_override) {
    long ret = questinterfacePINVOKE.Mob_TuneGetAccuracy__SWIG_1(swigCPtr, Mob.getCPtr(defender), Mob.getCPtr(attacker), accuracy_override);
    return ret;
  }

  public long TuneGetAccuracy(Mob defender, Mob attacker) {
    long ret = questinterfacePINVOKE.Mob_TuneGetAccuracy__SWIG_2(swigCPtr, Mob.getCPtr(defender), Mob.getCPtr(attacker));
    return ret;
  }

  public long TuneGetAvoidance(Mob defender, Mob attacker, int avoidance_override, int add_avoidance) {
    long ret = questinterfacePINVOKE.Mob_TuneGetAvoidance__SWIG_0(swigCPtr, Mob.getCPtr(defender), Mob.getCPtr(attacker), avoidance_override, add_avoidance);
    return ret;
  }

  public long TuneGetAvoidance(Mob defender, Mob attacker, int avoidance_override) {
    long ret = questinterfacePINVOKE.Mob_TuneGetAvoidance__SWIG_1(swigCPtr, Mob.getCPtr(defender), Mob.getCPtr(attacker), avoidance_override);
    return ret;
  }

  public long TuneGetAvoidance(Mob defender, Mob attacker) {
    long ret = questinterfacePINVOKE.Mob_TuneGetAvoidance__SWIG_2(swigCPtr, Mob.getCPtr(defender), Mob.getCPtr(attacker));
    return ret;
  }

  public float TuneGetHitChance(Mob defender, Mob attacker, int avoidance_override, int accuracy_override, int add_avoidance, int add_accuracy) {
    float ret = questinterfacePINVOKE.Mob_TuneGetHitChance__SWIG_0(swigCPtr, Mob.getCPtr(defender), Mob.getCPtr(attacker), avoidance_override, accuracy_override, add_avoidance, add_accuracy);
    return ret;
  }

  public float TuneGetHitChance(Mob defender, Mob attacker, int avoidance_override, int accuracy_override, int add_avoidance) {
    float ret = questinterfacePINVOKE.Mob_TuneGetHitChance__SWIG_1(swigCPtr, Mob.getCPtr(defender), Mob.getCPtr(attacker), avoidance_override, accuracy_override, add_avoidance);
    return ret;
  }

  public float TuneGetHitChance(Mob defender, Mob attacker, int avoidance_override, int accuracy_override) {
    float ret = questinterfacePINVOKE.Mob_TuneGetHitChance__SWIG_2(swigCPtr, Mob.getCPtr(defender), Mob.getCPtr(attacker), avoidance_override, accuracy_override);
    return ret;
  }

  public float TuneGetHitChance(Mob defender, Mob attacker, int avoidance_override) {
    float ret = questinterfacePINVOKE.Mob_TuneGetHitChance__SWIG_3(swigCPtr, Mob.getCPtr(defender), Mob.getCPtr(attacker), avoidance_override);
    return ret;
  }

  public float TuneGetHitChance(Mob defender, Mob attacker) {
    float ret = questinterfacePINVOKE.Mob_TuneGetHitChance__SWIG_4(swigCPtr, Mob.getCPtr(defender), Mob.getCPtr(attacker));
    return ret;
  }

  public float TuneGetAvoidMeleeChance(Mob defender, Mob attacker, int type) {
    float ret = questinterfacePINVOKE.Mob_TuneGetAvoidMeleeChance(swigCPtr, Mob.getCPtr(defender), Mob.getCPtr(attacker), type);
    return ret;
  }

  public long TuneCalcEvasionBonus(int final_avoidance, int base_avoidance) {
    long ret = questinterfacePINVOKE.Mob_TuneCalcEvasionBonus(swigCPtr, final_avoidance, base_avoidance);
    return ret;
  }

  public long TuneNPCAttack(Mob other, bool no_avoid, bool no_hit_chance, int hit_chance_bonus, int ac_override, int atk_override, int add_ac, int add_atk, bool get_offense, bool get_accuracy, int avoidance_override, int accuracy_override, int add_avoidance, int add_accuracy) {
    long ret = questinterfacePINVOKE.Mob_TuneNPCAttack__SWIG_0(swigCPtr, Mob.getCPtr(other), no_avoid, no_hit_chance, hit_chance_bonus, ac_override, atk_override, add_ac, add_atk, get_offense, get_accuracy, avoidance_override, accuracy_override, add_avoidance, add_accuracy);
    return ret;
  }

  public long TuneNPCAttack(Mob other, bool no_avoid, bool no_hit_chance, int hit_chance_bonus, int ac_override, int atk_override, int add_ac, int add_atk, bool get_offense, bool get_accuracy, int avoidance_override, int accuracy_override, int add_avoidance) {
    long ret = questinterfacePINVOKE.Mob_TuneNPCAttack__SWIG_1(swigCPtr, Mob.getCPtr(other), no_avoid, no_hit_chance, hit_chance_bonus, ac_override, atk_override, add_ac, add_atk, get_offense, get_accuracy, avoidance_override, accuracy_override, add_avoidance);
    return ret;
  }

  public long TuneNPCAttack(Mob other, bool no_avoid, bool no_hit_chance, int hit_chance_bonus, int ac_override, int atk_override, int add_ac, int add_atk, bool get_offense, bool get_accuracy, int avoidance_override, int accuracy_override) {
    long ret = questinterfacePINVOKE.Mob_TuneNPCAttack__SWIG_2(swigCPtr, Mob.getCPtr(other), no_avoid, no_hit_chance, hit_chance_bonus, ac_override, atk_override, add_ac, add_atk, get_offense, get_accuracy, avoidance_override, accuracy_override);
    return ret;
  }

  public long TuneNPCAttack(Mob other, bool no_avoid, bool no_hit_chance, int hit_chance_bonus, int ac_override, int atk_override, int add_ac, int add_atk, bool get_offense, bool get_accuracy, int avoidance_override) {
    long ret = questinterfacePINVOKE.Mob_TuneNPCAttack__SWIG_3(swigCPtr, Mob.getCPtr(other), no_avoid, no_hit_chance, hit_chance_bonus, ac_override, atk_override, add_ac, add_atk, get_offense, get_accuracy, avoidance_override);
    return ret;
  }

  public long TuneNPCAttack(Mob other, bool no_avoid, bool no_hit_chance, int hit_chance_bonus, int ac_override, int atk_override, int add_ac, int add_atk, bool get_offense, bool get_accuracy) {
    long ret = questinterfacePINVOKE.Mob_TuneNPCAttack__SWIG_4(swigCPtr, Mob.getCPtr(other), no_avoid, no_hit_chance, hit_chance_bonus, ac_override, atk_override, add_ac, add_atk, get_offense, get_accuracy);
    return ret;
  }

  public long TuneNPCAttack(Mob other, bool no_avoid, bool no_hit_chance, int hit_chance_bonus, int ac_override, int atk_override, int add_ac, int add_atk, bool get_offense) {
    long ret = questinterfacePINVOKE.Mob_TuneNPCAttack__SWIG_5(swigCPtr, Mob.getCPtr(other), no_avoid, no_hit_chance, hit_chance_bonus, ac_override, atk_override, add_ac, add_atk, get_offense);
    return ret;
  }

  public long TuneNPCAttack(Mob other, bool no_avoid, bool no_hit_chance, int hit_chance_bonus, int ac_override, int atk_override, int add_ac, int add_atk) {
    long ret = questinterfacePINVOKE.Mob_TuneNPCAttack__SWIG_6(swigCPtr, Mob.getCPtr(other), no_avoid, no_hit_chance, hit_chance_bonus, ac_override, atk_override, add_ac, add_atk);
    return ret;
  }

  public long TuneNPCAttack(Mob other, bool no_avoid, bool no_hit_chance, int hit_chance_bonus, int ac_override, int atk_override, int add_ac) {
    long ret = questinterfacePINVOKE.Mob_TuneNPCAttack__SWIG_7(swigCPtr, Mob.getCPtr(other), no_avoid, no_hit_chance, hit_chance_bonus, ac_override, atk_override, add_ac);
    return ret;
  }

  public long TuneNPCAttack(Mob other, bool no_avoid, bool no_hit_chance, int hit_chance_bonus, int ac_override, int atk_override) {
    long ret = questinterfacePINVOKE.Mob_TuneNPCAttack__SWIG_8(swigCPtr, Mob.getCPtr(other), no_avoid, no_hit_chance, hit_chance_bonus, ac_override, atk_override);
    return ret;
  }

  public long TuneNPCAttack(Mob other, bool no_avoid, bool no_hit_chance, int hit_chance_bonus, int ac_override) {
    long ret = questinterfacePINVOKE.Mob_TuneNPCAttack__SWIG_9(swigCPtr, Mob.getCPtr(other), no_avoid, no_hit_chance, hit_chance_bonus, ac_override);
    return ret;
  }

  public long TuneNPCAttack(Mob other, bool no_avoid, bool no_hit_chance, int hit_chance_bonus) {
    long ret = questinterfacePINVOKE.Mob_TuneNPCAttack__SWIG_10(swigCPtr, Mob.getCPtr(other), no_avoid, no_hit_chance, hit_chance_bonus);
    return ret;
  }

  public long TuneNPCAttack(Mob other, bool no_avoid, bool no_hit_chance) {
    long ret = questinterfacePINVOKE.Mob_TuneNPCAttack__SWIG_11(swigCPtr, Mob.getCPtr(other), no_avoid, no_hit_chance);
    return ret;
  }

  public long TuneNPCAttack(Mob other, bool no_avoid) {
    long ret = questinterfacePINVOKE.Mob_TuneNPCAttack__SWIG_12(swigCPtr, Mob.getCPtr(other), no_avoid);
    return ret;
  }

  public long TuneNPCAttack(Mob other) {
    long ret = questinterfacePINVOKE.Mob_TuneNPCAttack__SWIG_13(swigCPtr, Mob.getCPtr(other));
    return ret;
  }

  public long TuneClientAttack(Mob other, bool no_avoid, bool no_hit_chance, int hit_chance_bonus, int ac_override, int atk_override, int add_ac, int add_atk, bool get_offense, bool get_accuracy, int avoidance_override, int accuracy_override, int add_avoidance, int add_accuracy) {
    long ret = questinterfacePINVOKE.Mob_TuneClientAttack__SWIG_0(swigCPtr, Mob.getCPtr(other), no_avoid, no_hit_chance, hit_chance_bonus, ac_override, atk_override, add_ac, add_atk, get_offense, get_accuracy, avoidance_override, accuracy_override, add_avoidance, add_accuracy);
    return ret;
  }

  public long TuneClientAttack(Mob other, bool no_avoid, bool no_hit_chance, int hit_chance_bonus, int ac_override, int atk_override, int add_ac, int add_atk, bool get_offense, bool get_accuracy, int avoidance_override, int accuracy_override, int add_avoidance) {
    long ret = questinterfacePINVOKE.Mob_TuneClientAttack__SWIG_1(swigCPtr, Mob.getCPtr(other), no_avoid, no_hit_chance, hit_chance_bonus, ac_override, atk_override, add_ac, add_atk, get_offense, get_accuracy, avoidance_override, accuracy_override, add_avoidance);
    return ret;
  }

  public long TuneClientAttack(Mob other, bool no_avoid, bool no_hit_chance, int hit_chance_bonus, int ac_override, int atk_override, int add_ac, int add_atk, bool get_offense, bool get_accuracy, int avoidance_override, int accuracy_override) {
    long ret = questinterfacePINVOKE.Mob_TuneClientAttack__SWIG_2(swigCPtr, Mob.getCPtr(other), no_avoid, no_hit_chance, hit_chance_bonus, ac_override, atk_override, add_ac, add_atk, get_offense, get_accuracy, avoidance_override, accuracy_override);
    return ret;
  }

  public long TuneClientAttack(Mob other, bool no_avoid, bool no_hit_chance, int hit_chance_bonus, int ac_override, int atk_override, int add_ac, int add_atk, bool get_offense, bool get_accuracy, int avoidance_override) {
    long ret = questinterfacePINVOKE.Mob_TuneClientAttack__SWIG_3(swigCPtr, Mob.getCPtr(other), no_avoid, no_hit_chance, hit_chance_bonus, ac_override, atk_override, add_ac, add_atk, get_offense, get_accuracy, avoidance_override);
    return ret;
  }

  public long TuneClientAttack(Mob other, bool no_avoid, bool no_hit_chance, int hit_chance_bonus, int ac_override, int atk_override, int add_ac, int add_atk, bool get_offense, bool get_accuracy) {
    long ret = questinterfacePINVOKE.Mob_TuneClientAttack__SWIG_4(swigCPtr, Mob.getCPtr(other), no_avoid, no_hit_chance, hit_chance_bonus, ac_override, atk_override, add_ac, add_atk, get_offense, get_accuracy);
    return ret;
  }

  public long TuneClientAttack(Mob other, bool no_avoid, bool no_hit_chance, int hit_chance_bonus, int ac_override, int atk_override, int add_ac, int add_atk, bool get_offense) {
    long ret = questinterfacePINVOKE.Mob_TuneClientAttack__SWIG_5(swigCPtr, Mob.getCPtr(other), no_avoid, no_hit_chance, hit_chance_bonus, ac_override, atk_override, add_ac, add_atk, get_offense);
    return ret;
  }

  public long TuneClientAttack(Mob other, bool no_avoid, bool no_hit_chance, int hit_chance_bonus, int ac_override, int atk_override, int add_ac, int add_atk) {
    long ret = questinterfacePINVOKE.Mob_TuneClientAttack__SWIG_6(swigCPtr, Mob.getCPtr(other), no_avoid, no_hit_chance, hit_chance_bonus, ac_override, atk_override, add_ac, add_atk);
    return ret;
  }

  public long TuneClientAttack(Mob other, bool no_avoid, bool no_hit_chance, int hit_chance_bonus, int ac_override, int atk_override, int add_ac) {
    long ret = questinterfacePINVOKE.Mob_TuneClientAttack__SWIG_7(swigCPtr, Mob.getCPtr(other), no_avoid, no_hit_chance, hit_chance_bonus, ac_override, atk_override, add_ac);
    return ret;
  }

  public long TuneClientAttack(Mob other, bool no_avoid, bool no_hit_chance, int hit_chance_bonus, int ac_override, int atk_override) {
    long ret = questinterfacePINVOKE.Mob_TuneClientAttack__SWIG_8(swigCPtr, Mob.getCPtr(other), no_avoid, no_hit_chance, hit_chance_bonus, ac_override, atk_override);
    return ret;
  }

  public long TuneClientAttack(Mob other, bool no_avoid, bool no_hit_chance, int hit_chance_bonus, int ac_override) {
    long ret = questinterfacePINVOKE.Mob_TuneClientAttack__SWIG_9(swigCPtr, Mob.getCPtr(other), no_avoid, no_hit_chance, hit_chance_bonus, ac_override);
    return ret;
  }

  public long TuneClientAttack(Mob other, bool no_avoid, bool no_hit_chance, int hit_chance_bonus) {
    long ret = questinterfacePINVOKE.Mob_TuneClientAttack__SWIG_10(swigCPtr, Mob.getCPtr(other), no_avoid, no_hit_chance, hit_chance_bonus);
    return ret;
  }

  public long TuneClientAttack(Mob other, bool no_avoid, bool no_hit_chance) {
    long ret = questinterfacePINVOKE.Mob_TuneClientAttack__SWIG_11(swigCPtr, Mob.getCPtr(other), no_avoid, no_hit_chance);
    return ret;
  }

  public long TuneClientAttack(Mob other, bool no_avoid) {
    long ret = questinterfacePINVOKE.Mob_TuneClientAttack__SWIG_12(swigCPtr, Mob.getCPtr(other), no_avoid);
    return ret;
  }

  public long TuneClientAttack(Mob other) {
    long ret = questinterfacePINVOKE.Mob_TuneClientAttack__SWIG_13(swigCPtr, Mob.getCPtr(other));
    return ret;
  }

  public void TuneDoAttack(Mob other, DamageHitInfo hit, ExtraAttackOptions opts, bool no_avoid, bool no_hit_chance, int ac_override, int add_ac, int avoidance_override, int accuracy_override, int add_avoidance, int add_accuracy) {
    questinterfacePINVOKE.Mob_TuneDoAttack__SWIG_0(swigCPtr, Mob.getCPtr(other), DamageHitInfo.getCPtr(hit), ExtraAttackOptions.getCPtr(opts), no_avoid, no_hit_chance, ac_override, add_ac, avoidance_override, accuracy_override, add_avoidance, add_accuracy);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void TuneDoAttack(Mob other, DamageHitInfo hit, ExtraAttackOptions opts, bool no_avoid, bool no_hit_chance, int ac_override, int add_ac, int avoidance_override, int accuracy_override, int add_avoidance) {
    questinterfacePINVOKE.Mob_TuneDoAttack__SWIG_1(swigCPtr, Mob.getCPtr(other), DamageHitInfo.getCPtr(hit), ExtraAttackOptions.getCPtr(opts), no_avoid, no_hit_chance, ac_override, add_ac, avoidance_override, accuracy_override, add_avoidance);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void TuneDoAttack(Mob other, DamageHitInfo hit, ExtraAttackOptions opts, bool no_avoid, bool no_hit_chance, int ac_override, int add_ac, int avoidance_override, int accuracy_override) {
    questinterfacePINVOKE.Mob_TuneDoAttack__SWIG_2(swigCPtr, Mob.getCPtr(other), DamageHitInfo.getCPtr(hit), ExtraAttackOptions.getCPtr(opts), no_avoid, no_hit_chance, ac_override, add_ac, avoidance_override, accuracy_override);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void TuneDoAttack(Mob other, DamageHitInfo hit, ExtraAttackOptions opts, bool no_avoid, bool no_hit_chance, int ac_override, int add_ac, int avoidance_override) {
    questinterfacePINVOKE.Mob_TuneDoAttack__SWIG_3(swigCPtr, Mob.getCPtr(other), DamageHitInfo.getCPtr(hit), ExtraAttackOptions.getCPtr(opts), no_avoid, no_hit_chance, ac_override, add_ac, avoidance_override);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void TuneDoAttack(Mob other, DamageHitInfo hit, ExtraAttackOptions opts, bool no_avoid, bool no_hit_chance, int ac_override, int add_ac) {
    questinterfacePINVOKE.Mob_TuneDoAttack__SWIG_4(swigCPtr, Mob.getCPtr(other), DamageHitInfo.getCPtr(hit), ExtraAttackOptions.getCPtr(opts), no_avoid, no_hit_chance, ac_override, add_ac);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void TuneDoAttack(Mob other, DamageHitInfo hit, ExtraAttackOptions opts, bool no_avoid, bool no_hit_chance, int ac_override) {
    questinterfacePINVOKE.Mob_TuneDoAttack__SWIG_5(swigCPtr, Mob.getCPtr(other), DamageHitInfo.getCPtr(hit), ExtraAttackOptions.getCPtr(opts), no_avoid, no_hit_chance, ac_override);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void TuneDoAttack(Mob other, DamageHitInfo hit, ExtraAttackOptions opts, bool no_avoid, bool no_hit_chance) {
    questinterfacePINVOKE.Mob_TuneDoAttack__SWIG_6(swigCPtr, Mob.getCPtr(other), DamageHitInfo.getCPtr(hit), ExtraAttackOptions.getCPtr(opts), no_avoid, no_hit_chance);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void TuneDoAttack(Mob other, DamageHitInfo hit, ExtraAttackOptions opts, bool no_avoid) {
    questinterfacePINVOKE.Mob_TuneDoAttack__SWIG_7(swigCPtr, Mob.getCPtr(other), DamageHitInfo.getCPtr(hit), ExtraAttackOptions.getCPtr(opts), no_avoid);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void TuneDoAttack(Mob other, DamageHitInfo hit, ExtraAttackOptions opts) {
    questinterfacePINVOKE.Mob_TuneDoAttack__SWIG_8(swigCPtr, Mob.getCPtr(other), DamageHitInfo.getCPtr(hit), ExtraAttackOptions.getCPtr(opts));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void TuneDoAttack(Mob other, DamageHitInfo hit) {
    questinterfacePINVOKE.Mob_TuneDoAttack__SWIG_9(swigCPtr, Mob.getCPtr(other), DamageHitInfo.getCPtr(hit));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void TuneMeleeMitigation(Mob attacker, DamageHitInfo hit, int ac_override, int add_ac) {
    questinterfacePINVOKE.Mob_TuneMeleeMitigation(swigCPtr, Mob.getCPtr(attacker), DamageHitInfo.getCPtr(hit), ac_override, add_ac);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public long Tuneoffense(SWIGTYPE_p_EQ__skills__SkillType skill, int atk_override, int add_atk) {
    long ret = questinterfacePINVOKE.Mob_Tuneoffense__SWIG_0(swigCPtr, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skill), atk_override, add_atk);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public long Tuneoffense(SWIGTYPE_p_EQ__skills__SkillType skill, int atk_override) {
    long ret = questinterfacePINVOKE.Mob_Tuneoffense__SWIG_1(swigCPtr, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skill), atk_override);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public long Tuneoffense(SWIGTYPE_p_EQ__skills__SkillType skill) {
    long ret = questinterfacePINVOKE.Mob_Tuneoffense__SWIG_2(swigCPtr, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skill));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public long TuneACSum(bool skip_caps, int ac_override, int add_ac) {
    long ret = questinterfacePINVOKE.Mob_TuneACSum__SWIG_0(swigCPtr, skip_caps, ac_override, add_ac);
    return ret;
  }

  public long TuneACSum(bool skip_caps, int ac_override) {
    long ret = questinterfacePINVOKE.Mob_TuneACSum__SWIG_1(swigCPtr, skip_caps, ac_override);
    return ret;
  }

  public long TuneACSum(bool skip_caps) {
    long ret = questinterfacePINVOKE.Mob_TuneACSum__SWIG_2(swigCPtr, skip_caps);
    return ret;
  }

  public long TuneACSum() {
    long ret = questinterfacePINVOKE.Mob_TuneACSum__SWIG_3(swigCPtr);
    return ret;
  }

  public long TuneGetTotalToHit(SWIGTYPE_p_EQ__skills__SkillType skill, int chance_mod, int accuracy_override, int add_accurracy) {
    long ret = questinterfacePINVOKE.Mob_TuneGetTotalToHit__SWIG_0(swigCPtr, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skill), chance_mod, accuracy_override, add_accurracy);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public long TuneGetTotalToHit(SWIGTYPE_p_EQ__skills__SkillType skill, int chance_mod, int accuracy_override) {
    long ret = questinterfacePINVOKE.Mob_TuneGetTotalToHit__SWIG_1(swigCPtr, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skill), chance_mod, accuracy_override);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public long TuneGetTotalToHit(SWIGTYPE_p_EQ__skills__SkillType skill, int chance_mod) {
    long ret = questinterfacePINVOKE.Mob_TuneGetTotalToHit__SWIG_2(swigCPtr, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skill), chance_mod);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public long Tunecompute_tohit(SWIGTYPE_p_EQ__skills__SkillType skillinuse, int accuracy_override, int add_accuracy) {
    long ret = questinterfacePINVOKE.Mob_Tunecompute_tohit__SWIG_0(swigCPtr, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skillinuse), accuracy_override, add_accuracy);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public long Tunecompute_tohit(SWIGTYPE_p_EQ__skills__SkillType skillinuse, int accuracy_override) {
    long ret = questinterfacePINVOKE.Mob_Tunecompute_tohit__SWIG_1(swigCPtr, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skillinuse), accuracy_override);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public long Tunecompute_tohit(SWIGTYPE_p_EQ__skills__SkillType skillinuse) {
    long ret = questinterfacePINVOKE.Mob_Tunecompute_tohit__SWIG_2(swigCPtr, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skillinuse));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public long TuneGetTotalDefense(int avoidance_override, int add_avoidance) {
    long ret = questinterfacePINVOKE.Mob_TuneGetTotalDefense__SWIG_0(swigCPtr, avoidance_override, add_avoidance);
    return ret;
  }

  public long TuneGetTotalDefense(int avoidance_override) {
    long ret = questinterfacePINVOKE.Mob_TuneGetTotalDefense__SWIG_1(swigCPtr, avoidance_override);
    return ret;
  }

  public long TuneGetTotalDefense() {
    long ret = questinterfacePINVOKE.Mob_TuneGetTotalDefense__SWIG_2(swigCPtr);
    return ret;
  }

  public long Tunecompute_defense(int avoidance_override, int add_avoidance) {
    long ret = questinterfacePINVOKE.Mob_Tunecompute_defense__SWIG_0(swigCPtr, avoidance_override, add_avoidance);
    return ret;
  }

  public long Tunecompute_defense(int avoidance_override) {
    long ret = questinterfacePINVOKE.Mob_Tunecompute_defense__SWIG_1(swigCPtr, avoidance_override);
    return ret;
  }

  public long Tunecompute_defense() {
    long ret = questinterfacePINVOKE.Mob_Tunecompute_defense__SWIG_2(swigCPtr);
    return ret;
  }

  public bool TuneCheckHitChance(Mob other, DamageHitInfo hit, int avoidance_override, int add_avoidance) {
    bool ret = questinterfacePINVOKE.Mob_TuneCheckHitChance__SWIG_0(swigCPtr, Mob.getCPtr(other), DamageHitInfo.getCPtr(hit), avoidance_override, add_avoidance);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool TuneCheckHitChance(Mob other, DamageHitInfo hit, int avoidance_override) {
    bool ret = questinterfacePINVOKE.Mob_TuneCheckHitChance__SWIG_1(swigCPtr, Mob.getCPtr(other), DamageHitInfo.getCPtr(hit), avoidance_override);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool TuneCheckHitChance(Mob other, DamageHitInfo hit) {
    bool ret = questinterfacePINVOKE.Mob_TuneCheckHitChance__SWIG_2(swigCPtr, Mob.getCPtr(other), DamageHitInfo.getCPtr(hit));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_EQ__skills__SkillType TuneAttackAnimation(int Hand, SWIGTYPE_p_EQ__ItemInstance weapon, SWIGTYPE_p_EQ__skills__SkillType skillinuse) {
    SWIGTYPE_p_EQ__skills__SkillType ret = new SWIGTYPE_p_EQ__skills__SkillType(questinterfacePINVOKE.Mob_TuneAttackAnimation__SWIG_0(swigCPtr, Hand, SWIGTYPE_p_EQ__ItemInstance.getCPtr(weapon), SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skillinuse)), true);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_EQ__skills__SkillType TuneAttackAnimation(int Hand, SWIGTYPE_p_EQ__ItemInstance weapon) {
    SWIGTYPE_p_EQ__skills__SkillType ret = new SWIGTYPE_p_EQ__skills__SkillType(questinterfacePINVOKE.Mob_TuneAttackAnimation__SWIG_1(swigCPtr, Hand, SWIGTYPE_p_EQ__ItemInstance.getCPtr(weapon)), true);
    return ret;
  }

  public void TuneCommonOutgoingHitSuccess(Mob defender, DamageHitInfo hit, ExtraAttackOptions opts) {
    questinterfacePINVOKE.Mob_TuneCommonOutgoingHitSuccess__SWIG_0(swigCPtr, Mob.getCPtr(defender), DamageHitInfo.getCPtr(hit), ExtraAttackOptions.getCPtr(opts));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void TuneCommonOutgoingHitSuccess(Mob defender, DamageHitInfo hit) {
    questinterfacePINVOKE.Mob_TuneCommonOutgoingHitSuccess__SWIG_1(swigCPtr, Mob.getCPtr(defender), DamageHitInfo.getCPtr(hit));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint GetAA(uint rank_id, SWIGTYPE_p_unsigned_int charges) {
    uint ret = questinterfacePINVOKE.Mob_GetAA__SWIG_0(swigCPtr, rank_id, SWIGTYPE_p_unsigned_int.getCPtr(charges));
    return ret;
  }

  public uint GetAA(uint rank_id) {
    uint ret = questinterfacePINVOKE.Mob_GetAA__SWIG_1(swigCPtr, rank_id);
    return ret;
  }

  public uint GetAAByAAID(uint aa_id, SWIGTYPE_p_unsigned_int charges) {
    uint ret = questinterfacePINVOKE.Mob_GetAAByAAID__SWIG_0(swigCPtr, aa_id, SWIGTYPE_p_unsigned_int.getCPtr(charges));
    return ret;
  }

  public uint GetAAByAAID(uint aa_id) {
    uint ret = questinterfacePINVOKE.Mob_GetAAByAAID__SWIG_1(swigCPtr, aa_id);
    return ret;
  }

  public bool SetAA(uint rank_id, uint new_value, uint charges) {
    bool ret = questinterfacePINVOKE.Mob_SetAA__SWIG_0(swigCPtr, rank_id, new_value, charges);
    return ret;
  }

  public bool SetAA(uint rank_id, uint new_value) {
    bool ret = questinterfacePINVOKE.Mob_SetAA__SWIG_1(swigCPtr, rank_id, new_value);
    return ret;
  }

  public void ClearAAs() {
    questinterfacePINVOKE.Mob_ClearAAs(swigCPtr);
  }

  public bool CanUseAlternateAdvancementRank(SWIGTYPE_p_AA__Rank rank) {
    bool ret = questinterfacePINVOKE.Mob_CanUseAlternateAdvancementRank(swigCPtr, SWIGTYPE_p_AA__Rank.getCPtr(rank));
    return ret;
  }

  public bool CanPurchaseAlternateAdvancementRank(SWIGTYPE_p_AA__Rank rank, bool check_price, bool check_grant) {
    bool ret = questinterfacePINVOKE.Mob_CanPurchaseAlternateAdvancementRank(swigCPtr, SWIGTYPE_p_AA__Rank.getCPtr(rank), check_price, check_grant);
    return ret;
  }

  public int GetAlternateAdvancementCooldownReduction(SWIGTYPE_p_AA__Rank rank_in) {
    int ret = questinterfacePINVOKE.Mob_GetAlternateAdvancementCooldownReduction(swigCPtr, SWIGTYPE_p_AA__Rank.getCPtr(rank_in));
    return ret;
  }

  public void ExpendAlternateAdvancementCharge(uint aa_id) {
    questinterfacePINVOKE.Mob_ExpendAlternateAdvancementCharge(swigCPtr, aa_id);
  }

  public void CalcAABonuses(StatBonuses newbon) {
    questinterfacePINVOKE.Mob_CalcAABonuses(swigCPtr, StatBonuses.getCPtr(newbon));
  }

  public long CalcAAFocus(focusType type, SWIGTYPE_p_AA__Rank rank, ushort spell_id) {
    long ret = questinterfacePINVOKE.Mob_CalcAAFocus(swigCPtr, (int)type, SWIGTYPE_p_AA__Rank.getCPtr(rank), spell_id);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void ApplyAABonuses(SWIGTYPE_p_AA__Rank rank, StatBonuses newbon) {
    questinterfacePINVOKE.Mob_ApplyAABonuses(swigCPtr, SWIGTYPE_p_AA__Rank.getCPtr(rank), StatBonuses.getCPtr(newbon));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool CheckAATimer(int timer) {
    bool ret = questinterfacePINVOKE.Mob_CheckAATimer(swigCPtr, timer);
    return ret;
  }

  public void CalcItemBonuses(StatBonuses b) {
    questinterfacePINVOKE.Mob_CalcItemBonuses(swigCPtr, StatBonuses.getCPtr(b));
  }

  public void AddItemBonuses(SWIGTYPE_p_EQ__ItemInstance inst, StatBonuses b, bool is_augment, bool is_tribute, int recommended_level_override, bool is_ammo_item) {
    questinterfacePINVOKE.Mob_AddItemBonuses__SWIG_0(swigCPtr, SWIGTYPE_p_EQ__ItemInstance.getCPtr(inst), StatBonuses.getCPtr(b), is_augment, is_tribute, recommended_level_override, is_ammo_item);
  }

  public void AddItemBonuses(SWIGTYPE_p_EQ__ItemInstance inst, StatBonuses b, bool is_augment, bool is_tribute, int recommended_level_override) {
    questinterfacePINVOKE.Mob_AddItemBonuses__SWIG_1(swigCPtr, SWIGTYPE_p_EQ__ItemInstance.getCPtr(inst), StatBonuses.getCPtr(b), is_augment, is_tribute, recommended_level_override);
  }

  public void AddItemBonuses(SWIGTYPE_p_EQ__ItemInstance inst, StatBonuses b, bool is_augment, bool is_tribute) {
    questinterfacePINVOKE.Mob_AddItemBonuses__SWIG_2(swigCPtr, SWIGTYPE_p_EQ__ItemInstance.getCPtr(inst), StatBonuses.getCPtr(b), is_augment, is_tribute);
  }

  public void AddItemBonuses(SWIGTYPE_p_EQ__ItemInstance inst, StatBonuses b, bool is_augment) {
    questinterfacePINVOKE.Mob_AddItemBonuses__SWIG_3(swigCPtr, SWIGTYPE_p_EQ__ItemInstance.getCPtr(inst), StatBonuses.getCPtr(b), is_augment);
  }

  public void AddItemBonuses(SWIGTYPE_p_EQ__ItemInstance inst, StatBonuses b) {
    questinterfacePINVOKE.Mob_AddItemBonuses__SWIG_4(swigCPtr, SWIGTYPE_p_EQ__ItemInstance.getCPtr(inst), StatBonuses.getCPtr(b));
  }

  public void AdditiveWornBonuses(SWIGTYPE_p_EQ__ItemInstance inst, StatBonuses b, bool is_augment) {
    questinterfacePINVOKE.Mob_AdditiveWornBonuses__SWIG_0(swigCPtr, SWIGTYPE_p_EQ__ItemInstance.getCPtr(inst), StatBonuses.getCPtr(b), is_augment);
  }

  public void AdditiveWornBonuses(SWIGTYPE_p_EQ__ItemInstance inst, StatBonuses b) {
    questinterfacePINVOKE.Mob_AdditiveWornBonuses__SWIG_1(swigCPtr, SWIGTYPE_p_EQ__ItemInstance.getCPtr(inst), StatBonuses.getCPtr(b));
  }

  public int CalcRecommendedLevelBonus(byte current_level, byte recommended_level, int base_stat) {
    int ret = questinterfacePINVOKE.Mob_CalcRecommendedLevelBonus(swigCPtr, current_level, recommended_level, base_stat);
    return ret;
  }

  public int NPCAssistCap() {
    int ret = questinterfacePINVOKE.Mob_NPCAssistCap(swigCPtr);
    return ret;
  }

  public void AddAssistCap() {
    questinterfacePINVOKE.Mob_AddAssistCap(swigCPtr);
  }

  public void DelAssistCap() {
    questinterfacePINVOKE.Mob_DelAssistCap(swigCPtr);
  }

  public void ResetAssistCap() {
    questinterfacePINVOKE.Mob_ResetAssistCap(swigCPtr);
  }

  public long GetWeaponDamage(Mob against, SWIGTYPE_p_EQ__ItemData weapon_item) {
    long ret = questinterfacePINVOKE.Mob_GetWeaponDamage__SWIG_0(swigCPtr, Mob.getCPtr(against), SWIGTYPE_p_EQ__ItemData.getCPtr(weapon_item));
    return ret;
  }

  public long GetWeaponDamage(Mob against, SWIGTYPE_p_EQ__ItemInstance weapon_item, SWIGTYPE_p_long_long hate) {
    long ret = questinterfacePINVOKE.Mob_GetWeaponDamage__SWIG_1(swigCPtr, Mob.getCPtr(against), SWIGTYPE_p_EQ__ItemInstance.getCPtr(weapon_item), SWIGTYPE_p_long_long.getCPtr(hate));
    return ret;
  }

  public long GetWeaponDamage(Mob against, SWIGTYPE_p_EQ__ItemInstance weapon_item) {
    long ret = questinterfacePINVOKE.Mob_GetWeaponDamage__SWIG_2(swigCPtr, Mob.getCPtr(against), SWIGTYPE_p_EQ__ItemInstance.getCPtr(weapon_item));
    return ret;
  }

  public long DoDamageCaps(long base_damage) {
    long ret = questinterfacePINVOKE.Mob_DoDamageCaps(swigCPtr, base_damage);
    return ret;
  }

  public long GetHPRegen() {
    long ret = questinterfacePINVOKE.Mob_GetHPRegen(swigCPtr);
    return ret;
  }

  public long GetHPRegenPerSecond() {
    long ret = questinterfacePINVOKE.Mob_GetHPRegenPerSecond(swigCPtr);
    return ret;
  }

  public long GetManaRegen() {
    long ret = questinterfacePINVOKE.Mob_GetManaRegen(swigCPtr);
    return ret;
  }

  public long GetEnduranceRegen() {
    long ret = questinterfacePINVOKE.Mob_GetEnduranceRegen(swigCPtr);
    return ret;
  }

  public bool CanOpenDoors() {
    bool ret = questinterfacePINVOKE.Mob_CanOpenDoors(swigCPtr);
    return ret;
  }

  public void SetCanOpenDoors(bool can_open) {
    questinterfacePINVOKE.Mob_SetCanOpenDoors(swigCPtr, can_open);
  }

  public void SetFeigned(bool in_feigned) {
    questinterfacePINVOKE.Mob_SetFeigned(swigCPtr, in_feigned);
  }

  public bool GetFeigned() {
    bool ret = questinterfacePINVOKE.Mob_GetFeigned(swigCPtr);
    return ret;
  }

  public void DeleteBucket(SWIGTYPE_p_std__string bucket_name) {
    questinterfacePINVOKE.Mob_DeleteBucket(swigCPtr, SWIGTYPE_p_std__string.getCPtr(bucket_name));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__string GetBucket(SWIGTYPE_p_std__string bucket_name) {
    SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(questinterfacePINVOKE.Mob_GetBucket(swigCPtr, SWIGTYPE_p_std__string.getCPtr(bucket_name)), true);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__string GetBucketExpires(SWIGTYPE_p_std__string bucket_name) {
    SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(questinterfacePINVOKE.Mob_GetBucketExpires(swigCPtr, SWIGTYPE_p_std__string.getCPtr(bucket_name)), true);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__string GetBucketRemaining(SWIGTYPE_p_std__string bucket_name) {
    SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(questinterfacePINVOKE.Mob_GetBucketRemaining(swigCPtr, SWIGTYPE_p_std__string.getCPtr(bucket_name)), true);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetBucket(SWIGTYPE_p_std__string bucket_name, SWIGTYPE_p_std__string bucket_value, SWIGTYPE_p_std__string expiration) {
    questinterfacePINVOKE.Mob_SetBucket__SWIG_0(swigCPtr, SWIGTYPE_p_std__string.getCPtr(bucket_name), SWIGTYPE_p_std__string.getCPtr(bucket_value), SWIGTYPE_p_std__string.getCPtr(expiration));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetBucket(SWIGTYPE_p_std__string bucket_name, SWIGTYPE_p_std__string bucket_value) {
    questinterfacePINVOKE.Mob_SetBucket__SWIG_1(swigCPtr, SWIGTYPE_p_std__string.getCPtr(bucket_name), SWIGTYPE_p_std__string.getCPtr(bucket_value));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint GetMobTypeIdentifier() {
    uint ret = questinterfacePINVOKE.Mob_GetMobTypeIdentifier(swigCPtr);
    return ret;
  }

  public float CheckHeroicBonusesDataBuckets(SWIGTYPE_p_std__string bucket_name) {
    float ret = questinterfacePINVOKE.Mob_CheckHeroicBonusesDataBuckets(swigCPtr, SWIGTYPE_p_std__string.getCPtr(bucket_name));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int DispatchZoneControllerEvent(QuestEventID evt, Mob init, SWIGTYPE_p_std__string data, uint extra, SWIGTYPE_p_std__vectorT_std__any_t pointers) {
    int ret = questinterfacePINVOKE.Mob_DispatchZoneControllerEvent(swigCPtr, (int)evt, Mob.getCPtr(init), SWIGTYPE_p_std__string.getCPtr(data), extra, SWIGTYPE_p_std__vectorT_std__any_t.getCPtr(pointers));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsHealRotationTarget() {
    bool ret = questinterfacePINVOKE.Mob_IsHealRotationTarget(swigCPtr);
    return ret;
  }

  public bool JoinHealRotationTargetPool(SWIGTYPE_p_std__shared_ptrT_HealRotation_t heal_rotation) {
    bool ret = questinterfacePINVOKE.Mob_JoinHealRotationTargetPool(swigCPtr, SWIGTYPE_p_std__shared_ptrT_HealRotation_t.getCPtr(heal_rotation));
    return ret;
  }

  public bool LeaveHealRotationTargetPool() {
    bool ret = questinterfacePINVOKE.Mob_LeaveHealRotationTargetPool(swigCPtr);
    return ret;
  }

  public uint HealRotationHealCount() {
    uint ret = questinterfacePINVOKE.Mob_HealRotationHealCount(swigCPtr);
    return ret;
  }

  public uint HealRotationExtendedHealCount() {
    uint ret = questinterfacePINVOKE.Mob_HealRotationExtendedHealCount(swigCPtr);
    return ret;
  }

  public float HealRotationHealFrequency() {
    float ret = questinterfacePINVOKE.Mob_HealRotationHealFrequency(swigCPtr);
    return ret;
  }

  public float HealRotationExtendedHealFrequency() {
    float ret = questinterfacePINVOKE.Mob_HealRotationExtendedHealFrequency(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_std__shared_ptrT_HealRotation_t TargetOfHealRotation() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Mob_TargetOfHealRotation(swigCPtr);
    SWIGTYPE_p_std__shared_ptrT_HealRotation_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__shared_ptrT_HealRotation_t(cPtr, false);
    return ret;
  }

  public void SetManualFollow(bool flag) {
    questinterfacePINVOKE.Mob_SetManualFollow(swigCPtr, flag);
  }

  public bool GetManualFollow() {
    bool ret = questinterfacePINVOKE.Mob_GetManualFollow(swigCPtr);
    return ret;
  }

  public void DrawDebugCoordinateNode(SWIGTYPE_p_std__string node_name, SWIGTYPE_p_glm__vec4 vec) {
    questinterfacePINVOKE.Mob_DrawDebugCoordinateNode(swigCPtr, SWIGTYPE_p_std__string.getCPtr(node_name), SWIGTYPE_p_glm__vec4.getCPtr(vec));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void CalcHeroicBonuses(StatBonuses newbon) {
    questinterfacePINVOKE.Mob_CalcHeroicBonuses(swigCPtr, StatBonuses.getCPtr(newbon));
  }

  public SWIGTYPE_p_DataBucketKey GetScopedBucketKeys() {
    SWIGTYPE_p_DataBucketKey ret = new SWIGTYPE_p_DataBucketKey(questinterfacePINVOKE.Mob_GetScopedBucketKeys(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_CombatRecord GetCombatRecord() {
    SWIGTYPE_p_CombatRecord ret = new SWIGTYPE_p_CombatRecord(questinterfacePINVOKE.Mob_GetCombatRecord(swigCPtr), false);
    return ret;
  }

  public bool GetWasSpawnedInWater() {
    bool ret = questinterfacePINVOKE.Mob_GetWasSpawnedInWater(swigCPtr);
    return ret;
  }

  public void SetSpawnedInWater(bool spawned_in_water) {
    questinterfacePINVOKE.Mob_SetSpawnedInWater(swigCPtr, spawned_in_water);
  }

  public bool turning {
    set {
      questinterfacePINVOKE.Mob_turning_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.Mob_turning_get(swigCPtr);
      return ret;
    } 
  }

  public enum CLIENT_CONN_STATUS {
    CLIENT_CONNECTING,
    CLIENT_CONNECTED,
    CLIENT_LINKDEAD,
    CLIENT_KICKED,
    DISCONNECTED,
    CLIENT_ERROR,
    CLIENT_CONNECTINGALL
  }

  public enum eStandingPetOrder {
    SPO_Follow,
    SPO_Sit,
    SPO_Guard,
    SPO_FeignDeath
  }

}

public enum QuestEventID {
  EVENT_SAY = 0,
  EVENT_TRADE,
  EVENT_DEATH,
  EVENT_SPAWN,
  EVENT_ATTACK,
  EVENT_COMBAT,
  EVENT_AGGRO,
  EVENT_SLAY,
  EVENT_NPC_SLAY,
  EVENT_WAYPOINT_ARRIVE,
  EVENT_WAYPOINT_DEPART,
  EVENT_TIMER,
  EVENT_SIGNAL,
  EVENT_HP,
  EVENT_ENTER,
  EVENT_EXIT,
  EVENT_ENTER_ZONE,
  EVENT_CLICK_DOOR,
  EVENT_LOOT,
  EVENT_ZONE,
  EVENT_LEVEL_UP,
  EVENT_KILLED_MERIT,
  EVENT_CAST_ON,
  EVENT_TASK_ACCEPTED,
  EVENT_TASK_STAGE_COMPLETE,
  EVENT_TASK_UPDATE,
  EVENT_TASK_COMPLETE,
  EVENT_TASK_FAIL,
  EVENT_AGGRO_SAY,
  EVENT_PLAYER_PICKUP,
  EVENT_POPUP_RESPONSE,
  EVENT_ENVIRONMENTAL_DAMAGE,
  EVENT_PROXIMITY_SAY,
  EVENT_CAST,
  EVENT_CAST_BEGIN,
  EVENT_SCALE_CALC,
  EVENT_ITEM_ENTER_ZONE,
  EVENT_TARGET_CHANGE,
  EVENT_HATE_LIST,
  EVENT_SPELL_EFFECT_CLIENT,
  EVENT_SPELL_EFFECT_NPC,
  EVENT_SPELL_EFFECT_BUFF_TIC_CLIENT,
  EVENT_SPELL_EFFECT_BUFF_TIC_NPC,
  EVENT_SPELL_FADE,
  EVENT_SPELL_EFFECT_TRANSLOCATE_COMPLETE,
  EVENT_COMBINE_SUCCESS,
  EVENT_COMBINE_FAILURE,
  EVENT_ITEM_CLICK,
  EVENT_ITEM_CLICK_CAST,
  EVENT_GROUP_CHANGE,
  EVENT_FORAGE_SUCCESS,
  EVENT_FORAGE_FAILURE,
  EVENT_FISH_START,
  EVENT_FISH_SUCCESS,
  EVENT_FISH_FAILURE,
  EVENT_CLICK_OBJECT,
  EVENT_DISCOVER_ITEM,
  EVENT_DISCONNECT,
  EVENT_CONNECT,
  EVENT_ITEM_TICK,
  EVENT_DUEL_WIN,
  EVENT_DUEL_LOSE,
  EVENT_ENCOUNTER_LOAD,
  EVENT_ENCOUNTER_UNLOAD,
  EVENT_COMMAND,
  EVENT_DROP_ITEM,
  EVENT_DESTROY_ITEM,
  EVENT_FEIGN_DEATH,
  EVENT_WEAPON_PROC,
  EVENT_EQUIP_ITEM,
  EVENT_UNEQUIP_ITEM,
  EVENT_AUGMENT_ITEM,
  EVENT_UNAUGMENT_ITEM,
  EVENT_AUGMENT_INSERT,
  EVENT_AUGMENT_REMOVE,
  EVENT_ENTER_AREA,
  EVENT_LEAVE_AREA,
  EVENT_RESPAWN,
  EVENT_DEATH_COMPLETE,
  EVENT_UNHANDLED_OPCODE,
  EVENT_TICK,
  EVENT_SPAWN_ZONE,
  EVENT_DEATH_ZONE,
  EVENT_USE_SKILL,
  EVENT_COMBINE_VALIDATE,
  EVENT_BOT_COMMAND,
  EVENT_WARP,
  EVENT_TEST_BUFF,
  EVENT_COMBINE,
  EVENT_CONSIDER,
  EVENT_CONSIDER_CORPSE,
  EVENT_LOOT_ZONE,
  EVENT_EQUIP_ITEM_CLIENT,
  EVENT_UNEQUIP_ITEM_CLIENT,
  EVENT_SKILL_UP,
  EVENT_LANGUAGE_SKILL_UP,
  EVENT_ALT_CURRENCY_MERCHANT_BUY,
  EVENT_ALT_CURRENCY_MERCHANT_SELL,
  EVENT_MERCHANT_BUY,
  EVENT_MERCHANT_SELL,
  EVENT_INSPECT,
  EVENT_TASK_BEFORE_UPDATE,
  EVENT_AA_BUY,
  EVENT_AA_GAIN,
  EVENT_AA_EXP_GAIN,
  EVENT_EXP_GAIN,
  EVENT_PAYLOAD,
  EVENT_LEVEL_DOWN,
  EVENT_GM_COMMAND,
  EVENT_DESPAWN,
  EVENT_DESPAWN_ZONE,
  EVENT_BOT_CREATE,
  EVENT_AUGMENT_INSERT_CLIENT,
  EVENT_AUGMENT_REMOVE_CLIENT,
  EVENT_EQUIP_ITEM_BOT,
  EVENT_UNEQUIP_ITEM_BOT,
  EVENT_DAMAGE_GIVEN,
  EVENT_DAMAGE_TAKEN,
  EVENT_ITEM_CLICK_CLIENT,
  EVENT_ITEM_CLICK_CAST_CLIENT,
  EVENT_DESTROY_ITEM_CLIENT,
  EVENT_DROP_ITEM_CLIENT,
  EVENT_MEMORIZE_SPELL,
  EVENT_UNMEMORIZE_SPELL,
  EVENT_SCRIBE_SPELL,
  EVENT_UNSCRIBE_SPELL,
  EVENT_LOOT_ADDED,
  EVENT_LDON_POINTS_GAIN,
  EVENT_LDON_POINTS_LOSS,
  EVENT_ALT_CURRENCY_GAIN,
  EVENT_ALT_CURRENCY_LOSS,
  EVENT_CRYSTAL_GAIN,
  EVENT_CRYSTAL_LOSS,
  EVENT_TIMER_PAUSE,
  EVENT_TIMER_RESUME,
  EVENT_TIMER_START,
  EVENT_TIMER_STOP,
  EVENT_ENTITY_VARIABLE_DELETE,
  EVENT_ENTITY_VARIABLE_SET,
  EVENT_ENTITY_VARIABLE_UPDATE,
  EVENT_SPELL_EFFECT_BOT,
  EVENT_SPELL_EFFECT_BUFF_TIC_BOT,
  _LargestEventID
}

public class NPCProximity : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal NPCProximity(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(NPCProximity obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(NPCProximity obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~NPCProximity() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_NPCProximity(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public float min_x {
    set {
      questinterfacePINVOKE.NPCProximity_min_x_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.NPCProximity_min_x_get(swigCPtr);
      return ret;
    } 
  }

  public float max_x {
    set {
      questinterfacePINVOKE.NPCProximity_max_x_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.NPCProximity_max_x_get(swigCPtr);
      return ret;
    } 
  }

  public float min_y {
    set {
      questinterfacePINVOKE.NPCProximity_min_y_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.NPCProximity_min_y_get(swigCPtr);
      return ret;
    } 
  }

  public float max_y {
    set {
      questinterfacePINVOKE.NPCProximity_max_y_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.NPCProximity_max_y_get(swigCPtr);
      return ret;
    } 
  }

  public float min_z {
    set {
      questinterfacePINVOKE.NPCProximity_min_z_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.NPCProximity_min_z_get(swigCPtr);
      return ret;
    } 
  }

  public float max_z {
    set {
      questinterfacePINVOKE.NPCProximity_max_z_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.NPCProximity_max_z_get(swigCPtr);
      return ret;
    } 
  }

  public bool say {
    set {
      questinterfacePINVOKE.NPCProximity_say_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.NPCProximity_say_get(swigCPtr);
      return ret;
    } 
  }

  public bool proximity_set {
    set {
      questinterfacePINVOKE.NPCProximity_proximity_set_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.NPCProximity_proximity_set_get(swigCPtr);
      return ret;
    } 
  }

  public NPCProximity() : this(questinterfacePINVOKE.new_NPCProximity(), true) {
  }

}

public class AISpells_Struct : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal AISpells_Struct(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AISpells_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(AISpells_Struct obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~AISpells_Struct() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_AISpells_Struct(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public uint type {
    set {
      questinterfacePINVOKE.AISpells_Struct_type_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.AISpells_Struct_type_get(swigCPtr);
      return ret;
    } 
  }

  public ushort spellid {
    set {
      questinterfacePINVOKE.AISpells_Struct_spellid_set(swigCPtr, value);
    } 
    get {
      ushort ret = questinterfacePINVOKE.AISpells_Struct_spellid_get(swigCPtr);
      return ret;
    } 
  }

  public short manacost {
    set {
      questinterfacePINVOKE.AISpells_Struct_manacost_set(swigCPtr, value);
    } 
    get {
      short ret = questinterfacePINVOKE.AISpells_Struct_manacost_get(swigCPtr);
      return ret;
    } 
  }

  public uint time_cancast {
    set {
      questinterfacePINVOKE.AISpells_Struct_time_cancast_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.AISpells_Struct_time_cancast_get(swigCPtr);
      return ret;
    } 
  }

  public int recast_delay {
    set {
      questinterfacePINVOKE.AISpells_Struct_recast_delay_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.AISpells_Struct_recast_delay_get(swigCPtr);
      return ret;
    } 
  }

  public short priority {
    set {
      questinterfacePINVOKE.AISpells_Struct_priority_set(swigCPtr, value);
    } 
    get {
      short ret = questinterfacePINVOKE.AISpells_Struct_priority_get(swigCPtr);
      return ret;
    } 
  }

  public short resist_adjust {
    set {
      questinterfacePINVOKE.AISpells_Struct_resist_adjust_set(swigCPtr, value);
    } 
    get {
      short ret = questinterfacePINVOKE.AISpells_Struct_resist_adjust_get(swigCPtr);
      return ret;
    } 
  }

  public sbyte min_hp {
    set {
      questinterfacePINVOKE.AISpells_Struct_min_hp_set(swigCPtr, value);
    } 
    get {
      sbyte ret = questinterfacePINVOKE.AISpells_Struct_min_hp_get(swigCPtr);
      return ret;
    } 
  }

  public sbyte max_hp {
    set {
      questinterfacePINVOKE.AISpells_Struct_max_hp_set(swigCPtr, value);
    } 
    get {
      sbyte ret = questinterfacePINVOKE.AISpells_Struct_max_hp_get(swigCPtr);
      return ret;
    } 
  }

  public AISpells_Struct() : this(questinterfacePINVOKE.new_AISpells_Struct(), true) {
  }

}

public class AISpellsEffects_Struct : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal AISpellsEffects_Struct(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AISpellsEffects_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(AISpellsEffects_Struct obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~AISpellsEffects_Struct() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_AISpellsEffects_Struct(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ushort spelleffectid {
    set {
      questinterfacePINVOKE.AISpellsEffects_Struct_spelleffectid_set(swigCPtr, value);
    } 
    get {
      ushort ret = questinterfacePINVOKE.AISpellsEffects_Struct_spelleffectid_get(swigCPtr);
      return ret;
    } 
  }

  public int base_value {
    set {
      questinterfacePINVOKE.AISpellsEffects_Struct_base_value_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.AISpellsEffects_Struct_base_value_get(swigCPtr);
      return ret;
    } 
  }

  public int limit {
    set {
      questinterfacePINVOKE.AISpellsEffects_Struct_limit_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.AISpellsEffects_Struct_limit_get(swigCPtr);
      return ret;
    } 
  }

  public int max_value {
    set {
      questinterfacePINVOKE.AISpellsEffects_Struct_max_value_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.AISpellsEffects_Struct_max_value_get(swigCPtr);
      return ret;
    } 
  }

  public AISpellsEffects_Struct() : this(questinterfacePINVOKE.new_AISpellsEffects_Struct(), true) {
  }

}

public class AISpellsVar_Struct : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal AISpellsVar_Struct(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AISpellsVar_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(AISpellsVar_Struct obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~AISpellsVar_Struct() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_AISpellsVar_Struct(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public uint fail_recast {
    set {
      questinterfacePINVOKE.AISpellsVar_Struct_fail_recast_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.AISpellsVar_Struct_fail_recast_get(swigCPtr);
      return ret;
    } 
  }

  public uint engaged_no_sp_recast_min {
    set {
      questinterfacePINVOKE.AISpellsVar_Struct_engaged_no_sp_recast_min_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.AISpellsVar_Struct_engaged_no_sp_recast_min_get(swigCPtr);
      return ret;
    } 
  }

  public uint engaged_no_sp_recast_max {
    set {
      questinterfacePINVOKE.AISpellsVar_Struct_engaged_no_sp_recast_max_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.AISpellsVar_Struct_engaged_no_sp_recast_max_get(swigCPtr);
      return ret;
    } 
  }

  public byte engaged_beneficial_self_chance {
    set {
      questinterfacePINVOKE.AISpellsVar_Struct_engaged_beneficial_self_chance_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.AISpellsVar_Struct_engaged_beneficial_self_chance_get(swigCPtr);
      return ret;
    } 
  }

  public byte engaged_beneficial_other_chance {
    set {
      questinterfacePINVOKE.AISpellsVar_Struct_engaged_beneficial_other_chance_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.AISpellsVar_Struct_engaged_beneficial_other_chance_get(swigCPtr);
      return ret;
    } 
  }

  public byte engaged_detrimental_chance {
    set {
      questinterfacePINVOKE.AISpellsVar_Struct_engaged_detrimental_chance_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.AISpellsVar_Struct_engaged_detrimental_chance_get(swigCPtr);
      return ret;
    } 
  }

  public uint pursue_no_sp_recast_min {
    set {
      questinterfacePINVOKE.AISpellsVar_Struct_pursue_no_sp_recast_min_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.AISpellsVar_Struct_pursue_no_sp_recast_min_get(swigCPtr);
      return ret;
    } 
  }

  public uint pursue_no_sp_recast_max {
    set {
      questinterfacePINVOKE.AISpellsVar_Struct_pursue_no_sp_recast_max_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.AISpellsVar_Struct_pursue_no_sp_recast_max_get(swigCPtr);
      return ret;
    } 
  }

  public byte pursue_detrimental_chance {
    set {
      questinterfacePINVOKE.AISpellsVar_Struct_pursue_detrimental_chance_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.AISpellsVar_Struct_pursue_detrimental_chance_get(swigCPtr);
      return ret;
    } 
  }

  public uint idle_no_sp_recast_min {
    set {
      questinterfacePINVOKE.AISpellsVar_Struct_idle_no_sp_recast_min_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.AISpellsVar_Struct_idle_no_sp_recast_min_get(swigCPtr);
      return ret;
    } 
  }

  public uint idle_no_sp_recast_max {
    set {
      questinterfacePINVOKE.AISpellsVar_Struct_idle_no_sp_recast_max_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.AISpellsVar_Struct_idle_no_sp_recast_max_get(swigCPtr);
      return ret;
    } 
  }

  public byte idle_beneficial_chance {
    set {
      questinterfacePINVOKE.AISpellsVar_Struct_idle_beneficial_chance_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.AISpellsVar_Struct_idle_beneficial_chance_get(swigCPtr);
      return ret;
    } 
  }

  public AISpellsVar_Struct() : this(questinterfacePINVOKE.new_AISpellsVar_Struct(), true) {
  }

}

public class Roambox : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Roambox(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Roambox obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Roambox obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Roambox() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_Roambox(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public float max_x {
    set {
      questinterfacePINVOKE.Roambox_max_x_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.Roambox_max_x_get(swigCPtr);
      return ret;
    } 
  }

  public float max_y {
    set {
      questinterfacePINVOKE.Roambox_max_y_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.Roambox_max_y_get(swigCPtr);
      return ret;
    } 
  }

  public float min_x {
    set {
      questinterfacePINVOKE.Roambox_min_x_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.Roambox_min_x_get(swigCPtr);
      return ret;
    } 
  }

  public float min_y {
    set {
      questinterfacePINVOKE.Roambox_min_y_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.Roambox_min_y_get(swigCPtr);
      return ret;
    } 
  }

  public float distance {
    set {
      questinterfacePINVOKE.Roambox_distance_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.Roambox_distance_get(swigCPtr);
      return ret;
    } 
  }

  public float dest_x {
    set {
      questinterfacePINVOKE.Roambox_dest_x_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.Roambox_dest_x_get(swigCPtr);
      return ret;
    } 
  }

  public float dest_y {
    set {
      questinterfacePINVOKE.Roambox_dest_y_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.Roambox_dest_y_get(swigCPtr);
      return ret;
    } 
  }

  public float dest_z {
    set {
      questinterfacePINVOKE.Roambox_dest_z_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.Roambox_dest_z_get(swigCPtr);
      return ret;
    } 
  }

  public uint delay {
    set {
      questinterfacePINVOKE.Roambox_delay_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.Roambox_delay_get(swigCPtr);
      return ret;
    } 
  }

  public uint min_delay {
    set {
      questinterfacePINVOKE.Roambox_min_delay_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.Roambox_min_delay_get(swigCPtr);
      return ret;
    } 
  }

  public Roambox() : this(questinterfacePINVOKE.new_Roambox(), true) {
  }

}

public class NPC : Mob {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal NPC(global::System.IntPtr cPtr, bool cMemoryOwn) : base(questinterfacePINVOKE.NPC_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(NPC obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(NPC obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_NPC(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public static NPC SpawnNPC(string spawncommand, SWIGTYPE_p_glm__vec4 position, Client client) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.NPC_SpawnNPC__SWIG_0(spawncommand, SWIGTYPE_p_glm__vec4.getCPtr(position), Client.getCPtr(client));
    NPC ret = (cPtr == global::System.IntPtr.Zero) ? null : new NPC(cPtr, false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static NPC SpawnNPC(string spawncommand, SWIGTYPE_p_glm__vec4 position) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.NPC_SpawnNPC__SWIG_1(spawncommand, SWIGTYPE_p_glm__vec4.getCPtr(position));
    NPC ret = (cPtr == global::System.IntPtr.Zero) ? null : new NPC(cPtr, false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool SpawnZoneController() {
    bool ret = questinterfacePINVOKE.NPC_SpawnZoneController();
    return ret;
  }

  public bool IsRecordLootStats() {
    bool ret = questinterfacePINVOKE.NPC_IsRecordLootStats(swigCPtr);
    return ret;
  }

  public void SetRecordLootStats(bool record_loot_stats) {
    questinterfacePINVOKE.NPC_SetRecordLootStats(swigCPtr, record_loot_stats);
  }

  public SWIGTYPE_p_std__vectorT_unsigned_int_t GetRolledItems() {
    SWIGTYPE_p_std__vectorT_unsigned_int_t ret = new SWIGTYPE_p_std__vectorT_unsigned_int_t(questinterfacePINVOKE.NPC_GetRolledItems(swigCPtr), false);
    return ret;
  }

  public int GetRolledItemCount(uint item_id) {
    int ret = questinterfacePINVOKE.NPC_GetRolledItemCount(swigCPtr, item_id);
    return ret;
  }

  public NPC(SWIGTYPE_p_NPCType npc_type_data, Spawn2 respawn, SWIGTYPE_p_glm__vec4 position, GravityBehavior iflymode, bool IsCorpse) : this(questinterfacePINVOKE.new_NPC__SWIG_0(SWIGTYPE_p_NPCType.getCPtr(npc_type_data), Spawn2.getCPtr(respawn), SWIGTYPE_p_glm__vec4.getCPtr(position), (int)iflymode, IsCorpse), true) {
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public NPC(SWIGTYPE_p_NPCType npc_type_data, Spawn2 respawn, SWIGTYPE_p_glm__vec4 position, GravityBehavior iflymode) : this(questinterfacePINVOKE.new_NPC__SWIG_1(SWIGTYPE_p_NPCType.getCPtr(npc_type_data), Spawn2.getCPtr(respawn), SWIGTYPE_p_glm__vec4.getCPtr(position), (int)iflymode), true) {
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public static NPC SpawnNodeNPC(SWIGTYPE_p_std__string name, SWIGTYPE_p_std__string last_name, SWIGTYPE_p_glm__vec4 position) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.NPC_SpawnNodeNPC(SWIGTYPE_p_std__string.getCPtr(name), SWIGTYPE_p_std__string.getCPtr(last_name), SWIGTYPE_p_glm__vec4.getCPtr(position));
    NPC ret = (cPtr == global::System.IntPtr.Zero) ? null : new NPC(cPtr, false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void SpawnGridNodeNPC(SWIGTYPE_p_glm__vec4 position, int grid_id, int grid_number, int zoffset) {
    questinterfacePINVOKE.NPC_SpawnGridNodeNPC(SWIGTYPE_p_glm__vec4.getCPtr(position), grid_id, grid_number, zoffset);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public static NPC SpawnZonePointNodeNPC(SWIGTYPE_p_std__string name, SWIGTYPE_p_glm__vec4 position) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.NPC_SpawnZonePointNodeNPC(SWIGTYPE_p_std__string.getCPtr(name), SWIGTYPE_p_glm__vec4.getCPtr(position));
    NPC ret = (cPtr == global::System.IntPtr.Zero) ? null : new NPC(cPtr, false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool Death(Mob killer_mob, long damage, ushort spell_id, SWIGTYPE_p_EQ__skills__SkillType attack_skill, KilledByTypes killed_by) {
    bool ret = questinterfacePINVOKE.NPC_Death__SWIG_0(swigCPtr, Mob.getCPtr(killer_mob), damage, spell_id, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(attack_skill), (int)killed_by);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool Death(Mob killer_mob, long damage, ushort spell_id, SWIGTYPE_p_EQ__skills__SkillType attack_skill) {
    bool ret = questinterfacePINVOKE.NPC_Death__SWIG_1(swigCPtr, Mob.getCPtr(killer_mob), damage, spell_id, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(attack_skill));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void Damage(Mob from, long damage, ushort spell_id, SWIGTYPE_p_EQ__skills__SkillType attack_skill, bool avoidable, sbyte buffslot, bool iBuffTic, eSpecialAttacks special) {
    questinterfacePINVOKE.NPC_Damage__SWIG_0(swigCPtr, Mob.getCPtr(from), damage, spell_id, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(attack_skill), avoidable, buffslot, iBuffTic, (int)special);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Damage(Mob from, long damage, ushort spell_id, SWIGTYPE_p_EQ__skills__SkillType attack_skill, bool avoidable, sbyte buffslot, bool iBuffTic) {
    questinterfacePINVOKE.NPC_Damage__SWIG_1(swigCPtr, Mob.getCPtr(from), damage, spell_id, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(attack_skill), avoidable, buffslot, iBuffTic);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Damage(Mob from, long damage, ushort spell_id, SWIGTYPE_p_EQ__skills__SkillType attack_skill, bool avoidable, sbyte buffslot) {
    questinterfacePINVOKE.NPC_Damage__SWIG_2(swigCPtr, Mob.getCPtr(from), damage, spell_id, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(attack_skill), avoidable, buffslot);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Damage(Mob from, long damage, ushort spell_id, SWIGTYPE_p_EQ__skills__SkillType attack_skill, bool avoidable) {
    questinterfacePINVOKE.NPC_Damage__SWIG_3(swigCPtr, Mob.getCPtr(from), damage, spell_id, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(attack_skill), avoidable);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Damage(Mob from, long damage, ushort spell_id, SWIGTYPE_p_EQ__skills__SkillType attack_skill) {
    questinterfacePINVOKE.NPC_Damage__SWIG_4(swigCPtr, Mob.getCPtr(from), damage, spell_id, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(attack_skill));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool Attack(Mob other, int Hand, bool FromRiposte, bool IsStrikethrough, bool IsFromSpell, ExtraAttackOptions opts) {
    bool ret = questinterfacePINVOKE.NPC_Attack__SWIG_0(swigCPtr, Mob.getCPtr(other), Hand, FromRiposte, IsStrikethrough, IsFromSpell, ExtraAttackOptions.getCPtr(opts));
    return ret;
  }

  public override bool Attack(Mob other, int Hand, bool FromRiposte, bool IsStrikethrough, bool IsFromSpell) {
    bool ret = questinterfacePINVOKE.NPC_Attack__SWIG_1(swigCPtr, Mob.getCPtr(other), Hand, FromRiposte, IsStrikethrough, IsFromSpell);
    return ret;
  }

  public override bool Attack(Mob other, int Hand, bool FromRiposte, bool IsStrikethrough) {
    bool ret = questinterfacePINVOKE.NPC_Attack__SWIG_2(swigCPtr, Mob.getCPtr(other), Hand, FromRiposte, IsStrikethrough);
    return ret;
  }

  public override bool Attack(Mob other, int Hand, bool FromRiposte) {
    bool ret = questinterfacePINVOKE.NPC_Attack__SWIG_3(swigCPtr, Mob.getCPtr(other), Hand, FromRiposte);
    return ret;
  }

  public override bool Attack(Mob other, int Hand) {
    bool ret = questinterfacePINVOKE.NPC_Attack__SWIG_4(swigCPtr, Mob.getCPtr(other), Hand);
    return ret;
  }

  public override bool Attack(Mob other) {
    bool ret = questinterfacePINVOKE.NPC_Attack__SWIG_5(swigCPtr, Mob.getCPtr(other));
    return ret;
  }

  public override bool HasRaid() {
    bool ret = questinterfacePINVOKE.NPC_HasRaid(swigCPtr);
    return ret;
  }

  public override bool HasGroup() {
    bool ret = questinterfacePINVOKE.NPC_HasGroup(swigCPtr);
    return ret;
  }

  public override Raid GetRaid() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.NPC_GetRaid(swigCPtr);
    Raid ret = (cPtr == global::System.IntPtr.Zero) ? null : new Raid(cPtr, false);
    return ret;
  }

  public override Group GetGroup() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.NPC_GetGroup(swigCPtr);
    Group ret = (cPtr == global::System.IntPtr.Zero) ? null : new Group(cPtr, false);
    return ret;
  }

  public override bool IsNPC() {
    bool ret = questinterfacePINVOKE.NPC_IsNPC(swigCPtr);
    return ret;
  }

  public override bool Process() {
    bool ret = questinterfacePINVOKE.NPC_Process(swigCPtr);
    return ret;
  }

  public override void AI_Init() {
    questinterfacePINVOKE.NPC_AI_Init(swigCPtr);
  }

  public override void AI_Start(uint iMoveDelay) {
    questinterfacePINVOKE.NPC_AI_Start__SWIG_0(swigCPtr, iMoveDelay);
  }

  public override void AI_Start() {
    questinterfacePINVOKE.NPC_AI_Start__SWIG_1(swigCPtr);
  }

  public override void AI_Stop() {
    questinterfacePINVOKE.NPC_AI_Stop(swigCPtr);
  }

  public void AI_DoMovement() {
    questinterfacePINVOKE.NPC_AI_DoMovement(swigCPtr);
  }

  public void AI_SetupNextWaypoint() {
    questinterfacePINVOKE.NPC_AI_SetupNextWaypoint(swigCPtr);
  }

  public bool AI_AddNPCSpells(uint iDBSpellsID) {
    bool ret = questinterfacePINVOKE.NPC_AI_AddNPCSpells(swigCPtr, iDBSpellsID);
    return ret;
  }

  public bool AI_AddNPCSpellsEffects(uint iDBSpellsEffectsID) {
    bool ret = questinterfacePINVOKE.NPC_AI_AddNPCSpellsEffects(swigCPtr, iDBSpellsEffectsID);
    return ret;
  }

  public virtual bool AI_EngagedCastCheck() {
    bool ret = questinterfacePINVOKE.NPC_AI_EngagedCastCheck(swigCPtr);
    return ret;
  }

  public bool AI_HasSpells() {
    bool ret = questinterfacePINVOKE.NPC_AI_HasSpells(swigCPtr);
    return ret;
  }

  public bool AI_HasSpellsEffects() {
    bool ret = questinterfacePINVOKE.NPC_AI_HasSpellsEffects(swigCPtr);
    return ret;
  }

  public void ApplyAISpellEffects(StatBonuses newbon) {
    questinterfacePINVOKE.NPC_ApplyAISpellEffects(swigCPtr, StatBonuses.getCPtr(newbon));
  }

  public virtual bool AI_PursueCastCheck() {
    bool ret = questinterfacePINVOKE.NPC_AI_PursueCastCheck(swigCPtr);
    return ret;
  }

  public virtual bool AI_IdleCastCheck() {
    bool ret = questinterfacePINVOKE.NPC_AI_IdleCastCheck(swigCPtr);
    return ret;
  }

  public virtual void AI_Event_SpellCastFinished(bool iCastSucceeded, ushort slot) {
    questinterfacePINVOKE.NPC_AI_Event_SpellCastFinished(swigCPtr, iCastSucceeded, slot);
  }

  public bool AICheckCloseBeneficialSpells(NPC caster, byte chance, float cast_range, uint spell_types) {
    bool ret = questinterfacePINVOKE.NPC_AICheckCloseBeneficialSpells(swigCPtr, NPC.getCPtr(caster), chance, cast_range, spell_types);
    return ret;
  }

  public void AIYellForHelp(Mob sender, Mob attacker) {
    questinterfacePINVOKE.NPC_AIYellForHelp(swigCPtr, Mob.getCPtr(sender), Mob.getCPtr(attacker));
  }

  public void LevelScale() {
    questinterfacePINVOKE.NPC_LevelScale(swigCPtr);
  }

  public override void SetTarget(Mob mob) {
    questinterfacePINVOKE.NPC_SetTarget(swigCPtr, Mob.getCPtr(mob));
  }

  public override ushort GetSkill(SWIGTYPE_p_EQ__skills__SkillType skill_num) {
    ushort ret = questinterfacePINVOKE.NPC_GetSkill(swigCPtr, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skill_num));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void CalcBonuses() {
    questinterfacePINVOKE.NPC_CalcBonuses(swigCPtr);
  }

  public override int GetCurrentBuffSlots() {
    int ret = questinterfacePINVOKE.NPC_GetCurrentBuffSlots(swigCPtr);
    return ret;
  }

  public override int GetCurrentSongSlots() {
    int ret = questinterfacePINVOKE.NPC_GetCurrentSongSlots(swigCPtr);
    return ret;
  }

  public override int GetCurrentDiscSlots() {
    int ret = questinterfacePINVOKE.NPC_GetCurrentDiscSlots(swigCPtr);
    return ret;
  }

  public override int GetMaxBuffSlots() {
    int ret = questinterfacePINVOKE.NPC_GetMaxBuffSlots(swigCPtr);
    return ret;
  }

  public override int GetMaxSongSlots() {
    int ret = questinterfacePINVOKE.NPC_GetMaxSongSlots(swigCPtr);
    return ret;
  }

  public override int GetMaxDiscSlots() {
    int ret = questinterfacePINVOKE.NPC_GetMaxDiscSlots(swigCPtr);
    return ret;
  }

  public override int GetMaxTotalSlots() {
    int ret = questinterfacePINVOKE.NPC_GetMaxTotalSlots(swigCPtr);
    return ret;
  }

  public virtual int GetPetMaxTotalSlots() {
    int ret = questinterfacePINVOKE.NPC_GetPetMaxTotalSlots(swigCPtr);
    return ret;
  }

  public override void InitializeBuffSlots() {
    questinterfacePINVOKE.NPC_InitializeBuffSlots(swigCPtr);
  }

  public override void UninitializeBuffSlots() {
    questinterfacePINVOKE.NPC_UninitializeBuffSlots(swigCPtr);
  }

  public override void SetAttackTimer() {
    questinterfacePINVOKE.NPC_SetAttackTimer(swigCPtr);
  }

  public override void RangedAttack(Mob other) {
    questinterfacePINVOKE.NPC_RangedAttack(swigCPtr, Mob.getCPtr(other));
  }

  public override void ThrowingAttack(Mob other) {
    questinterfacePINVOKE.NPC_ThrowingAttack(swigCPtr, Mob.getCPtr(other));
  }

  public int GetNumberOfAttacks() {
    int ret = questinterfacePINVOKE.NPC_GetNumberOfAttacks(swigCPtr);
    return ret;
  }

  public void DoRangedAttackDmg(Mob other, bool Launch, short damage_mod, short chance_mod, SWIGTYPE_p_EQ__skills__SkillType skill, float speed, string IDFile) {
    questinterfacePINVOKE.NPC_DoRangedAttackDmg__SWIG_0(swigCPtr, Mob.getCPtr(other), Launch, damage_mod, chance_mod, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skill), speed, IDFile);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void DoRangedAttackDmg(Mob other, bool Launch, short damage_mod, short chance_mod, SWIGTYPE_p_EQ__skills__SkillType skill, float speed) {
    questinterfacePINVOKE.NPC_DoRangedAttackDmg__SWIG_1(swigCPtr, Mob.getCPtr(other), Launch, damage_mod, chance_mod, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skill), speed);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void DoRangedAttackDmg(Mob other, bool Launch, short damage_mod, short chance_mod, SWIGTYPE_p_EQ__skills__SkillType skill) {
    questinterfacePINVOKE.NPC_DoRangedAttackDmg__SWIG_2(swigCPtr, Mob.getCPtr(other), Launch, damage_mod, chance_mod, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skill));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void DoRangedAttackDmg(Mob other, bool Launch, short damage_mod, short chance_mod) {
    questinterfacePINVOKE.NPC_DoRangedAttackDmg__SWIG_3(swigCPtr, Mob.getCPtr(other), Launch, damage_mod, chance_mod);
  }

  public void DoRangedAttackDmg(Mob other, bool Launch, short damage_mod) {
    questinterfacePINVOKE.NPC_DoRangedAttackDmg__SWIG_4(swigCPtr, Mob.getCPtr(other), Launch, damage_mod);
  }

  public void DoRangedAttackDmg(Mob other, bool Launch) {
    questinterfacePINVOKE.NPC_DoRangedAttackDmg__SWIG_5(swigCPtr, Mob.getCPtr(other), Launch);
  }

  public void DoRangedAttackDmg(Mob other) {
    questinterfacePINVOKE.NPC_DoRangedAttackDmg__SWIG_6(swigCPtr, Mob.getCPtr(other));
  }

  public bool IsFactionListAlly(uint other_faction) {
    bool ret = questinterfacePINVOKE.NPC_IsFactionListAlly(swigCPtr, other_faction);
    return ret;
  }

  public bool IsGuard() {
    bool ret = questinterfacePINVOKE.NPC_IsGuard(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_FACTION_VALUE CheckNPCFactionAlly(int other_faction) {
    SWIGTYPE_p_FACTION_VALUE ret = new SWIGTYPE_p_FACTION_VALUE(questinterfacePINVOKE.NPC_CheckNPCFactionAlly(swigCPtr, other_faction), true);
    return ret;
  }

  public override SWIGTYPE_p_FACTION_VALUE GetReverseFactionCon(Mob iOther) {
    SWIGTYPE_p_FACTION_VALUE ret = new SWIGTYPE_p_FACTION_VALUE(questinterfacePINVOKE.NPC_GetReverseFactionCon(swigCPtr, Mob.getCPtr(iOther)), true);
    return ret;
  }

  public override void GoToBind(byte bind_number) {
    questinterfacePINVOKE.NPC_GoToBind__SWIG_0(swigCPtr, bind_number);
  }

  public override void GoToBind() {
    questinterfacePINVOKE.NPC_GoToBind__SWIG_1(swigCPtr);
  }

  public override void Gate(byte bind_number) {
    questinterfacePINVOKE.NPC_Gate__SWIG_0(swigCPtr, bind_number);
  }

  public override void Gate() {
    questinterfacePINVOKE.NPC_Gate__SWIG_1(swigCPtr);
  }

  public void GetPetState(SWIGTYPE_p_SpellBuff_Struct buffs, SWIGTYPE_p_unsigned_int items, string name) {
    questinterfacePINVOKE.NPC_GetPetState(swigCPtr, SWIGTYPE_p_SpellBuff_Struct.getCPtr(buffs), SWIGTYPE_p_unsigned_int.getCPtr(items), name);
  }

  public void SetPetState(SWIGTYPE_p_SpellBuff_Struct buffs, SWIGTYPE_p_unsigned_int items) {
    questinterfacePINVOKE.NPC_SetPetState(swigCPtr, SWIGTYPE_p_SpellBuff_Struct.getCPtr(buffs), SWIGTYPE_p_unsigned_int.getCPtr(items));
  }

  public override void SpellProcess() {
    questinterfacePINVOKE.NPC_SpellProcess(swigCPtr);
  }

  public override void FillSpawnStruct(SWIGTYPE_p_NewSpawn_Struct ns, Mob ForWho) {
    questinterfacePINVOKE.NPC_FillSpawnStruct(swigCPtr, SWIGTYPE_p_NewSpawn_Struct.getCPtr(ns), Mob.getCPtr(ForWho));
  }

  public void AddItem(SWIGTYPE_p_EQ__ItemData item, ushort charges, bool equip_item) {
    questinterfacePINVOKE.NPC_AddItem__SWIG_0(swigCPtr, SWIGTYPE_p_EQ__ItemData.getCPtr(item), charges, equip_item);
  }

  public void AddItem(SWIGTYPE_p_EQ__ItemData item, ushort charges) {
    questinterfacePINVOKE.NPC_AddItem__SWIG_1(swigCPtr, SWIGTYPE_p_EQ__ItemData.getCPtr(item), charges);
  }

  public void AddItem(uint item_id, ushort charges, bool equip_item, uint augment_one, uint augment_two, uint augment_three, uint augment_four, uint augment_five, uint augment_six) {
    questinterfacePINVOKE.NPC_AddItem__SWIG_2(swigCPtr, item_id, charges, equip_item, augment_one, augment_two, augment_three, augment_four, augment_five, augment_six);
  }

  public void AddItem(uint item_id, ushort charges, bool equip_item, uint augment_one, uint augment_two, uint augment_three, uint augment_four, uint augment_five) {
    questinterfacePINVOKE.NPC_AddItem__SWIG_3(swigCPtr, item_id, charges, equip_item, augment_one, augment_two, augment_three, augment_four, augment_five);
  }

  public void AddItem(uint item_id, ushort charges, bool equip_item, uint augment_one, uint augment_two, uint augment_three, uint augment_four) {
    questinterfacePINVOKE.NPC_AddItem__SWIG_4(swigCPtr, item_id, charges, equip_item, augment_one, augment_two, augment_three, augment_four);
  }

  public void AddItem(uint item_id, ushort charges, bool equip_item, uint augment_one, uint augment_two, uint augment_three) {
    questinterfacePINVOKE.NPC_AddItem__SWIG_5(swigCPtr, item_id, charges, equip_item, augment_one, augment_two, augment_three);
  }

  public void AddItem(uint item_id, ushort charges, bool equip_item, uint augment_one, uint augment_two) {
    questinterfacePINVOKE.NPC_AddItem__SWIG_6(swigCPtr, item_id, charges, equip_item, augment_one, augment_two);
  }

  public void AddItem(uint item_id, ushort charges, bool equip_item, uint augment_one) {
    questinterfacePINVOKE.NPC_AddItem__SWIG_7(swigCPtr, item_id, charges, equip_item, augment_one);
  }

  public void AddItem(uint item_id, ushort charges, bool equip_item) {
    questinterfacePINVOKE.NPC_AddItem__SWIG_8(swigCPtr, item_id, charges, equip_item);
  }

  public void AddItem(uint item_id, ushort charges) {
    questinterfacePINVOKE.NPC_AddItem__SWIG_9(swigCPtr, item_id, charges);
  }

  public void AddLootTable() {
    questinterfacePINVOKE.NPC_AddLootTable__SWIG_0(swigCPtr);
  }

  public void AddLootTable(uint loottable_id, bool is_global) {
    questinterfacePINVOKE.NPC_AddLootTable__SWIG_1(swigCPtr, loottable_id, is_global);
  }

  public void AddLootTable(uint loottable_id) {
    questinterfacePINVOKE.NPC_AddLootTable__SWIG_2(swigCPtr, loottable_id);
  }

  public void AddLootDropTable(uint lootdrop_id, byte drop_limit, byte min_drop) {
    questinterfacePINVOKE.NPC_AddLootDropTable(swigCPtr, lootdrop_id, drop_limit, min_drop);
  }

  public void CheckGlobalLootTables() {
    questinterfacePINVOKE.NPC_CheckGlobalLootTables(swigCPtr);
  }

  public void RemoveItem(uint item_id, ushort quantity, ushort slot) {
    questinterfacePINVOKE.NPC_RemoveItem__SWIG_0(swigCPtr, item_id, quantity, slot);
  }

  public void RemoveItem(uint item_id, ushort quantity) {
    questinterfacePINVOKE.NPC_RemoveItem__SWIG_1(swigCPtr, item_id, quantity);
  }

  public void RemoveItem(uint item_id) {
    questinterfacePINVOKE.NPC_RemoveItem__SWIG_2(swigCPtr, item_id);
  }

  public void CheckTrivialMinMaxLevelDrop(Mob killer) {
    questinterfacePINVOKE.NPC_CheckTrivialMinMaxLevelDrop(swigCPtr, Mob.getCPtr(killer));
  }

  public void ClearLootItems() {
    questinterfacePINVOKE.NPC_ClearLootItems(swigCPtr);
  }

  public SWIGTYPE_p_LootItems GetLootItems() {
    SWIGTYPE_p_LootItems ret = new SWIGTYPE_p_LootItems(questinterfacePINVOKE.NPC_GetLootItems(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_LootItem GetItem(int slot_id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.NPC_GetItem(swigCPtr, slot_id);
    SWIGTYPE_p_LootItem ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_LootItem(cPtr, false);
    return ret;
  }

  public void AddLootCash(uint in_copper, uint in_silver, uint in_gold, uint in_platinum) {
    questinterfacePINVOKE.NPC_AddLootCash(swigCPtr, in_copper, in_silver, in_gold, in_platinum);
  }

  public void RemoveLootCash() {
    questinterfacePINVOKE.NPC_RemoveLootCash(swigCPtr);
  }

  public void QueryLoot(Client to, bool is_pet_query) {
    questinterfacePINVOKE.NPC_QueryLoot__SWIG_0(swigCPtr, Client.getCPtr(to), is_pet_query);
  }

  public void QueryLoot(Client to) {
    questinterfacePINVOKE.NPC_QueryLoot__SWIG_1(swigCPtr, Client.getCPtr(to));
  }

  public bool HasItem(uint item_id) {
    bool ret = questinterfacePINVOKE.NPC_HasItem(swigCPtr, item_id);
    return ret;
  }

  public ushort CountItem(uint item_id) {
    ushort ret = questinterfacePINVOKE.NPC_CountItem(swigCPtr, item_id);
    return ret;
  }

  public uint GetLootItemIDBySlot(ushort loot_slot) {
    uint ret = questinterfacePINVOKE.NPC_GetLootItemIDBySlot(swigCPtr, loot_slot);
    return ret;
  }

  public ushort GetFirstLootSlotByItemID(uint item_id) {
    ushort ret = questinterfacePINVOKE.NPC_GetFirstLootSlotByItemID(swigCPtr, item_id);
    return ret;
  }

  public IntVector GetLootList() {
    IntVector ret = new IntVector(questinterfacePINVOKE.NPC_GetLootList(swigCPtr), true);
    return ret;
  }

  public uint CountLoot() {
    uint ret = questinterfacePINVOKE.NPC_CountLoot(swigCPtr);
    return ret;
  }

  public uint GetLoottableID() {
    uint ret = questinterfacePINVOKE.NPC_GetLoottableID(swigCPtr);
    return ret;
  }

  public bool DropsGlobalLoot() {
    bool ret = questinterfacePINVOKE.NPC_DropsGlobalLoot(swigCPtr);
    return ret;
  }

  public uint GetCopper() {
    uint ret = questinterfacePINVOKE.NPC_GetCopper(swigCPtr);
    return ret;
  }

  public uint GetSilver() {
    uint ret = questinterfacePINVOKE.NPC_GetSilver(swigCPtr);
    return ret;
  }

  public uint GetGold() {
    uint ret = questinterfacePINVOKE.NPC_GetGold(swigCPtr);
    return ret;
  }

  public uint GetPlatinum() {
    uint ret = questinterfacePINVOKE.NPC_GetPlatinum(swigCPtr);
    return ret;
  }

  public void SetCopper(uint amt) {
    questinterfacePINVOKE.NPC_SetCopper(swigCPtr, amt);
  }

  public void SetSilver(uint amt) {
    questinterfacePINVOKE.NPC_SetSilver(swigCPtr, amt);
  }

  public void SetGold(uint amt) {
    questinterfacePINVOKE.NPC_SetGold(swigCPtr, amt);
  }

  public void SetPlatinum(uint amt) {
    questinterfacePINVOKE.NPC_SetPlatinum(swigCPtr, amt);
  }

  public void DescribeAggro(Client to_who, Mob mob, bool verbose) {
    questinterfacePINVOKE.NPC_DescribeAggro(swigCPtr, Client.getCPtr(to_who), Mob.getCPtr(mob), verbose);
  }

  public override void UpdateEquipmentLight() {
    questinterfacePINVOKE.NPC_UpdateEquipmentLight(swigCPtr);
  }

  public override long CalcMaxMana() {
    long ret = questinterfacePINVOKE.NPC_CalcMaxMana(swigCPtr);
    return ret;
  }

  public void SetGrid(int grid_) {
    questinterfacePINVOKE.NPC_SetGrid(swigCPtr, grid_);
  }

  public void SetSpawnGroupId(uint sg2) {
    questinterfacePINVOKE.NPC_SetSpawnGroupId(swigCPtr, sg2);
  }

  public void SetWaypointMax(ushort wp_) {
    questinterfacePINVOKE.NPC_SetWaypointMax(swigCPtr, wp_);
  }

  public void SetSaveWaypoint(ushort wp_) {
    questinterfacePINVOKE.NPC_SetSaveWaypoint(swigCPtr, wp_);
  }

  public ushort GetWaypointMax() {
    ushort ret = questinterfacePINVOKE.NPC_GetWaypointMax(swigCPtr);
    return ret;
  }

  public int GetGrid() {
    int ret = questinterfacePINVOKE.NPC_GetGrid(swigCPtr);
    return ret;
  }

  public uint GetSpawnGroupId() {
    uint ret = questinterfacePINVOKE.NPC_GetSpawnGroupId(swigCPtr);
    return ret;
  }

  public uint GetSpawnPointID() {
    uint ret = questinterfacePINVOKE.NPC_GetSpawnPointID(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_glm__vec4 GetSpawnPoint() {
    SWIGTYPE_p_glm__vec4 ret = new SWIGTYPE_p_glm__vec4(questinterfacePINVOKE.NPC_GetSpawnPoint(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_glm__vec4 GetGuardPoint() {
    SWIGTYPE_p_glm__vec4 ret = new SWIGTYPE_p_glm__vec4(questinterfacePINVOKE.NPC_GetGuardPoint(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_EmuAppearance GetGuardPointAnim() {
    SWIGTYPE_p_EmuAppearance ret = new SWIGTYPE_p_EmuAppearance(questinterfacePINVOKE.NPC_GetGuardPointAnim(swigCPtr), true);
    return ret;
  }

  public void SaveGuardPointAnim(SWIGTYPE_p_EmuAppearance anim) {
    questinterfacePINVOKE.NPC_SaveGuardPointAnim(swigCPtr, SWIGTYPE_p_EmuAppearance.getCPtr(anim));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public byte GetPrimSkill() {
    byte ret = questinterfacePINVOKE.NPC_GetPrimSkill(swigCPtr);
    return ret;
  }

  public byte GetSecSkill() {
    byte ret = questinterfacePINVOKE.NPC_GetSecSkill(swigCPtr);
    return ret;
  }

  public byte GetRangedSkill() {
    byte ret = questinterfacePINVOKE.NPC_GetRangedSkill(swigCPtr);
    return ret;
  }

  public void SetPrimSkill(byte skill_type) {
    questinterfacePINVOKE.NPC_SetPrimSkill(swigCPtr, skill_type);
  }

  public void SetSecSkill(byte skill_type) {
    questinterfacePINVOKE.NPC_SetSecSkill(swigCPtr, skill_type);
  }

  public void SetRangedSkill(byte skill_type) {
    questinterfacePINVOKE.NPC_SetRangedSkill(swigCPtr, skill_type);
  }

  public uint MerchantType {
    set {
      questinterfacePINVOKE.NPC_MerchantType_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.NPC_MerchantType_get(swigCPtr);
      return ret;
    } 
  }

  public bool merchant_open {
    set {
      questinterfacePINVOKE.NPC_merchant_open_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.NPC_merchant_open_get(swigCPtr);
      return ret;
    } 
  }

  public void MerchantOpenShop() {
    questinterfacePINVOKE.NPC_MerchantOpenShop(swigCPtr);
  }

  public void MerchantCloseShop() {
    questinterfacePINVOKE.NPC_MerchantCloseShop(swigCPtr);
  }

  public bool IsMerchantOpen() {
    bool ret = questinterfacePINVOKE.NPC_IsMerchantOpen(swigCPtr);
    return ret;
  }

  public override void Depop(bool start_spawn_timer) {
    questinterfacePINVOKE.NPC_Depop__SWIG_0(swigCPtr, start_spawn_timer);
  }

  public override void Depop() {
    questinterfacePINVOKE.NPC_Depop__SWIG_1(swigCPtr);
  }

  public override void Stun(int duration) {
    questinterfacePINVOKE.NPC_Stun(swigCPtr, duration);
  }

  public override void UnStun() {
    questinterfacePINVOKE.NPC_UnStun(swigCPtr);
  }

  public uint GetSwarmOwner() {
    uint ret = questinterfacePINVOKE.NPC_GetSwarmOwner(swigCPtr);
    return ret;
  }

  public uint GetSwarmTarget() {
    uint ret = questinterfacePINVOKE.NPC_GetSwarmTarget(swigCPtr);
    return ret;
  }

  public void SetSwarmTarget(int target_id) {
    questinterfacePINVOKE.NPC_SetSwarmTarget__SWIG_0(swigCPtr, target_id);
  }

  public void SetSwarmTarget() {
    questinterfacePINVOKE.NPC_SetSwarmTarget__SWIG_1(swigCPtr);
  }

  public void DepopSwarmPets() {
    questinterfacePINVOKE.NPC_DepopSwarmPets(swigCPtr);
  }

  public void TryDepopTargetLockedPets(Mob current_target) {
    questinterfacePINVOKE.NPC_TryDepopTargetLockedPets(swigCPtr, Mob.getCPtr(current_target));
  }

  public void PetOnSpawn(SWIGTYPE_p_NewSpawn_Struct ns) {
    questinterfacePINVOKE.NPC_PetOnSpawn(swigCPtr, SWIGTYPE_p_NewSpawn_Struct.getCPtr(ns));
  }

  public void SignalNPC(int _signal_id) {
    questinterfacePINVOKE.NPC_SignalNPC(swigCPtr, _signal_id);
  }

  public void SendPayload(int payload_id, SWIGTYPE_p_std__string payload_value) {
    questinterfacePINVOKE.NPC_SendPayload__SWIG_0(swigCPtr, payload_id, SWIGTYPE_p_std__string.getCPtr(payload_value));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SendPayload(int payload_id) {
    questinterfacePINVOKE.NPC_SendPayload__SWIG_1(swigCPtr, payload_id);
  }

  public int GetNPCFactionID() {
    int ret = questinterfacePINVOKE.NPC_GetNPCFactionID(swigCPtr);
    return ret;
  }

  public override int GetPrimaryFaction() {
    int ret = questinterfacePINVOKE.NPC_GetPrimaryFaction(swigCPtr);
    return ret;
  }

  public int GetFactionAmount() {
    int ret = questinterfacePINVOKE.NPC_GetFactionAmount(swigCPtr);
    return ret;
  }

  public long GetNPCHate(Mob in_ent) {
    long ret = questinterfacePINVOKE.NPC_GetNPCHate(swigCPtr, Mob.getCPtr(in_ent));
    return ret;
  }

  public bool IsOnHatelist(Mob p) {
    bool ret = questinterfacePINVOKE.NPC_IsOnHatelist(swigCPtr, Mob.getCPtr(p));
    return ret;
  }

  public void SetNPCFactionID(int in_) {
    questinterfacePINVOKE.NPC_SetNPCFactionID(swigCPtr, in_);
  }

  public SWIGTYPE_p_glm__vec4 m_SpawnPoint {
    set {
      questinterfacePINVOKE.NPC_m_SpawnPoint_set(swigCPtr, SWIGTYPE_p_glm__vec4.getCPtr(value));
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_glm__vec4 ret = new SWIGTYPE_p_glm__vec4(questinterfacePINVOKE.NPC_m_SpawnPoint_get(swigCPtr), true);
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public uint GetMaxDMG() {
    uint ret = questinterfacePINVOKE.NPC_GetMaxDMG(swigCPtr);
    return ret;
  }

  public uint GetMinDMG() {
    uint ret = questinterfacePINVOKE.NPC_GetMinDMG(swigCPtr);
    return ret;
  }

  public int GetBaseDamage() {
    int ret = questinterfacePINVOKE.NPC_GetBaseDamage(swigCPtr);
    return ret;
  }

  public int GetMinDamage() {
    int ret = questinterfacePINVOKE.NPC_GetMinDamage(swigCPtr);
    return ret;
  }

  public new float GetSlowMitigation() {
    float ret = questinterfacePINVOKE.NPC_GetSlowMitigation(swigCPtr);
    return ret;
  }

  public float GetAttackSpeed() {
    float ret = questinterfacePINVOKE.NPC_GetAttackSpeed(swigCPtr);
    return ret;
  }

  public int GetAttackDelay() {
    int ret = questinterfacePINVOKE.NPC_GetAttackDelay(swigCPtr);
    return ret;
  }

  public bool IsAnimal() {
    bool ret = questinterfacePINVOKE.NPC_IsAnimal(swigCPtr);
    return ret;
  }

  public ushort GetPetSpellID() {
    ushort ret = questinterfacePINVOKE.NPC_GetPetSpellID(swigCPtr);
    return ret;
  }

  public void SetPetSpellID(ushort amt) {
    questinterfacePINVOKE.NPC_SetPetSpellID(swigCPtr, amt);
  }

  public uint GetMaxDamage(byte tlevel) {
    uint ret = questinterfacePINVOKE.NPC_GetMaxDamage(swigCPtr, tlevel);
    return ret;
  }

  public void SetTaunting(bool is_taunting) {
    questinterfacePINVOKE.NPC_SetTaunting(swigCPtr, is_taunting);
  }

  public bool IsTaunting() {
    bool ret = questinterfacePINVOKE.NPC_IsTaunting(swigCPtr);
    return ret;
  }

  public void PickPocket(Client thief) {
    questinterfacePINVOKE.NPC_PickPocket(swigCPtr, Client.getCPtr(thief));
  }

  public void Disarm(Client client, int chance) {
    questinterfacePINVOKE.NPC_Disarm(swigCPtr, Client.getCPtr(client), chance);
  }

  public void StartSwarmTimer(uint duration) {
    questinterfacePINVOKE.NPC_StartSwarmTimer(swigCPtr, duration);
  }

  public void DisableSwarmTimer() {
    questinterfacePINVOKE.NPC_DisableSwarmTimer(swigCPtr);
  }

  public void AddLootDrop(SWIGTYPE_p_EQ__ItemData item2, SWIGTYPE_p_LootdropEntriesRepository__LootdropEntries loot_drop, bool wear_change, uint augment_one, uint augment_two, uint augment_three, uint augment_four, uint augment_five, uint augment_six) {
    questinterfacePINVOKE.NPC_AddLootDrop__SWIG_0(swigCPtr, SWIGTYPE_p_EQ__ItemData.getCPtr(item2), SWIGTYPE_p_LootdropEntriesRepository__LootdropEntries.getCPtr(loot_drop), wear_change, augment_one, augment_two, augment_three, augment_four, augment_five, augment_six);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddLootDrop(SWIGTYPE_p_EQ__ItemData item2, SWIGTYPE_p_LootdropEntriesRepository__LootdropEntries loot_drop, bool wear_change, uint augment_one, uint augment_two, uint augment_three, uint augment_four, uint augment_five) {
    questinterfacePINVOKE.NPC_AddLootDrop__SWIG_1(swigCPtr, SWIGTYPE_p_EQ__ItemData.getCPtr(item2), SWIGTYPE_p_LootdropEntriesRepository__LootdropEntries.getCPtr(loot_drop), wear_change, augment_one, augment_two, augment_three, augment_four, augment_five);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddLootDrop(SWIGTYPE_p_EQ__ItemData item2, SWIGTYPE_p_LootdropEntriesRepository__LootdropEntries loot_drop, bool wear_change, uint augment_one, uint augment_two, uint augment_three, uint augment_four) {
    questinterfacePINVOKE.NPC_AddLootDrop__SWIG_2(swigCPtr, SWIGTYPE_p_EQ__ItemData.getCPtr(item2), SWIGTYPE_p_LootdropEntriesRepository__LootdropEntries.getCPtr(loot_drop), wear_change, augment_one, augment_two, augment_three, augment_four);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddLootDrop(SWIGTYPE_p_EQ__ItemData item2, SWIGTYPE_p_LootdropEntriesRepository__LootdropEntries loot_drop, bool wear_change, uint augment_one, uint augment_two, uint augment_three) {
    questinterfacePINVOKE.NPC_AddLootDrop__SWIG_3(swigCPtr, SWIGTYPE_p_EQ__ItemData.getCPtr(item2), SWIGTYPE_p_LootdropEntriesRepository__LootdropEntries.getCPtr(loot_drop), wear_change, augment_one, augment_two, augment_three);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddLootDrop(SWIGTYPE_p_EQ__ItemData item2, SWIGTYPE_p_LootdropEntriesRepository__LootdropEntries loot_drop, bool wear_change, uint augment_one, uint augment_two) {
    questinterfacePINVOKE.NPC_AddLootDrop__SWIG_4(swigCPtr, SWIGTYPE_p_EQ__ItemData.getCPtr(item2), SWIGTYPE_p_LootdropEntriesRepository__LootdropEntries.getCPtr(loot_drop), wear_change, augment_one, augment_two);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddLootDrop(SWIGTYPE_p_EQ__ItemData item2, SWIGTYPE_p_LootdropEntriesRepository__LootdropEntries loot_drop, bool wear_change, uint augment_one) {
    questinterfacePINVOKE.NPC_AddLootDrop__SWIG_5(swigCPtr, SWIGTYPE_p_EQ__ItemData.getCPtr(item2), SWIGTYPE_p_LootdropEntriesRepository__LootdropEntries.getCPtr(loot_drop), wear_change, augment_one);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddLootDrop(SWIGTYPE_p_EQ__ItemData item2, SWIGTYPE_p_LootdropEntriesRepository__LootdropEntries loot_drop, bool wear_change) {
    questinterfacePINVOKE.NPC_AddLootDrop__SWIG_6(swigCPtr, SWIGTYPE_p_EQ__ItemData.getCPtr(item2), SWIGTYPE_p_LootdropEntriesRepository__LootdropEntries.getCPtr(loot_drop), wear_change);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddLootDrop(SWIGTYPE_p_EQ__ItemData item2, SWIGTYPE_p_LootdropEntriesRepository__LootdropEntries loot_drop) {
    questinterfacePINVOKE.NPC_AddLootDrop__SWIG_7(swigCPtr, SWIGTYPE_p_EQ__ItemData.getCPtr(item2), SWIGTYPE_p_LootdropEntriesRepository__LootdropEntries.getCPtr(loot_drop));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool MeetsLootDropLevelRequirements(SWIGTYPE_p_LootdropEntriesRepository__LootdropEntries loot_drop, bool verbose) {
    bool ret = questinterfacePINVOKE.NPC_MeetsLootDropLevelRequirements__SWIG_0(swigCPtr, SWIGTYPE_p_LootdropEntriesRepository__LootdropEntries.getCPtr(loot_drop), verbose);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool MeetsLootDropLevelRequirements(SWIGTYPE_p_LootdropEntriesRepository__LootdropEntries loot_drop) {
    bool ret = questinterfacePINVOKE.NPC_MeetsLootDropLevelRequirements__SWIG_1(swigCPtr, SWIGTYPE_p_LootdropEntriesRepository__LootdropEntries.getCPtr(loot_drop));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void CheckSignal() {
    questinterfacePINVOKE.NPC_CheckSignal(swigCPtr);
  }

  public virtual void DoClassAttacks(Mob target) {
    questinterfacePINVOKE.NPC_DoClassAttacks(swigCPtr, Mob.getCPtr(target));
  }

  public bool IsNotTargetableWithHotkey() {
    bool ret = questinterfacePINVOKE.NPC_IsNotTargetableWithHotkey(swigCPtr);
    return ret;
  }

  public long GetNPCHPRegen() {
    long ret = questinterfacePINVOKE.NPC_GetNPCHPRegen(swigCPtr);
    return ret;
  }

  public string GetAmmoIDfile() {
    string ret = questinterfacePINVOKE.NPC_GetAmmoIDfile(swigCPtr);
    return ret;
  }

  public void ModifyStatsOnCharm(bool is_charm_removed) {
    questinterfacePINVOKE.NPC_ModifyStatsOnCharm(swigCPtr, is_charm_removed);
  }

  public int GetMaxWp() {
    int ret = questinterfacePINVOKE.NPC_GetMaxWp(swigCPtr);
    return ret;
  }

  public void DisplayWaypointInfo(Client client) {
    questinterfacePINVOKE.NPC_DisplayWaypointInfo(swigCPtr, Client.getCPtr(client));
  }

  public void CalculateNewWaypoint() {
    questinterfacePINVOKE.NPC_CalculateNewWaypoint(swigCPtr);
  }

  public void AssignWaypoints(int grid_id, int start_wp) {
    questinterfacePINVOKE.NPC_AssignWaypoints__SWIG_0(swigCPtr, grid_id, start_wp);
  }

  public void AssignWaypoints(int grid_id) {
    questinterfacePINVOKE.NPC_AssignWaypoints__SWIG_1(swigCPtr, grid_id);
  }

  public void SetWaypointPause() {
    questinterfacePINVOKE.NPC_SetWaypointPause(swigCPtr);
  }

  public void UpdateWaypoint(int wp_index) {
    questinterfacePINVOKE.NPC_UpdateWaypoint(swigCPtr, wp_index);
  }

  public void StopWandering() {
    questinterfacePINVOKE.NPC_StopWandering(swigCPtr);
  }

  public void ResumeWandering() {
    questinterfacePINVOKE.NPC_ResumeWandering(swigCPtr);
  }

  public void PauseWandering(int pausetime) {
    questinterfacePINVOKE.NPC_PauseWandering(swigCPtr, pausetime);
  }

  public void MoveTo(SWIGTYPE_p_glm__vec4 position, bool saveguardspot) {
    questinterfacePINVOKE.NPC_MoveTo(swigCPtr, SWIGTYPE_p_glm__vec4.getCPtr(position), saveguardspot);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetClosestWaypoints(SWIGTYPE_p_std__listT_wplist_t wp_list, int count, SWIGTYPE_p_glm__vec3 location) {
    questinterfacePINVOKE.NPC_GetClosestWaypoints(swigCPtr, SWIGTYPE_p_std__listT_wplist_t.getCPtr(wp_list), count, SWIGTYPE_p_glm__vec3.getCPtr(location));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetClosestWaypoint(SWIGTYPE_p_glm__vec3 location) {
    int ret = questinterfacePINVOKE.NPC_GetClosestWaypoint(swigCPtr, SWIGTYPE_p_glm__vec3.getCPtr(location));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override uint GetEquippedItemFromTextureSlot(byte material_slot) {
    uint ret = questinterfacePINVOKE.NPC_GetEquippedItemFromTextureSlot(swigCPtr, material_slot);
    return ret;
  }

  public override uint GetEquipmentMaterial(byte material_slot) {
    uint ret = questinterfacePINVOKE.NPC_GetEquipmentMaterial(swigCPtr, material_slot);
    return ret;
  }

  public void NextGuardPosition() {
    questinterfacePINVOKE.NPC_NextGuardPosition(swigCPtr);
  }

  public void SaveGuardSpot(bool ClearGuardSpot) {
    questinterfacePINVOKE.NPC_SaveGuardSpot__SWIG_0(swigCPtr, ClearGuardSpot);
  }

  public void SaveGuardSpot() {
    questinterfacePINVOKE.NPC_SaveGuardSpot__SWIG_1(swigCPtr);
  }

  public void SaveGuardSpot(SWIGTYPE_p_glm__vec4 pos) {
    questinterfacePINVOKE.NPC_SaveGuardSpot__SWIG_2(swigCPtr, SWIGTYPE_p_glm__vec4.getCPtr(pos));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsGuarding() {
    bool ret = questinterfacePINVOKE.NPC_IsGuarding(swigCPtr);
    return ret;
  }

  public void SaveGuardSpotCharm() {
    questinterfacePINVOKE.NPC_SaveGuardSpotCharm(swigCPtr);
  }

  public void DescribeSpecialAbilities(Client c) {
    questinterfacePINVOKE.NPC_DescribeSpecialAbilities(swigCPtr, Client.getCPtr(c));
  }

  public ushort GetMeleeTexture1() {
    ushort ret = questinterfacePINVOKE.NPC_GetMeleeTexture1(swigCPtr);
    return ret;
  }

  public ushort GetMeleeTexture2() {
    ushort ret = questinterfacePINVOKE.NPC_GetMeleeTexture2(swigCPtr);
    return ret;
  }

  public void RestoreGuardSpotCharm() {
    questinterfacePINVOKE.NPC_RestoreGuardSpotCharm(swigCPtr);
  }

  public void AI_SetRoambox(float max_distance, float roam_distance_variance, uint delay, uint min_delay) {
    questinterfacePINVOKE.NPC_AI_SetRoambox__SWIG_0(swigCPtr, max_distance, roam_distance_variance, delay, min_delay);
  }

  public void AI_SetRoambox(float max_distance, float roam_distance_variance, uint delay) {
    questinterfacePINVOKE.NPC_AI_SetRoambox__SWIG_1(swigCPtr, max_distance, roam_distance_variance, delay);
  }

  public void AI_SetRoambox(float max_distance, float roam_distance_variance) {
    questinterfacePINVOKE.NPC_AI_SetRoambox__SWIG_2(swigCPtr, max_distance, roam_distance_variance);
  }

  public void AI_SetRoambox(float distance, float max_x, float min_x, float max_y, float min_y, uint delay, uint min_delay) {
    questinterfacePINVOKE.NPC_AI_SetRoambox__SWIG_3(swigCPtr, distance, max_x, min_x, max_y, min_y, delay, min_delay);
  }

  public void AI_SetRoambox(float distance, float max_x, float min_x, float max_y, float min_y, uint delay) {
    questinterfacePINVOKE.NPC_AI_SetRoambox__SWIG_4(swigCPtr, distance, max_x, min_x, max_y, min_y, delay);
  }

  public void AI_SetRoambox(float distance, float max_x, float min_x, float max_y, float min_y) {
    questinterfacePINVOKE.NPC_AI_SetRoambox__SWIG_5(swigCPtr, distance, max_x, min_x, max_y, min_y);
  }

  public void LoadMercenaryTypes() {
    questinterfacePINVOKE.NPC_LoadMercenaryTypes(swigCPtr);
  }

  public void LoadMercenaries() {
    questinterfacePINVOKE.NPC_LoadMercenaries(swigCPtr);
  }

  public SWIGTYPE_p_std__listT_MercType_t GetMercenaryTypesList() {
    SWIGTYPE_p_std__listT_MercType_t ret = new SWIGTYPE_p_std__listT_MercType_t(questinterfacePINVOKE.NPC_GetMercenaryTypesList__SWIG_0(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_std__listT_MercType_t GetMercenaryTypesList(uint expansion) {
    SWIGTYPE_p_std__listT_MercType_t ret = new SWIGTYPE_p_std__listT_MercType_t(questinterfacePINVOKE.NPC_GetMercenaryTypesList__SWIG_1(swigCPtr, expansion), true);
    return ret;
  }

  public SWIGTYPE_p_std__listT_MercData_t GetMercenariesList() {
    SWIGTYPE_p_std__listT_MercData_t ret = new SWIGTYPE_p_std__listT_MercData_t(questinterfacePINVOKE.NPC_GetMercenariesList__SWIG_0(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_std__listT_MercData_t GetMercenariesList(uint expansion) {
    SWIGTYPE_p_std__listT_MercData_t ret = new SWIGTYPE_p_std__listT_MercData_t(questinterfacePINVOKE.NPC_GetMercenariesList__SWIG_1(swigCPtr, expansion), true);
    return ret;
  }

  public int GetNumMercenaryTypes() {
    int ret = questinterfacePINVOKE.NPC_GetNumMercenaryTypes__SWIG_0(swigCPtr);
    return ret;
  }

  public int GetNumMercenaryTypes(uint expansion) {
    int ret = questinterfacePINVOKE.NPC_GetNumMercenaryTypes__SWIG_1(swigCPtr, expansion);
    return ret;
  }

  public int GetNumberOfMercenaries() {
    int ret = questinterfacePINVOKE.NPC_GetNumberOfMercenaries__SWIG_0(swigCPtr);
    return ret;
  }

  public int GetNumberOfMercenaries(uint expansion) {
    int ret = questinterfacePINVOKE.NPC_GetNumberOfMercenaries__SWIG_1(swigCPtr, expansion);
    return ret;
  }

  public bool GetNPCAggro() {
    bool ret = questinterfacePINVOKE.NPC_GetNPCAggro__SWIG_0(swigCPtr);
    return ret;
  }

  public void SetNPCAggro(bool in_npc_aggro) {
    questinterfacePINVOKE.NPC_SetNPCAggro(swigCPtr, in_npc_aggro);
  }

  public void GiveNPCTypeData(SWIGTYPE_p_NPCType ours) {
    questinterfacePINVOKE.NPC_GiveNPCTypeData(swigCPtr, SWIGTYPE_p_NPCType.getCPtr(ours));
  }

  public uint GetNPCSpellsID() {
    uint ret = questinterfacePINVOKE.NPC_GetNPCSpellsID(swigCPtr);
    return ret;
  }

  public uint GetNPCSpellsEffectsID() {
    uint ret = questinterfacePINVOKE.NPC_GetNPCSpellsEffectsID(swigCPtr);
    return ret;
  }

  public float GetProximityMinX() {
    float ret = questinterfacePINVOKE.NPC_GetProximityMinX(swigCPtr);
    return ret;
  }

  public float GetProximityMaxX() {
    float ret = questinterfacePINVOKE.NPC_GetProximityMaxX(swigCPtr);
    return ret;
  }

  public float GetProximityMinY() {
    float ret = questinterfacePINVOKE.NPC_GetProximityMinY(swigCPtr);
    return ret;
  }

  public float GetProximityMaxY() {
    float ret = questinterfacePINVOKE.NPC_GetProximityMaxY(swigCPtr);
    return ret;
  }

  public float GetProximityMinZ() {
    float ret = questinterfacePINVOKE.NPC_GetProximityMinZ(swigCPtr);
    return ret;
  }

  public float GetProximityMaxZ() {
    float ret = questinterfacePINVOKE.NPC_GetProximityMaxZ(swigCPtr);
    return ret;
  }

  public bool IsProximitySet() {
    bool ret = questinterfacePINVOKE.NPC_IsProximitySet(swigCPtr);
    return ret;
  }

  public NPCProximity proximity {
    set {
      questinterfacePINVOKE.NPC_proximity_set(swigCPtr, NPCProximity.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.NPC_proximity_get(swigCPtr);
      NPCProximity ret = (cPtr == global::System.IntPtr.Zero) ? null : new NPCProximity(cPtr, false);
      return ret;
    } 
  }

  public Spawn2 respawn2 {
    set {
      questinterfacePINVOKE.NPC_respawn2_set(swigCPtr, Spawn2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.NPC_respawn2_get(swigCPtr);
      Spawn2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Spawn2(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_QGlobalCache GetQGlobals() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.NPC_GetQGlobals(swigCPtr);
    SWIGTYPE_p_QGlobalCache ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_QGlobalCache(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_QGlobalCache CreateQGlobals() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.NPC_CreateQGlobals(swigCPtr);
    SWIGTYPE_p_QGlobalCache ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_QGlobalCache(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_SwarmPet GetSwarmInfo() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.NPC_GetSwarmInfo(swigCPtr);
    SWIGTYPE_p_SwarmPet ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_SwarmPet(cPtr, false);
    return ret;
  }

  public void SetSwarmInfo(SWIGTYPE_p_SwarmPet mSwarmInfo) {
    questinterfacePINVOKE.NPC_SetSwarmInfo(swigCPtr, SWIGTYPE_p_SwarmPet.getCPtr(mSwarmInfo));
  }

  public int GetAccuracyRating() {
    int ret = questinterfacePINVOKE.NPC_GetAccuracyRating(swigCPtr);
    return ret;
  }

  public void SetAccuracyRating(int d) {
    questinterfacePINVOKE.NPC_SetAccuracyRating(swigCPtr, d);
  }

  public int GetAvoidanceRating() {
    int ret = questinterfacePINVOKE.NPC_GetAvoidanceRating(swigCPtr);
    return ret;
  }

  public void SetAvoidanceRating(int d) {
    questinterfacePINVOKE.NPC_SetAvoidanceRating(swigCPtr, d);
  }

  public int GetRawAC() {
    int ret = questinterfacePINVOKE.NPC_GetRawAC(swigCPtr);
    return ret;
  }

  public float GetNPCStat(SWIGTYPE_p_std__string stat) {
    float ret = questinterfacePINVOKE.NPC_GetNPCStat(swigCPtr, SWIGTYPE_p_std__string.getCPtr(stat));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void ModifyNPCStat(SWIGTYPE_p_std__string stat, SWIGTYPE_p_std__string value) {
    questinterfacePINVOKE.NPC_ModifyNPCStat(swigCPtr, SWIGTYPE_p_std__string.getCPtr(stat), SWIGTYPE_p_std__string.getCPtr(value));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void SetLevel(byte in_level, bool command) {
    questinterfacePINVOKE.NPC_SetLevel__SWIG_0(swigCPtr, in_level, command);
  }

  public override void SetLevel(byte in_level) {
    questinterfacePINVOKE.NPC_SetLevel__SWIG_1(swigCPtr, in_level);
  }

  public bool IsLDoNTrapped() {
    bool ret = questinterfacePINVOKE.NPC_IsLDoNTrapped(swigCPtr);
    return ret;
  }

  public void SetLDoNTrapped(bool n) {
    questinterfacePINVOKE.NPC_SetLDoNTrapped(swigCPtr, n);
  }

  public byte GetLDoNTrapType() {
    byte ret = questinterfacePINVOKE.NPC_GetLDoNTrapType(swigCPtr);
    return ret;
  }

  public void SetLDoNTrapType(byte n) {
    questinterfacePINVOKE.NPC_SetLDoNTrapType(swigCPtr, n);
  }

  public ushort GetLDoNTrapSpellID() {
    ushort ret = questinterfacePINVOKE.NPC_GetLDoNTrapSpellID(swigCPtr);
    return ret;
  }

  public void SetLDoNTrapSpellID(ushort n) {
    questinterfacePINVOKE.NPC_SetLDoNTrapSpellID(swigCPtr, n);
  }

  public bool IsLDoNLocked() {
    bool ret = questinterfacePINVOKE.NPC_IsLDoNLocked(swigCPtr);
    return ret;
  }

  public void SetLDoNLocked(bool n) {
    questinterfacePINVOKE.NPC_SetLDoNLocked(swigCPtr, n);
  }

  public ushort GetLDoNLockedSkill() {
    ushort ret = questinterfacePINVOKE.NPC_GetLDoNLockedSkill(swigCPtr);
    return ret;
  }

  public void SetLDoNLockedSkill(ushort n) {
    questinterfacePINVOKE.NPC_SetLDoNLockedSkill(swigCPtr, n);
  }

  public bool IsLDoNTrapDetected() {
    bool ret = questinterfacePINVOKE.NPC_IsLDoNTrapDetected(swigCPtr);
    return ret;
  }

  public void SetLDoNTrapDetected(bool n) {
    questinterfacePINVOKE.NPC_SetLDoNTrapDetected(swigCPtr, n);
  }

  public bool GetCombatEvent() {
    bool ret = questinterfacePINVOKE.NPC_GetCombatEvent(swigCPtr);
    return ret;
  }

  public void SetCombatEvent(bool b) {
    questinterfacePINVOKE.NPC_SetCombatEvent(swigCPtr, b);
  }

  public bool HasPrivateCorpse() {
    bool ret = questinterfacePINVOKE.NPC_HasPrivateCorpse(swigCPtr);
    return ret;
  }

  public override bool IsUnderwaterOnly() {
    bool ret = questinterfacePINVOKE.NPC_IsUnderwaterOnly(swigCPtr);
    return ret;
  }

  public virtual bool IsQuestNPC() {
    bool ret = questinterfacePINVOKE.NPC_IsQuestNPC(swigCPtr);
    return ret;
  }

  public string GetRawNPCTypeName() {
    string ret = questinterfacePINVOKE.NPC_GetRawNPCTypeName(swigCPtr);
    return ret;
  }

  public override int GetKillExpMod() {
    int ret = questinterfacePINVOKE.NPC_GetKillExpMod(swigCPtr);
    return ret;
  }

  public void ChangeLastName(SWIGTYPE_p_std__string last_name) {
    questinterfacePINVOKE.NPC_ChangeLastName(swigCPtr, SWIGTYPE_p_std__string.getCPtr(last_name));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ClearLastName() {
    questinterfacePINVOKE.NPC_ClearLastName(swigCPtr);
  }

  public bool GetDepop() {
    bool ret = questinterfacePINVOKE.NPC_GetDepop(swigCPtr);
    return ret;
  }

  public void NPCSlotTexture(byte slot, uint texture) {
    questinterfacePINVOKE.NPC_NPCSlotTexture(swigCPtr, slot, texture);
  }

  public uint GetAdventureTemplate() {
    uint ret = questinterfacePINVOKE.NPC_GetAdventureTemplate(swigCPtr);
    return ret;
  }

  public void AddSpellToNPCList(short iPriority, ushort iSpellID, uint iType, short iManaCost, int iRecastDelay, short iResistAdjust, sbyte min_hp, sbyte max_hp) {
    questinterfacePINVOKE.NPC_AddSpellToNPCList(swigCPtr, iPriority, iSpellID, iType, iManaCost, iRecastDelay, iResistAdjust, min_hp, max_hp);
  }

  public void AddSpellEffectToNPCList(ushort iSpellEffectID, int base_value, int limit, int max_value, bool apply_bonus) {
    questinterfacePINVOKE.NPC_AddSpellEffectToNPCList__SWIG_0(swigCPtr, iSpellEffectID, base_value, limit, max_value, apply_bonus);
  }

  public void AddSpellEffectToNPCList(ushort iSpellEffectID, int base_value, int limit, int max_value) {
    questinterfacePINVOKE.NPC_AddSpellEffectToNPCList__SWIG_1(swigCPtr, iSpellEffectID, base_value, limit, max_value);
  }

  public void RemoveSpellFromNPCList(ushort spell_id) {
    questinterfacePINVOKE.NPC_RemoveSpellFromNPCList(swigCPtr, spell_id);
  }

  public void RemoveSpellEffectFromNPCList(ushort iSpellEffectID, bool apply_bonus) {
    questinterfacePINVOKE.NPC_RemoveSpellEffectFromNPCList__SWIG_0(swigCPtr, iSpellEffectID, apply_bonus);
  }

  public void RemoveSpellEffectFromNPCList(ushort iSpellEffectID) {
    questinterfacePINVOKE.NPC_RemoveSpellEffectFromNPCList__SWIG_1(swigCPtr, iSpellEffectID);
  }

  public bool HasAISpellEffect(ushort spell_effect_id) {
    bool ret = questinterfacePINVOKE.NPC_HasAISpellEffect(swigCPtr, spell_effect_id);
    return ret;
  }

  public SWIGTYPE_p_Timer GetRefaceTimer() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.NPC_GetRefaceTimer(swigCPtr);
    SWIGTYPE_p_Timer ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Timer(cPtr, false);
    return ret;
  }

  public uint GetAltCurrencyType() {
    uint ret = questinterfacePINVOKE.NPC_GetAltCurrencyType(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_NPC_Emote_Struct GetNPCEmote(uint emote_id, byte event_) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.NPC_GetNPCEmote(swigCPtr, emote_id, event_);
    SWIGTYPE_p_NPC_Emote_Struct ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_NPC_Emote_Struct(cPtr, false);
    return ret;
  }

  public void DoNPCEmote(byte event_, uint emote_id, Mob t) {
    questinterfacePINVOKE.NPC_DoNPCEmote__SWIG_0(swigCPtr, event_, emote_id, Mob.getCPtr(t));
  }

  public void DoNPCEmote(byte event_, uint emote_id) {
    questinterfacePINVOKE.NPC_DoNPCEmote__SWIG_1(swigCPtr, event_, emote_id);
  }

  public bool CanTalk() {
    bool ret = questinterfacePINVOKE.NPC_CanTalk(swigCPtr);
    return ret;
  }

  public void DoQuestPause(Mob other) {
    questinterfacePINVOKE.NPC_DoQuestPause(swigCPtr, Mob.getCPtr(other));
  }

  public void SetSpellScale(float amt) {
    questinterfacePINVOKE.NPC_SetSpellScale(swigCPtr, amt);
  }

  public float GetSpellScale() {
    float ret = questinterfacePINVOKE.NPC_GetSpellScale(swigCPtr);
    return ret;
  }

  public void SetHealScale(float amt) {
    questinterfacePINVOKE.NPC_SetHealScale(swigCPtr, amt);
  }

  public float GetHealScale() {
    float ret = questinterfacePINVOKE.NPC_GetHealScale(swigCPtr);
    return ret;
  }

  public void SetSpellFocusDMG(int NewSpellFocusDMG) {
    questinterfacePINVOKE.NPC_SetSpellFocusDMG(swigCPtr, NewSpellFocusDMG);
  }

  public int GetSpellFocusDMG() {
    int ret = questinterfacePINVOKE.NPC_GetSpellFocusDMG(swigCPtr);
    return ret;
  }

  public void SetSpellFocusHeal(int NewSpellFocusHeal) {
    questinterfacePINVOKE.NPC_SetSpellFocusHeal(swigCPtr, NewSpellFocusHeal);
  }

  public int GetSpellFocusHeal() {
    int ret = questinterfacePINVOKE.NPC_GetSpellFocusHeal(swigCPtr);
    return ret;
  }

  public uint GetSpawnKillCount() {
    uint ret = questinterfacePINVOKE.NPC_GetSpawnKillCount(swigCPtr);
    return ret;
  }

  public int GetScore() {
    int ret = questinterfacePINVOKE.NPC_GetScore(swigCPtr);
    return ret;
  }

  public void AISpellsList(Client c) {
    questinterfacePINVOKE.NPC_AISpellsList(swigCPtr, Client.getCPtr(c));
  }

  public ushort GetInnateProcSpellID() {
    ushort ret = questinterfacePINVOKE.NPC_GetInnateProcSpellID(swigCPtr);
    return ret;
  }

  public uint GetHeroForgeModel() {
    uint ret = questinterfacePINVOKE.NPC_GetHeroForgeModel(swigCPtr);
    return ret;
  }

  public void SetHeroForgeModel(uint model) {
    questinterfacePINVOKE.NPC_SetHeroForgeModel(swigCPtr, model);
  }

  public override bool IsRaidTarget() {
    bool ret = questinterfacePINVOKE.NPC_IsRaidTarget(swigCPtr);
    return ret;
  }

  public new bool IsRareSpawn() {
    bool ret = questinterfacePINVOKE.NPC_IsRareSpawn(swigCPtr);
    return ret;
  }

  public override void ResetHPUpdateTimer() {
    questinterfacePINVOKE.NPC_ResetHPUpdateTimer(swigCPtr);
  }

  public bool IgnoreDespawn() {
    bool ret = questinterfacePINVOKE.NPC_IgnoreDespawn(swigCPtr);
    return ret;
  }

  public void SetSimpleRoamBox(float box_size, float move_distance, int move_delay) {
    questinterfacePINVOKE.NPC_SetSimpleRoamBox__SWIG_0(swigCPtr, box_size, move_distance, move_delay);
  }

  public void SetSimpleRoamBox(float box_size, float move_distance) {
    questinterfacePINVOKE.NPC_SetSimpleRoamBox__SWIG_1(swigCPtr, box_size, move_distance);
  }

  public void SetSimpleRoamBox(float box_size) {
    questinterfacePINVOKE.NPC_SetSimpleRoamBox__SWIG_2(swigCPtr, box_size);
  }

  public float GetRoamboxMaxX() {
    float ret = questinterfacePINVOKE.NPC_GetRoamboxMaxX(swigCPtr);
    return ret;
  }

  public float GetRoamboxMaxY() {
    float ret = questinterfacePINVOKE.NPC_GetRoamboxMaxY(swigCPtr);
    return ret;
  }

  public float GetRoamboxMinX() {
    float ret = questinterfacePINVOKE.NPC_GetRoamboxMinX(swigCPtr);
    return ret;
  }

  public float GetRoamboxMinY() {
    float ret = questinterfacePINVOKE.NPC_GetRoamboxMinY(swigCPtr);
    return ret;
  }

  public float GetRoamboxDistance() {
    float ret = questinterfacePINVOKE.NPC_GetRoamboxDistance(swigCPtr);
    return ret;
  }

  public float GetRoamboxDestinationX() {
    float ret = questinterfacePINVOKE.NPC_GetRoamboxDestinationX(swigCPtr);
    return ret;
  }

  public float GetRoamboxDestinationY() {
    float ret = questinterfacePINVOKE.NPC_GetRoamboxDestinationY(swigCPtr);
    return ret;
  }

  public float GetRoamboxDestinationZ() {
    float ret = questinterfacePINVOKE.NPC_GetRoamboxDestinationZ(swigCPtr);
    return ret;
  }

  public uint GetRoamboxDelay() {
    uint ret = questinterfacePINVOKE.NPC_GetRoamboxDelay(swigCPtr);
    return ret;
  }

  public uint GetRoamboxMinDelay() {
    uint ret = questinterfacePINVOKE.NPC_GetRoamboxMinDelay(swigCPtr);
    return ret;
  }

  public byte GetArmTexture() {
    byte ret = questinterfacePINVOKE.NPC_GetArmTexture(swigCPtr);
    return ret;
  }

  public byte GetBracerTexture() {
    byte ret = questinterfacePINVOKE.NPC_GetBracerTexture(swigCPtr);
    return ret;
  }

  public byte GetHandTexture() {
    byte ret = questinterfacePINVOKE.NPC_GetHandTexture(swigCPtr);
    return ret;
  }

  public byte GetFeetTexture() {
    byte ret = questinterfacePINVOKE.NPC_GetFeetTexture(swigCPtr);
    return ret;
  }

  public byte GetLegTexture() {
    byte ret = questinterfacePINVOKE.NPC_GetLegTexture(swigCPtr);
    return ret;
  }

  public int GetCharmedAccuracy() {
    int ret = questinterfacePINVOKE.NPC_GetCharmedAccuracy(swigCPtr);
    return ret;
  }

  public int GetCharmedArmorClass() {
    int ret = questinterfacePINVOKE.NPC_GetCharmedArmorClass(swigCPtr);
    return ret;
  }

  public int GetCharmedAttack() {
    int ret = questinterfacePINVOKE.NPC_GetCharmedAttack(swigCPtr);
    return ret;
  }

  public int GetCharmedAttackDelay() {
    int ret = questinterfacePINVOKE.NPC_GetCharmedAttackDelay(swigCPtr);
    return ret;
  }

  public int GetCharmedAvoidance() {
    int ret = questinterfacePINVOKE.NPC_GetCharmedAvoidance(swigCPtr);
    return ret;
  }

  public int GetCharmedMaxDamage() {
    int ret = questinterfacePINVOKE.NPC_GetCharmedMaxDamage(swigCPtr);
    return ret;
  }

  public int GetCharmedMinDamage() {
    int ret = questinterfacePINVOKE.NPC_GetCharmedMinDamage(swigCPtr);
    return ret;
  }

  public bool GetAlwaysAggro() {
    bool ret = questinterfacePINVOKE.NPC_GetAlwaysAggro(swigCPtr);
    return ret;
  }

  public bool GetIgnoreDespawn() {
    bool ret = questinterfacePINVOKE.NPC_GetIgnoreDespawn(swigCPtr);
    return ret;
  }

  public bool GetSkipGlobalLoot() {
    bool ret = questinterfacePINVOKE.NPC_GetSkipGlobalLoot(swigCPtr);
    return ret;
  }

  public override int GetStuckBehavior() {
    int ret = questinterfacePINVOKE.NPC_GetStuckBehavior(swigCPtr);
    return ret;
  }

  public bool IsSkipAutoScale() {
    bool ret = questinterfacePINVOKE.NPC_IsSkipAutoScale(swigCPtr);
    return ret;
  }

  public void ScaleNPC(byte npc_level, bool always_scale, bool override_special_abilities) {
    questinterfacePINVOKE.NPC_ScaleNPC__SWIG_0(swigCPtr, npc_level, always_scale, override_special_abilities);
  }

  public void ScaleNPC(byte npc_level, bool always_scale) {
    questinterfacePINVOKE.NPC_ScaleNPC__SWIG_1(swigCPtr, npc_level, always_scale);
  }

  public void ScaleNPC(byte npc_level) {
    questinterfacePINVOKE.NPC_ScaleNPC__SWIG_2(swigCPtr, npc_level);
  }

  public void RecalculateSkills() {
    questinterfacePINVOKE.NPC_RecalculateSkills(swigCPtr);
  }

  public void ReloadSpells() {
    questinterfacePINVOKE.NPC_ReloadSpells(swigCPtr);
  }

  public void SendPositionToClients() {
    questinterfacePINVOKE.NPC_SendPositionToClients(swigCPtr);
  }

  public bool CanPathTo(float x, float y, float z) {
    bool ret = questinterfacePINVOKE.NPC_CanPathTo(swigCPtr, x, y, z);
    return ret;
  }

}

public class Encounter : Mob {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Encounter(global::System.IntPtr cPtr, bool cMemoryOwn) : base(questinterfacePINVOKE.Encounter_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Encounter obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Encounter obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_Encounter(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public Encounter(string enc_name) : this(questinterfacePINVOKE.new_Encounter(enc_name), true) {
  }

  public override bool Death(Mob killer_mob, long damage, ushort spell_id, SWIGTYPE_p_EQ__skills__SkillType attack_skill, KilledByTypes killed_by) {
    bool ret = questinterfacePINVOKE.Encounter_Death__SWIG_0(swigCPtr, Mob.getCPtr(killer_mob), damage, spell_id, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(attack_skill), (int)killed_by);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool Death(Mob killer_mob, long damage, ushort spell_id, SWIGTYPE_p_EQ__skills__SkillType attack_skill) {
    bool ret = questinterfacePINVOKE.Encounter_Death__SWIG_1(swigCPtr, Mob.getCPtr(killer_mob), damage, spell_id, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(attack_skill));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void Damage(Mob from, long damage, ushort spell_id, SWIGTYPE_p_EQ__skills__SkillType attack_skill, bool avoidable, sbyte buffslot, bool iBuffTic, eSpecialAttacks special) {
    questinterfacePINVOKE.Encounter_Damage__SWIG_0(swigCPtr, Mob.getCPtr(from), damage, spell_id, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(attack_skill), avoidable, buffslot, iBuffTic, (int)special);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Damage(Mob from, long damage, ushort spell_id, SWIGTYPE_p_EQ__skills__SkillType attack_skill, bool avoidable, sbyte buffslot, bool iBuffTic) {
    questinterfacePINVOKE.Encounter_Damage__SWIG_1(swigCPtr, Mob.getCPtr(from), damage, spell_id, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(attack_skill), avoidable, buffslot, iBuffTic);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Damage(Mob from, long damage, ushort spell_id, SWIGTYPE_p_EQ__skills__SkillType attack_skill, bool avoidable, sbyte buffslot) {
    questinterfacePINVOKE.Encounter_Damage__SWIG_2(swigCPtr, Mob.getCPtr(from), damage, spell_id, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(attack_skill), avoidable, buffslot);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Damage(Mob from, long damage, ushort spell_id, SWIGTYPE_p_EQ__skills__SkillType attack_skill, bool avoidable) {
    questinterfacePINVOKE.Encounter_Damage__SWIG_3(swigCPtr, Mob.getCPtr(from), damage, spell_id, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(attack_skill), avoidable);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Damage(Mob from, long damage, ushort spell_id, SWIGTYPE_p_EQ__skills__SkillType attack_skill) {
    questinterfacePINVOKE.Encounter_Damage__SWIG_4(swigCPtr, Mob.getCPtr(from), damage, spell_id, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(attack_skill));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool Attack(Mob other, int Hand, bool FromRiposte, bool IsStrikethrough, bool IsFromSpell, ExtraAttackOptions opts) {
    bool ret = questinterfacePINVOKE.Encounter_Attack__SWIG_0(swigCPtr, Mob.getCPtr(other), Hand, FromRiposte, IsStrikethrough, IsFromSpell, ExtraAttackOptions.getCPtr(opts));
    return ret;
  }

  public override bool Attack(Mob other, int Hand, bool FromRiposte, bool IsStrikethrough, bool IsFromSpell) {
    bool ret = questinterfacePINVOKE.Encounter_Attack__SWIG_1(swigCPtr, Mob.getCPtr(other), Hand, FromRiposte, IsStrikethrough, IsFromSpell);
    return ret;
  }

  public override bool Attack(Mob other, int Hand, bool FromRiposte, bool IsStrikethrough) {
    bool ret = questinterfacePINVOKE.Encounter_Attack__SWIG_2(swigCPtr, Mob.getCPtr(other), Hand, FromRiposte, IsStrikethrough);
    return ret;
  }

  public override bool Attack(Mob other, int Hand, bool FromRiposte) {
    bool ret = questinterfacePINVOKE.Encounter_Attack__SWIG_3(swigCPtr, Mob.getCPtr(other), Hand, FromRiposte);
    return ret;
  }

  public override bool Attack(Mob other, int Hand) {
    bool ret = questinterfacePINVOKE.Encounter_Attack__SWIG_4(swigCPtr, Mob.getCPtr(other), Hand);
    return ret;
  }

  public override bool Attack(Mob other) {
    bool ret = questinterfacePINVOKE.Encounter_Attack__SWIG_5(swigCPtr, Mob.getCPtr(other));
    return ret;
  }

  public override bool HasRaid() {
    bool ret = questinterfacePINVOKE.Encounter_HasRaid(swigCPtr);
    return ret;
  }

  public override bool HasGroup() {
    bool ret = questinterfacePINVOKE.Encounter_HasGroup(swigCPtr);
    return ret;
  }

  public override Raid GetRaid() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Encounter_GetRaid(swigCPtr);
    Raid ret = (cPtr == global::System.IntPtr.Zero) ? null : new Raid(cPtr, false);
    return ret;
  }

  public override Group GetGroup() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Encounter_GetGroup(swigCPtr);
    Group ret = (cPtr == global::System.IntPtr.Zero) ? null : new Group(cPtr, false);
    return ret;
  }

  public override bool IsEncounter() {
    bool ret = questinterfacePINVOKE.Encounter_IsEncounter(swigCPtr);
    return ret;
  }

  public string GetEncounterName() {
    string ret = questinterfacePINVOKE.Encounter_GetEncounterName(swigCPtr);
    return ret;
  }

  public override bool Process() {
    bool ret = questinterfacePINVOKE.Encounter_Process(swigCPtr);
    return ret;
  }

  public override void Depop(bool not_used) {
    questinterfacePINVOKE.Encounter_Depop__SWIG_0(swigCPtr, not_used);
  }

  public override void Depop() {
    questinterfacePINVOKE.Encounter_Depop__SWIG_1(swigCPtr);
  }

}

public class Beacon : Mob {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Beacon(global::System.IntPtr cPtr, bool cMemoryOwn) : base(questinterfacePINVOKE.Beacon_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Beacon obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Beacon obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_Beacon(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public Beacon(SWIGTYPE_p_glm__vec4 in_pos, int lifetime) : this(questinterfacePINVOKE.new_Beacon(SWIGTYPE_p_glm__vec4.getCPtr(in_pos), lifetime), true) {
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool Death(Mob killer_mob, long damage, ushort spell_id, SWIGTYPE_p_EQ__skills__SkillType attack_skill, KilledByTypes killed_by) {
    bool ret = questinterfacePINVOKE.Beacon_Death__SWIG_0(swigCPtr, Mob.getCPtr(killer_mob), damage, spell_id, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(attack_skill), (int)killed_by);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool Death(Mob killer_mob, long damage, ushort spell_id, SWIGTYPE_p_EQ__skills__SkillType attack_skill) {
    bool ret = questinterfacePINVOKE.Beacon_Death__SWIG_1(swigCPtr, Mob.getCPtr(killer_mob), damage, spell_id, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(attack_skill));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void Damage(Mob from, long damage, ushort spell_id, SWIGTYPE_p_EQ__skills__SkillType attack_skill, bool avoidable, sbyte buffslot, bool iBuffTic, eSpecialAttacks special) {
    questinterfacePINVOKE.Beacon_Damage__SWIG_0(swigCPtr, Mob.getCPtr(from), damage, spell_id, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(attack_skill), avoidable, buffslot, iBuffTic, (int)special);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Damage(Mob from, long damage, ushort spell_id, SWIGTYPE_p_EQ__skills__SkillType attack_skill, bool avoidable, sbyte buffslot, bool iBuffTic) {
    questinterfacePINVOKE.Beacon_Damage__SWIG_1(swigCPtr, Mob.getCPtr(from), damage, spell_id, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(attack_skill), avoidable, buffslot, iBuffTic);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Damage(Mob from, long damage, ushort spell_id, SWIGTYPE_p_EQ__skills__SkillType attack_skill, bool avoidable, sbyte buffslot) {
    questinterfacePINVOKE.Beacon_Damage__SWIG_2(swigCPtr, Mob.getCPtr(from), damage, spell_id, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(attack_skill), avoidable, buffslot);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Damage(Mob from, long damage, ushort spell_id, SWIGTYPE_p_EQ__skills__SkillType attack_skill, bool avoidable) {
    questinterfacePINVOKE.Beacon_Damage__SWIG_3(swigCPtr, Mob.getCPtr(from), damage, spell_id, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(attack_skill), avoidable);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Damage(Mob from, long damage, ushort spell_id, SWIGTYPE_p_EQ__skills__SkillType attack_skill) {
    questinterfacePINVOKE.Beacon_Damage__SWIG_4(swigCPtr, Mob.getCPtr(from), damage, spell_id, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(attack_skill));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool HasRaid() {
    bool ret = questinterfacePINVOKE.Beacon_HasRaid(swigCPtr);
    return ret;
  }

  public override bool HasGroup() {
    bool ret = questinterfacePINVOKE.Beacon_HasGroup(swigCPtr);
    return ret;
  }

  public override Raid GetRaid() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Beacon_GetRaid(swigCPtr);
    Raid ret = (cPtr == global::System.IntPtr.Zero) ? null : new Raid(cPtr, false);
    return ret;
  }

  public override Group GetGroup() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Beacon_GetGroup(swigCPtr);
    Group ret = (cPtr == global::System.IntPtr.Zero) ? null : new Group(cPtr, false);
    return ret;
  }

  public override bool Attack(Mob other, int Hand, bool FromRiposte, bool IsStrikethrough, bool IsFromSpell, ExtraAttackOptions opts) {
    bool ret = questinterfacePINVOKE.Beacon_Attack__SWIG_0(swigCPtr, Mob.getCPtr(other), Hand, FromRiposte, IsStrikethrough, IsFromSpell, ExtraAttackOptions.getCPtr(opts));
    return ret;
  }

  public override bool Attack(Mob other, int Hand, bool FromRiposte, bool IsStrikethrough, bool IsFromSpell) {
    bool ret = questinterfacePINVOKE.Beacon_Attack__SWIG_1(swigCPtr, Mob.getCPtr(other), Hand, FromRiposte, IsStrikethrough, IsFromSpell);
    return ret;
  }

  public override bool Attack(Mob other, int Hand, bool FromRiposte, bool IsStrikethrough) {
    bool ret = questinterfacePINVOKE.Beacon_Attack__SWIG_2(swigCPtr, Mob.getCPtr(other), Hand, FromRiposte, IsStrikethrough);
    return ret;
  }

  public override bool Attack(Mob other, int Hand, bool FromRiposte) {
    bool ret = questinterfacePINVOKE.Beacon_Attack__SWIG_3(swigCPtr, Mob.getCPtr(other), Hand, FromRiposte);
    return ret;
  }

  public override bool Attack(Mob other, int Hand) {
    bool ret = questinterfacePINVOKE.Beacon_Attack__SWIG_4(swigCPtr, Mob.getCPtr(other), Hand);
    return ret;
  }

  public override bool Attack(Mob other) {
    bool ret = questinterfacePINVOKE.Beacon_Attack__SWIG_5(swigCPtr, Mob.getCPtr(other));
    return ret;
  }

  public override bool IsBeacon() {
    bool ret = questinterfacePINVOKE.Beacon_IsBeacon(swigCPtr);
    return ret;
  }

  public override bool Process() {
    bool ret = questinterfacePINVOKE.Beacon_Process(swigCPtr);
    return ret;
  }

  public override void Depop(bool not_used) {
    questinterfacePINVOKE.Beacon_Depop__SWIG_0(swigCPtr, not_used);
  }

  public override void Depop() {
    questinterfacePINVOKE.Beacon_Depop__SWIG_1(swigCPtr);
  }

  public void AELocationSpell(Mob caster, ushort cast_spell_id, short in_resist_adjust) {
    questinterfacePINVOKE.Beacon_AELocationSpell(swigCPtr, Mob.getCPtr(caster), cast_spell_id, in_resist_adjust);
  }

}

public enum WaterRegionType : int {

}

public class CLIENTPACKET : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CLIENTPACKET(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CLIENTPACKET obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(CLIENTPACKET obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~CLIENTPACKET() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_CLIENTPACKET(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public CLIENTPACKET() : this(questinterfacePINVOKE.new_CLIENTPACKET(), true) {
  }

  public SWIGTYPE_p_EQApplicationPacket app {
    set {
      questinterfacePINVOKE.CLIENTPACKET_app_set(swigCPtr, SWIGTYPE_p_EQApplicationPacket.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.CLIENTPACKET_app_get(swigCPtr);
      SWIGTYPE_p_EQApplicationPacket ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_EQApplicationPacket(cPtr, false);
      return ret;
    } 
  }

  public bool ack_req {
    set {
      questinterfacePINVOKE.CLIENTPACKET_ack_req_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.CLIENTPACKET_ack_req_get(swigCPtr);
      return ret;
    } 
  }

}

public enum ZoneMode {
  ZoneToSafeCoords,
  GMSummon,
  GMHiddenSummon,
  ZoneToBindPoint,
  ZoneSolicited,
  ZoneUnsolicited,
  GateToBindPoint,
  SummonPC,
  Rewind,
  EvacToSafeCoords
}

public enum ShowSpellType {
  Disciplines,
  Spells
}

public enum XTargetType {
  Empty = 0,
  Auto = 1,
  CurrentTargetPC = 2,
  CurrentTargetNPC = 3,
  TargetsTarget = 4,
  GroupTank = 5,
  GroupTankTarget = 6,
  GroupAssist = 7,
  GroupAssistTarget = 8,
  Puller = 9,
  PullerTarget = 10,
  GroupMarkTarget1 = 11,
  GroupMarkTarget2 = 12,
  GroupMarkTarget3 = 13,
  RaidAssist1 = 14,
  RaidAssist2 = 15,
  RaidAssist3 = 16,
  RaidAssist1Target = 17,
  RaidAssist2Target = 18,
  RaidAssist3Target = 19,
  RaidMarkTarget1 = 20,
  RaidMarkTarget2 = 21,
  RaidMarkTarget3 = 22,
  MyPet = 23,
  MyPetTarget = 24,
  MyMercenary = 25,
  MyMercenaryTarget = 26
}

public class XTarget_Struct : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal XTarget_Struct(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(XTarget_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(XTarget_Struct obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~XTarget_Struct() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_XTarget_Struct(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public XTargetType Type {
    set {
      questinterfacePINVOKE.XTarget_Struct_Type_set(swigCPtr, (int)value);
    } 
    get {
      XTargetType ret = (XTargetType)questinterfacePINVOKE.XTarget_Struct_Type_get(swigCPtr);
      return ret;
    } 
  }

  public bool dirty {
    set {
      questinterfacePINVOKE.XTarget_Struct_dirty_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.XTarget_Struct_dirty_get(swigCPtr);
      return ret;
    } 
  }

  public ushort ID {
    set {
      questinterfacePINVOKE.XTarget_Struct_ID_set(swigCPtr, value);
    } 
    get {
      ushort ret = questinterfacePINVOKE.XTarget_Struct_ID_get(swigCPtr);
      return ret;
    } 
  }

  public string Name {
    set {
      questinterfacePINVOKE.XTarget_Struct_Name_set(swigCPtr, value);
    } 
    get {
      string ret = questinterfacePINVOKE.XTarget_Struct_Name_get(swigCPtr);
      return ret;
    } 
  }

  public XTarget_Struct() : this(questinterfacePINVOKE.new_XTarget_Struct(), true) {
  }

}

public class RespawnOption : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal RespawnOption(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(RespawnOption obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(RespawnOption obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~RespawnOption() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_RespawnOption(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SWIGTYPE_p_std__string name {
    set {
      questinterfacePINVOKE.RespawnOption_name_set(swigCPtr, SWIGTYPE_p_std__string.getCPtr(value));
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(questinterfacePINVOKE.RespawnOption_name_get(swigCPtr), true);
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public uint zone_id {
    set {
      questinterfacePINVOKE.RespawnOption_zone_id_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.RespawnOption_zone_id_get(swigCPtr);
      return ret;
    } 
  }

  public ushort instance_id {
    set {
      questinterfacePINVOKE.RespawnOption_instance_id_set(swigCPtr, value);
    } 
    get {
      ushort ret = questinterfacePINVOKE.RespawnOption_instance_id_get(swigCPtr);
      return ret;
    } 
  }

  public float x {
    set {
      questinterfacePINVOKE.RespawnOption_x_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.RespawnOption_x_get(swigCPtr);
      return ret;
    } 
  }

  public float y {
    set {
      questinterfacePINVOKE.RespawnOption_y_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.RespawnOption_y_get(swigCPtr);
      return ret;
    } 
  }

  public float z {
    set {
      questinterfacePINVOKE.RespawnOption_z_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.RespawnOption_z_get(swigCPtr);
      return ret;
    } 
  }

  public float heading {
    set {
      questinterfacePINVOKE.RespawnOption_heading_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.RespawnOption_heading_get(swigCPtr);
      return ret;
    } 
  }

  public RespawnOption() : this(questinterfacePINVOKE.new_RespawnOption(), true) {
  }

}

public enum eInnateSkill {
  InnateEnabled = 0,
  InnateAwareness = 1,
  InnateBashDoor = 2,
  InnateBreathFire = 3,
  InnateHarmony = 4,
  InnateInfravision = 6,
  InnateLore = 8,
  InnateNoBash = 9,
  InnateRegen = 10,
  InnateSlam = 11,
  InnateSurprise = 12,
  InnateUltraVision = 13,
  InnateInspect = 14,
  InnateOpen = 15,
  InnateReveal = 16,
  InnateSkillMax = 25,
  InnateDisabled = 255
}

public class ClientReward : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ClientReward(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ClientReward obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ClientReward obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ClientReward() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_ClientReward(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public uint id {
    set {
      questinterfacePINVOKE.ClientReward_id_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.ClientReward_id_get(swigCPtr);
      return ret;
    } 
  }

  public uint amount {
    set {
      questinterfacePINVOKE.ClientReward_amount_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.ClientReward_amount_get(swigCPtr);
      return ret;
    } 
  }

  public ClientReward() : this(questinterfacePINVOKE.new_ClientReward(), true) {
  }

}

public class Client : Mob {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Client(global::System.IntPtr cPtr, bool cMemoryOwn) : base(questinterfacePINVOKE.Client_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Client obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Client obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_Client(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public Client(SWIGTYPE_p_EQStreamInterface ieqs) : this(questinterfacePINVOKE.new_Client(SWIGTYPE_p_EQStreamInterface.getCPtr(ieqs)), true) {
  }

  public void ReconnectUCS() {
    questinterfacePINVOKE.Client_ReconnectUCS(swigCPtr);
  }

  public void RecordStats() {
    questinterfacePINVOKE.Client_RecordStats(swigCPtr);
  }

  public void SetDisplayMobInfoWindow(bool display_mob_info_window) {
    questinterfacePINVOKE.Client_SetDisplayMobInfoWindow(swigCPtr, display_mob_info_window);
  }

  public bool GetDisplayMobInfoWindow() {
    bool ret = questinterfacePINVOKE.Client_GetDisplayMobInfoWindow(swigCPtr);
    return ret;
  }

  public bool IsDevToolsEnabled() {
    bool ret = questinterfacePINVOKE.Client_IsDevToolsEnabled(swigCPtr);
    return ret;
  }

  public void SetDevToolsEnabled(bool in_dev_tools_enabled) {
    questinterfacePINVOKE.Client_SetDevToolsEnabled(swigCPtr, in_dev_tools_enabled);
  }

  public bool IsEXPEnabled() {
    bool ret = questinterfacePINVOKE.Client_IsEXPEnabled(swigCPtr);
    return ret;
  }

  public void SetEXPEnabled(bool is_exp_enabled) {
    questinterfacePINVOKE.Client_SetEXPEnabled(swigCPtr, is_exp_enabled);
  }

  public void SetPrimaryWeaponOrnamentation(uint model_id) {
    questinterfacePINVOKE.Client_SetPrimaryWeaponOrnamentation(swigCPtr, model_id);
  }

  public void SetSecondaryWeaponOrnamentation(uint model_id) {
    questinterfacePINVOKE.Client_SetSecondaryWeaponOrnamentation(swigCPtr, model_id);
  }

  public void SendChatLineBreak(ushort color) {
    questinterfacePINVOKE.Client_SendChatLineBreak__SWIG_0(swigCPtr, color);
  }

  public void SendChatLineBreak() {
    questinterfacePINVOKE.Client_SendChatLineBreak__SWIG_1(swigCPtr);
  }

  public bool GotoPlayer(SWIGTYPE_p_std__string player_name) {
    bool ret = questinterfacePINVOKE.Client_GotoPlayer(swigCPtr, SWIGTYPE_p_std__string.getCPtr(player_name));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GotoPlayerGroup(SWIGTYPE_p_std__string player_name) {
    bool ret = questinterfacePINVOKE.Client_GotoPlayerGroup(swigCPtr, SWIGTYPE_p_std__string.getCPtr(player_name));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GotoPlayerRaid(SWIGTYPE_p_std__string player_name) {
    bool ret = questinterfacePINVOKE.Client_GotoPlayerRaid(swigCPtr, SWIGTYPE_p_std__string.getCPtr(player_name));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool Death(Mob killer_mob, long damage, ushort spell_id, SWIGTYPE_p_EQ__skills__SkillType attack_skill, KilledByTypes killed_by) {
    bool ret = questinterfacePINVOKE.Client_Death__SWIG_0(swigCPtr, Mob.getCPtr(killer_mob), damage, spell_id, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(attack_skill), (int)killed_by);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool Death(Mob killer_mob, long damage, ushort spell_id, SWIGTYPE_p_EQ__skills__SkillType attack_skill) {
    bool ret = questinterfacePINVOKE.Client_Death__SWIG_1(swigCPtr, Mob.getCPtr(killer_mob), damage, spell_id, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(attack_skill));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void Damage(Mob from, long damage, ushort spell_id, SWIGTYPE_p_EQ__skills__SkillType attack_skill, bool avoidable, sbyte buffslot, bool iBuffTic, eSpecialAttacks special) {
    questinterfacePINVOKE.Client_Damage__SWIG_0(swigCPtr, Mob.getCPtr(from), damage, spell_id, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(attack_skill), avoidable, buffslot, iBuffTic, (int)special);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Damage(Mob from, long damage, ushort spell_id, SWIGTYPE_p_EQ__skills__SkillType attack_skill, bool avoidable, sbyte buffslot, bool iBuffTic) {
    questinterfacePINVOKE.Client_Damage__SWIG_1(swigCPtr, Mob.getCPtr(from), damage, spell_id, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(attack_skill), avoidable, buffslot, iBuffTic);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Damage(Mob from, long damage, ushort spell_id, SWIGTYPE_p_EQ__skills__SkillType attack_skill, bool avoidable, sbyte buffslot) {
    questinterfacePINVOKE.Client_Damage__SWIG_2(swigCPtr, Mob.getCPtr(from), damage, spell_id, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(attack_skill), avoidable, buffslot);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Damage(Mob from, long damage, ushort spell_id, SWIGTYPE_p_EQ__skills__SkillType attack_skill, bool avoidable) {
    questinterfacePINVOKE.Client_Damage__SWIG_3(swigCPtr, Mob.getCPtr(from), damage, spell_id, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(attack_skill), avoidable);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Damage(Mob from, long damage, ushort spell_id, SWIGTYPE_p_EQ__skills__SkillType attack_skill) {
    questinterfacePINVOKE.Client_Damage__SWIG_4(swigCPtr, Mob.getCPtr(from), damage, spell_id, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(attack_skill));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool HasRaid() {
    bool ret = questinterfacePINVOKE.Client_HasRaid(swigCPtr);
    return ret;
  }

  public override bool HasGroup() {
    bool ret = questinterfacePINVOKE.Client_HasGroup(swigCPtr);
    return ret;
  }

  public override Raid GetRaid() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Client_GetRaid(swigCPtr);
    Raid ret = (cPtr == global::System.IntPtr.Zero) ? null : new Raid(cPtr, false);
    return ret;
  }

  public override Group GetGroup() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Client_GetGroup(swigCPtr);
    Group ret = (cPtr == global::System.IntPtr.Zero) ? null : new Group(cPtr, false);
    return ret;
  }

  public override bool IsBerserk() {
    bool ret = questinterfacePINVOKE.Client_IsBerserk(swigCPtr);
    return ret;
  }

  public override void SetAttackTimer() {
    questinterfacePINVOKE.Client_SetAttackTimer(swigCPtr);
  }

  public int GetQuiverHaste(int delay) {
    int ret = questinterfacePINVOKE.Client_GetQuiverHaste(swigCPtr, delay);
    return ret;
  }

  public void DoAttackRounds(Mob target, int hand, bool IsFromSpell) {
    questinterfacePINVOKE.Client_DoAttackRounds__SWIG_0(swigCPtr, Mob.getCPtr(target), hand, IsFromSpell);
  }

  public void DoAttackRounds(Mob target, int hand) {
    questinterfacePINVOKE.Client_DoAttackRounds__SWIG_1(swigCPtr, Mob.getCPtr(target), hand);
  }

  public override void AI_Init() {
    questinterfacePINVOKE.Client_AI_Init(swigCPtr);
  }

  public override void AI_Start(uint iMoveDelay) {
    questinterfacePINVOKE.Client_AI_Start__SWIG_0(swigCPtr, iMoveDelay);
  }

  public override void AI_Start() {
    questinterfacePINVOKE.Client_AI_Start__SWIG_1(swigCPtr);
  }

  public override void AI_Stop() {
    questinterfacePINVOKE.Client_AI_Stop(swigCPtr);
  }

  public override void AI_Process() {
    questinterfacePINVOKE.Client_AI_Process(swigCPtr);
  }

  public void AI_SpellCast() {
    questinterfacePINVOKE.Client_AI_SpellCast(swigCPtr);
  }

  public void Trader_ShowItems() {
    questinterfacePINVOKE.Client_Trader_ShowItems(swigCPtr);
  }

  public void Trader_CustomerBrowsing(Client Customer) {
    questinterfacePINVOKE.Client_Trader_CustomerBrowsing(swigCPtr, Client.getCPtr(Customer));
  }

  public void Trader_EndTrader() {
    questinterfacePINVOKE.Client_Trader_EndTrader(swigCPtr);
  }

  public void Trader_StartTrader() {
    questinterfacePINVOKE.Client_Trader_StartTrader(swigCPtr);
  }

  public byte WithCustomer(ushort NewCustomer) {
    byte ret = questinterfacePINVOKE.Client_WithCustomer(swigCPtr, NewCustomer);
    return ret;
  }

  public void KeyRingLoad() {
    questinterfacePINVOKE.Client_KeyRingLoad(swigCPtr);
  }

  public void KeyRingAdd(uint item_id) {
    questinterfacePINVOKE.Client_KeyRingAdd(swigCPtr, item_id);
  }

  public bool KeyRingCheck(uint item_id) {
    bool ret = questinterfacePINVOKE.Client_KeyRingCheck(swigCPtr, item_id);
    return ret;
  }

  public void KeyRingList() {
    questinterfacePINVOKE.Client_KeyRingList(swigCPtr);
  }

  public override bool IsClient() {
    bool ret = questinterfacePINVOKE.Client_IsClient(swigCPtr);
    return ret;
  }

  public override bool IsOfClientBot() {
    bool ret = questinterfacePINVOKE.Client_IsOfClientBot(swigCPtr);
    return ret;
  }

  public override bool IsOfClientBotMerc() {
    bool ret = questinterfacePINVOKE.Client_IsOfClientBotMerc(swigCPtr);
    return ret;
  }

  public void CompleteConnect() {
    questinterfacePINVOKE.Client_CompleteConnect(swigCPtr);
  }

  public bool TryStacking(SWIGTYPE_p_EQ__ItemInstance item, byte type, bool try_worn, bool try_cursor) {
    bool ret = questinterfacePINVOKE.Client_TryStacking__SWIG_0(swigCPtr, SWIGTYPE_p_EQ__ItemInstance.getCPtr(item), type, try_worn, try_cursor);
    return ret;
  }

  public bool TryStacking(SWIGTYPE_p_EQ__ItemInstance item, byte type, bool try_worn) {
    bool ret = questinterfacePINVOKE.Client_TryStacking__SWIG_1(swigCPtr, SWIGTYPE_p_EQ__ItemInstance.getCPtr(item), type, try_worn);
    return ret;
  }

  public bool TryStacking(SWIGTYPE_p_EQ__ItemInstance item, byte type) {
    bool ret = questinterfacePINVOKE.Client_TryStacking__SWIG_2(swigCPtr, SWIGTYPE_p_EQ__ItemInstance.getCPtr(item), type);
    return ret;
  }

  public bool TryStacking(SWIGTYPE_p_EQ__ItemInstance item) {
    bool ret = questinterfacePINVOKE.Client_TryStacking__SWIG_3(swigCPtr, SWIGTYPE_p_EQ__ItemInstance.getCPtr(item));
    return ret;
  }

  public void SendTraderPacket(Client trader, uint Unknown72) {
    questinterfacePINVOKE.Client_SendTraderPacket__SWIG_0(swigCPtr, Client.getCPtr(trader), Unknown72);
  }

  public void SendTraderPacket(Client trader) {
    questinterfacePINVOKE.Client_SendTraderPacket__SWIG_1(swigCPtr, Client.getCPtr(trader));
  }

  public void SendBuyerPacket(Client Buyer) {
    questinterfacePINVOKE.Client_SendBuyerPacket(swigCPtr, Client.getCPtr(Buyer));
  }

  public SWIGTYPE_p_GetItems_Struct GetTraderItems() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Client_GetTraderItems(swigCPtr);
    SWIGTYPE_p_GetItems_Struct ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_GetItems_Struct(cPtr, false);
    return ret;
  }

  public void SendBazaarWelcome() {
    questinterfacePINVOKE.Client_SendBazaarWelcome(swigCPtr);
  }

  public void DyeArmor(SWIGTYPE_p_EQ__TintProfile dye) {
    questinterfacePINVOKE.Client_DyeArmor(swigCPtr, SWIGTYPE_p_EQ__TintProfile.getCPtr(dye));
  }

  public void DyeArmorBySlot(byte slot, byte red, byte green, byte blue, byte use_tint) {
    questinterfacePINVOKE.Client_DyeArmorBySlot__SWIG_0(swigCPtr, slot, red, green, blue, use_tint);
  }

  public void DyeArmorBySlot(byte slot, byte red, byte green, byte blue) {
    questinterfacePINVOKE.Client_DyeArmorBySlot__SWIG_1(swigCPtr, slot, red, green, blue);
  }

  public byte SlotConvert(byte slot, bool bracer) {
    byte ret = questinterfacePINVOKE.Client_SlotConvert__SWIG_0(swigCPtr, slot, bracer);
    return ret;
  }

  public byte SlotConvert(byte slot) {
    byte ret = questinterfacePINVOKE.Client_SlotConvert__SWIG_1(swigCPtr, slot);
    return ret;
  }

  public override void MessageString(uint type, uint string_id, uint distance) {
    questinterfacePINVOKE.Client_MessageString__SWIG_0(swigCPtr, type, string_id, distance);
  }

  public override void MessageString(uint type, uint string_id) {
    questinterfacePINVOKE.Client_MessageString__SWIG_1(swigCPtr, type, string_id);
  }

  public override void MessageString(uint type, uint string_id, string message, string message2, string message3, string message4, string message5, string message6, string message7, string message8, string message9, uint distance) {
    questinterfacePINVOKE.Client_MessageString__SWIG_2(swigCPtr, type, string_id, message, message2, message3, message4, message5, message6, message7, message8, message9, distance);
  }

  public override void MessageString(uint type, uint string_id, string message, string message2, string message3, string message4, string message5, string message6, string message7, string message8, string message9) {
    questinterfacePINVOKE.Client_MessageString__SWIG_3(swigCPtr, type, string_id, message, message2, message3, message4, message5, message6, message7, message8, message9);
  }

  public override void MessageString(uint type, uint string_id, string message, string message2, string message3, string message4, string message5, string message6, string message7, string message8) {
    questinterfacePINVOKE.Client_MessageString__SWIG_4(swigCPtr, type, string_id, message, message2, message3, message4, message5, message6, message7, message8);
  }

  public override void MessageString(uint type, uint string_id, string message, string message2, string message3, string message4, string message5, string message6, string message7) {
    questinterfacePINVOKE.Client_MessageString__SWIG_5(swigCPtr, type, string_id, message, message2, message3, message4, message5, message6, message7);
  }

  public override void MessageString(uint type, uint string_id, string message, string message2, string message3, string message4, string message5, string message6) {
    questinterfacePINVOKE.Client_MessageString__SWIG_6(swigCPtr, type, string_id, message, message2, message3, message4, message5, message6);
  }

  public override void MessageString(uint type, uint string_id, string message, string message2, string message3, string message4, string message5) {
    questinterfacePINVOKE.Client_MessageString__SWIG_7(swigCPtr, type, string_id, message, message2, message3, message4, message5);
  }

  public override void MessageString(uint type, uint string_id, string message, string message2, string message3, string message4) {
    questinterfacePINVOKE.Client_MessageString__SWIG_8(swigCPtr, type, string_id, message, message2, message3, message4);
  }

  public override void MessageString(uint type, uint string_id, string message, string message2, string message3) {
    questinterfacePINVOKE.Client_MessageString__SWIG_9(swigCPtr, type, string_id, message, message2, message3);
  }

  public override void MessageString(uint type, uint string_id, string message, string message2) {
    questinterfacePINVOKE.Client_MessageString__SWIG_10(swigCPtr, type, string_id, message, message2);
  }

  public override void MessageString(uint type, uint string_id, string message) {
    questinterfacePINVOKE.Client_MessageString__SWIG_11(swigCPtr, type, string_id, message);
  }

  public void MessageString(SWIGTYPE_p_CZClientMessageString_Struct msg) {
    questinterfacePINVOKE.Client_MessageString__SWIG_12(swigCPtr, SWIGTYPE_p_CZClientMessageString_Struct.getCPtr(msg));
  }

  public bool FilteredMessageCheck(Mob sender, SWIGTYPE_p_eqFilterType filter) {
    bool ret = questinterfacePINVOKE.Client_FilteredMessageCheck(swigCPtr, Mob.getCPtr(sender), SWIGTYPE_p_eqFilterType.getCPtr(filter));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void FilteredMessageString(Mob sender, uint type, SWIGTYPE_p_eqFilterType filter, uint string_id) {
    questinterfacePINVOKE.Client_FilteredMessageString__SWIG_0(swigCPtr, Mob.getCPtr(sender), type, SWIGTYPE_p_eqFilterType.getCPtr(filter), string_id);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void FilteredMessageString(Mob sender, uint type, SWIGTYPE_p_eqFilterType filter, uint string_id, string message1, string message2, string message3, string message4, string message5, string message6, string message7, string message8, string message9) {
    questinterfacePINVOKE.Client_FilteredMessageString__SWIG_1(swigCPtr, Mob.getCPtr(sender), type, SWIGTYPE_p_eqFilterType.getCPtr(filter), string_id, message1, message2, message3, message4, message5, message6, message7, message8, message9);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void FilteredMessageString(Mob sender, uint type, SWIGTYPE_p_eqFilterType filter, uint string_id, string message1, string message2, string message3, string message4, string message5, string message6, string message7, string message8) {
    questinterfacePINVOKE.Client_FilteredMessageString__SWIG_2(swigCPtr, Mob.getCPtr(sender), type, SWIGTYPE_p_eqFilterType.getCPtr(filter), string_id, message1, message2, message3, message4, message5, message6, message7, message8);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void FilteredMessageString(Mob sender, uint type, SWIGTYPE_p_eqFilterType filter, uint string_id, string message1, string message2, string message3, string message4, string message5, string message6, string message7) {
    questinterfacePINVOKE.Client_FilteredMessageString__SWIG_3(swigCPtr, Mob.getCPtr(sender), type, SWIGTYPE_p_eqFilterType.getCPtr(filter), string_id, message1, message2, message3, message4, message5, message6, message7);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void FilteredMessageString(Mob sender, uint type, SWIGTYPE_p_eqFilterType filter, uint string_id, string message1, string message2, string message3, string message4, string message5, string message6) {
    questinterfacePINVOKE.Client_FilteredMessageString__SWIG_4(swigCPtr, Mob.getCPtr(sender), type, SWIGTYPE_p_eqFilterType.getCPtr(filter), string_id, message1, message2, message3, message4, message5, message6);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void FilteredMessageString(Mob sender, uint type, SWIGTYPE_p_eqFilterType filter, uint string_id, string message1, string message2, string message3, string message4, string message5) {
    questinterfacePINVOKE.Client_FilteredMessageString__SWIG_5(swigCPtr, Mob.getCPtr(sender), type, SWIGTYPE_p_eqFilterType.getCPtr(filter), string_id, message1, message2, message3, message4, message5);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void FilteredMessageString(Mob sender, uint type, SWIGTYPE_p_eqFilterType filter, uint string_id, string message1, string message2, string message3, string message4) {
    questinterfacePINVOKE.Client_FilteredMessageString__SWIG_6(swigCPtr, Mob.getCPtr(sender), type, SWIGTYPE_p_eqFilterType.getCPtr(filter), string_id, message1, message2, message3, message4);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void FilteredMessageString(Mob sender, uint type, SWIGTYPE_p_eqFilterType filter, uint string_id, string message1, string message2, string message3) {
    questinterfacePINVOKE.Client_FilteredMessageString__SWIG_7(swigCPtr, Mob.getCPtr(sender), type, SWIGTYPE_p_eqFilterType.getCPtr(filter), string_id, message1, message2, message3);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void FilteredMessageString(Mob sender, uint type, SWIGTYPE_p_eqFilterType filter, uint string_id, string message1, string message2) {
    questinterfacePINVOKE.Client_FilteredMessageString__SWIG_8(swigCPtr, Mob.getCPtr(sender), type, SWIGTYPE_p_eqFilterType.getCPtr(filter), string_id, message1, message2);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void FilteredMessageString(Mob sender, uint type, SWIGTYPE_p_eqFilterType filter, uint string_id, string message1) {
    questinterfacePINVOKE.Client_FilteredMessageString__SWIG_9(swigCPtr, Mob.getCPtr(sender), type, SWIGTYPE_p_eqFilterType.getCPtr(filter), string_id, message1);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Tell_StringID(uint string_id, string who, string message) {
    questinterfacePINVOKE.Client_Tell_StringID(swigCPtr, string_id, who, message);
  }

  public void SendColoredText(uint color, SWIGTYPE_p_std__string message) {
    questinterfacePINVOKE.Client_SendColoredText(swigCPtr, color, SWIGTYPE_p_std__string.getCPtr(message));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SendBazaarResults(uint trader_id, uint in_class, uint in_race, uint item_stat, uint item_slot, uint item_type, string item_name, uint min_price, uint max_price) {
    questinterfacePINVOKE.Client_SendBazaarResults(swigCPtr, trader_id, in_class, in_race, item_stat, item_slot, item_type, item_name, min_price, max_price);
  }

  public void SendTraderItem(uint item_id, ushort quantity) {
    questinterfacePINVOKE.Client_SendTraderItem(swigCPtr, item_id, quantity);
  }

  public ushort FindTraderItem(int SerialNumber, ushort Quantity) {
    ushort ret = questinterfacePINVOKE.Client_FindTraderItem(swigCPtr, SerialNumber, Quantity);
    return ret;
  }

  public uint FindTraderItemSerialNumber(int ItemID) {
    uint ret = questinterfacePINVOKE.Client_FindTraderItemSerialNumber(swigCPtr, ItemID);
    return ret;
  }

  public SWIGTYPE_p_EQ__ItemInstance FindTraderItemBySerialNumber(int SerialNumber) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Client_FindTraderItemBySerialNumber(swigCPtr, SerialNumber);
    SWIGTYPE_p_EQ__ItemInstance ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_EQ__ItemInstance(cPtr, false);
    return ret;
  }

  public void FindAndNukeTraderItem(int item_id, short quantity, Client customer, ushort traderslot) {
    questinterfacePINVOKE.Client_FindAndNukeTraderItem(swigCPtr, item_id, quantity, Client.getCPtr(customer), traderslot);
  }

  public void NukeTraderItem(ushort slot, short charges, short quantity, Client customer, ushort traderslot, int uniqueid, int itemid) {
    questinterfacePINVOKE.Client_NukeTraderItem__SWIG_0(swigCPtr, slot, charges, quantity, Client.getCPtr(customer), traderslot, uniqueid, itemid);
  }

  public void NukeTraderItem(ushort slot, short charges, short quantity, Client customer, ushort traderslot, int uniqueid) {
    questinterfacePINVOKE.Client_NukeTraderItem__SWIG_1(swigCPtr, slot, charges, quantity, Client.getCPtr(customer), traderslot, uniqueid);
  }

  public void ReturnTraderReq(SWIGTYPE_p_EQApplicationPacket app, short traderitemcharges, uint itemid) {
    questinterfacePINVOKE.Client_ReturnTraderReq__SWIG_0(swigCPtr, SWIGTYPE_p_EQApplicationPacket.getCPtr(app), traderitemcharges, itemid);
  }

  public void ReturnTraderReq(SWIGTYPE_p_EQApplicationPacket app, short traderitemcharges) {
    questinterfacePINVOKE.Client_ReturnTraderReq__SWIG_1(swigCPtr, SWIGTYPE_p_EQApplicationPacket.getCPtr(app), traderitemcharges);
  }

  public void TradeRequestFailed(SWIGTYPE_p_EQApplicationPacket app) {
    questinterfacePINVOKE.Client_TradeRequestFailed(swigCPtr, SWIGTYPE_p_EQApplicationPacket.getCPtr(app));
  }

  public void BuyTraderItem(SWIGTYPE_p_TraderBuy_Struct tbs, Client trader, SWIGTYPE_p_EQApplicationPacket app) {
    questinterfacePINVOKE.Client_BuyTraderItem(swigCPtr, SWIGTYPE_p_TraderBuy_Struct.getCPtr(tbs), Client.getCPtr(trader), SWIGTYPE_p_EQApplicationPacket.getCPtr(app));
  }

  public void FinishTrade(Mob with, bool finalizer, SWIGTYPE_p_void event_entry, SWIGTYPE_p_std__listT_void_p_t event_details) {
    questinterfacePINVOKE.Client_FinishTrade__SWIG_0(swigCPtr, Mob.getCPtr(with), finalizer, SWIGTYPE_p_void.getCPtr(event_entry), SWIGTYPE_p_std__listT_void_p_t.getCPtr(event_details));
  }

  public void FinishTrade(Mob with, bool finalizer, SWIGTYPE_p_void event_entry) {
    questinterfacePINVOKE.Client_FinishTrade__SWIG_1(swigCPtr, Mob.getCPtr(with), finalizer, SWIGTYPE_p_void.getCPtr(event_entry));
  }

  public void FinishTrade(Mob with, bool finalizer) {
    questinterfacePINVOKE.Client_FinishTrade__SWIG_2(swigCPtr, Mob.getCPtr(with), finalizer);
  }

  public void FinishTrade(Mob with) {
    questinterfacePINVOKE.Client_FinishTrade__SWIG_3(swigCPtr, Mob.getCPtr(with));
  }

  public void SendZonePoints() {
    questinterfacePINVOKE.Client_SendZonePoints(swigCPtr);
  }

  public void SendBuyerResults(string SearchQuery, uint SearchID) {
    questinterfacePINVOKE.Client_SendBuyerResults(swigCPtr, SearchQuery, SearchID);
  }

  public void ShowBuyLines(SWIGTYPE_p_EQApplicationPacket app) {
    questinterfacePINVOKE.Client_ShowBuyLines(swigCPtr, SWIGTYPE_p_EQApplicationPacket.getCPtr(app));
  }

  public void SellToBuyer(SWIGTYPE_p_EQApplicationPacket app) {
    questinterfacePINVOKE.Client_SellToBuyer(swigCPtr, SWIGTYPE_p_EQApplicationPacket.getCPtr(app));
  }

  public void ToggleBuyerMode(bool TurnOn) {
    questinterfacePINVOKE.Client_ToggleBuyerMode(swigCPtr, TurnOn);
  }

  public void UpdateBuyLine(SWIGTYPE_p_EQApplicationPacket app) {
    questinterfacePINVOKE.Client_UpdateBuyLine(swigCPtr, SWIGTYPE_p_EQApplicationPacket.getCPtr(app));
  }

  public void BuyerItemSearch(SWIGTYPE_p_EQApplicationPacket app) {
    questinterfacePINVOKE.Client_BuyerItemSearch(swigCPtr, SWIGTYPE_p_EQApplicationPacket.getCPtr(app));
  }

  public void SetBuyerWelcomeMessage(string WelcomeMessage) {
    questinterfacePINVOKE.Client_SetBuyerWelcomeMessage(swigCPtr, WelcomeMessage);
  }

  public string GetBuyerWelcomeMessage() {
    string ret = questinterfacePINVOKE.Client_GetBuyerWelcomeMessage(swigCPtr);
    return ret;
  }

  public override void FillSpawnStruct(SWIGTYPE_p_NewSpawn_Struct ns, Mob ForWho) {
    questinterfacePINVOKE.Client_FillSpawnStruct(swigCPtr, SWIGTYPE_p_NewSpawn_Struct.getCPtr(ns), Mob.getCPtr(ForWho));
  }

  public override bool ShouldISpawnFor(Client c) {
    bool ret = questinterfacePINVOKE.Client_ShouldISpawnFor(swigCPtr, Client.getCPtr(c));
    return ret;
  }

  public override bool Process() {
    bool ret = questinterfacePINVOKE.Client_Process(swigCPtr);
    return ret;
  }

  public void QueuePacket(SWIGTYPE_p_EQApplicationPacket app, bool ack_req, Mob.CLIENT_CONN_STATUS arg2, SWIGTYPE_p_eqFilterType filter) {
    questinterfacePINVOKE.Client_QueuePacket__SWIG_0(swigCPtr, SWIGTYPE_p_EQApplicationPacket.getCPtr(app), ack_req, (int)arg2, SWIGTYPE_p_eqFilterType.getCPtr(filter));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void QueuePacket(SWIGTYPE_p_EQApplicationPacket app, bool ack_req, Mob.CLIENT_CONN_STATUS arg2) {
    questinterfacePINVOKE.Client_QueuePacket__SWIG_1(swigCPtr, SWIGTYPE_p_EQApplicationPacket.getCPtr(app), ack_req, (int)arg2);
  }

  public void QueuePacket(SWIGTYPE_p_EQApplicationPacket app, bool ack_req) {
    questinterfacePINVOKE.Client_QueuePacket__SWIG_2(swigCPtr, SWIGTYPE_p_EQApplicationPacket.getCPtr(app), ack_req);
  }

  public void QueuePacket(SWIGTYPE_p_EQApplicationPacket app) {
    questinterfacePINVOKE.Client_QueuePacket__SWIG_3(swigCPtr, SWIGTYPE_p_EQApplicationPacket.getCPtr(app));
  }

  public void FastQueuePacket(SWIGTYPE_p_p_EQApplicationPacket app, bool ack_req, Mob.CLIENT_CONN_STATUS arg2) {
    questinterfacePINVOKE.Client_FastQueuePacket__SWIG_0(swigCPtr, SWIGTYPE_p_p_EQApplicationPacket.getCPtr(app), ack_req, (int)arg2);
  }

  public void FastQueuePacket(SWIGTYPE_p_p_EQApplicationPacket app, bool ack_req) {
    questinterfacePINVOKE.Client_FastQueuePacket__SWIG_1(swigCPtr, SWIGTYPE_p_p_EQApplicationPacket.getCPtr(app), ack_req);
  }

  public void FastQueuePacket(SWIGTYPE_p_p_EQApplicationPacket app) {
    questinterfacePINVOKE.Client_FastQueuePacket__SWIG_2(swigCPtr, SWIGTYPE_p_p_EQApplicationPacket.getCPtr(app));
  }

  public void ChannelMessageReceived(byte chan_num, byte language, byte lang_skill, string orig_message, string targetname, bool is_silent) {
    questinterfacePINVOKE.Client_ChannelMessageReceived__SWIG_0(swigCPtr, chan_num, language, lang_skill, orig_message, targetname, is_silent);
  }

  public void ChannelMessageReceived(byte chan_num, byte language, byte lang_skill, string orig_message, string targetname) {
    questinterfacePINVOKE.Client_ChannelMessageReceived__SWIG_1(swigCPtr, chan_num, language, lang_skill, orig_message, targetname);
  }

  public void ChannelMessageReceived(byte chan_num, byte language, byte lang_skill, string orig_message) {
    questinterfacePINVOKE.Client_ChannelMessageReceived__SWIG_2(swigCPtr, chan_num, language, lang_skill, orig_message);
  }

  public void ChannelMessageSend(string from, string to, byte channel_id, byte language_id, byte language_skill, string message) {
    questinterfacePINVOKE.Client_ChannelMessageSend(swigCPtr, from, to, channel_id, language_id, language_skill, message);
  }

  public override void Message(uint type, string message) {
    questinterfacePINVOKE.Client_Message(swigCPtr, type, message);
  }

  public void FilteredMessage(Mob sender, uint type, SWIGTYPE_p_eqFilterType filter, string message) {
    questinterfacePINVOKE.Client_FilteredMessage(swigCPtr, Mob.getCPtr(sender), type, SWIGTYPE_p_eqFilterType.getCPtr(filter), message);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void VoiceMacroReceived(uint Type, string Target, uint MacroNumber) {
    questinterfacePINVOKE.Client_VoiceMacroReceived(swigCPtr, Type, Target, MacroNumber);
  }

  public void SendSound() {
    questinterfacePINVOKE.Client_SendSound(swigCPtr);
  }

  public void LearnRecipe(uint recipe_id) {
    questinterfacePINVOKE.Client_LearnRecipe(swigCPtr, recipe_id);
  }

  public int GetRecipeMadeCount(uint recipe_id) {
    int ret = questinterfacePINVOKE.Client_GetRecipeMadeCount(swigCPtr, recipe_id);
    return ret;
  }

  public bool HasRecipeLearned(uint recipe_id) {
    bool ret = questinterfacePINVOKE.Client_HasRecipeLearned(swigCPtr, recipe_id);
    return ret;
  }

  public bool CanIncreaseTradeskill(SWIGTYPE_p_EQ__skills__SkillType tradeskill) {
    bool ret = questinterfacePINVOKE.Client_CanIncreaseTradeskill(swigCPtr, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(tradeskill));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetRevoked() {
    bool ret = questinterfacePINVOKE.Client_GetRevoked(swigCPtr);
    return ret;
  }

  public void SetRevoked(bool rev) {
    questinterfacePINVOKE.Client_SetRevoked(swigCPtr, rev);
  }

  public uint GetIP() {
    uint ret = questinterfacePINVOKE.Client_GetIP(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_std__string GetIPString() {
    SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(questinterfacePINVOKE.Client_GetIPString(swigCPtr), true);
    return ret;
  }

  public int GetIPExemption() {
    int ret = questinterfacePINVOKE.Client_GetIPExemption(swigCPtr);
    return ret;
  }

  public void SetIPExemption(int exemption_amount) {
    questinterfacePINVOKE.Client_SetIPExemption(swigCPtr, exemption_amount);
  }

  public bool GetHideMe() {
    bool ret = questinterfacePINVOKE.Client_GetHideMe(swigCPtr);
    return ret;
  }

  public void SetHideMe(bool flag) {
    questinterfacePINVOKE.Client_SetHideMe(swigCPtr, flag);
  }

  public ushort GetPort() {
    ushort ret = questinterfacePINVOKE.Client_GetPort(swigCPtr);
    return ret;
  }

  public bool IsDead() {
    bool ret = questinterfacePINVOKE.Client_IsDead(swigCPtr);
    return ret;
  }

  public bool IsUnconscious() {
    bool ret = questinterfacePINVOKE.Client_IsUnconscious(swigCPtr);
    return ret;
  }

  public bool IsLFP() {
    bool ret = questinterfacePINVOKE.Client_IsLFP(swigCPtr);
    return ret;
  }

  public void UpdateLFP() {
    questinterfacePINVOKE.Client_UpdateLFP(swigCPtr);
  }

  public override bool Save() {
    bool ret = questinterfacePINVOKE.Client_Save__SWIG_0(swigCPtr);
    return ret;
  }

  public bool Save(byte iCommitNow) {
    bool ret = questinterfacePINVOKE.Client_Save__SWIG_1(swigCPtr, iCommitNow);
    return ret;
  }

  public bool SaveCurrency() {
    bool ret = questinterfacePINVOKE.Client_SaveCurrency(swigCPtr);
    return ret;
  }

  public bool SaveAA() {
    bool ret = questinterfacePINVOKE.Client_SaveAA(swigCPtr);
    return ret;
  }

  public void RemoveExpendedAA(int aa_id) {
    questinterfacePINVOKE.Client_RemoveExpendedAA(swigCPtr, aa_id);
  }

  public bool ClientDataLoaded() {
    bool ret = questinterfacePINVOKE.Client_ClientDataLoaded(swigCPtr);
    return ret;
  }

  public bool Connected() {
    bool ret = questinterfacePINVOKE.Client_Connected(swigCPtr);
    return ret;
  }

  public override bool InZone() {
    bool ret = questinterfacePINVOKE.Client_InZone(swigCPtr);
    return ret;
  }

  public void Disconnect() {
    questinterfacePINVOKE.Client_Disconnect(swigCPtr);
  }

  public bool IsLD() {
    bool ret = questinterfacePINVOKE.Client_IsLD(swigCPtr);
    return ret;
  }

  public void Kick(SWIGTYPE_p_std__string reason) {
    questinterfacePINVOKE.Client_Kick(swigCPtr, SWIGTYPE_p_std__string.getCPtr(reason));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void WorldKick() {
    questinterfacePINVOKE.Client_WorldKick(swigCPtr);
  }

  public byte GetAnon() {
    byte ret = questinterfacePINVOKE.Client_GetAnon(swigCPtr);
    return ret;
  }

  public byte GetAFK() {
    byte ret = questinterfacePINVOKE.Client_GetAFK(swigCPtr);
    return ret;
  }

  public void SetAnon(byte anon_flag) {
    questinterfacePINVOKE.Client_SetAnon(swigCPtr, anon_flag);
  }

  public void SetAFK(byte afk_flag) {
    questinterfacePINVOKE.Client_SetAFK(swigCPtr, afk_flag);
  }

  public SWIGTYPE_p_PlayerProfile_Struct GetPP() {
    SWIGTYPE_p_PlayerProfile_Struct ret = new SWIGTYPE_p_PlayerProfile_Struct(questinterfacePINVOKE.Client_GetPP(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_ExtendedProfile_Struct GetEPP() {
    SWIGTYPE_p_ExtendedProfile_Struct ret = new SWIGTYPE_p_ExtendedProfile_Struct(questinterfacePINVOKE.Client_GetEPP(swigCPtr), false);
    return ret;
  }

  public virtual SWIGTYPE_p_EQ__InventoryProfile GetInv() {
    SWIGTYPE_p_EQ__InventoryProfile ret = new SWIGTYPE_p_EQ__InventoryProfile(questinterfacePINVOKE.Client_GetInv__SWIG_0(swigCPtr), false);
    return ret;
  }

  public PetInfo GetPetInfo(int pet_info_type) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Client_GetPetInfo(swigCPtr, pet_info_type);
    PetInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new PetInfo(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_InspectMessage_Struct GetInspectMessage() {
    SWIGTYPE_p_InspectMessage_Struct ret = new SWIGTYPE_p_InspectMessage_Struct(questinterfacePINVOKE.Client_GetInspectMessage__SWIG_0(swigCPtr), false);
    return ret;
  }

  public void ReloadExpansionProfileSetting() {
    questinterfacePINVOKE.Client_ReloadExpansionProfileSetting(swigCPtr);
  }

  public void SetPetCommandState(int button, int state) {
    questinterfacePINVOKE.Client_SetPetCommandState(swigCPtr, button, state);
  }

  public bool AutoAttackEnabled() {
    bool ret = questinterfacePINVOKE.Client_AutoAttackEnabled(swigCPtr);
    return ret;
  }

  public bool AutoFireEnabled() {
    bool ret = questinterfacePINVOKE.Client_AutoFireEnabled(swigCPtr);
    return ret;
  }

  public bool ChangeFirstName(string in_firstname, string gmname) {
    bool ret = questinterfacePINVOKE.Client_ChangeFirstName(swigCPtr, in_firstname, gmname);
    return ret;
  }

  public void Duck() {
    questinterfacePINVOKE.Client_Duck(swigCPtr);
  }

  public void Stand() {
    questinterfacePINVOKE.Client_Stand(swigCPtr);
  }

  public void Sit() {
    questinterfacePINVOKE.Client_Sit(swigCPtr);
  }

  public override void SetMaxHP() {
    questinterfacePINVOKE.Client_SetMaxHP(swigCPtr);
  }

  public int LevelRegen() {
    int ret = questinterfacePINVOKE.Client_LevelRegen(swigCPtr);
    return ret;
  }

  public void SetGM(bool toggle) {
    questinterfacePINVOKE.Client_SetGM(swigCPtr, toggle);
  }

  public void SetPVP(bool toggle, bool message) {
    questinterfacePINVOKE.Client_SetPVP__SWIG_0(swigCPtr, toggle, message);
  }

  public void SetPVP(bool toggle) {
    questinterfacePINVOKE.Client_SetPVP__SWIG_1(swigCPtr, toggle);
  }

  public bool GetPVP(bool inc_temp) {
    bool ret = questinterfacePINVOKE.Client_GetPVP__SWIG_0(swigCPtr, inc_temp);
    return ret;
  }

  public bool GetPVP() {
    bool ret = questinterfacePINVOKE.Client_GetPVP__SWIG_1(swigCPtr);
    return ret;
  }

  public bool GetGM() {
    bool ret = questinterfacePINVOKE.Client_GetGM(swigCPtr);
    return ret;
  }

  public void SetBaseClass(uint i) {
    questinterfacePINVOKE.Client_SetBaseClass(swigCPtr, i);
  }

  public void SetBaseRace(uint i) {
    questinterfacePINVOKE.Client_SetBaseRace(swigCPtr, i);
  }

  public void SetBaseGender(uint i) {
    questinterfacePINVOKE.Client_SetBaseGender(swigCPtr, i);
  }

  public void SetDeity(uint i) {
    questinterfacePINVOKE.Client_SetDeity(swigCPtr, i);
  }

  public void SetTrackingID(uint entity_id) {
    questinterfacePINVOKE.Client_SetTrackingID(swigCPtr, entity_id);
  }

  public byte GetLevel2() {
    byte ret = questinterfacePINVOKE.Client_GetLevel2(swigCPtr);
    return ret;
  }

  public override ushort GetBaseRace() {
    ushort ret = questinterfacePINVOKE.Client_GetBaseRace(swigCPtr);
    return ret;
  }

  public ushort GetBaseClass() {
    ushort ret = questinterfacePINVOKE.Client_GetBaseClass(swigCPtr);
    return ret;
  }

  public override byte GetBaseGender() {
    byte ret = questinterfacePINVOKE.Client_GetBaseGender(swigCPtr);
    return ret;
  }

  public byte GetBaseFace() {
    byte ret = questinterfacePINVOKE.Client_GetBaseFace(swigCPtr);
    return ret;
  }

  public byte GetBaseHairColor() {
    byte ret = questinterfacePINVOKE.Client_GetBaseHairColor(swigCPtr);
    return ret;
  }

  public byte GetBaseBeardColor() {
    byte ret = questinterfacePINVOKE.Client_GetBaseBeardColor(swigCPtr);
    return ret;
  }

  public byte GetBaseEyeColor() {
    byte ret = questinterfacePINVOKE.Client_GetBaseEyeColor(swigCPtr);
    return ret;
  }

  public byte GetBaseHairStyle() {
    byte ret = questinterfacePINVOKE.Client_GetBaseHairStyle(swigCPtr);
    return ret;
  }

  public byte GetBaseBeard() {
    byte ret = questinterfacePINVOKE.Client_GetBaseBeard(swigCPtr);
    return ret;
  }

  public byte GetBaseHeritage() {
    byte ret = questinterfacePINVOKE.Client_GetBaseHeritage(swigCPtr);
    return ret;
  }

  public byte GetBaseTattoo() {
    byte ret = questinterfacePINVOKE.Client_GetBaseTattoo(swigCPtr);
    return ret;
  }

  public byte GetBaseDetails() {
    byte ret = questinterfacePINVOKE.Client_GetBaseDetails(swigCPtr);
    return ret;
  }

  public float GetBindX(uint index) {
    float ret = questinterfacePINVOKE.Client_GetBindX__SWIG_0(swigCPtr, index);
    return ret;
  }

  public float GetBindX() {
    float ret = questinterfacePINVOKE.Client_GetBindX__SWIG_1(swigCPtr);
    return ret;
  }

  public float GetBindY(uint index) {
    float ret = questinterfacePINVOKE.Client_GetBindY__SWIG_0(swigCPtr, index);
    return ret;
  }

  public float GetBindY() {
    float ret = questinterfacePINVOKE.Client_GetBindY__SWIG_1(swigCPtr);
    return ret;
  }

  public float GetBindZ(uint index) {
    float ret = questinterfacePINVOKE.Client_GetBindZ__SWIG_0(swigCPtr, index);
    return ret;
  }

  public float GetBindZ() {
    float ret = questinterfacePINVOKE.Client_GetBindZ__SWIG_1(swigCPtr);
    return ret;
  }

  public float GetBindHeading(uint index) {
    float ret = questinterfacePINVOKE.Client_GetBindHeading__SWIG_0(swigCPtr, index);
    return ret;
  }

  public float GetBindHeading() {
    float ret = questinterfacePINVOKE.Client_GetBindHeading__SWIG_1(swigCPtr);
    return ret;
  }

  public uint GetBindZoneID(uint index) {
    uint ret = questinterfacePINVOKE.Client_GetBindZoneID__SWIG_0(swigCPtr, index);
    return ret;
  }

  public uint GetBindZoneID() {
    uint ret = questinterfacePINVOKE.Client_GetBindZoneID__SWIG_1(swigCPtr);
    return ret;
  }

  public uint GetBindInstanceID(uint index) {
    uint ret = questinterfacePINVOKE.Client_GetBindInstanceID__SWIG_0(swigCPtr, index);
    return ret;
  }

  public uint GetBindInstanceID() {
    uint ret = questinterfacePINVOKE.Client_GetBindInstanceID__SWIG_1(swigCPtr);
    return ret;
  }

  public override long CalcMaxMana() {
    long ret = questinterfacePINVOKE.Client_CalcMaxMana(swigCPtr);
    return ret;
  }

  public long CalcBaseMana() {
    long ret = questinterfacePINVOKE.Client_CalcBaseMana(swigCPtr);
    return ret;
  }

  public new long SetMana(long amount) {
    long ret = questinterfacePINVOKE.Client_SetMana(swigCPtr, amount);
    return ret;
  }

  public override long CalcManaRegenCap() {
    long ret = questinterfacePINVOKE.Client_CalcManaRegenCap(swigCPtr);
    return ret;
  }

  public void EnableAreaHPRegen(int value) {
    questinterfacePINVOKE.Client_EnableAreaHPRegen(swigCPtr, value);
  }

  public void DisableAreaHPRegen() {
    questinterfacePINVOKE.Client_DisableAreaHPRegen(swigCPtr);
  }

  public void EnableAreaManaRegen(int value) {
    questinterfacePINVOKE.Client_EnableAreaManaRegen(swigCPtr, value);
  }

  public void DisableAreaManaRegen() {
    questinterfacePINVOKE.Client_DisableAreaManaRegen(swigCPtr);
  }

  public void EnableAreaEndRegen(int value) {
    questinterfacePINVOKE.Client_EnableAreaEndRegen(swigCPtr, value);
  }

  public void DisableAreaEndRegen() {
    questinterfacePINVOKE.Client_DisableAreaEndRegen(swigCPtr);
  }

  public void EnableAreaRegens(int value) {
    questinterfacePINVOKE.Client_EnableAreaRegens(swigCPtr, value);
  }

  public void DisableAreaRegens() {
    questinterfacePINVOKE.Client_DisableAreaRegens(swigCPtr);
  }

  public void ServerFilter(SWIGTYPE_p_SetServerFilter_Struct filter) {
    questinterfacePINVOKE.Client_ServerFilter(swigCPtr, SWIGTYPE_p_SetServerFilter_Struct.getCPtr(filter));
  }

  public void BulkSendTraderInventory(uint char_id) {
    questinterfacePINVOKE.Client_BulkSendTraderInventory(swigCPtr, char_id);
  }

  public void SendSingleTraderItem(uint char_id, int uniqueid) {
    questinterfacePINVOKE.Client_SendSingleTraderItem(swigCPtr, char_id, uniqueid);
  }

  public void BulkSendMerchantInventory(int merchant_id, int npcid) {
    questinterfacePINVOKE.Client_BulkSendMerchantInventory(swigCPtr, merchant_id, npcid);
  }

  public byte GetLanguageSkill(byte language_id) {
    byte ret = questinterfacePINVOKE.Client_GetLanguageSkill(swigCPtr, language_id);
    return ret;
  }

  public void SendPickPocketResponse(Mob from, uint amt, int type, SWIGTYPE_p_EQ__ItemData item) {
    questinterfacePINVOKE.Client_SendPickPocketResponse__SWIG_0(swigCPtr, Mob.getCPtr(from), amt, type, SWIGTYPE_p_EQ__ItemData.getCPtr(item));
  }

  public void SendPickPocketResponse(Mob from, uint amt, int type) {
    questinterfacePINVOKE.Client_SendPickPocketResponse__SWIG_1(swigCPtr, Mob.getCPtr(from), amt, type);
  }

  public new string GetLastName() {
    string ret = questinterfacePINVOKE.Client_GetLastName(swigCPtr);
    return ret;
  }

  public float ProximityX() {
    float ret = questinterfacePINVOKE.Client_ProximityX(swigCPtr);
    return ret;
  }

  public float ProximityY() {
    float ret = questinterfacePINVOKE.Client_ProximityY(swigCPtr);
    return ret;
  }

  public float ProximityZ() {
    float ret = questinterfacePINVOKE.Client_ProximityZ(swigCPtr);
    return ret;
  }

  public void ClearAllProximities() {
    questinterfacePINVOKE.Client_ClearAllProximities(swigCPtr);
  }

  public void CheckVirtualZoneLines() {
    questinterfacePINVOKE.Client_CheckVirtualZoneLines(swigCPtr);
  }

  public virtual void CalcBonuses() {
    questinterfacePINVOKE.Client_CalcBonuses(swigCPtr);
  }

  public override int GetATKBonus() {
    int ret = questinterfacePINVOKE.Client_GetATKBonus(swigCPtr);
    return ret;
  }

  public virtual int GetHaste() {
    int ret = questinterfacePINVOKE.Client_GetHaste(swigCPtr);
    return ret;
  }

  public int GetRawACNoShield(SWIGTYPE_p_int shield_ac) {
    int ret = questinterfacePINVOKE.Client_GetRawACNoShield(swigCPtr, SWIGTYPE_p_int.getCPtr(shield_ac));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int GetSTR() {
    int ret = questinterfacePINVOKE.Client_GetSTR(swigCPtr);
    return ret;
  }

  public override int GetSTA() {
    int ret = questinterfacePINVOKE.Client_GetSTA(swigCPtr);
    return ret;
  }

  public override int GetDEX() {
    int ret = questinterfacePINVOKE.Client_GetDEX(swigCPtr);
    return ret;
  }

  public override int GetAGI() {
    int ret = questinterfacePINVOKE.Client_GetAGI(swigCPtr);
    return ret;
  }

  public override int GetINT() {
    int ret = questinterfacePINVOKE.Client_GetINT(swigCPtr);
    return ret;
  }

  public override int GetWIS() {
    int ret = questinterfacePINVOKE.Client_GetWIS(swigCPtr);
    return ret;
  }

  public override int GetCHA() {
    int ret = questinterfacePINVOKE.Client_GetCHA(swigCPtr);
    return ret;
  }

  public override int GetMR() {
    int ret = questinterfacePINVOKE.Client_GetMR(swigCPtr);
    return ret;
  }

  public override int GetFR() {
    int ret = questinterfacePINVOKE.Client_GetFR(swigCPtr);
    return ret;
  }

  public override int GetDR() {
    int ret = questinterfacePINVOKE.Client_GetDR(swigCPtr);
    return ret;
  }

  public override int GetPR() {
    int ret = questinterfacePINVOKE.Client_GetPR(swigCPtr);
    return ret;
  }

  public override int GetCR() {
    int ret = questinterfacePINVOKE.Client_GetCR(swigCPtr);
    return ret;
  }

  public override int GetCorrup() {
    int ret = questinterfacePINVOKE.Client_GetCorrup(swigCPtr);
    return ret;
  }

  public override int GetPhR() {
    int ret = questinterfacePINVOKE.Client_GetPhR(swigCPtr);
    return ret;
  }

  public int GetMaxStat() {
    int ret = questinterfacePINVOKE.Client_GetMaxStat(swigCPtr);
    return ret;
  }

  public int GetMaxResist() {
    int ret = questinterfacePINVOKE.Client_GetMaxResist(swigCPtr);
    return ret;
  }

  public override int GetMaxSTR() {
    int ret = questinterfacePINVOKE.Client_GetMaxSTR(swigCPtr);
    return ret;
  }

  public override int GetMaxSTA() {
    int ret = questinterfacePINVOKE.Client_GetMaxSTA(swigCPtr);
    return ret;
  }

  public override int GetMaxDEX() {
    int ret = questinterfacePINVOKE.Client_GetMaxDEX(swigCPtr);
    return ret;
  }

  public override int GetMaxAGI() {
    int ret = questinterfacePINVOKE.Client_GetMaxAGI(swigCPtr);
    return ret;
  }

  public override int GetMaxINT() {
    int ret = questinterfacePINVOKE.Client_GetMaxINT(swigCPtr);
    return ret;
  }

  public override int GetMaxWIS() {
    int ret = questinterfacePINVOKE.Client_GetMaxWIS(swigCPtr);
    return ret;
  }

  public override int GetMaxCHA() {
    int ret = questinterfacePINVOKE.Client_GetMaxCHA(swigCPtr);
    return ret;
  }

  public override int GetMaxMR() {
    int ret = questinterfacePINVOKE.Client_GetMaxMR(swigCPtr);
    return ret;
  }

  public override int GetMaxPR() {
    int ret = questinterfacePINVOKE.Client_GetMaxPR(swigCPtr);
    return ret;
  }

  public override int GetMaxDR() {
    int ret = questinterfacePINVOKE.Client_GetMaxDR(swigCPtr);
    return ret;
  }

  public override int GetMaxCR() {
    int ret = questinterfacePINVOKE.Client_GetMaxCR(swigCPtr);
    return ret;
  }

  public override int GetMaxFR() {
    int ret = questinterfacePINVOKE.Client_GetMaxFR(swigCPtr);
    return ret;
  }

  public int GetMaxCorrup() {
    int ret = questinterfacePINVOKE.Client_GetMaxCorrup(swigCPtr);
    return ret;
  }

  public byte GetBaseSTR() {
    byte ret = questinterfacePINVOKE.Client_GetBaseSTR(swigCPtr);
    return ret;
  }

  public byte GetBaseSTA() {
    byte ret = questinterfacePINVOKE.Client_GetBaseSTA(swigCPtr);
    return ret;
  }

  public byte GetBaseCHA() {
    byte ret = questinterfacePINVOKE.Client_GetBaseCHA(swigCPtr);
    return ret;
  }

  public byte GetBaseDEX() {
    byte ret = questinterfacePINVOKE.Client_GetBaseDEX(swigCPtr);
    return ret;
  }

  public byte GetBaseINT() {
    byte ret = questinterfacePINVOKE.Client_GetBaseINT(swigCPtr);
    return ret;
  }

  public byte GetBaseAGI() {
    byte ret = questinterfacePINVOKE.Client_GetBaseAGI(swigCPtr);
    return ret;
  }

  public byte GetBaseWIS() {
    byte ret = questinterfacePINVOKE.Client_GetBaseWIS(swigCPtr);
    return ret;
  }

  public byte GetBaseCorrup() {
    byte ret = questinterfacePINVOKE.Client_GetBaseCorrup(swigCPtr);
    return ret;
  }

  public byte GetBasePhR() {
    byte ret = questinterfacePINVOKE.Client_GetBasePhR(swigCPtr);
    return ret;
  }

  public override int GetHeroicSTR() {
    int ret = questinterfacePINVOKE.Client_GetHeroicSTR(swigCPtr);
    return ret;
  }

  public override int GetHeroicSTA() {
    int ret = questinterfacePINVOKE.Client_GetHeroicSTA(swigCPtr);
    return ret;
  }

  public override int GetHeroicDEX() {
    int ret = questinterfacePINVOKE.Client_GetHeroicDEX(swigCPtr);
    return ret;
  }

  public override int GetHeroicAGI() {
    int ret = questinterfacePINVOKE.Client_GetHeroicAGI(swigCPtr);
    return ret;
  }

  public override int GetHeroicINT() {
    int ret = questinterfacePINVOKE.Client_GetHeroicINT(swigCPtr);
    return ret;
  }

  public override int GetHeroicWIS() {
    int ret = questinterfacePINVOKE.Client_GetHeroicWIS(swigCPtr);
    return ret;
  }

  public override int GetHeroicCHA() {
    int ret = questinterfacePINVOKE.Client_GetHeroicCHA(swigCPtr);
    return ret;
  }

  public override int GetHeroicMR() {
    int ret = questinterfacePINVOKE.Client_GetHeroicMR(swigCPtr);
    return ret;
  }

  public override int GetHeroicFR() {
    int ret = questinterfacePINVOKE.Client_GetHeroicFR(swigCPtr);
    return ret;
  }

  public override int GetHeroicDR() {
    int ret = questinterfacePINVOKE.Client_GetHeroicDR(swigCPtr);
    return ret;
  }

  public override int GetHeroicPR() {
    int ret = questinterfacePINVOKE.Client_GetHeroicPR(swigCPtr);
    return ret;
  }

  public override int GetHeroicCR() {
    int ret = questinterfacePINVOKE.Client_GetHeroicCR(swigCPtr);
    return ret;
  }

  public virtual int GetHeroicCorrup() {
    int ret = questinterfacePINVOKE.Client_GetHeroicCorrup(swigCPtr);
    return ret;
  }

  public virtual int GetHeroicPhR() {
    int ret = questinterfacePINVOKE.Client_GetHeroicPhR(swigCPtr);
    return ret;
  }

  public virtual int GetShielding() {
    int ret = questinterfacePINVOKE.Client_GetShielding(swigCPtr);
    return ret;
  }

  public virtual int GetSpellShield() {
    int ret = questinterfacePINVOKE.Client_GetSpellShield(swigCPtr);
    return ret;
  }

  public virtual int GetDoTShield() {
    int ret = questinterfacePINVOKE.Client_GetDoTShield(swigCPtr);
    return ret;
  }

  public virtual int GetStunResist() {
    int ret = questinterfacePINVOKE.Client_GetStunResist(swigCPtr);
    return ret;
  }

  public virtual int GetStrikeThrough() {
    int ret = questinterfacePINVOKE.Client_GetStrikeThrough(swigCPtr);
    return ret;
  }

  public virtual int GetAvoidance() {
    int ret = questinterfacePINVOKE.Client_GetAvoidance(swigCPtr);
    return ret;
  }

  public virtual int GetAccuracy() {
    int ret = questinterfacePINVOKE.Client_GetAccuracy(swigCPtr);
    return ret;
  }

  public virtual int GetCombatEffects() {
    int ret = questinterfacePINVOKE.Client_GetCombatEffects(swigCPtr);
    return ret;
  }

  public virtual int GetDS() {
    int ret = questinterfacePINVOKE.Client_GetDS(swigCPtr);
    return ret;
  }

  public override int GetHealAmt() {
    int ret = questinterfacePINVOKE.Client_GetHealAmt(swigCPtr);
    return ret;
  }

  public override int GetSpellDmg() {
    int ret = questinterfacePINVOKE.Client_GetSpellDmg(swigCPtr);
    return ret;
  }

  public virtual int GetClair() {
    int ret = questinterfacePINVOKE.Client_GetClair(swigCPtr);
    return ret;
  }

  public virtual int GetDSMit() {
    int ret = questinterfacePINVOKE.Client_GetDSMit(swigCPtr);
    return ret;
  }

  public virtual int GetSingMod() {
    int ret = questinterfacePINVOKE.Client_GetSingMod(swigCPtr);
    return ret;
  }

  public virtual int GetBrassMod() {
    int ret = questinterfacePINVOKE.Client_GetBrassMod(swigCPtr);
    return ret;
  }

  public virtual int GetPercMod() {
    int ret = questinterfacePINVOKE.Client_GetPercMod(swigCPtr);
    return ret;
  }

  public virtual int GetStringMod() {
    int ret = questinterfacePINVOKE.Client_GetStringMod(swigCPtr);
    return ret;
  }

  public virtual int GetWindMod() {
    int ret = questinterfacePINVOKE.Client_GetWindMod(swigCPtr);
    return ret;
  }

  public override int GetDelayDeath() {
    int ret = questinterfacePINVOKE.Client_GetDelayDeath(swigCPtr);
    return ret;
  }

  public override bool CheckFizzle(ushort spell_id) {
    bool ret = questinterfacePINVOKE.Client_CheckFizzle(swigCPtr, spell_id);
    return ret;
  }

  public override int GetCurrentBuffSlots() {
    int ret = questinterfacePINVOKE.Client_GetCurrentBuffSlots(swigCPtr);
    return ret;
  }

  public override int GetCurrentSongSlots() {
    int ret = questinterfacePINVOKE.Client_GetCurrentSongSlots(swigCPtr);
    return ret;
  }

  public override int GetCurrentDiscSlots() {
    int ret = questinterfacePINVOKE.Client_GetCurrentDiscSlots(swigCPtr);
    return ret;
  }

  public override int GetMaxBuffSlots() {
    int ret = questinterfacePINVOKE.Client_GetMaxBuffSlots(swigCPtr);
    return ret;
  }

  public override int GetMaxSongSlots() {
    int ret = questinterfacePINVOKE.Client_GetMaxSongSlots(swigCPtr);
    return ret;
  }

  public override int GetMaxDiscSlots() {
    int ret = questinterfacePINVOKE.Client_GetMaxDiscSlots(swigCPtr);
    return ret;
  }

  public override int GetMaxTotalSlots() {
    int ret = questinterfacePINVOKE.Client_GetMaxTotalSlots(swigCPtr);
    return ret;
  }

  public override uint GetFirstBuffSlot(bool disc, bool song) {
    uint ret = questinterfacePINVOKE.Client_GetFirstBuffSlot(swigCPtr, disc, song);
    return ret;
  }

  public override uint GetLastBuffSlot(bool disc, bool song) {
    uint ret = questinterfacePINVOKE.Client_GetLastBuffSlot(swigCPtr, disc, song);
    return ret;
  }

  public override void InitializeBuffSlots() {
    questinterfacePINVOKE.Client_InitializeBuffSlots(swigCPtr);
  }

  public override void UninitializeBuffSlots() {
    questinterfacePINVOKE.Client_UninitializeBuffSlots(swigCPtr);
  }

  public int GetBaseHP() {
    int ret = questinterfacePINVOKE.Client_GetBaseHP(swigCPtr);
    return ret;
  }

  public uint GetWeight() {
    uint ret = questinterfacePINVOKE.Client_GetWeight(swigCPtr);
    return ret;
  }

  public void RecalcWeight() {
    questinterfacePINVOKE.Client_RecalcWeight(swigCPtr);
  }

  public uint CalcCurrentWeight() {
    uint ret = questinterfacePINVOKE.Client_CalcCurrentWeight(swigCPtr);
    return ret;
  }

  public uint GetCopper() {
    uint ret = questinterfacePINVOKE.Client_GetCopper(swigCPtr);
    return ret;
  }

  public uint GetSilver() {
    uint ret = questinterfacePINVOKE.Client_GetSilver(swigCPtr);
    return ret;
  }

  public uint GetGold() {
    uint ret = questinterfacePINVOKE.Client_GetGold(swigCPtr);
    return ret;
  }

  public uint GetPlatinum() {
    uint ret = questinterfacePINVOKE.Client_GetPlatinum(swigCPtr);
    return ret;
  }

  public void CalcMaxEndurance() {
    questinterfacePINVOKE.Client_CalcMaxEndurance(swigCPtr);
  }

  public long CalcBaseEndurance() {
    long ret = questinterfacePINVOKE.Client_CalcBaseEndurance(swigCPtr);
    return ret;
  }

  public long CalcEnduranceRegen(bool bCombat) {
    long ret = questinterfacePINVOKE.Client_CalcEnduranceRegen__SWIG_0(swigCPtr, bCombat);
    return ret;
  }

  public long CalcEnduranceRegen() {
    long ret = questinterfacePINVOKE.Client_CalcEnduranceRegen__SWIG_1(swigCPtr);
    return ret;
  }

  public override long GetEndurance() {
    long ret = questinterfacePINVOKE.Client_GetEndurance(swigCPtr);
    return ret;
  }

  public override long GetMaxEndurance() {
    long ret = questinterfacePINVOKE.Client_GetMaxEndurance(swigCPtr);
    return ret;
  }

  public override long CalcEnduranceRegenCap() {
    long ret = questinterfacePINVOKE.Client_CalcEnduranceRegenCap(swigCPtr);
    return ret;
  }

  public override long CalcHPRegenCap() {
    long ret = questinterfacePINVOKE.Client_CalcHPRegenCap(swigCPtr);
    return ret;
  }

  public override byte GetEndurancePercent() {
    byte ret = questinterfacePINVOKE.Client_GetEndurancePercent(swigCPtr);
    return ret;
  }

  public override void SetEndurance(int newEnd) {
    questinterfacePINVOKE.Client_SetEndurance(swigCPtr, newEnd);
  }

  public void DoEnduranceRegen() {
    questinterfacePINVOKE.Client_DoEnduranceRegen(swigCPtr);
  }

  public void DoEnduranceUpkeep() {
    questinterfacePINVOKE.Client_DoEnduranceUpkeep(swigCPtr);
  }

  public uint GetTotalATK() {
    uint ret = questinterfacePINVOKE.Client_GetTotalATK(swigCPtr);
    return ret;
  }

  public uint GetATKRating() {
    uint ret = questinterfacePINVOKE.Client_GetATKRating(swigCPtr);
    return ret;
  }

  public ushort GetPrimarySkillValue() {
    ushort ret = questinterfacePINVOKE.Client_GetPrimarySkillValue(swigCPtr);
    return ret;
  }

  public uint GetEXP() {
    uint ret = questinterfacePINVOKE.Client_GetEXP(swigCPtr);
    return ret;
  }

  public float GetAAEXPModifier(uint zone_id, short instance_version) {
    float ret = questinterfacePINVOKE.Client_GetAAEXPModifier__SWIG_0(swigCPtr, zone_id, instance_version);
    return ret;
  }

  public float GetAAEXPModifier(uint zone_id) {
    float ret = questinterfacePINVOKE.Client_GetAAEXPModifier__SWIG_1(swigCPtr, zone_id);
    return ret;
  }

  public float GetEXPModifier(uint zone_id, short instance_version) {
    float ret = questinterfacePINVOKE.Client_GetEXPModifier__SWIG_0(swigCPtr, zone_id, instance_version);
    return ret;
  }

  public float GetEXPModifier(uint zone_id) {
    float ret = questinterfacePINVOKE.Client_GetEXPModifier__SWIG_1(swigCPtr, zone_id);
    return ret;
  }

  public void SetAAEXPModifier(uint zone_id, float aa_modifier, short instance_version) {
    questinterfacePINVOKE.Client_SetAAEXPModifier__SWIG_0(swigCPtr, zone_id, aa_modifier, instance_version);
  }

  public void SetAAEXPModifier(uint zone_id, float aa_modifier) {
    questinterfacePINVOKE.Client_SetAAEXPModifier__SWIG_1(swigCPtr, zone_id, aa_modifier);
  }

  public void SetEXPModifier(uint zone_id, float exp_modifier, short instance_version) {
    questinterfacePINVOKE.Client_SetEXPModifier__SWIG_0(swigCPtr, zone_id, exp_modifier, instance_version);
  }

  public void SetEXPModifier(uint zone_id, float exp_modifier) {
    questinterfacePINVOKE.Client_SetEXPModifier__SWIG_1(swigCPtr, zone_id, exp_modifier);
  }

  public bool UpdateLDoNPoints(uint theme_id, int points) {
    bool ret = questinterfacePINVOKE.Client_UpdateLDoNPoints(swigCPtr, theme_id, points);
    return ret;
  }

  public void SetLDoNPoints(uint theme_id, uint points) {
    questinterfacePINVOKE.Client_SetLDoNPoints(swigCPtr, theme_id, points);
  }

  public void SetPVPPoints(uint Points) {
    questinterfacePINVOKE.Client_SetPVPPoints(swigCPtr, Points);
  }

  public uint GetPVPPoints() {
    uint ret = questinterfacePINVOKE.Client_GetPVPPoints(swigCPtr);
    return ret;
  }

  public void AddPVPPoints(uint Points) {
    questinterfacePINVOKE.Client_AddPVPPoints(swigCPtr, Points);
  }

  public void AddEbonCrystals(uint amount, bool is_reclaim) {
    questinterfacePINVOKE.Client_AddEbonCrystals__SWIG_0(swigCPtr, amount, is_reclaim);
  }

  public void AddEbonCrystals(uint amount) {
    questinterfacePINVOKE.Client_AddEbonCrystals__SWIG_1(swigCPtr, amount);
  }

  public void AddRadiantCrystals(uint amount, bool is_reclaim) {
    questinterfacePINVOKE.Client_AddRadiantCrystals__SWIG_0(swigCPtr, amount, is_reclaim);
  }

  public void AddRadiantCrystals(uint amount) {
    questinterfacePINVOKE.Client_AddRadiantCrystals__SWIG_1(swigCPtr, amount);
  }

  public void RemoveEbonCrystals(uint amount, bool is_reclaim) {
    questinterfacePINVOKE.Client_RemoveEbonCrystals__SWIG_0(swigCPtr, amount, is_reclaim);
  }

  public void RemoveEbonCrystals(uint amount) {
    questinterfacePINVOKE.Client_RemoveEbonCrystals__SWIG_1(swigCPtr, amount);
  }

  public void RemoveRadiantCrystals(uint amount, bool is_reclaim) {
    questinterfacePINVOKE.Client_RemoveRadiantCrystals__SWIG_0(swigCPtr, amount, is_reclaim);
  }

  public void RemoveRadiantCrystals(uint amount) {
    questinterfacePINVOKE.Client_RemoveRadiantCrystals__SWIG_1(swigCPtr, amount);
  }

  public uint GetRadiantCrystals() {
    uint ret = questinterfacePINVOKE.Client_GetRadiantCrystals(swigCPtr);
    return ret;
  }

  public void SetRadiantCrystals(uint value) {
    questinterfacePINVOKE.Client_SetRadiantCrystals(swigCPtr, value);
  }

  public uint GetEbonCrystals() {
    uint ret = questinterfacePINVOKE.Client_GetEbonCrystals(swigCPtr);
    return ret;
  }

  public void SetEbonCrystals(uint value) {
    questinterfacePINVOKE.Client_SetEbonCrystals(swigCPtr, value);
  }

  public void SendCrystalCounts() {
    questinterfacePINVOKE.Client_SendCrystalCounts(swigCPtr);
  }

  public ulong GetExperienceForKill(Mob against) {
    ulong ret = questinterfacePINVOKE.Client_GetExperienceForKill(swigCPtr, Mob.getCPtr(against));
    return ret;
  }

  public void AddEXP(ulong in_add_exp, byte conlevel, bool resexp) {
    questinterfacePINVOKE.Client_AddEXP__SWIG_0(swigCPtr, in_add_exp, conlevel, resexp);
  }

  public void AddEXP(ulong in_add_exp, byte conlevel) {
    questinterfacePINVOKE.Client_AddEXP__SWIG_1(swigCPtr, in_add_exp, conlevel);
  }

  public void AddEXP(ulong in_add_exp) {
    questinterfacePINVOKE.Client_AddEXP__SWIG_2(swigCPtr, in_add_exp);
  }

  public ulong CalcEXP(byte conlevel, bool ignore_mods) {
    ulong ret = questinterfacePINVOKE.Client_CalcEXP__SWIG_0(swigCPtr, conlevel, ignore_mods);
    return ret;
  }

  public ulong CalcEXP(byte conlevel) {
    ulong ret = questinterfacePINVOKE.Client_CalcEXP__SWIG_1(swigCPtr, conlevel);
    return ret;
  }

  public ulong CalcEXP() {
    ulong ret = questinterfacePINVOKE.Client_CalcEXP__SWIG_2(swigCPtr);
    return ret;
  }

  public void CalculateNormalizedAAExp(SWIGTYPE_p_unsigned_long_long add_aaxp, byte conlevel, bool resexp) {
    questinterfacePINVOKE.Client_CalculateNormalizedAAExp(swigCPtr, SWIGTYPE_p_unsigned_long_long.getCPtr(add_aaxp), conlevel, resexp);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void CalculateStandardAAExp(SWIGTYPE_p_unsigned_long_long add_aaxp, byte conlevel, bool resexp) {
    questinterfacePINVOKE.Client_CalculateStandardAAExp(swigCPtr, SWIGTYPE_p_unsigned_long_long.getCPtr(add_aaxp), conlevel, resexp);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void CalculateLeadershipExp(SWIGTYPE_p_unsigned_long_long add_exp, byte conlevel) {
    questinterfacePINVOKE.Client_CalculateLeadershipExp(swigCPtr, SWIGTYPE_p_unsigned_long_long.getCPtr(add_exp), conlevel);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void CalculateExp(ulong in_add_exp, SWIGTYPE_p_unsigned_long_long add_exp, SWIGTYPE_p_unsigned_long_long add_aaxp, byte conlevel, bool resexp) {
    questinterfacePINVOKE.Client_CalculateExp(swigCPtr, in_add_exp, SWIGTYPE_p_unsigned_long_long.getCPtr(add_exp), SWIGTYPE_p_unsigned_long_long.getCPtr(add_aaxp), conlevel, resexp);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetEXP(ulong set_exp, ulong set_aaxp, bool resexp) {
    questinterfacePINVOKE.Client_SetEXP__SWIG_0(swigCPtr, set_exp, set_aaxp, resexp);
  }

  public void SetEXP(ulong set_exp, ulong set_aaxp) {
    questinterfacePINVOKE.Client_SetEXP__SWIG_1(swigCPtr, set_exp, set_aaxp);
  }

  public void AddLevelBasedExp(byte exp_percentage, byte max_level, bool ignore_mods) {
    questinterfacePINVOKE.Client_AddLevelBasedExp__SWIG_0(swigCPtr, exp_percentage, max_level, ignore_mods);
  }

  public void AddLevelBasedExp(byte exp_percentage, byte max_level) {
    questinterfacePINVOKE.Client_AddLevelBasedExp__SWIG_1(swigCPtr, exp_percentage, max_level);
  }

  public void AddLevelBasedExp(byte exp_percentage) {
    questinterfacePINVOKE.Client_AddLevelBasedExp__SWIG_2(swigCPtr, exp_percentage);
  }

  public void SetLeadershipEXP(ulong group_exp, ulong raid_exp) {
    questinterfacePINVOKE.Client_SetLeadershipEXP(swigCPtr, group_exp, raid_exp);
  }

  public void AddLeadershipEXP(ulong group_exp, ulong raid_exp) {
    questinterfacePINVOKE.Client_AddLeadershipEXP(swigCPtr, group_exp, raid_exp);
  }

  public void SendLeadershipEXPUpdate() {
    questinterfacePINVOKE.Client_SendLeadershipEXPUpdate(swigCPtr);
  }

  public bool IsLeadershipEXPOn() {
    bool ret = questinterfacePINVOKE.Client_IsLeadershipEXPOn(swigCPtr);
    return ret;
  }

  public int GetLeadershipAA(int AAID) {
    int ret = questinterfacePINVOKE.Client_GetLeadershipAA__SWIG_0(swigCPtr, AAID);
    return ret;
  }

  public SWIGTYPE_p_LeadershipAA_Struct GetLeadershipAA() {
    SWIGTYPE_p_LeadershipAA_Struct ret = new SWIGTYPE_p_LeadershipAA_Struct(questinterfacePINVOKE.Client_GetLeadershipAA__SWIG_1(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_GroupLeadershipAA_Struct GetGroupLeadershipAA() {
    SWIGTYPE_p_GroupLeadershipAA_Struct ret = new SWIGTYPE_p_GroupLeadershipAA_Struct(questinterfacePINVOKE.Client_GetGroupLeadershipAA(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_RaidLeadershipAA_Struct GetRaidLeadershipAA() {
    SWIGTYPE_p_RaidLeadershipAA_Struct ret = new SWIGTYPE_p_RaidLeadershipAA_Struct(questinterfacePINVOKE.Client_GetRaidLeadershipAA(swigCPtr), false);
    return ret;
  }

  public int GroupLeadershipAAHealthEnhancement() {
    int ret = questinterfacePINVOKE.Client_GroupLeadershipAAHealthEnhancement(swigCPtr);
    return ret;
  }

  public int GroupLeadershipAAManaEnhancement() {
    int ret = questinterfacePINVOKE.Client_GroupLeadershipAAManaEnhancement(swigCPtr);
    return ret;
  }

  public int GroupLeadershipAAHealthRegeneration() {
    int ret = questinterfacePINVOKE.Client_GroupLeadershipAAHealthRegeneration(swigCPtr);
    return ret;
  }

  public int GroupLeadershipAAOffenseEnhancement() {
    int ret = questinterfacePINVOKE.Client_GroupLeadershipAAOffenseEnhancement(swigCPtr);
    return ret;
  }

  public void InspectBuffs(Client Inspector, int Rank) {
    questinterfacePINVOKE.Client_InspectBuffs(swigCPtr, Client.getCPtr(Inspector), Rank);
  }

  public uint GetRaidPoints() {
    uint ret = questinterfacePINVOKE.Client_GetRaidPoints(swigCPtr);
    return ret;
  }

  public uint GetGroupPoints() {
    uint ret = questinterfacePINVOKE.Client_GetGroupPoints(swigCPtr);
    return ret;
  }

  public uint GetRaidEXP() {
    uint ret = questinterfacePINVOKE.Client_GetRaidEXP(swigCPtr);
    return ret;
  }

  public uint GetGroupEXP() {
    uint ret = questinterfacePINVOKE.Client_GetGroupEXP(swigCPtr);
    return ret;
  }

  public uint GetTotalSecondsPlayed() {
    uint ret = questinterfacePINVOKE.Client_GetTotalSecondsPlayed(swigCPtr);
    return ret;
  }

  public override void SetLevel(byte set_level, bool command) {
    questinterfacePINVOKE.Client_SetLevel__SWIG_0(swigCPtr, set_level, command);
  }

  public override void SetLevel(byte set_level) {
    questinterfacePINVOKE.Client_SetLevel__SWIG_1(swigCPtr, set_level);
  }

  public override void GoToBind(byte bindnum) {
    questinterfacePINVOKE.Client_GoToBind__SWIG_0(swigCPtr, bindnum);
  }

  public override void GoToBind() {
    questinterfacePINVOKE.Client_GoToBind__SWIG_1(swigCPtr);
  }

  public void GoToSafeCoords(ushort zone_id, ushort instance_id) {
    questinterfacePINVOKE.Client_GoToSafeCoords(swigCPtr, zone_id, instance_id);
  }

  public override void Gate(byte bindnum) {
    questinterfacePINVOKE.Client_Gate__SWIG_0(swigCPtr, bindnum);
  }

  public override void Gate() {
    questinterfacePINVOKE.Client_Gate__SWIG_1(swigCPtr);
  }

  public void SetBindPoint(int bind_num, int to_zone, int to_instance, SWIGTYPE_p_glm__vec3 location) {
    questinterfacePINVOKE.Client_SetBindPoint__SWIG_0(swigCPtr, bind_num, to_zone, to_instance, SWIGTYPE_p_glm__vec3.getCPtr(location));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetBindPoint(int bind_num, int to_zone, int to_instance) {
    questinterfacePINVOKE.Client_SetBindPoint__SWIG_1(swigCPtr, bind_num, to_zone, to_instance);
  }

  public void SetBindPoint(int bind_num, int to_zone) {
    questinterfacePINVOKE.Client_SetBindPoint__SWIG_2(swigCPtr, bind_num, to_zone);
  }

  public void SetBindPoint(int bind_num) {
    questinterfacePINVOKE.Client_SetBindPoint__SWIG_3(swigCPtr, bind_num);
  }

  public void SetBindPoint() {
    questinterfacePINVOKE.Client_SetBindPoint__SWIG_4(swigCPtr);
  }

  public void SetBindPoint2(int bind_num, int to_zone, int to_instance, SWIGTYPE_p_glm__vec4 location) {
    questinterfacePINVOKE.Client_SetBindPoint2__SWIG_0(swigCPtr, bind_num, to_zone, to_instance, SWIGTYPE_p_glm__vec4.getCPtr(location));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetBindPoint2(int bind_num, int to_zone, int to_instance) {
    questinterfacePINVOKE.Client_SetBindPoint2__SWIG_1(swigCPtr, bind_num, to_zone, to_instance);
  }

  public void SetBindPoint2(int bind_num, int to_zone) {
    questinterfacePINVOKE.Client_SetBindPoint2__SWIG_2(swigCPtr, bind_num, to_zone);
  }

  public void SetBindPoint2(int bind_num) {
    questinterfacePINVOKE.Client_SetBindPoint2__SWIG_3(swigCPtr, bind_num);
  }

  public void SetBindPoint2() {
    questinterfacePINVOKE.Client_SetBindPoint2__SWIG_4(swigCPtr);
  }

  public void SetStartZone(uint zoneid, float x, float y, float z, float heading) {
    questinterfacePINVOKE.Client_SetStartZone__SWIG_0(swigCPtr, zoneid, x, y, z, heading);
  }

  public void SetStartZone(uint zoneid, float x, float y, float z) {
    questinterfacePINVOKE.Client_SetStartZone__SWIG_1(swigCPtr, zoneid, x, y, z);
  }

  public void SetStartZone(uint zoneid, float x, float y) {
    questinterfacePINVOKE.Client_SetStartZone__SWIG_2(swigCPtr, zoneid, x, y);
  }

  public void SetStartZone(uint zoneid, float x) {
    questinterfacePINVOKE.Client_SetStartZone__SWIG_3(swigCPtr, zoneid, x);
  }

  public void SetStartZone(uint zoneid) {
    questinterfacePINVOKE.Client_SetStartZone__SWIG_4(swigCPtr, zoneid);
  }

  public uint GetStartZone() {
    uint ret = questinterfacePINVOKE.Client_GetStartZone(swigCPtr);
    return ret;
  }

  public void MovePC(string zonename, float x, float y, float z, float heading, byte ignorerestrictions, ZoneMode zm) {
    questinterfacePINVOKE.Client_MovePC__SWIG_0(swigCPtr, zonename, x, y, z, heading, ignorerestrictions, (int)zm);
  }

  public void MovePC(string zonename, float x, float y, float z, float heading, byte ignorerestrictions) {
    questinterfacePINVOKE.Client_MovePC__SWIG_1(swigCPtr, zonename, x, y, z, heading, ignorerestrictions);
  }

  public void MovePC(string zonename, float x, float y, float z, float heading) {
    questinterfacePINVOKE.Client_MovePC__SWIG_2(swigCPtr, zonename, x, y, z, heading);
  }

  public void MovePC(uint zoneID, float x, float y, float z, float heading, byte ignorerestrictions, ZoneMode zm) {
    questinterfacePINVOKE.Client_MovePC__SWIG_3(swigCPtr, zoneID, x, y, z, heading, ignorerestrictions, (int)zm);
  }

  public void MovePC(uint zoneID, float x, float y, float z, float heading, byte ignorerestrictions) {
    questinterfacePINVOKE.Client_MovePC__SWIG_4(swigCPtr, zoneID, x, y, z, heading, ignorerestrictions);
  }

  public void MovePC(uint zoneID, float x, float y, float z, float heading) {
    questinterfacePINVOKE.Client_MovePC__SWIG_5(swigCPtr, zoneID, x, y, z, heading);
  }

  public void MovePC(float x, float y, float z, float heading, byte ignorerestrictions, ZoneMode zm) {
    questinterfacePINVOKE.Client_MovePC__SWIG_6(swigCPtr, x, y, z, heading, ignorerestrictions, (int)zm);
  }

  public void MovePC(float x, float y, float z, float heading, byte ignorerestrictions) {
    questinterfacePINVOKE.Client_MovePC__SWIG_7(swigCPtr, x, y, z, heading, ignorerestrictions);
  }

  public void MovePC(float x, float y, float z, float heading) {
    questinterfacePINVOKE.Client_MovePC__SWIG_8(swigCPtr, x, y, z, heading);
  }

  public void MovePC(uint zoneID, uint instanceID, float x, float y, float z, float heading, byte ignorerestrictions, ZoneMode zm) {
    questinterfacePINVOKE.Client_MovePC__SWIG_9(swigCPtr, zoneID, instanceID, x, y, z, heading, ignorerestrictions, (int)zm);
  }

  public void MovePC(uint zoneID, uint instanceID, float x, float y, float z, float heading, byte ignorerestrictions) {
    questinterfacePINVOKE.Client_MovePC__SWIG_10(swigCPtr, zoneID, instanceID, x, y, z, heading, ignorerestrictions);
  }

  public void MovePC(uint zoneID, uint instanceID, float x, float y, float z, float heading) {
    questinterfacePINVOKE.Client_MovePC__SWIG_11(swigCPtr, zoneID, instanceID, x, y, z, heading);
  }

  public void MoveZone(string zone_short_name, SWIGTYPE_p_glm__vec4 location) {
    questinterfacePINVOKE.Client_MoveZone__SWIG_0(swigCPtr, zone_short_name, SWIGTYPE_p_glm__vec4.getCPtr(location));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void MoveZone(string zone_short_name) {
    questinterfacePINVOKE.Client_MoveZone__SWIG_1(swigCPtr, zone_short_name);
  }

  public void MoveZoneGroup(string zone_short_name, SWIGTYPE_p_glm__vec4 location) {
    questinterfacePINVOKE.Client_MoveZoneGroup__SWIG_0(swigCPtr, zone_short_name, SWIGTYPE_p_glm__vec4.getCPtr(location));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void MoveZoneGroup(string zone_short_name) {
    questinterfacePINVOKE.Client_MoveZoneGroup__SWIG_1(swigCPtr, zone_short_name);
  }

  public void MoveZoneRaid(string zone_short_name, SWIGTYPE_p_glm__vec4 location) {
    questinterfacePINVOKE.Client_MoveZoneRaid__SWIG_0(swigCPtr, zone_short_name, SWIGTYPE_p_glm__vec4.getCPtr(location));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void MoveZoneRaid(string zone_short_name) {
    questinterfacePINVOKE.Client_MoveZoneRaid__SWIG_1(swigCPtr, zone_short_name);
  }

  public void MoveZoneInstance(ushort instance_id, SWIGTYPE_p_glm__vec4 location) {
    questinterfacePINVOKE.Client_MoveZoneInstance__SWIG_0(swigCPtr, instance_id, SWIGTYPE_p_glm__vec4.getCPtr(location));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void MoveZoneInstance(ushort instance_id) {
    questinterfacePINVOKE.Client_MoveZoneInstance__SWIG_1(swigCPtr, instance_id);
  }

  public void MoveZoneInstanceGroup(ushort instance_id, SWIGTYPE_p_glm__vec4 location) {
    questinterfacePINVOKE.Client_MoveZoneInstanceGroup__SWIG_0(swigCPtr, instance_id, SWIGTYPE_p_glm__vec4.getCPtr(location));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void MoveZoneInstanceGroup(ushort instance_id) {
    questinterfacePINVOKE.Client_MoveZoneInstanceGroup__SWIG_1(swigCPtr, instance_id);
  }

  public void MoveZoneInstanceRaid(ushort instance_id, SWIGTYPE_p_glm__vec4 location) {
    questinterfacePINVOKE.Client_MoveZoneInstanceRaid__SWIG_0(swigCPtr, instance_id, SWIGTYPE_p_glm__vec4.getCPtr(location));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void MoveZoneInstanceRaid(ushort instance_id) {
    questinterfacePINVOKE.Client_MoveZoneInstanceRaid__SWIG_1(swigCPtr, instance_id);
  }

  public void SendToGuildHall() {
    questinterfacePINVOKE.Client_SendToGuildHall(swigCPtr);
  }

  public void SendToInstance(SWIGTYPE_p_std__string instance_type, SWIGTYPE_p_std__string zone_short_name, uint instance_version, float x, float y, float z, float heading, SWIGTYPE_p_std__string instance_identifier, uint duration) {
    questinterfacePINVOKE.Client_SendToInstance(swigCPtr, SWIGTYPE_p_std__string.getCPtr(instance_type), SWIGTYPE_p_std__string.getCPtr(zone_short_name), instance_version, x, y, z, heading, SWIGTYPE_p_std__string.getCPtr(instance_identifier), duration);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AssignToInstance(ushort instance_id) {
    questinterfacePINVOKE.Client_AssignToInstance(swigCPtr, instance_id);
  }

  public void RemoveFromInstance(ushort instance_id) {
    questinterfacePINVOKE.Client_RemoveFromInstance(swigCPtr, instance_id);
  }

  public bool CheckLoreConflict(SWIGTYPE_p_EQ__ItemData item) {
    bool ret = questinterfacePINVOKE.Client_CheckLoreConflict(swigCPtr, SWIGTYPE_p_EQ__ItemData.getCPtr(item));
    return ret;
  }

  public void ChangeLastName(SWIGTYPE_p_std__string last_name) {
    questinterfacePINVOKE.Client_ChangeLastName(swigCPtr, SWIGTYPE_p_std__string.getCPtr(last_name));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetGroupAAs(SWIGTYPE_p_GroupLeadershipAA_Struct into) {
    questinterfacePINVOKE.Client_GetGroupAAs(swigCPtr, SWIGTYPE_p_GroupLeadershipAA_Struct.getCPtr(into));
  }

  public void GetRaidAAs(SWIGTYPE_p_RaidLeadershipAA_Struct into) {
    questinterfacePINVOKE.Client_GetRaidAAs(swigCPtr, SWIGTYPE_p_RaidLeadershipAA_Struct.getCPtr(into));
  }

  public void ClearGroupAAs() {
    questinterfacePINVOKE.Client_ClearGroupAAs(swigCPtr);
  }

  public void UpdateGroupAAs(int points, uint type) {
    questinterfacePINVOKE.Client_UpdateGroupAAs(swigCPtr, points, type);
  }

  public void SacrificeConfirm(Client caster) {
    questinterfacePINVOKE.Client_SacrificeConfirm(swigCPtr, Client.getCPtr(caster));
  }

  public void Sacrifice(Client caster) {
    questinterfacePINVOKE.Client_Sacrifice(swigCPtr, Client.getCPtr(caster));
  }

  public void GoToDeath() {
    questinterfacePINVOKE.Client_GoToDeath(swigCPtr);
  }

  public int GetInstanceID() {
    int ret = questinterfacePINVOKE.Client_GetInstanceID(swigCPtr);
    return ret;
  }

  public void SetZoning(bool in_) {
    questinterfacePINVOKE.Client_SetZoning(swigCPtr, in_);
  }

  public void ShowSpells(Client c, ShowSpellType show_spell_type) {
    questinterfacePINVOKE.Client_ShowSpells(swigCPtr, Client.getCPtr(c), (int)show_spell_type);
  }

  public override SWIGTYPE_p_FACTION_VALUE GetReverseFactionCon(Mob iOther) {
    SWIGTYPE_p_FACTION_VALUE ret = new SWIGTYPE_p_FACTION_VALUE(questinterfacePINVOKE.Client_GetReverseFactionCon(swigCPtr, Mob.getCPtr(iOther)), true);
    return ret;
  }

  public SWIGTYPE_p_FACTION_VALUE GetFactionLevel(uint char_id, uint npc_id, uint p_race, uint p_class, uint p_deity, int pFaction, Mob tnpc) {
    SWIGTYPE_p_FACTION_VALUE ret = new SWIGTYPE_p_FACTION_VALUE(questinterfacePINVOKE.Client_GetFactionLevel(swigCPtr, char_id, npc_id, p_race, p_class, p_deity, pFaction, Mob.getCPtr(tnpc)), true);
    return ret;
  }

  public bool ReloadCharacterFaction(Client c, uint facid, uint charid) {
    bool ret = questinterfacePINVOKE.Client_ReloadCharacterFaction(swigCPtr, Client.getCPtr(c), facid, charid);
    return ret;
  }

  public int GetCharacterFactionLevel(int faction_id) {
    int ret = questinterfacePINVOKE.Client_GetCharacterFactionLevel(swigCPtr, faction_id);
    return ret;
  }

  public int GetModCharacterFactionLevel(int faction_id) {
    int ret = questinterfacePINVOKE.Client_GetModCharacterFactionLevel(swigCPtr, faction_id);
    return ret;
  }

  public void MerchantRejectMessage(Mob merchant, int primaryfaction) {
    questinterfacePINVOKE.Client_MerchantRejectMessage(swigCPtr, Mob.getCPtr(merchant), primaryfaction);
  }

  public void SendFactionMessage(int tmpvalue, int faction_id, int faction_before_hit, int totalvalue, byte temp, int this_faction_min, int this_faction_max) {
    questinterfacePINVOKE.Client_SendFactionMessage(swigCPtr, tmpvalue, faction_id, faction_before_hit, totalvalue, temp, this_faction_min, this_faction_max);
  }

  public void UpdatePersonalFaction(int char_id, int npc_value, int faction_id, SWIGTYPE_p_int current_value, int temp, int this_faction_min, int this_faction_max) {
    questinterfacePINVOKE.Client_UpdatePersonalFaction(swigCPtr, char_id, npc_value, faction_id, SWIGTYPE_p_int.getCPtr(current_value), temp, this_faction_min, this_faction_max);
  }

  public void SetFactionLevel(uint char_id, uint npc_faction_id, byte char_class, byte char_race, byte char_deity, bool quest) {
    questinterfacePINVOKE.Client_SetFactionLevel__SWIG_0(swigCPtr, char_id, npc_faction_id, char_class, char_race, char_deity, quest);
  }

  public void SetFactionLevel(uint char_id, uint npc_faction_id, byte char_class, byte char_race, byte char_deity) {
    questinterfacePINVOKE.Client_SetFactionLevel__SWIG_1(swigCPtr, char_id, npc_faction_id, char_class, char_race, char_deity);
  }

  public void SetFactionLevel2(uint char_id, int faction_id, byte char_class, byte char_race, byte char_deity, int value, byte temp) {
    questinterfacePINVOKE.Client_SetFactionLevel2(swigCPtr, char_id, faction_id, char_class, char_race, char_deity, value, temp);
  }

  public int GetRawItemAC() {
    int ret = questinterfacePINVOKE.Client_GetRawItemAC(swigCPtr);
    return ret;
  }

  public uint LSAccountID() {
    uint ret = questinterfacePINVOKE.Client_LSAccountID(swigCPtr);
    return ret;
  }

  public uint GetWID() {
    uint ret = questinterfacePINVOKE.Client_GetWID(swigCPtr);
    return ret;
  }

  public void SetWID(uint iWID) {
    questinterfacePINVOKE.Client_SetWID(swigCPtr, iWID);
  }

  public uint AccountID() {
    uint ret = questinterfacePINVOKE.Client_AccountID(swigCPtr);
    return ret;
  }

  public string AccountName() {
    string ret = questinterfacePINVOKE.Client_AccountName(swigCPtr);
    return ret;
  }

  public int GetAccountCreation() {
    int ret = questinterfacePINVOKE.Client_GetAccountCreation(swigCPtr);
    return ret;
  }

  public short Admin() {
    short ret = questinterfacePINVOKE.Client_Admin(swigCPtr);
    return ret;
  }

  public uint CharacterID() {
    uint ret = questinterfacePINVOKE.Client_CharacterID(swigCPtr);
    return ret;
  }

  public void UpdateAdmin(bool from_database) {
    questinterfacePINVOKE.Client_UpdateAdmin__SWIG_0(swigCPtr, from_database);
  }

  public void UpdateAdmin() {
    questinterfacePINVOKE.Client_UpdateAdmin__SWIG_1(swigCPtr);
  }

  public void UpdateWho(byte remove) {
    questinterfacePINVOKE.Client_UpdateWho__SWIG_0(swigCPtr, remove);
  }

  public void UpdateWho() {
    questinterfacePINVOKE.Client_UpdateWho__SWIG_1(swigCPtr);
  }

  public bool GMHideMe(Client client) {
    bool ret = questinterfacePINVOKE.Client_GMHideMe__SWIG_0(swigCPtr, Client.getCPtr(client));
    return ret;
  }

  public bool GMHideMe() {
    bool ret = questinterfacePINVOKE.Client_GMHideMe__SWIG_1(swigCPtr);
    return ret;
  }

  public bool IsInAGuild() {
    bool ret = questinterfacePINVOKE.Client_IsInAGuild(swigCPtr);
    return ret;
  }

  public bool IsInGuild(uint in_gid) {
    bool ret = questinterfacePINVOKE.Client_IsInGuild(swigCPtr, in_gid);
    return ret;
  }

  public bool GetGuildListDirty() {
    bool ret = questinterfacePINVOKE.Client_GetGuildListDirty(swigCPtr);
    return ret;
  }

  public void SetGuildListDirty(bool state) {
    questinterfacePINVOKE.Client_SetGuildListDirty(swigCPtr, state);
  }

  public uint GuildID() {
    uint ret = questinterfacePINVOKE.Client_GuildID(swigCPtr);
    return ret;
  }

  public byte GuildRank() {
    byte ret = questinterfacePINVOKE.Client_GuildRank(swigCPtr);
    return ret;
  }

  public bool GuildTributeOptIn() {
    bool ret = questinterfacePINVOKE.Client_GuildTributeOptIn(swigCPtr);
    return ret;
  }

  public void SetGuildTributeOptIn(bool state) {
    questinterfacePINVOKE.Client_SetGuildTributeOptIn(swigCPtr, state);
  }

  public void SendGuildTributeDonateItemReply(SWIGTYPE_p_GuildTributeDonateItemRequest_Struct in_, uint favor) {
    questinterfacePINVOKE.Client_SendGuildTributeDonateItemReply(swigCPtr, SWIGTYPE_p_GuildTributeDonateItemRequest_Struct.getCPtr(in_), favor);
  }

  public void SendGuildTributeDonatePlatReply(SWIGTYPE_p_GuildTributeDonatePlatRequest_Struct in_, uint favor) {
    questinterfacePINVOKE.Client_SendGuildTributeDonatePlatReply(swigCPtr, SWIGTYPE_p_GuildTributeDonatePlatRequest_Struct.getCPtr(in_), favor);
  }

  public void SetGuildRank(uint rank) {
    questinterfacePINVOKE.Client_SetGuildRank(swigCPtr, rank);
  }

  public void SetGuildID(uint guild_id) {
    questinterfacePINVOKE.Client_SetGuildID(swigCPtr, guild_id);
  }

  public void SendGuildMOTD(bool GetGuildMOTDReply) {
    questinterfacePINVOKE.Client_SendGuildMOTD__SWIG_0(swigCPtr, GetGuildMOTDReply);
  }

  public void SendGuildMOTD() {
    questinterfacePINVOKE.Client_SendGuildMOTD__SWIG_1(swigCPtr);
  }

  public void SendGuildURL() {
    questinterfacePINVOKE.Client_SendGuildURL(swigCPtr);
  }

  public void SendGuildChannel() {
    questinterfacePINVOKE.Client_SendGuildChannel(swigCPtr);
  }

  public void SendGuildSpawnAppearance() {
    questinterfacePINVOKE.Client_SendGuildSpawnAppearance(swigCPtr);
  }

  public void SendGuildRanks() {
    questinterfacePINVOKE.Client_SendGuildRanks(swigCPtr);
  }

  public void SendGuildMembers() {
    questinterfacePINVOKE.Client_SendGuildMembers(swigCPtr);
  }

  public void SendGuildList() {
    questinterfacePINVOKE.Client_SendGuildList(swigCPtr);
  }

  public void SendGuildJoin(SWIGTYPE_p_GuildJoin_Struct gj) {
    questinterfacePINVOKE.Client_SendGuildJoin(swigCPtr, SWIGTYPE_p_GuildJoin_Struct.getCPtr(gj));
  }

  public void RefreshGuildInfo() {
    questinterfacePINVOKE.Client_RefreshGuildInfo(swigCPtr);
  }

  public void SendGuildRankNames() {
    questinterfacePINVOKE.Client_SendGuildRankNames(swigCPtr);
  }

  public void SendGuildTributeDetails(uint tribute_id, uint tier) {
    questinterfacePINVOKE.Client_SendGuildTributeDetails(swigCPtr, tribute_id, tier);
  }

  public void DoGuildTributeUpdate() {
    questinterfacePINVOKE.Client_DoGuildTributeUpdate(swigCPtr);
  }

  public void SendGuildActiveTributes(uint guild_id) {
    questinterfacePINVOKE.Client_SendGuildActiveTributes(swigCPtr, guild_id);
  }

  public void SendGuildFavorAndTimer(uint guild_id) {
    questinterfacePINVOKE.Client_SendGuildFavorAndTimer(swigCPtr, guild_id);
  }

  public void SendGuildTributeOptInToggle(SWIGTYPE_p_GuildTributeMemberToggle in_) {
    questinterfacePINVOKE.Client_SendGuildTributeOptInToggle(swigCPtr, SWIGTYPE_p_GuildTributeMemberToggle.getCPtr(in_));
  }

  public void RequestGuildActiveTributes(uint guild_id) {
    questinterfacePINVOKE.Client_RequestGuildActiveTributes(swigCPtr, guild_id);
  }

  public void RequestGuildFavorAndTimer(uint guild_id) {
    questinterfacePINVOKE.Client_RequestGuildFavorAndTimer(swigCPtr, guild_id);
  }

  public void SendGuildMembersList() {
    questinterfacePINVOKE.Client_SendGuildMembersList(swigCPtr);
  }

  public void SendGuildMemberAdd(uint guild_id, uint level, uint _class, uint rank, uint guild_show, uint zone_id, SWIGTYPE_p_std__string player_name) {
    questinterfacePINVOKE.Client_SendGuildMemberAdd(swigCPtr, guild_id, level, _class, rank, guild_show, zone_id, SWIGTYPE_p_std__string.getCPtr(player_name));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SendGuildMemberRename(uint guild_id, SWIGTYPE_p_std__string player_name, SWIGTYPE_p_std__string new_player_name) {
    questinterfacePINVOKE.Client_SendGuildMemberRename(swigCPtr, guild_id, SWIGTYPE_p_std__string.getCPtr(player_name), SWIGTYPE_p_std__string.getCPtr(new_player_name));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SendGuildMemberDelete(uint guild_id, SWIGTYPE_p_std__string player_name) {
    questinterfacePINVOKE.Client_SendGuildMemberDelete(swigCPtr, guild_id, SWIGTYPE_p_std__string.getCPtr(player_name));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SendGuildMemberLevel(uint guild_id, uint level, SWIGTYPE_p_std__string player_name) {
    questinterfacePINVOKE.Client_SendGuildMemberLevel(swigCPtr, guild_id, level, SWIGTYPE_p_std__string.getCPtr(player_name));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SendGuildMemberRankAltBanker(uint guild_id, uint rank, SWIGTYPE_p_std__string player_name, bool alt, bool banker) {
    questinterfacePINVOKE.Client_SendGuildMemberRankAltBanker(swigCPtr, guild_id, rank, SWIGTYPE_p_std__string.getCPtr(player_name), alt, banker);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SendGuildMemberPublicNote(uint guild_id, SWIGTYPE_p_std__string player_name, SWIGTYPE_p_std__string public_note) {
    questinterfacePINVOKE.Client_SendGuildMemberPublicNote(swigCPtr, guild_id, SWIGTYPE_p_std__string.getCPtr(player_name), SWIGTYPE_p_std__string.getCPtr(public_note));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SendGuildMemberDetails(uint guild_id, uint zone_id, uint offline_mode, SWIGTYPE_p_std__string player_name) {
    questinterfacePINVOKE.Client_SendGuildMemberDetails(swigCPtr, guild_id, zone_id, offline_mode, SWIGTYPE_p_std__string.getCPtr(player_name));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SendGuildRenameGuild(uint guild_id, SWIGTYPE_p_std__string new_guild_name) {
    questinterfacePINVOKE.Client_SendGuildRenameGuild(swigCPtr, guild_id, SWIGTYPE_p_std__string.getCPtr(new_guild_name));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SendGuildDeletePacket(uint guild_id) {
    questinterfacePINVOKE.Client_SendGuildDeletePacket(swigCPtr, guild_id);
  }

  public byte GetClientMaxLevel() {
    byte ret = questinterfacePINVOKE.Client_GetClientMaxLevel(swigCPtr);
    return ret;
  }

  public void SetClientMaxLevel(byte max_level) {
    questinterfacePINVOKE.Client_SetClientMaxLevel(swigCPtr, max_level);
  }

  public void CheckManaEndUpdate() {
    questinterfacePINVOKE.Client_CheckManaEndUpdate(swigCPtr);
  }

  public void SendManaUpdate() {
    questinterfacePINVOKE.Client_SendManaUpdate(swigCPtr);
  }

  public void SendEnduranceUpdate() {
    questinterfacePINVOKE.Client_SendEnduranceUpdate(swigCPtr);
  }

  public byte GetFace() {
    byte ret = questinterfacePINVOKE.Client_GetFace(swigCPtr);
    return ret;
  }

  public void FriendsWho(string FriendsString) {
    questinterfacePINVOKE.Client_FriendsWho(swigCPtr, FriendsString);
  }

  public override void Stun(int duration) {
    questinterfacePINVOKE.Client_Stun(swigCPtr, duration);
  }

  public override void UnStun() {
    questinterfacePINVOKE.Client_UnStun(swigCPtr);
  }

  public void ReadBook(SWIGTYPE_p_BookRequest_Struct book) {
    questinterfacePINVOKE.Client_ReadBook(swigCPtr, SWIGTYPE_p_BookRequest_Struct.getCPtr(book));
  }

  public void ReadBookByName(SWIGTYPE_p_std__string book_name, byte book_type) {
    questinterfacePINVOKE.Client_ReadBookByName(swigCPtr, SWIGTYPE_p_std__string.getCPtr(book_name), book_type);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void QuestReadBook(string text, byte type) {
    questinterfacePINVOKE.Client_QuestReadBook(swigCPtr, text, type);
  }

  public void SendMoneyUpdate() {
    questinterfacePINVOKE.Client_SendMoneyUpdate(swigCPtr);
  }

  public bool TakeMoneyFromPP(ulong copper, bool update_client) {
    bool ret = questinterfacePINVOKE.Client_TakeMoneyFromPP__SWIG_0(swigCPtr, copper, update_client);
    return ret;
  }

  public bool TakeMoneyFromPP(ulong copper) {
    bool ret = questinterfacePINVOKE.Client_TakeMoneyFromPP__SWIG_1(swigCPtr, copper);
    return ret;
  }

  public bool TakePlatinum(uint platinum, bool update_client) {
    bool ret = questinterfacePINVOKE.Client_TakePlatinum__SWIG_0(swigCPtr, platinum, update_client);
    return ret;
  }

  public bool TakePlatinum(uint platinum) {
    bool ret = questinterfacePINVOKE.Client_TakePlatinum__SWIG_1(swigCPtr, platinum);
    return ret;
  }

  public void AddMoneyToPP(ulong copper, bool update_client) {
    questinterfacePINVOKE.Client_AddMoneyToPP__SWIG_0(swigCPtr, copper, update_client);
  }

  public void AddMoneyToPP(ulong copper) {
    questinterfacePINVOKE.Client_AddMoneyToPP__SWIG_1(swigCPtr, copper);
  }

  public void AddMoneyToPP(uint copper, uint silver, uint gold, uint platinum, bool update_client) {
    questinterfacePINVOKE.Client_AddMoneyToPP__SWIG_2(swigCPtr, copper, silver, gold, platinum, update_client);
  }

  public void AddMoneyToPP(uint copper, uint silver, uint gold, uint platinum) {
    questinterfacePINVOKE.Client_AddMoneyToPP__SWIG_3(swigCPtr, copper, silver, gold, platinum);
  }

  public void AddPlatinum(uint platinu, bool update_client) {
    questinterfacePINVOKE.Client_AddPlatinum__SWIG_0(swigCPtr, platinu, update_client);
  }

  public void AddPlatinum(uint platinu) {
    questinterfacePINVOKE.Client_AddPlatinum__SWIG_1(swigCPtr, platinu);
  }

  public bool HasMoney(ulong copper) {
    bool ret = questinterfacePINVOKE.Client_HasMoney(swigCPtr, copper);
    return ret;
  }

  public ulong GetCarriedMoney() {
    ulong ret = questinterfacePINVOKE.Client_GetCarriedMoney(swigCPtr);
    return ret;
  }

  public uint GetCarriedPlatinum() {
    uint ret = questinterfacePINVOKE.Client_GetCarriedPlatinum(swigCPtr);
    return ret;
  }

  public ulong GetAllMoney() {
    ulong ret = questinterfacePINVOKE.Client_GetAllMoney(swigCPtr);
    return ret;
  }

  public uint GetMoney(byte type, byte subtype) {
    uint ret = questinterfacePINVOKE.Client_GetMoney(swigCPtr, type, subtype);
    return ret;
  }

  public int GetAccountAge() {
    int ret = questinterfacePINVOKE.Client_GetAccountAge(swigCPtr);
    return ret;
  }

  public void SendPath(Mob target) {
    questinterfacePINVOKE.Client_SendPath(swigCPtr, Mob.getCPtr(target));
  }

  public bool IsDiscovered(uint itemid) {
    bool ret = questinterfacePINVOKE.Client_IsDiscovered(swigCPtr, itemid);
    return ret;
  }

  public void DiscoverItem(uint itemid) {
    questinterfacePINVOKE.Client_DiscoverItem(swigCPtr, itemid);
  }

  public bool TGB() {
    bool ret = questinterfacePINVOKE.Client_TGB(swigCPtr);
    return ret;
  }

  public void OnDisconnect(bool hard_disconnect) {
    questinterfacePINVOKE.Client_OnDisconnect(swigCPtr, hard_disconnect);
  }

  public ushort GetSkillPoints() {
    ushort ret = questinterfacePINVOKE.Client_GetSkillPoints(swigCPtr);
    return ret;
  }

  public void SetSkillPoints(int inp) {
    questinterfacePINVOKE.Client_SetSkillPoints(swigCPtr, inp);
  }

  public void IncreaseSkill(int skill_id, int value) {
    questinterfacePINVOKE.Client_IncreaseSkill__SWIG_0(swigCPtr, skill_id, value);
  }

  public void IncreaseSkill(int skill_id) {
    questinterfacePINVOKE.Client_IncreaseSkill__SWIG_1(swigCPtr, skill_id);
  }

  public void IncreaseLanguageSkill(byte language_id, byte increase) {
    questinterfacePINVOKE.Client_IncreaseLanguageSkill__SWIG_0(swigCPtr, language_id, increase);
  }

  public void IncreaseLanguageSkill(byte language_id) {
    questinterfacePINVOKE.Client_IncreaseLanguageSkill__SWIG_1(swigCPtr, language_id);
  }

  public override ushort GetSkill(SWIGTYPE_p_EQ__skills__SkillType skill_id) {
    ushort ret = questinterfacePINVOKE.Client_GetSkill(swigCPtr, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skill_id));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetRawSkill(SWIGTYPE_p_EQ__skills__SkillType skill_id) {
    uint ret = questinterfacePINVOKE.Client_GetRawSkill(swigCPtr, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skill_id));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool HasSkill(SWIGTYPE_p_EQ__skills__SkillType skill_id) {
    bool ret = questinterfacePINVOKE.Client_HasSkill(swigCPtr, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skill_id));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool CanHaveSkill(SWIGTYPE_p_EQ__skills__SkillType skill_id) {
    bool ret = questinterfacePINVOKE.Client_CanHaveSkill(swigCPtr, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skill_id));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetSkill(SWIGTYPE_p_EQ__skills__SkillType skill_num, ushort value) {
    questinterfacePINVOKE.Client_SetSkill(swigCPtr, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skill_num), value);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddSkill(SWIGTYPE_p_EQ__skills__SkillType skillid, ushort value) {
    questinterfacePINVOKE.Client_AddSkill(swigCPtr, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skillid), value);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void CheckSpecializeIncrease(ushort spell_id) {
    questinterfacePINVOKE.Client_CheckSpecializeIncrease(swigCPtr, spell_id);
  }

  public void CheckSongSkillIncrease(ushort spell_id) {
    questinterfacePINVOKE.Client_CheckSongSkillIncrease(swigCPtr, spell_id);
  }

  public bool CheckIncreaseSkill(SWIGTYPE_p_EQ__skills__SkillType skillid, Mob against_who, int chancemodi) {
    bool ret = questinterfacePINVOKE.Client_CheckIncreaseSkill__SWIG_0(swigCPtr, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skillid), Mob.getCPtr(against_who), chancemodi);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool CheckIncreaseSkill(SWIGTYPE_p_EQ__skills__SkillType skillid, Mob against_who) {
    bool ret = questinterfacePINVOKE.Client_CheckIncreaseSkill__SWIG_1(swigCPtr, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skillid), Mob.getCPtr(against_who));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void CheckLanguageSkillIncrease(byte language_id, byte teacher_skill) {
    questinterfacePINVOKE.Client_CheckLanguageSkillIncrease(swigCPtr, language_id, teacher_skill);
  }

  public void SetLanguageSkill(byte language_id, byte language_skill) {
    questinterfacePINVOKE.Client_SetLanguageSkill(swigCPtr, language_id, language_skill);
  }

  public void SetHoTT(uint mobid) {
    questinterfacePINVOKE.Client_SetHoTT(swigCPtr, mobid);
  }

  public void ShowSkillsWindow() {
    questinterfacePINVOKE.Client_ShowSkillsWindow(swigCPtr);
  }

  public ushort MaxSkill(SWIGTYPE_p_EQ__skills__SkillType skillid, ushort class_, ushort level) {
    ushort ret = questinterfacePINVOKE.Client_MaxSkill__SWIG_0(swigCPtr, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skillid), class_, level);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort MaxSkill(SWIGTYPE_p_EQ__skills__SkillType skillid) {
    ushort ret = questinterfacePINVOKE.Client_MaxSkill__SWIG_1(swigCPtr, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skillid));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public byte SkillTrainLevel(SWIGTYPE_p_EQ__skills__SkillType skillid, ushort class_) {
    byte ret = questinterfacePINVOKE.Client_SkillTrainLevel(swigCPtr, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skillid), class_);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void MaxSkills() {
    questinterfacePINVOKE.Client_MaxSkills(swigCPtr);
  }

  public void SendTradeskillSearchResults(SWIGTYPE_p_std__string query, uint objtype, uint someid) {
    questinterfacePINVOKE.Client_SendTradeskillSearchResults(swigCPtr, SWIGTYPE_p_std__string.getCPtr(query), objtype, someid);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SendTradeskillDetails(uint recipe_id) {
    questinterfacePINVOKE.Client_SendTradeskillDetails(swigCPtr, recipe_id);
  }

  public bool TradeskillExecute(DBTradeskillRecipe_Struct spec) {
    bool ret = questinterfacePINVOKE.Client_TradeskillExecute(swigCPtr, DBTradeskillRecipe_Struct.getCPtr(spec));
    return ret;
  }

  public void CheckIncreaseTradeskill(short bonusstat, short stat_modifier, float skillup_modifier, ushort success_modifier, SWIGTYPE_p_EQ__skills__SkillType tradeskill) {
    questinterfacePINVOKE.Client_CheckIncreaseTradeskill(swigCPtr, bonusstat, stat_modifier, skillup_modifier, success_modifier, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(tradeskill));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool CheckTradeskillLoreConflict(int recipe_id) {
    bool ret = questinterfacePINVOKE.Client_CheckTradeskillLoreConflict(swigCPtr, recipe_id);
    return ret;
  }

  public void InitInnates() {
    questinterfacePINVOKE.Client_InitInnates(swigCPtr);
  }

  public void GMKill() {
    questinterfacePINVOKE.Client_GMKill(swigCPtr);
  }

  public bool IsMedding() {
    bool ret = questinterfacePINVOKE.Client_IsMedding(swigCPtr);
    return ret;
  }

  public uint GetDuelTarget() {
    uint ret = questinterfacePINVOKE.Client_GetDuelTarget(swigCPtr);
    return ret;
  }

  public bool IsDueling() {
    bool ret = questinterfacePINVOKE.Client_IsDueling(swigCPtr);
    return ret;
  }

  public void SetDuelTarget(uint set_id) {
    questinterfacePINVOKE.Client_SetDuelTarget(swigCPtr, set_id);
  }

  public void SetDueling(bool duel) {
    questinterfacePINVOKE.Client_SetDueling(swigCPtr, duel);
  }

  public void MemSpell(ushort spell_id, int slot, bool update_client) {
    questinterfacePINVOKE.Client_MemSpell__SWIG_0(swigCPtr, spell_id, slot, update_client);
  }

  public void MemSpell(ushort spell_id, int slot) {
    questinterfacePINVOKE.Client_MemSpell__SWIG_1(swigCPtr, spell_id, slot);
  }

  public void UnmemSpell(int slot, bool update_client) {
    questinterfacePINVOKE.Client_UnmemSpell__SWIG_0(swigCPtr, slot, update_client);
  }

  public void UnmemSpell(int slot) {
    questinterfacePINVOKE.Client_UnmemSpell__SWIG_1(swigCPtr, slot);
  }

  public void UnmemSpellBySpellID(int spell_id) {
    questinterfacePINVOKE.Client_UnmemSpellBySpellID(swigCPtr, spell_id);
  }

  public void UnmemSpellAll(bool update_client) {
    questinterfacePINVOKE.Client_UnmemSpellAll__SWIG_0(swigCPtr, update_client);
  }

  public void UnmemSpellAll() {
    questinterfacePINVOKE.Client_UnmemSpellAll__SWIG_1(swigCPtr);
  }

  public int FindEmptyMemSlot() {
    int ret = questinterfacePINVOKE.Client_FindEmptyMemSlot(swigCPtr);
    return ret;
  }

  public ushort FindMemmedSpellBySlot(int slot) {
    ushort ret = questinterfacePINVOKE.Client_FindMemmedSpellBySlot(swigCPtr, slot);
    return ret;
  }

  public int FindMemmedSpellBySpellID(ushort spell_id) {
    int ret = questinterfacePINVOKE.Client_FindMemmedSpellBySpellID(swigCPtr, spell_id);
    return ret;
  }

  public int MemmedCount() {
    int ret = questinterfacePINVOKE.Client_MemmedCount(swigCPtr);
    return ret;
  }

  public IntVector GetLearnableDisciplines(byte min_level, byte max_level) {
    IntVector ret = new IntVector(questinterfacePINVOKE.Client_GetLearnableDisciplines__SWIG_0(swigCPtr, min_level, max_level), true);
    return ret;
  }

  public IntVector GetLearnableDisciplines(byte min_level) {
    IntVector ret = new IntVector(questinterfacePINVOKE.Client_GetLearnableDisciplines__SWIG_1(swigCPtr, min_level), true);
    return ret;
  }

  public IntVector GetLearnableDisciplines() {
    IntVector ret = new IntVector(questinterfacePINVOKE.Client_GetLearnableDisciplines__SWIG_2(swigCPtr), true);
    return ret;
  }

  public IntVector GetLearnedDisciplines() {
    IntVector ret = new IntVector(questinterfacePINVOKE.Client_GetLearnedDisciplines(swigCPtr), true);
    return ret;
  }

  public IntVector GetMemmedSpells() {
    IntVector ret = new IntVector(questinterfacePINVOKE.Client_GetMemmedSpells(swigCPtr), true);
    return ret;
  }

  public IntVector GetScribeableSpells(byte min_level, byte max_level) {
    IntVector ret = new IntVector(questinterfacePINVOKE.Client_GetScribeableSpells__SWIG_0(swigCPtr, min_level, max_level), true);
    return ret;
  }

  public IntVector GetScribeableSpells(byte min_level) {
    IntVector ret = new IntVector(questinterfacePINVOKE.Client_GetScribeableSpells__SWIG_1(swigCPtr, min_level), true);
    return ret;
  }

  public IntVector GetScribeableSpells() {
    IntVector ret = new IntVector(questinterfacePINVOKE.Client_GetScribeableSpells__SWIG_2(swigCPtr), true);
    return ret;
  }

  public IntVector GetScribedSpells() {
    IntVector ret = new IntVector(questinterfacePINVOKE.Client_GetScribedSpells(swigCPtr), true);
    return ret;
  }

  public void ScribeSpell(ushort spell_id, int slot, bool update_client, bool defer_save) {
    questinterfacePINVOKE.Client_ScribeSpell__SWIG_0(swigCPtr, spell_id, slot, update_client, defer_save);
  }

  public void ScribeSpell(ushort spell_id, int slot, bool update_client) {
    questinterfacePINVOKE.Client_ScribeSpell__SWIG_1(swigCPtr, spell_id, slot, update_client);
  }

  public void ScribeSpell(ushort spell_id, int slot) {
    questinterfacePINVOKE.Client_ScribeSpell__SWIG_2(swigCPtr, spell_id, slot);
  }

  public void SaveSpells() {
    questinterfacePINVOKE.Client_SaveSpells(swigCPtr);
  }

  public void SaveDisciplines() {
    questinterfacePINVOKE.Client_SaveDisciplines(swigCPtr);
  }

  public ushort ScribeSpells(byte min_level, byte max_level) {
    ushort ret = questinterfacePINVOKE.Client_ScribeSpells(swigCPtr, min_level, max_level);
    return ret;
  }

  public ushort LearnDisciplines(byte min_level, byte max_level) {
    ushort ret = questinterfacePINVOKE.Client_LearnDisciplines(swigCPtr, min_level, max_level);
    return ret;
  }

  public ushort GetClassTrackingDistanceMultiplier(ushort class_) {
    ushort ret = questinterfacePINVOKE.Client_GetClassTrackingDistanceMultiplier(swigCPtr, class_);
    return ret;
  }

  public bool CanThisClassTrack() {
    bool ret = questinterfacePINVOKE.Client_CanThisClassTrack(swigCPtr);
    return ret;
  }

  public void UnscribeSpell(int slot, bool update_client, bool defer_save) {
    questinterfacePINVOKE.Client_UnscribeSpell__SWIG_0(swigCPtr, slot, update_client, defer_save);
  }

  public void UnscribeSpell(int slot, bool update_client) {
    questinterfacePINVOKE.Client_UnscribeSpell__SWIG_1(swigCPtr, slot, update_client);
  }

  public void UnscribeSpell(int slot) {
    questinterfacePINVOKE.Client_UnscribeSpell__SWIG_2(swigCPtr, slot);
  }

  public void UnscribeSpellAll(bool update_client) {
    questinterfacePINVOKE.Client_UnscribeSpellAll__SWIG_0(swigCPtr, update_client);
  }

  public void UnscribeSpellAll() {
    questinterfacePINVOKE.Client_UnscribeSpellAll__SWIG_1(swigCPtr);
  }

  public void UnscribeSpellBySpellID(ushort spell_id, bool update_client) {
    questinterfacePINVOKE.Client_UnscribeSpellBySpellID__SWIG_0(swigCPtr, spell_id, update_client);
  }

  public void UnscribeSpellBySpellID(ushort spell_id) {
    questinterfacePINVOKE.Client_UnscribeSpellBySpellID__SWIG_1(swigCPtr, spell_id);
  }

  public void UntrainDisc(int slot, bool update_client, bool defer_save) {
    questinterfacePINVOKE.Client_UntrainDisc__SWIG_0(swigCPtr, slot, update_client, defer_save);
  }

  public void UntrainDisc(int slot, bool update_client) {
    questinterfacePINVOKE.Client_UntrainDisc__SWIG_1(swigCPtr, slot, update_client);
  }

  public void UntrainDisc(int slot) {
    questinterfacePINVOKE.Client_UntrainDisc__SWIG_2(swigCPtr, slot);
  }

  public void UntrainDiscAll(bool update_client) {
    questinterfacePINVOKE.Client_UntrainDiscAll__SWIG_0(swigCPtr, update_client);
  }

  public void UntrainDiscAll() {
    questinterfacePINVOKE.Client_UntrainDiscAll__SWIG_1(swigCPtr);
  }

  public void UntrainDiscBySpellID(ushort spell_id, bool update_client) {
    questinterfacePINVOKE.Client_UntrainDiscBySpellID__SWIG_0(swigCPtr, spell_id, update_client);
  }

  public void UntrainDiscBySpellID(ushort spell_id) {
    questinterfacePINVOKE.Client_UntrainDiscBySpellID__SWIG_1(swigCPtr, spell_id);
  }

  public bool SpellGlobalCheck(ushort spell_id, uint char_id) {
    bool ret = questinterfacePINVOKE.Client_SpellGlobalCheck(swigCPtr, spell_id, char_id);
    return ret;
  }

  public bool SpellBucketCheck(ushort spell_id, uint char_id) {
    bool ret = questinterfacePINVOKE.Client_SpellBucketCheck(swigCPtr, spell_id, char_id);
    return ret;
  }

  public byte GetCharMaxLevelFromQGlobal() {
    byte ret = questinterfacePINVOKE.Client_GetCharMaxLevelFromQGlobal(swigCPtr);
    return ret;
  }

  public byte GetCharMaxLevelFromBucket() {
    byte ret = questinterfacePINVOKE.Client_GetCharMaxLevelFromBucket(swigCPtr);
    return ret;
  }

  public void Fling(float value, float target_x, float target_y, float target_z, bool ignore_los, bool clip_through_walls, bool calculate_speed) {
    questinterfacePINVOKE.Client_Fling__SWIG_0(swigCPtr, value, target_x, target_y, target_z, ignore_los, clip_through_walls, calculate_speed);
  }

  public void Fling(float value, float target_x, float target_y, float target_z, bool ignore_los, bool clip_through_walls) {
    questinterfacePINVOKE.Client_Fling__SWIG_1(swigCPtr, value, target_x, target_y, target_z, ignore_los, clip_through_walls);
  }

  public void Fling(float value, float target_x, float target_y, float target_z, bool ignore_los) {
    questinterfacePINVOKE.Client_Fling__SWIG_2(swigCPtr, value, target_x, target_y, target_z, ignore_los);
  }

  public void Fling(float value, float target_x, float target_y, float target_z) {
    questinterfacePINVOKE.Client_Fling__SWIG_3(swigCPtr, value, target_x, target_y, target_z);
  }

  public bool IsStanding() {
    bool ret = questinterfacePINVOKE.Client_IsStanding(swigCPtr);
    return ret;
  }

  public override bool IsSitting() {
    bool ret = questinterfacePINVOKE.Client_IsSitting(swigCPtr);
    return ret;
  }

  public bool IsCrouching() {
    bool ret = questinterfacePINVOKE.Client_IsCrouching(swigCPtr);
    return ret;
  }

  public bool IsBecomeNPC() {
    bool ret = questinterfacePINVOKE.Client_IsBecomeNPC(swigCPtr);
    return ret;
  }

  public byte GetBecomeNPCLevel() {
    byte ret = questinterfacePINVOKE.Client_GetBecomeNPCLevel(swigCPtr);
    return ret;
  }

  public void SetBecomeNPC(bool flag) {
    questinterfacePINVOKE.Client_SetBecomeNPC(swigCPtr, flag);
  }

  public void SetBecomeNPCLevel(byte level) {
    questinterfacePINVOKE.Client_SetBecomeNPCLevel(swigCPtr, level);
  }

  public SWIGTYPE_p_EQStreamInterface Connection() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Client_Connection(swigCPtr);
    SWIGTYPE_p_EQStreamInterface ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_EQStreamInterface(cPtr, false);
    return ret;
  }

  public override uint GetEquippedItemFromTextureSlot(byte material_slot) {
    uint ret = questinterfacePINVOKE.Client_GetEquippedItemFromTextureSlot(swigCPtr, material_slot);
    return ret;
  }

  public override uint GetEquipmentColor(byte material_slot) {
    uint ret = questinterfacePINVOKE.Client_GetEquipmentColor(swigCPtr, material_slot);
    return ret;
  }

  public override void UpdateEquipmentLight() {
    questinterfacePINVOKE.Client_UpdateEquipmentLight(swigCPtr);
  }

  public bool AutoSplitEnabled() {
    bool ret = questinterfacePINVOKE.Client_AutoSplitEnabled(swigCPtr);
    return ret;
  }

  public bool AutoConsentGroupEnabled() {
    bool ret = questinterfacePINVOKE.Client_AutoConsentGroupEnabled(swigCPtr);
    return ret;
  }

  public bool AutoConsentRaidEnabled() {
    bool ret = questinterfacePINVOKE.Client_AutoConsentRaidEnabled(swigCPtr);
    return ret;
  }

  public bool AutoConsentGuildEnabled() {
    bool ret = questinterfacePINVOKE.Client_AutoConsentGuildEnabled(swigCPtr);
    return ret;
  }

  public void SummonHorse(ushort spell_id) {
    questinterfacePINVOKE.Client_SummonHorse(swigCPtr, spell_id);
  }

  public void SetHorseId(ushort horseid_in) {
    questinterfacePINVOKE.Client_SetHorseId(swigCPtr, horseid_in);
  }

  public void SetControlledMobId(ushort mob_id_in) {
    questinterfacePINVOKE.Client_SetControlledMobId(swigCPtr, mob_id_in);
  }

  public ushort GetControlledMobId() {
    ushort ret = questinterfacePINVOKE.Client_GetControlledMobId(swigCPtr);
    return ret;
  }

  public ushort GetHorseId() {
    ushort ret = questinterfacePINVOKE.Client_GetHorseId(swigCPtr);
    return ret;
  }

  public bool CanMedOnHorse() {
    bool ret = questinterfacePINVOKE.Client_CanMedOnHorse(swigCPtr);
    return ret;
  }

  public bool CanFastRegen() {
    bool ret = questinterfacePINVOKE.Client_CanFastRegen(swigCPtr);
    return ret;
  }

  public void NPCSpawn(NPC target_npc, string identifier, uint extra) {
    questinterfacePINVOKE.Client_NPCSpawn__SWIG_0(swigCPtr, NPC.getCPtr(target_npc), identifier, extra);
  }

  public void NPCSpawn(NPC target_npc, string identifier) {
    questinterfacePINVOKE.Client_NPCSpawn__SWIG_1(swigCPtr, NPC.getCPtr(target_npc), identifier);
  }

  public void Disarm(Client disarmer, int chance) {
    questinterfacePINVOKE.Client_Disarm(swigCPtr, Client.getCPtr(disarmer), chance);
  }

  public bool BindWound(Mob bindmob, bool start, bool fail) {
    bool ret = questinterfacePINVOKE.Client_BindWound__SWIG_0(swigCPtr, Mob.getCPtr(bindmob), start, fail);
    return ret;
  }

  public bool BindWound(Mob bindmob, bool start) {
    bool ret = questinterfacePINVOKE.Client_BindWound__SWIG_1(swigCPtr, Mob.getCPtr(bindmob), start);
    return ret;
  }

  public void SetTradeskillObject(Object object_) {
    questinterfacePINVOKE.Client_SetTradeskillObject(swigCPtr, Object.getCPtr(object_));
  }

  public Object GetTradeskillObject() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Client_GetTradeskillObject(swigCPtr);
    Object ret = (cPtr == global::System.IntPtr.Zero) ? null : new Object(cPtr, false);
    return ret;
  }

  public void SendTributes() {
    questinterfacePINVOKE.Client_SendTributes(swigCPtr);
  }

  public void SendGuildTributes() {
    questinterfacePINVOKE.Client_SendGuildTributes(swigCPtr);
  }

  public void DoTributeUpdate() {
    questinterfacePINVOKE.Client_DoTributeUpdate(swigCPtr);
  }

  public void SendTributeDetails(uint client_id, uint tribute_id) {
    questinterfacePINVOKE.Client_SendTributeDetails(swigCPtr, client_id, tribute_id);
  }

  public int TributeItem(uint slot, uint quantity) {
    int ret = questinterfacePINVOKE.Client_TributeItem(swigCPtr, slot, quantity);
    return ret;
  }

  public int TributeMoney(uint platinum) {
    int ret = questinterfacePINVOKE.Client_TributeMoney(swigCPtr, platinum);
    return ret;
  }

  public void AddTributePoints(int ammount) {
    questinterfacePINVOKE.Client_AddTributePoints(swigCPtr, ammount);
  }

  public void ChangeTributeSettings(SWIGTYPE_p_TributeInfo_Struct t) {
    questinterfacePINVOKE.Client_ChangeTributeSettings(swigCPtr, SWIGTYPE_p_TributeInfo_Struct.getCPtr(t));
  }

  public void SendTributeTimer() {
    questinterfacePINVOKE.Client_SendTributeTimer(swigCPtr);
  }

  public void ToggleTribute(bool enabled) {
    questinterfacePINVOKE.Client_ToggleTribute(swigCPtr, enabled);
  }

  public void SendPathPacket(SWIGTYPE_p_std__vectorT_FindPerson_Point_t path) {
    questinterfacePINVOKE.Client_SendPathPacket(swigCPtr, SWIGTYPE_p_std__vectorT_FindPerson_Point_t.getCPtr(path));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_PTimerList GetPTimers() {
    SWIGTYPE_p_PTimerList ret = new SWIGTYPE_p_PTimerList(questinterfacePINVOKE.Client_GetPTimers(swigCPtr), false);
    return ret;
  }

  public void SendAlternateAdvancementRank(int aa_id, int level) {
    questinterfacePINVOKE.Client_SendAlternateAdvancementRank(swigCPtr, aa_id, level);
  }

  public void SendAlternateAdvancementTable() {
    questinterfacePINVOKE.Client_SendAlternateAdvancementTable(swigCPtr);
  }

  public void SendAlternateAdvancementStats() {
    questinterfacePINVOKE.Client_SendAlternateAdvancementStats(swigCPtr);
  }

  public void PurchaseAlternateAdvancementRank(int rank_id) {
    questinterfacePINVOKE.Client_PurchaseAlternateAdvancementRank(swigCPtr, rank_id);
  }

  public bool GrantAlternateAdvancementAbility(int aa_id, int points, bool ignore_cost) {
    bool ret = questinterfacePINVOKE.Client_GrantAlternateAdvancementAbility__SWIG_0(swigCPtr, aa_id, points, ignore_cost);
    return ret;
  }

  public bool GrantAlternateAdvancementAbility(int aa_id, int points) {
    bool ret = questinterfacePINVOKE.Client_GrantAlternateAdvancementAbility__SWIG_1(swigCPtr, aa_id, points);
    return ret;
  }

  public void IncrementAlternateAdvancementRank(int rank_id) {
    questinterfacePINVOKE.Client_IncrementAlternateAdvancementRank(swigCPtr, rank_id);
  }

  public void ActivateAlternateAdvancementAbility(int rank_id, int target_id) {
    questinterfacePINVOKE.Client_ActivateAlternateAdvancementAbility(swigCPtr, rank_id, target_id);
  }

  public void SendAlternateAdvancementPoints() {
    questinterfacePINVOKE.Client_SendAlternateAdvancementPoints(swigCPtr);
  }

  public void SendAlternateAdvancementTimer(int ability, int begin, int end) {
    questinterfacePINVOKE.Client_SendAlternateAdvancementTimer(swigCPtr, ability, begin, end);
  }

  public void SendAlternateAdvancementTimers() {
    questinterfacePINVOKE.Client_SendAlternateAdvancementTimers(swigCPtr);
  }

  public void ResetAlternateAdvancementTimer(int ability) {
    questinterfacePINVOKE.Client_ResetAlternateAdvancementTimer(swigCPtr, ability);
  }

  public void ResetAlternateAdvancementTimers() {
    questinterfacePINVOKE.Client_ResetAlternateAdvancementTimers(swigCPtr);
  }

  public void ResetOnDeathAlternateAdvancement() {
    questinterfacePINVOKE.Client_ResetOnDeathAlternateAdvancement(swigCPtr);
  }

  public void SetAAPoints(uint points) {
    questinterfacePINVOKE.Client_SetAAPoints(swigCPtr, points);
  }

  public void AddAAPoints(uint points) {
    questinterfacePINVOKE.Client_AddAAPoints(swigCPtr, points);
  }

  public int GetAAPoints() {
    int ret = questinterfacePINVOKE.Client_GetAAPoints(swigCPtr);
    return ret;
  }

  public int GetSpentAA() {
    int ret = questinterfacePINVOKE.Client_GetSpentAA(swigCPtr);
    return ret;
  }

  public uint GetRequiredAAExperience() {
    uint ret = questinterfacePINVOKE.Client_GetRequiredAAExperience(swigCPtr);
    return ret;
  }

  public void AutoGrantAAPoints() {
    questinterfacePINVOKE.Client_AutoGrantAAPoints(swigCPtr);
  }

  public void GrantAllAAPoints(byte unlock_level) {
    questinterfacePINVOKE.Client_GrantAllAAPoints__SWIG_0(swigCPtr, unlock_level);
  }

  public void GrantAllAAPoints() {
    questinterfacePINVOKE.Client_GrantAllAAPoints__SWIG_1(swigCPtr);
  }

  public bool HasAlreadyPurchasedRank(SWIGTYPE_p_AA__Rank rank) {
    bool ret = questinterfacePINVOKE.Client_HasAlreadyPurchasedRank(swigCPtr, SWIGTYPE_p_AA__Rank.getCPtr(rank));
    return ret;
  }

  public void ListPurchasedAAs(Client to, SWIGTYPE_p_std__string search_criteria) {
    questinterfacePINVOKE.Client_ListPurchasedAAs__SWIG_0(swigCPtr, Client.getCPtr(to), SWIGTYPE_p_std__string.getCPtr(search_criteria));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ListPurchasedAAs(Client to) {
    questinterfacePINVOKE.Client_ListPurchasedAAs__SWIG_1(swigCPtr, Client.getCPtr(to));
  }

  public bool SendGMCommand(SWIGTYPE_p_std__string message, bool ignore_status) {
    bool ret = questinterfacePINVOKE.Client_SendGMCommand__SWIG_0(swigCPtr, SWIGTYPE_p_std__string.getCPtr(message), ignore_status);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SendGMCommand(SWIGTYPE_p_std__string message) {
    bool ret = questinterfacePINVOKE.Client_SendGMCommand__SWIG_1(swigCPtr, SWIGTYPE_p_std__string.getCPtr(message));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void RegisterBug(SWIGTYPE_p_BugReport_Struct r) {
    questinterfacePINVOKE.Client_RegisterBug(swigCPtr, SWIGTYPE_p_BugReport_Struct.getCPtr(r));
  }

  public SWIGTYPE_p_std__vectorT_Mob_p_t GetApplySpellList(SWIGTYPE_p_ApplySpellType apply_type, bool allow_pets, bool is_raid_group_only, bool allow_bots) {
    SWIGTYPE_p_std__vectorT_Mob_p_t ret = new SWIGTYPE_p_std__vectorT_Mob_p_t(questinterfacePINVOKE.Client_GetApplySpellList(swigCPtr, SWIGTYPE_p_ApplySpellType.getCPtr(apply_type), allow_pets, is_raid_group_only, allow_bots), true);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void ApplySpell(int spell_id, int duration, int level, SWIGTYPE_p_ApplySpellType apply_type, bool allow_pets, bool is_raid_group_only, bool allow_bots) {
    questinterfacePINVOKE.Client_ApplySpell__SWIG_0(swigCPtr, spell_id, duration, level, SWIGTYPE_p_ApplySpellType.getCPtr(apply_type), allow_pets, is_raid_group_only, allow_bots);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ApplySpell(int spell_id, int duration, int level, SWIGTYPE_p_ApplySpellType apply_type, bool allow_pets, bool is_raid_group_only) {
    questinterfacePINVOKE.Client_ApplySpell__SWIG_1(swigCPtr, spell_id, duration, level, SWIGTYPE_p_ApplySpellType.getCPtr(apply_type), allow_pets, is_raid_group_only);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ApplySpell(int spell_id, int duration, int level, SWIGTYPE_p_ApplySpellType apply_type, bool allow_pets) {
    questinterfacePINVOKE.Client_ApplySpell__SWIG_2(swigCPtr, spell_id, duration, level, SWIGTYPE_p_ApplySpellType.getCPtr(apply_type), allow_pets);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ApplySpell(int spell_id, int duration, int level, SWIGTYPE_p_ApplySpellType apply_type) {
    questinterfacePINVOKE.Client_ApplySpell__SWIG_3(swigCPtr, spell_id, duration, level, SWIGTYPE_p_ApplySpellType.getCPtr(apply_type));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ApplySpell(int spell_id, int duration, int level) {
    questinterfacePINVOKE.Client_ApplySpell__SWIG_4(swigCPtr, spell_id, duration, level);
  }

  public void ApplySpell(int spell_id, int duration) {
    questinterfacePINVOKE.Client_ApplySpell__SWIG_5(swigCPtr, spell_id, duration);
  }

  public void ApplySpell(int spell_id) {
    questinterfacePINVOKE.Client_ApplySpell__SWIG_6(swigCPtr, spell_id);
  }

  public void SetSpellDuration(int spell_id, int duration, int level, SWIGTYPE_p_ApplySpellType apply_type, bool allow_pets, bool is_raid_group_only, bool allow_bots) {
    questinterfacePINVOKE.Client_SetSpellDuration__SWIG_0(swigCPtr, spell_id, duration, level, SWIGTYPE_p_ApplySpellType.getCPtr(apply_type), allow_pets, is_raid_group_only, allow_bots);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSpellDuration(int spell_id, int duration, int level, SWIGTYPE_p_ApplySpellType apply_type, bool allow_pets, bool is_raid_group_only) {
    questinterfacePINVOKE.Client_SetSpellDuration__SWIG_1(swigCPtr, spell_id, duration, level, SWIGTYPE_p_ApplySpellType.getCPtr(apply_type), allow_pets, is_raid_group_only);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSpellDuration(int spell_id, int duration, int level, SWIGTYPE_p_ApplySpellType apply_type, bool allow_pets) {
    questinterfacePINVOKE.Client_SetSpellDuration__SWIG_2(swigCPtr, spell_id, duration, level, SWIGTYPE_p_ApplySpellType.getCPtr(apply_type), allow_pets);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSpellDuration(int spell_id, int duration, int level, SWIGTYPE_p_ApplySpellType apply_type) {
    questinterfacePINVOKE.Client_SetSpellDuration__SWIG_3(swigCPtr, spell_id, duration, level, SWIGTYPE_p_ApplySpellType.getCPtr(apply_type));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSpellDuration(int spell_id, int duration, int level) {
    questinterfacePINVOKE.Client_SetSpellDuration__SWIG_4(swigCPtr, spell_id, duration, level);
  }

  public void SetSpellDuration(int spell_id, int duration) {
    questinterfacePINVOKE.Client_SetSpellDuration__SWIG_5(swigCPtr, spell_id, duration);
  }

  public void SetSpellDuration(int spell_id) {
    questinterfacePINVOKE.Client_SetSpellDuration__SWIG_6(swigCPtr, spell_id);
  }

  public void ResetAA() {
    questinterfacePINVOKE.Client_ResetAA(swigCPtr);
  }

  public void RefundAA() {
    questinterfacePINVOKE.Client_RefundAA(swigCPtr);
  }

  public void SendClearAA() {
    questinterfacePINVOKE.Client_SendClearAA(swigCPtr);
  }

  public void SendClearLeadershipAA() {
    questinterfacePINVOKE.Client_SendClearLeadershipAA(swigCPtr);
  }

  public void SendClearPlayerAA() {
    questinterfacePINVOKE.Client_SendClearPlayerAA(swigCPtr);
  }

  public uint GetAAXP() {
    uint ret = questinterfacePINVOKE.Client_GetAAXP(swigCPtr);
    return ret;
  }

  public uint GetAAPercent() {
    uint ret = questinterfacePINVOKE.Client_GetAAPercent(swigCPtr);
    return ret;
  }

  public void SetAATitle(SWIGTYPE_p_std__string title) {
    questinterfacePINVOKE.Client_SetAATitle(swigCPtr, SWIGTYPE_p_std__string.getCPtr(title));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTitleSuffix(SWIGTYPE_p_std__string suffix) {
    questinterfacePINVOKE.Client_SetTitleSuffix(swigCPtr, SWIGTYPE_p_std__string.getCPtr(suffix));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void MemorizeSpell(uint slot, uint spell_id, uint scribing, uint reduction) {
    questinterfacePINVOKE.Client_MemorizeSpell__SWIG_0(swigCPtr, slot, spell_id, scribing, reduction);
  }

  public void MemorizeSpell(uint slot, uint spell_id, uint scribing) {
    questinterfacePINVOKE.Client_MemorizeSpell__SWIG_1(swigCPtr, slot, spell_id, scribing);
  }

  public int GetAAEXPPercentage() {
    int ret = questinterfacePINVOKE.Client_GetAAEXPPercentage(swigCPtr);
    return ret;
  }

  public int GetEXPPercentage() {
    int ret = questinterfacePINVOKE.Client_GetEXPPercentage(swigCPtr);
    return ret;
  }

  public void UseAugmentContainer(int container_slot) {
    questinterfacePINVOKE.Client_UseAugmentContainer(swigCPtr, container_slot);
  }

  public void EVENT_ITEM_ScriptStopReturn() {
    questinterfacePINVOKE.Client_EVENT_ITEM_ScriptStopReturn(swigCPtr);
  }

  public uint NukeItem(uint itemnum, byte where_to_check) {
    uint ret = questinterfacePINVOKE.Client_NukeItem__SWIG_0(swigCPtr, itemnum, where_to_check);
    return ret;
  }

  public uint NukeItem(uint itemnum) {
    uint ret = questinterfacePINVOKE.Client_NukeItem__SWIG_1(swigCPtr, itemnum);
    return ret;
  }

  public void SetTint(short slot_id, uint color) {
    questinterfacePINVOKE.Client_SetTint__SWIG_0(swigCPtr, slot_id, color);
  }

  public void SetTint(short slot_id, SWIGTYPE_p_EQ__textures__Tint_Struct color) {
    questinterfacePINVOKE.Client_SetTint__SWIG_1(swigCPtr, slot_id, SWIGTYPE_p_EQ__textures__Tint_Struct.getCPtr(color));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMaterial(short slot_id, uint item_id) {
    questinterfacePINVOKE.Client_SetMaterial(swigCPtr, slot_id, item_id);
  }

  public void Undye() {
    questinterfacePINVOKE.Client_Undye(swigCPtr);
  }

  public int GetItemIDAt(short slot_id) {
    int ret = questinterfacePINVOKE.Client_GetItemIDAt(swigCPtr, slot_id);
    return ret;
  }

  public int GetAugmentIDAt(short slot_id, byte augslot) {
    int ret = questinterfacePINVOKE.Client_GetAugmentIDAt(swigCPtr, slot_id, augslot);
    return ret;
  }

  public bool PutItemInInventory(short slot_id, SWIGTYPE_p_EQ__ItemInstance inst, bool client_update) {
    bool ret = questinterfacePINVOKE.Client_PutItemInInventory__SWIG_0(swigCPtr, slot_id, SWIGTYPE_p_EQ__ItemInstance.getCPtr(inst), client_update);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool PutItemInInventory(short slot_id, SWIGTYPE_p_EQ__ItemInstance inst) {
    bool ret = questinterfacePINVOKE.Client_PutItemInInventory__SWIG_1(swigCPtr, slot_id, SWIGTYPE_p_EQ__ItemInstance.getCPtr(inst));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool PushItemOnCursor(SWIGTYPE_p_EQ__ItemInstance inst, bool client_update) {
    bool ret = questinterfacePINVOKE.Client_PushItemOnCursor__SWIG_0(swigCPtr, SWIGTYPE_p_EQ__ItemInstance.getCPtr(inst), client_update);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool PushItemOnCursor(SWIGTYPE_p_EQ__ItemInstance inst) {
    bool ret = questinterfacePINVOKE.Client_PushItemOnCursor__SWIG_1(swigCPtr, SWIGTYPE_p_EQ__ItemInstance.getCPtr(inst));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SendCursorBuffer() {
    questinterfacePINVOKE.Client_SendCursorBuffer(swigCPtr);
  }

  public void DeleteItemInInventory(short slot_id, short quantity, bool client_update, bool update_db) {
    questinterfacePINVOKE.Client_DeleteItemInInventory__SWIG_0(swigCPtr, slot_id, quantity, client_update, update_db);
  }

  public void DeleteItemInInventory(short slot_id, short quantity, bool client_update) {
    questinterfacePINVOKE.Client_DeleteItemInInventory__SWIG_1(swigCPtr, slot_id, quantity, client_update);
  }

  public void DeleteItemInInventory(short slot_id, short quantity) {
    questinterfacePINVOKE.Client_DeleteItemInInventory__SWIG_2(swigCPtr, slot_id, quantity);
  }

  public void DeleteItemInInventory(short slot_id) {
    questinterfacePINVOKE.Client_DeleteItemInInventory__SWIG_3(swigCPtr, slot_id);
  }

  public int CountItem(uint item_id) {
    int ret = questinterfacePINVOKE.Client_CountItem(swigCPtr, item_id);
    return ret;
  }

  public void ResetItemCooldown(uint item_id) {
    questinterfacePINVOKE.Client_ResetItemCooldown(swigCPtr, item_id);
  }

  public void SetItemCooldown(uint item_id, bool use_saved_timer, uint in_seconds) {
    questinterfacePINVOKE.Client_SetItemCooldown__SWIG_0(swigCPtr, item_id, use_saved_timer, in_seconds);
  }

  public void SetItemCooldown(uint item_id, bool use_saved_timer) {
    questinterfacePINVOKE.Client_SetItemCooldown__SWIG_1(swigCPtr, item_id, use_saved_timer);
  }

  public void SetItemCooldown(uint item_id) {
    questinterfacePINVOKE.Client_SetItemCooldown__SWIG_2(swigCPtr, item_id);
  }

  public uint GetItemCooldown(uint item_id) {
    uint ret = questinterfacePINVOKE.Client_GetItemCooldown(swigCPtr, item_id);
    return ret;
  }

  public void RemoveItem(uint item_id, uint quantity) {
    questinterfacePINVOKE.Client_RemoveItem__SWIG_0(swigCPtr, item_id, quantity);
  }

  public void RemoveItem(uint item_id) {
    questinterfacePINVOKE.Client_RemoveItem__SWIG_1(swigCPtr, item_id);
  }

  public bool SwapItem(SWIGTYPE_p_MoveItem_Struct move_in) {
    bool ret = questinterfacePINVOKE.Client_SwapItem(swigCPtr, SWIGTYPE_p_MoveItem_Struct.getCPtr(move_in));
    return ret;
  }

  public void SwapItemResync(SWIGTYPE_p_MoveItem_Struct move_slots) {
    questinterfacePINVOKE.Client_SwapItemResync(swigCPtr, SWIGTYPE_p_MoveItem_Struct.getCPtr(move_slots));
  }

  public void QSSwapItemAuditor(SWIGTYPE_p_MoveItem_Struct move_in, bool postaction_call) {
    questinterfacePINVOKE.Client_QSSwapItemAuditor__SWIG_0(swigCPtr, SWIGTYPE_p_MoveItem_Struct.getCPtr(move_in), postaction_call);
  }

  public void QSSwapItemAuditor(SWIGTYPE_p_MoveItem_Struct move_in) {
    questinterfacePINVOKE.Client_QSSwapItemAuditor__SWIG_1(swigCPtr, SWIGTYPE_p_MoveItem_Struct.getCPtr(move_in));
  }

  public void PutLootInInventory(short slot_id, SWIGTYPE_p_EQ__ItemInstance inst, SWIGTYPE_p_p_LootItem bag_item_data) {
    questinterfacePINVOKE.Client_PutLootInInventory__SWIG_0(swigCPtr, slot_id, SWIGTYPE_p_EQ__ItemInstance.getCPtr(inst), SWIGTYPE_p_p_LootItem.getCPtr(bag_item_data));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void PutLootInInventory(short slot_id, SWIGTYPE_p_EQ__ItemInstance inst) {
    questinterfacePINVOKE.Client_PutLootInInventory__SWIG_1(swigCPtr, slot_id, SWIGTYPE_p_EQ__ItemInstance.getCPtr(inst));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool AutoPutLootInInventory(SWIGTYPE_p_EQ__ItemInstance inst, bool try_worn, bool try_cursor, SWIGTYPE_p_p_LootItem bag_item_data) {
    bool ret = questinterfacePINVOKE.Client_AutoPutLootInInventory__SWIG_0(swigCPtr, SWIGTYPE_p_EQ__ItemInstance.getCPtr(inst), try_worn, try_cursor, SWIGTYPE_p_p_LootItem.getCPtr(bag_item_data));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool AutoPutLootInInventory(SWIGTYPE_p_EQ__ItemInstance inst, bool try_worn, bool try_cursor) {
    bool ret = questinterfacePINVOKE.Client_AutoPutLootInInventory__SWIG_1(swigCPtr, SWIGTYPE_p_EQ__ItemInstance.getCPtr(inst), try_worn, try_cursor);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool AutoPutLootInInventory(SWIGTYPE_p_EQ__ItemInstance inst, bool try_worn) {
    bool ret = questinterfacePINVOKE.Client_AutoPutLootInInventory__SWIG_2(swigCPtr, SWIGTYPE_p_EQ__ItemInstance.getCPtr(inst), try_worn);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool AutoPutLootInInventory(SWIGTYPE_p_EQ__ItemInstance inst) {
    bool ret = questinterfacePINVOKE.Client_AutoPutLootInInventory__SWIG_3(swigCPtr, SWIGTYPE_p_EQ__ItemInstance.getCPtr(inst));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SummonItem(uint item_id, short charges, uint aug1, uint aug2, uint aug3, uint aug4, uint aug5, uint aug6, bool attuned, ushort to_slot, uint ornament_icon, uint ornament_idfile, uint ornament_hero_model) {
    bool ret = questinterfacePINVOKE.Client_SummonItem__SWIG_0(swigCPtr, item_id, charges, aug1, aug2, aug3, aug4, aug5, aug6, attuned, to_slot, ornament_icon, ornament_idfile, ornament_hero_model);
    return ret;
  }

  public bool SummonItem(uint item_id, short charges, uint aug1, uint aug2, uint aug3, uint aug4, uint aug5, uint aug6, bool attuned, ushort to_slot, uint ornament_icon, uint ornament_idfile) {
    bool ret = questinterfacePINVOKE.Client_SummonItem__SWIG_1(swigCPtr, item_id, charges, aug1, aug2, aug3, aug4, aug5, aug6, attuned, to_slot, ornament_icon, ornament_idfile);
    return ret;
  }

  public bool SummonItem(uint item_id, short charges, uint aug1, uint aug2, uint aug3, uint aug4, uint aug5, uint aug6, bool attuned, ushort to_slot, uint ornament_icon) {
    bool ret = questinterfacePINVOKE.Client_SummonItem__SWIG_2(swigCPtr, item_id, charges, aug1, aug2, aug3, aug4, aug5, aug6, attuned, to_slot, ornament_icon);
    return ret;
  }

  public bool SummonItem(uint item_id, short charges, uint aug1, uint aug2, uint aug3, uint aug4, uint aug5, uint aug6, bool attuned, ushort to_slot) {
    bool ret = questinterfacePINVOKE.Client_SummonItem__SWIG_3(swigCPtr, item_id, charges, aug1, aug2, aug3, aug4, aug5, aug6, attuned, to_slot);
    return ret;
  }

  public bool SummonItem(uint item_id, short charges, uint aug1, uint aug2, uint aug3, uint aug4, uint aug5, uint aug6, bool attuned) {
    bool ret = questinterfacePINVOKE.Client_SummonItem__SWIG_4(swigCPtr, item_id, charges, aug1, aug2, aug3, aug4, aug5, aug6, attuned);
    return ret;
  }

  public bool SummonItem(uint item_id, short charges, uint aug1, uint aug2, uint aug3, uint aug4, uint aug5, uint aug6) {
    bool ret = questinterfacePINVOKE.Client_SummonItem__SWIG_5(swigCPtr, item_id, charges, aug1, aug2, aug3, aug4, aug5, aug6);
    return ret;
  }

  public bool SummonItem(uint item_id, short charges, uint aug1, uint aug2, uint aug3, uint aug4, uint aug5) {
    bool ret = questinterfacePINVOKE.Client_SummonItem__SWIG_6(swigCPtr, item_id, charges, aug1, aug2, aug3, aug4, aug5);
    return ret;
  }

  public bool SummonItem(uint item_id, short charges, uint aug1, uint aug2, uint aug3, uint aug4) {
    bool ret = questinterfacePINVOKE.Client_SummonItem__SWIG_7(swigCPtr, item_id, charges, aug1, aug2, aug3, aug4);
    return ret;
  }

  public bool SummonItem(uint item_id, short charges, uint aug1, uint aug2, uint aug3) {
    bool ret = questinterfacePINVOKE.Client_SummonItem__SWIG_8(swigCPtr, item_id, charges, aug1, aug2, aug3);
    return ret;
  }

  public bool SummonItem(uint item_id, short charges, uint aug1, uint aug2) {
    bool ret = questinterfacePINVOKE.Client_SummonItem__SWIG_9(swigCPtr, item_id, charges, aug1, aug2);
    return ret;
  }

  public bool SummonItem(uint item_id, short charges, uint aug1) {
    bool ret = questinterfacePINVOKE.Client_SummonItem__SWIG_10(swigCPtr, item_id, charges, aug1);
    return ret;
  }

  public bool SummonItem(uint item_id, short charges) {
    bool ret = questinterfacePINVOKE.Client_SummonItem__SWIG_11(swigCPtr, item_id, charges);
    return ret;
  }

  public bool SummonItem(uint item_id) {
    bool ret = questinterfacePINVOKE.Client_SummonItem__SWIG_12(swigCPtr, item_id);
    return ret;
  }

  public void SummonItemIntoInventory(uint item_id, short charges, uint aug1, uint aug2, uint aug3, uint aug4, uint aug5, uint aug6, bool is_attuned) {
    questinterfacePINVOKE.Client_SummonItemIntoInventory__SWIG_0(swigCPtr, item_id, charges, aug1, aug2, aug3, aug4, aug5, aug6, is_attuned);
  }

  public void SummonItemIntoInventory(uint item_id, short charges, uint aug1, uint aug2, uint aug3, uint aug4, uint aug5, uint aug6) {
    questinterfacePINVOKE.Client_SummonItemIntoInventory__SWIG_1(swigCPtr, item_id, charges, aug1, aug2, aug3, aug4, aug5, aug6);
  }

  public void SummonItemIntoInventory(uint item_id, short charges, uint aug1, uint aug2, uint aug3, uint aug4, uint aug5) {
    questinterfacePINVOKE.Client_SummonItemIntoInventory__SWIG_2(swigCPtr, item_id, charges, aug1, aug2, aug3, aug4, aug5);
  }

  public void SummonItemIntoInventory(uint item_id, short charges, uint aug1, uint aug2, uint aug3, uint aug4) {
    questinterfacePINVOKE.Client_SummonItemIntoInventory__SWIG_3(swigCPtr, item_id, charges, aug1, aug2, aug3, aug4);
  }

  public void SummonItemIntoInventory(uint item_id, short charges, uint aug1, uint aug2, uint aug3) {
    questinterfacePINVOKE.Client_SummonItemIntoInventory__SWIG_4(swigCPtr, item_id, charges, aug1, aug2, aug3);
  }

  public void SummonItemIntoInventory(uint item_id, short charges, uint aug1, uint aug2) {
    questinterfacePINVOKE.Client_SummonItemIntoInventory__SWIG_5(swigCPtr, item_id, charges, aug1, aug2);
  }

  public void SummonItemIntoInventory(uint item_id, short charges, uint aug1) {
    questinterfacePINVOKE.Client_SummonItemIntoInventory__SWIG_6(swigCPtr, item_id, charges, aug1);
  }

  public void SummonItemIntoInventory(uint item_id, short charges) {
    questinterfacePINVOKE.Client_SummonItemIntoInventory__SWIG_7(swigCPtr, item_id, charges);
  }

  public void SummonItemIntoInventory(uint item_id) {
    questinterfacePINVOKE.Client_SummonItemIntoInventory__SWIG_8(swigCPtr, item_id);
  }

  public void SummonBaggedItems(uint bag_item_id, SWIGTYPE_p_std__vectorT_LootItem_t bag_items) {
    questinterfacePINVOKE.Client_SummonBaggedItems(swigCPtr, bag_item_id, SWIGTYPE_p_std__vectorT_LootItem_t.getCPtr(bag_items));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetStats(byte type, short set_val) {
    questinterfacePINVOKE.Client_SetStats(swigCPtr, type, set_val);
  }

  public void IncStats(byte type, short increase_val) {
    questinterfacePINVOKE.Client_IncStats(swigCPtr, type, increase_val);
  }

  public void DropItem(short slot_id, bool recurse) {
    questinterfacePINVOKE.Client_DropItem__SWIG_0(swigCPtr, slot_id, recurse);
  }

  public void DropItem(short slot_id) {
    questinterfacePINVOKE.Client_DropItem__SWIG_1(swigCPtr, slot_id);
  }

  public void DropItemQS(SWIGTYPE_p_EQ__ItemInstance inst, bool pickup) {
    questinterfacePINVOKE.Client_DropItemQS(swigCPtr, SWIGTYPE_p_EQ__ItemInstance.getCPtr(inst), pickup);
  }

  public bool HasItemOnCorpse(uint item_id) {
    bool ret = questinterfacePINVOKE.Client_HasItemOnCorpse(swigCPtr, item_id);
    return ret;
  }

  public bool IsAugmentRestricted(byte item_type, uint augment_restriction) {
    bool ret = questinterfacePINVOKE.Client_IsAugmentRestricted(swigCPtr, item_type, augment_restriction);
    return ret;
  }

  public int GetItemLinkHash(SWIGTYPE_p_EQ__ItemInstance inst) {
    int ret = questinterfacePINVOKE.Client_GetItemLinkHash(swigCPtr, SWIGTYPE_p_EQ__ItemInstance.getCPtr(inst));
    return ret;
  }

  public void SendItemLink(SWIGTYPE_p_EQ__ItemInstance inst, bool sendtoall) {
    questinterfacePINVOKE.Client_SendItemLink__SWIG_0(swigCPtr, SWIGTYPE_p_EQ__ItemInstance.getCPtr(inst), sendtoall);
  }

  public void SendItemLink(SWIGTYPE_p_EQ__ItemInstance inst) {
    questinterfacePINVOKE.Client_SendItemLink__SWIG_1(swigCPtr, SWIGTYPE_p_EQ__ItemInstance.getCPtr(inst));
  }

  public void SendLootItemInPacket(SWIGTYPE_p_EQ__ItemInstance inst, short slot_id) {
    questinterfacePINVOKE.Client_SendLootItemInPacket(swigCPtr, SWIGTYPE_p_EQ__ItemInstance.getCPtr(inst), slot_id);
  }

  public void SendItemPacket(short slot_id, SWIGTYPE_p_EQ__ItemInstance inst, SWIGTYPE_p_ItemPacketType packet_type) {
    questinterfacePINVOKE.Client_SendItemPacket(swigCPtr, slot_id, SWIGTYPE_p_EQ__ItemInstance.getCPtr(inst), SWIGTYPE_p_ItemPacketType.getCPtr(packet_type));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsValidSlot(uint slot) {
    bool ret = questinterfacePINVOKE.Client_IsValidSlot(swigCPtr, slot);
    return ret;
  }

  public bool IsBankSlot(uint slot) {
    bool ret = questinterfacePINVOKE.Client_IsBankSlot(swigCPtr, slot);
    return ret;
  }

  public bool IsTrader() {
    bool ret = questinterfacePINVOKE.Client_IsTrader(swigCPtr);
    return ret;
  }

  public bool IsBuyer() {
    bool ret = questinterfacePINVOKE.Client_IsBuyer(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_eqFilterMode GetFilter(SWIGTYPE_p_eqFilterType filter_id) {
    SWIGTYPE_p_eqFilterMode ret = new SWIGTYPE_p_eqFilterMode(questinterfacePINVOKE.Client_GetFilter(swigCPtr, SWIGTYPE_p_eqFilterType.getCPtr(filter_id)), true);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetFilter(SWIGTYPE_p_eqFilterType filter_id, SWIGTYPE_p_eqFilterMode filter_mode) {
    questinterfacePINVOKE.Client_SetFilter(swigCPtr, SWIGTYPE_p_eqFilterType.getCPtr(filter_id), SWIGTYPE_p_eqFilterMode.getCPtr(filter_mode));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void CancelSneakHide() {
    questinterfacePINVOKE.Client_CancelSneakHide(swigCPtr);
  }

  public void BreakInvis() {
    questinterfacePINVOKE.Client_BreakInvis(swigCPtr);
  }

  public void BreakSneakWhenCastOn(Mob caster, bool IsResisted) {
    questinterfacePINVOKE.Client_BreakSneakWhenCastOn(swigCPtr, Mob.getCPtr(caster), IsResisted);
  }

  public void BreakFeignDeathWhenCastOn(bool IsResisted) {
    questinterfacePINVOKE.Client_BreakFeignDeathWhenCastOn(swigCPtr, IsResisted);
  }

  public void LeaveGroup() {
    questinterfacePINVOKE.Client_LeaveGroup(swigCPtr);
  }

  public bool Hungry() {
    bool ret = questinterfacePINVOKE.Client_Hungry(swigCPtr);
    return ret;
  }

  public bool Thirsty() {
    bool ret = questinterfacePINVOKE.Client_Thirsty(swigCPtr);
    return ret;
  }

  public int GetHunger() {
    int ret = questinterfacePINVOKE.Client_GetHunger(swigCPtr);
    return ret;
  }

  public int GetThirst() {
    int ret = questinterfacePINVOKE.Client_GetThirst(swigCPtr);
    return ret;
  }

  public void SetHunger(int in_hunger) {
    questinterfacePINVOKE.Client_SetHunger(swigCPtr, in_hunger);
  }

  public void SetThirst(int in_thirst) {
    questinterfacePINVOKE.Client_SetThirst(swigCPtr, in_thirst);
  }

  public void SetConsumption(int in_hunger, int in_thirst) {
    questinterfacePINVOKE.Client_SetConsumption(swigCPtr, in_hunger, in_thirst);
  }

  public bool IsStarved() {
    bool ret = questinterfacePINVOKE.Client_IsStarved(swigCPtr);
    return ret;
  }

  public int GetIntoxication() {
    int ret = questinterfacePINVOKE.Client_GetIntoxication(swigCPtr);
    return ret;
  }

  public bool CheckTradeLoreConflict(Client other) {
    bool ret = questinterfacePINVOKE.Client_CheckTradeLoreConflict(swigCPtr, Client.getCPtr(other));
    return ret;
  }

  public bool CheckTradeNonDroppable() {
    bool ret = questinterfacePINVOKE.Client_CheckTradeNonDroppable(swigCPtr);
    return ret;
  }

  public void LinkDead() {
    questinterfacePINVOKE.Client_LinkDead(swigCPtr);
  }

  public override bool CheckDoubleAttack() {
    bool ret = questinterfacePINVOKE.Client_CheckDoubleAttack(swigCPtr);
    return ret;
  }

  public bool CheckTripleAttack() {
    bool ret = questinterfacePINVOKE.Client_CheckTripleAttack(swigCPtr);
    return ret;
  }

  public bool CheckDoubleRangedAttack() {
    bool ret = questinterfacePINVOKE.Client_CheckDoubleRangedAttack(swigCPtr);
    return ret;
  }

  public override bool CheckDualWield() {
    bool ret = questinterfacePINVOKE.Client_CheckDualWield(swigCPtr);
    return ret;
  }

  public bool DecreaseByID(uint type, short quantity) {
    bool ret = questinterfacePINVOKE.Client_DecreaseByID(swigCPtr, type, quantity);
    return ret;
  }

  public byte SlotConvert2(byte slot) {
    byte ret = questinterfacePINVOKE.Client_SlotConvert2(swigCPtr, slot);
    return ret;
  }

  public void Escape() {
    questinterfacePINVOKE.Client_Escape(swigCPtr);
  }

  public void DisenchantSummonedBags(bool client_update) {
    questinterfacePINVOKE.Client_DisenchantSummonedBags__SWIG_0(swigCPtr, client_update);
  }

  public void DisenchantSummonedBags() {
    questinterfacePINVOKE.Client_DisenchantSummonedBags__SWIG_1(swigCPtr);
  }

  public void RemoveNoRent(bool client_update) {
    questinterfacePINVOKE.Client_RemoveNoRent__SWIG_0(swigCPtr, client_update);
  }

  public void RemoveNoRent() {
    questinterfacePINVOKE.Client_RemoveNoRent__SWIG_1(swigCPtr);
  }

  public void RemoveDuplicateLore(bool client_update) {
    questinterfacePINVOKE.Client_RemoveDuplicateLore__SWIG_0(swigCPtr, client_update);
  }

  public void RemoveDuplicateLore() {
    questinterfacePINVOKE.Client_RemoveDuplicateLore__SWIG_1(swigCPtr);
  }

  public void MoveSlotNotAllowed(bool client_update) {
    questinterfacePINVOKE.Client_MoveSlotNotAllowed__SWIG_0(swigCPtr, client_update);
  }

  public void MoveSlotNotAllowed() {
    questinterfacePINVOKE.Client_MoveSlotNotAllowed__SWIG_1(swigCPtr);
  }

  public virtual void RangedAttack(Mob other, bool CanDoubleAttack) {
    questinterfacePINVOKE.Client_RangedAttack__SWIG_0(swigCPtr, Mob.getCPtr(other), CanDoubleAttack);
  }

  public override void RangedAttack(Mob other) {
    questinterfacePINVOKE.Client_RangedAttack__SWIG_1(swigCPtr, Mob.getCPtr(other));
  }

  public virtual void ThrowingAttack(Mob other, bool CanDoubleAttack) {
    questinterfacePINVOKE.Client_ThrowingAttack__SWIG_0(swigCPtr, Mob.getCPtr(other), CanDoubleAttack);
  }

  public override void ThrowingAttack(Mob other) {
    questinterfacePINVOKE.Client_ThrowingAttack__SWIG_1(swigCPtr, Mob.getCPtr(other));
  }

  public void DoClassAttacks(Mob ca_target, ushort skill, bool IsRiposte) {
    questinterfacePINVOKE.Client_DoClassAttacks__SWIG_0(swigCPtr, Mob.getCPtr(ca_target), skill, IsRiposte);
  }

  public void DoClassAttacks(Mob ca_target, ushort skill) {
    questinterfacePINVOKE.Client_DoClassAttacks__SWIG_1(swigCPtr, Mob.getCPtr(ca_target), skill);
  }

  public void DoClassAttacks(Mob ca_target) {
    questinterfacePINVOKE.Client_DoClassAttacks__SWIG_2(swigCPtr, Mob.getCPtr(ca_target));
  }

  public void ClearZoneFlag(uint zone_id) {
    questinterfacePINVOKE.Client_ClearZoneFlag(swigCPtr, zone_id);
  }

  public SWIGTYPE_p_std__setT_unsigned_int_t GetZoneFlags() {
    SWIGTYPE_p_std__setT_unsigned_int_t ret = new SWIGTYPE_p_std__setT_unsigned_int_t(questinterfacePINVOKE.Client_GetZoneFlags(swigCPtr), true);
    return ret;
  }

  public bool HasZoneFlag(uint zone_id) {
    bool ret = questinterfacePINVOKE.Client_HasZoneFlag(swigCPtr, zone_id);
    return ret;
  }

  public void LoadZoneFlags() {
    questinterfacePINVOKE.Client_LoadZoneFlags(swigCPtr);
  }

  public void SendZoneFlagInfo(Client to) {
    questinterfacePINVOKE.Client_SendZoneFlagInfo(swigCPtr, Client.getCPtr(to));
  }

  public void SetZoneFlag(uint zone_id) {
    questinterfacePINVOKE.Client_SetZoneFlag(swigCPtr, zone_id);
  }

  public void ClearPEQZoneFlag(uint zone_id) {
    questinterfacePINVOKE.Client_ClearPEQZoneFlag(swigCPtr, zone_id);
  }

  public SWIGTYPE_p_std__setT_unsigned_int_t GetPEQZoneFlags() {
    SWIGTYPE_p_std__setT_unsigned_int_t ret = new SWIGTYPE_p_std__setT_unsigned_int_t(questinterfacePINVOKE.Client_GetPEQZoneFlags(swigCPtr), true);
    return ret;
  }

  public bool HasPEQZoneFlag(uint zone_id) {
    bool ret = questinterfacePINVOKE.Client_HasPEQZoneFlag(swigCPtr, zone_id);
    return ret;
  }

  public void LoadPEQZoneFlags() {
    questinterfacePINVOKE.Client_LoadPEQZoneFlags(swigCPtr);
  }

  public void SendPEQZoneFlagInfo(Client to) {
    questinterfacePINVOKE.Client_SendPEQZoneFlagInfo(swigCPtr, Client.getCPtr(to));
  }

  public void SetPEQZoneFlag(uint zone_id) {
    questinterfacePINVOKE.Client_SetPEQZoneFlag(swigCPtr, zone_id);
  }

  public bool CanFish() {
    bool ret = questinterfacePINVOKE.Client_CanFish(swigCPtr);
    return ret;
  }

  public void GoFish() {
    questinterfacePINVOKE.Client_GoFish(swigCPtr);
  }

  public void ForageItem(bool guarantee) {
    questinterfacePINVOKE.Client_ForageItem__SWIG_0(swigCPtr, guarantee);
  }

  public void ForageItem() {
    questinterfacePINVOKE.Client_ForageItem__SWIG_1(swigCPtr);
  }

  public float CalcPriceMod(Mob other, bool reverse) {
    float ret = questinterfacePINVOKE.Client_CalcPriceMod__SWIG_0(swigCPtr, Mob.getCPtr(other), reverse);
    return ret;
  }

  public float CalcPriceMod(Mob other) {
    float ret = questinterfacePINVOKE.Client_CalcPriceMod__SWIG_1(swigCPtr, Mob.getCPtr(other));
    return ret;
  }

  public float CalcPriceMod() {
    float ret = questinterfacePINVOKE.Client_CalcPriceMod__SWIG_2(swigCPtr);
    return ret;
  }

  public void ResetTrade() {
    questinterfacePINVOKE.Client_ResetTrade(swigCPtr);
  }

  public void DropInst(SWIGTYPE_p_EQ__ItemInstance inst) {
    questinterfacePINVOKE.Client_DropInst(swigCPtr, SWIGTYPE_p_EQ__ItemInstance.getCPtr(inst));
  }

  public bool TrainDiscipline(uint itemid) {
    bool ret = questinterfacePINVOKE.Client_TrainDiscipline(swigCPtr, itemid);
    return ret;
  }

  public bool MemorizeSpellFromItem(uint item_id) {
    bool ret = questinterfacePINVOKE.Client_MemorizeSpellFromItem(swigCPtr, item_id);
    return ret;
  }

  public void TrainDiscBySpellID(int spell_id) {
    questinterfacePINVOKE.Client_TrainDiscBySpellID(swigCPtr, spell_id);
  }

  public uint GetDisciplineTimer(uint timer_id) {
    uint ret = questinterfacePINVOKE.Client_GetDisciplineTimer(swigCPtr, timer_id);
    return ret;
  }

  public void ResetAllDisciplineTimers() {
    questinterfacePINVOKE.Client_ResetAllDisciplineTimers(swigCPtr);
  }

  public int GetDiscSlotBySpellID(int spellid) {
    int ret = questinterfacePINVOKE.Client_GetDiscSlotBySpellID(swigCPtr, spellid);
    return ret;
  }

  public void ResetDisciplineTimer(uint timer_id) {
    questinterfacePINVOKE.Client_ResetDisciplineTimer(swigCPtr, timer_id);
  }

  public void SendDisciplineUpdate() {
    questinterfacePINVOKE.Client_SendDisciplineUpdate(swigCPtr);
  }

  public void SendDisciplineTimer(uint timer_id, uint duration) {
    questinterfacePINVOKE.Client_SendDisciplineTimer(swigCPtr, timer_id, duration);
  }

  public bool UseDiscipline(uint spell_id, uint target) {
    bool ret = questinterfacePINVOKE.Client_UseDiscipline(swigCPtr, spell_id, target);
    return ret;
  }

  public bool HasDisciplineLearned(ushort spell_id) {
    bool ret = questinterfacePINVOKE.Client_HasDisciplineLearned(swigCPtr, spell_id);
    return ret;
  }

  public void SetLinkedSpellReuseTimer(uint timer_id, uint duration) {
    questinterfacePINVOKE.Client_SetLinkedSpellReuseTimer(swigCPtr, timer_id, duration);
  }

  public bool IsLinkedSpellReuseTimerReady(uint timer_id) {
    bool ret = questinterfacePINVOKE.Client_IsLinkedSpellReuseTimerReady(swigCPtr, timer_id);
    return ret;
  }

  public void ResetCastbarCooldownBySlot(int slot) {
    questinterfacePINVOKE.Client_ResetCastbarCooldownBySlot(swigCPtr, slot);
  }

  public void ResetAllCastbarCooldowns() {
    questinterfacePINVOKE.Client_ResetAllCastbarCooldowns(swigCPtr);
  }

  public void ResetCastbarCooldownBySpellID(uint spell_id) {
    questinterfacePINVOKE.Client_ResetCastbarCooldownBySpellID(swigCPtr, spell_id);
  }

  public bool CheckTitle(int titleset) {
    bool ret = questinterfacePINVOKE.Client_CheckTitle(swigCPtr, titleset);
    return ret;
  }

  public void EnableTitle(int titleset) {
    questinterfacePINVOKE.Client_EnableTitle(swigCPtr, titleset);
  }

  public void RemoveTitle(int titleset) {
    questinterfacePINVOKE.Client_RemoveTitle(swigCPtr, titleset);
  }

  public void EnteringMessages(Client client) {
    questinterfacePINVOKE.Client_EnteringMessages(swigCPtr, Client.getCPtr(client));
  }

  public void SendRules() {
    questinterfacePINVOKE.Client_SendRules(swigCPtr);
  }

  public bool GetGMSpeed() {
    bool ret = questinterfacePINVOKE.Client_GetGMSpeed(swigCPtr);
    return ret;
  }

  public bool GetGMInvul() {
    bool ret = questinterfacePINVOKE.Client_GetGMInvul(swigCPtr);
    return ret;
  }

  public bool CanUseReport {
    set {
      questinterfacePINVOKE.Client_CanUseReport_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.Client_CanUseReport_get(swigCPtr);
      return ret;
    } 
  }

  public void SendBuffDurationPacket(Buffs_Struct buff, int slot) {
    questinterfacePINVOKE.Client_SendBuffDurationPacket(swigCPtr, Buffs_Struct.getCPtr(buff), slot);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SendBuffNumHitPacket(Buffs_Struct buff, int slot) {
    questinterfacePINVOKE.Client_SendBuffNumHitPacket(swigCPtr, Buffs_Struct.getCPtr(buff), slot);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ProcessInspectRequest(Client requestee, Client requester) {
    questinterfacePINVOKE.Client_ProcessInspectRequest(swigCPtr, Client.getCPtr(requestee), Client.getCPtr(requester));
  }

  public bool ClientFinishedLoading() {
    bool ret = questinterfacePINVOKE.Client_ClientFinishedLoading(swigCPtr);
    return ret;
  }

  public int FindSpellBookSlotBySpellID(ushort spellid) {
    int ret = questinterfacePINVOKE.Client_FindSpellBookSlotBySpellID(swigCPtr, spellid);
    return ret;
  }

  public uint GetSpellIDByBookSlot(int book_slot) {
    uint ret = questinterfacePINVOKE.Client_GetSpellIDByBookSlot(swigCPtr, book_slot);
    return ret;
  }

  public int GetNextAvailableSpellBookSlot(int starting_slot) {
    int ret = questinterfacePINVOKE.Client_GetNextAvailableSpellBookSlot__SWIG_0(swigCPtr, starting_slot);
    return ret;
  }

  public int GetNextAvailableSpellBookSlot() {
    int ret = questinterfacePINVOKE.Client_GetNextAvailableSpellBookSlot__SWIG_1(swigCPtr);
    return ret;
  }

  public int GetNextAvailableDisciplineSlot(int starting_slot) {
    int ret = questinterfacePINVOKE.Client_GetNextAvailableDisciplineSlot__SWIG_0(swigCPtr, starting_slot);
    return ret;
  }

  public int GetNextAvailableDisciplineSlot() {
    int ret = questinterfacePINVOKE.Client_GetNextAvailableDisciplineSlot__SWIG_1(swigCPtr);
    return ret;
  }

  public uint GetSpellByBookSlot(int book_slot) {
    uint ret = questinterfacePINVOKE.Client_GetSpellByBookSlot(swigCPtr, book_slot);
    return ret;
  }

  public bool HasSpellScribed(int spellid) {
    bool ret = questinterfacePINVOKE.Client_HasSpellScribed(swigCPtr, spellid);
    return ret;
  }

  public uint GetHighestScribedSpellinSpellGroup(uint spell_group) {
    uint ret = questinterfacePINVOKE.Client_GetHighestScribedSpellinSpellGroup(swigCPtr, spell_group);
    return ret;
  }

  public ushort GetMaxSkillAfterSpecializationRules(SWIGTYPE_p_EQ__skills__SkillType skillid, ushort maxSkill) {
    ushort ret = questinterfacePINVOKE.Client_GetMaxSkillAfterSpecializationRules(swigCPtr, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(skillid), maxSkill);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SendPopupToClient(string Title, string Text, uint PopupID, uint Buttons, uint Duration) {
    questinterfacePINVOKE.Client_SendPopupToClient__SWIG_0(swigCPtr, Title, Text, PopupID, Buttons, Duration);
  }

  public void SendPopupToClient(string Title, string Text, uint PopupID, uint Buttons) {
    questinterfacePINVOKE.Client_SendPopupToClient__SWIG_1(swigCPtr, Title, Text, PopupID, Buttons);
  }

  public void SendPopupToClient(string Title, string Text, uint PopupID) {
    questinterfacePINVOKE.Client_SendPopupToClient__SWIG_2(swigCPtr, Title, Text, PopupID);
  }

  public void SendPopupToClient(string Title, string Text) {
    questinterfacePINVOKE.Client_SendPopupToClient__SWIG_3(swigCPtr, Title, Text);
  }

  public void SendFullPopup(string Title, string Text, uint PopupID, uint NegativeID, uint Buttons, uint Duration, string ButtonName0, string ButtonName1, uint SoundControls) {
    questinterfacePINVOKE.Client_SendFullPopup__SWIG_0(swigCPtr, Title, Text, PopupID, NegativeID, Buttons, Duration, ButtonName0, ButtonName1, SoundControls);
  }

  public void SendFullPopup(string Title, string Text, uint PopupID, uint NegativeID, uint Buttons, uint Duration, string ButtonName0, string ButtonName1) {
    questinterfacePINVOKE.Client_SendFullPopup__SWIG_1(swigCPtr, Title, Text, PopupID, NegativeID, Buttons, Duration, ButtonName0, ButtonName1);
  }

  public void SendFullPopup(string Title, string Text, uint PopupID, uint NegativeID, uint Buttons, uint Duration, string ButtonName0) {
    questinterfacePINVOKE.Client_SendFullPopup__SWIG_2(swigCPtr, Title, Text, PopupID, NegativeID, Buttons, Duration, ButtonName0);
  }

  public void SendFullPopup(string Title, string Text, uint PopupID, uint NegativeID, uint Buttons, uint Duration) {
    questinterfacePINVOKE.Client_SendFullPopup__SWIG_3(swigCPtr, Title, Text, PopupID, NegativeID, Buttons, Duration);
  }

  public void SendFullPopup(string Title, string Text, uint PopupID, uint NegativeID, uint Buttons) {
    questinterfacePINVOKE.Client_SendFullPopup__SWIG_4(swigCPtr, Title, Text, PopupID, NegativeID, Buttons);
  }

  public void SendFullPopup(string Title, string Text, uint PopupID, uint NegativeID) {
    questinterfacePINVOKE.Client_SendFullPopup__SWIG_5(swigCPtr, Title, Text, PopupID, NegativeID);
  }

  public void SendFullPopup(string Title, string Text, uint PopupID) {
    questinterfacePINVOKE.Client_SendFullPopup__SWIG_6(swigCPtr, Title, Text, PopupID);
  }

  public void SendFullPopup(string Title, string Text) {
    questinterfacePINVOKE.Client_SendFullPopup__SWIG_7(swigCPtr, Title, Text);
  }

  public void SendWindow(uint button_one_id, uint button_two_id, uint button_type, string button_one_text, string button_two_text, uint duration, int title_type, Mob target, string title, string text) {
    questinterfacePINVOKE.Client_SendWindow(swigCPtr, button_one_id, button_two_id, button_type, button_one_text, button_two_text, duration, title_type, Mob.getCPtr(target), title, text);
  }

  public bool PendingTranslocate {
    set {
      questinterfacePINVOKE.Client_PendingTranslocate_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.Client_PendingTranslocate_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_time_t TranslocateTime {
    set {
      questinterfacePINVOKE.Client_TranslocateTime_set(swigCPtr, SWIGTYPE_p_time_t.getCPtr(value));
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_time_t ret = new SWIGTYPE_p_time_t(questinterfacePINVOKE.Client_TranslocateTime_get(swigCPtr), true);
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool PendingSacrifice {
    set {
      questinterfacePINVOKE.Client_PendingSacrifice_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.Client_PendingSacrifice_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__string SacrificeCaster {
    set {
      questinterfacePINVOKE.Client_SacrificeCaster_set(swigCPtr, SWIGTYPE_p_std__string.getCPtr(value));
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(questinterfacePINVOKE.Client_SacrificeCaster_get(swigCPtr), true);
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_PendingTranslocate_Struct PendingTranslocateData {
    set {
      questinterfacePINVOKE.Client_PendingTranslocateData_set(swigCPtr, SWIGTYPE_p_PendingTranslocate_Struct.getCPtr(value));
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_PendingTranslocate_Struct ret = new SWIGTYPE_p_PendingTranslocate_Struct(questinterfacePINVOKE.Client_PendingTranslocateData_get(swigCPtr), true);
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public void SendOPTranslocateConfirm(Mob Caster, ushort SpellID) {
    questinterfacePINVOKE.Client_SendOPTranslocateConfirm(swigCPtr, Mob.getCPtr(Caster), SpellID);
  }

  public void LoadClientTaskState() {
    questinterfacePINVOKE.Client_LoadClientTaskState(swigCPtr);
  }

  public void RemoveClientTaskState() {
    questinterfacePINVOKE.Client_RemoveClientTaskState(swigCPtr);
  }

  public void SendTaskActivityComplete(int task_id, int activity_id, int task_index, SWIGTYPE_p_TaskType task_type, int task_incomplete) {
    questinterfacePINVOKE.Client_SendTaskActivityComplete__SWIG_0(swigCPtr, task_id, activity_id, task_index, SWIGTYPE_p_TaskType.getCPtr(task_type), task_incomplete);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SendTaskActivityComplete(int task_id, int activity_id, int task_index, SWIGTYPE_p_TaskType task_type) {
    questinterfacePINVOKE.Client_SendTaskActivityComplete__SWIG_1(swigCPtr, task_id, activity_id, task_index, SWIGTYPE_p_TaskType.getCPtr(task_type));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SendTaskFailed(int task_id, int task_index, SWIGTYPE_p_TaskType task_type) {
    questinterfacePINVOKE.Client_SendTaskFailed(swigCPtr, task_id, task_index, SWIGTYPE_p_TaskType.getCPtr(task_type));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool HasTaskRequestCooldownTimer() {
    bool ret = questinterfacePINVOKE.Client_HasTaskRequestCooldownTimer(swigCPtr);
    return ret;
  }

  public void SendTaskRequestCooldownTimerMessage() {
    questinterfacePINVOKE.Client_SendTaskRequestCooldownTimerMessage(swigCPtr);
  }

  public void StartTaskRequestCooldownTimer() {
    questinterfacePINVOKE.Client_StartTaskRequestCooldownTimer(swigCPtr);
  }

  public SWIGTYPE_p_ClientTaskState GetTaskState() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Client_GetTaskState(swigCPtr);
    SWIGTYPE_p_ClientTaskState ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ClientTaskState(cPtr, false);
    return ret;
  }

  public bool HasTaskState() {
    bool ret = questinterfacePINVOKE.Client_HasTaskState(swigCPtr);
    return ret;
  }

  public void CancelTask(int task_index, SWIGTYPE_p_TaskType task_type) {
    questinterfacePINVOKE.Client_CancelTask(swigCPtr, task_index, SWIGTYPE_p_TaskType.getCPtr(task_type));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool SaveTaskState() {
    bool ret = questinterfacePINVOKE.Client_SaveTaskState(swigCPtr);
    return ret;
  }

  public bool IsTaskStateLoaded() {
    bool ret = questinterfacePINVOKE.Client_IsTaskStateLoaded(swigCPtr);
    return ret;
  }

  public bool IsTaskActive(int task_id) {
    bool ret = questinterfacePINVOKE.Client_IsTaskActive(swigCPtr, task_id);
    return ret;
  }

  public bool IsTaskActivityActive(int task_id, int activity_id) {
    bool ret = questinterfacePINVOKE.Client_IsTaskActivityActive(swigCPtr, task_id, activity_id);
    return ret;
  }

  public SWIGTYPE_p_ActivityState GetTaskActivityState(SWIGTYPE_p_TaskType task_type, int index, int activity_id) {
    SWIGTYPE_p_ActivityState ret = new SWIGTYPE_p_ActivityState(questinterfacePINVOKE.Client_GetTaskActivityState(swigCPtr, SWIGTYPE_p_TaskType.getCPtr(task_type), index, activity_id), true);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void UpdateTaskActivity(int task_id, int activity_id, int count, bool ignore_quest_update) {
    questinterfacePINVOKE.Client_UpdateTaskActivity__SWIG_0(swigCPtr, task_id, activity_id, count, ignore_quest_update);
  }

  public void UpdateTaskActivity(int task_id, int activity_id, int count) {
    questinterfacePINVOKE.Client_UpdateTaskActivity__SWIG_1(swigCPtr, task_id, activity_id, count);
  }

  public void RemoveTaskByTaskID(uint task_id) {
    questinterfacePINVOKE.Client_RemoveTaskByTaskID(swigCPtr, task_id);
  }

  public void ResetTaskActivity(int task_id, int activity_id) {
    questinterfacePINVOKE.Client_ResetTaskActivity(swigCPtr, task_id, activity_id);
  }

  public void UpdateTasksForItem(SWIGTYPE_p_TaskActivityType type, int item_id, int count) {
    questinterfacePINVOKE.Client_UpdateTasksForItem__SWIG_0(swigCPtr, SWIGTYPE_p_TaskActivityType.getCPtr(type), item_id, count);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void UpdateTasksForItem(SWIGTYPE_p_TaskActivityType type, int item_id) {
    questinterfacePINVOKE.Client_UpdateTasksForItem__SWIG_1(swigCPtr, SWIGTYPE_p_TaskActivityType.getCPtr(type), item_id);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void UpdateTasksOnLoot(Corpse corpse, int item_id, int count) {
    questinterfacePINVOKE.Client_UpdateTasksOnLoot__SWIG_0(swigCPtr, Corpse.getCPtr(corpse), item_id, count);
  }

  public void UpdateTasksOnLoot(Corpse corpse, int item_id) {
    questinterfacePINVOKE.Client_UpdateTasksOnLoot__SWIG_1(swigCPtr, Corpse.getCPtr(corpse), item_id);
  }

  public void UpdateTasksOnExplore(SWIGTYPE_p_glm__vec4 pos) {
    questinterfacePINVOKE.Client_UpdateTasksOnExplore(swigCPtr, SWIGTYPE_p_glm__vec4.getCPtr(pos));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool UpdateTasksOnSpeakWith(NPC npc) {
    bool ret = questinterfacePINVOKE.Client_UpdateTasksOnSpeakWith(swigCPtr, NPC.getCPtr(npc));
    return ret;
  }

  public bool UpdateTasksOnDeliver(SWIGTYPE_p_std__vectorT_EQ__ItemInstance_p_t items, Trade trade, NPC npc) {
    bool ret = questinterfacePINVOKE.Client_UpdateTasksOnDeliver(swigCPtr, SWIGTYPE_p_std__vectorT_EQ__ItemInstance_p_t.getCPtr(items), Trade.getCPtr(trade), NPC.getCPtr(npc));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void UpdateTasksOnTouchSwitch(int dz_switch_id) {
    questinterfacePINVOKE.Client_UpdateTasksOnTouchSwitch(swigCPtr, dz_switch_id);
  }

  public void TaskSetSelector(Mob mob, int task_set_id, bool ignore_cooldown) {
    questinterfacePINVOKE.Client_TaskSetSelector(swigCPtr, Mob.getCPtr(mob), task_set_id, ignore_cooldown);
  }

  public void TaskQuestSetSelector(Mob mob, IntVector tasks, bool ignore_cooldown) {
    questinterfacePINVOKE.Client_TaskQuestSetSelector(swigCPtr, Mob.getCPtr(mob), IntVector.getCPtr(tasks), ignore_cooldown);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void EnableTask(int task_count, SWIGTYPE_p_int task_list) {
    questinterfacePINVOKE.Client_EnableTask(swigCPtr, task_count, SWIGTYPE_p_int.getCPtr(task_list));
  }

  public void DisableTask(int task_count, SWIGTYPE_p_int task_list) {
    questinterfacePINVOKE.Client_DisableTask(swigCPtr, task_count, SWIGTYPE_p_int.getCPtr(task_list));
  }

  public bool IsTaskEnabled(int task_id) {
    bool ret = questinterfacePINVOKE.Client_IsTaskEnabled(swigCPtr, task_id);
    return ret;
  }

  public void ProcessTaskProximities(float x, float y, float z) {
    questinterfacePINVOKE.Client_ProcessTaskProximities(swigCPtr, x, y, z);
  }

  public void AssignTask(int task_id, int npc_id, bool enforce_level_requirement) {
    questinterfacePINVOKE.Client_AssignTask__SWIG_0(swigCPtr, task_id, npc_id, enforce_level_requirement);
  }

  public void AssignTask(int task_id, int npc_id) {
    questinterfacePINVOKE.Client_AssignTask__SWIG_1(swigCPtr, task_id, npc_id);
  }

  public void AssignTask(int task_id) {
    questinterfacePINVOKE.Client_AssignTask__SWIG_2(swigCPtr, task_id);
  }

  public int ActiveSpeakTask(NPC npc) {
    int ret = questinterfacePINVOKE.Client_ActiveSpeakTask(swigCPtr, NPC.getCPtr(npc));
    return ret;
  }

  public int ActiveSpeakActivity(NPC npc, int task_id) {
    int ret = questinterfacePINVOKE.Client_ActiveSpeakActivity(swigCPtr, NPC.getCPtr(npc), task_id);
    return ret;
  }

  public bool CompleteTask(uint task_id) {
    bool ret = questinterfacePINVOKE.Client_CompleteTask(swigCPtr, task_id);
    return ret;
  }

  public void FailTask(int task_id) {
    questinterfacePINVOKE.Client_FailTask(swigCPtr, task_id);
  }

  public int TaskTimeLeft(int task_id) {
    int ret = questinterfacePINVOKE.Client_TaskTimeLeft(swigCPtr, task_id);
    return ret;
  }

  public int EnabledTaskCount(int task_set_id) {
    int ret = questinterfacePINVOKE.Client_EnabledTaskCount(swigCPtr, task_set_id);
    return ret;
  }

  public int IsTaskCompleted(int task_id) {
    int ret = questinterfacePINVOKE.Client_IsTaskCompleted(swigCPtr, task_id);
    return ret;
  }

  public void ShowClientTasks(Client client) {
    questinterfacePINVOKE.Client_ShowClientTasks(swigCPtr, Client.getCPtr(client));
  }

  public void CancelAllTasks() {
    questinterfacePINVOKE.Client_CancelAllTasks(swigCPtr);
  }

  public int GetActiveTaskCount() {
    int ret = questinterfacePINVOKE.Client_GetActiveTaskCount(swigCPtr);
    return ret;
  }

  public int GetActiveTaskID(int index) {
    int ret = questinterfacePINVOKE.Client_GetActiveTaskID(swigCPtr, index);
    return ret;
  }

  public int GetTaskStartTime(SWIGTYPE_p_TaskType task_type, int index) {
    int ret = questinterfacePINVOKE.Client_GetTaskStartTime(swigCPtr, SWIGTYPE_p_TaskType.getCPtr(task_type), index);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsTaskActivityCompleted(SWIGTYPE_p_TaskType task_type, int index, int activity_id) {
    bool ret = questinterfacePINVOKE.Client_IsTaskActivityCompleted(swigCPtr, SWIGTYPE_p_TaskType.getCPtr(task_type), index, activity_id);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetTaskActivityDoneCount(SWIGTYPE_p_TaskType task_type, int client_task_index, int activity_id) {
    int ret = questinterfacePINVOKE.Client_GetTaskActivityDoneCount(swigCPtr, SWIGTYPE_p_TaskType.getCPtr(task_type), client_task_index, activity_id);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetTaskActivityDoneCountFromTaskID(int task_id, int activity_id) {
    int ret = questinterfacePINVOKE.Client_GetTaskActivityDoneCountFromTaskID(swigCPtr, task_id, activity_id);
    return ret;
  }

  public int ActiveTasksInSet(int task_set_id) {
    int ret = questinterfacePINVOKE.Client_ActiveTasksInSet(swigCPtr, task_set_id);
    return ret;
  }

  public int CompletedTasksInSet(int task_set_id) {
    int ret = questinterfacePINVOKE.Client_CompletedTasksInSet(swigCPtr, task_set_id);
    return ret;
  }

  public void PurgeTaskTimers() {
    questinterfacePINVOKE.Client_PurgeTaskTimers(swigCPtr);
  }

  public void LockSharedTask(bool lock_) {
    questinterfacePINVOKE.Client_LockSharedTask(swigCPtr, lock_);
  }

  public void EndSharedTask(bool fail) {
    questinterfacePINVOKE.Client_EndSharedTask__SWIG_0(swigCPtr, fail);
  }

  public void EndSharedTask() {
    questinterfacePINVOKE.Client_EndSharedTask__SWIG_1(swigCPtr);
  }

  public bool m_requesting_shared_task {
    set {
      questinterfacePINVOKE.Client_m_requesting_shared_task_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.Client_m_requesting_shared_task_get(swigCPtr);
      return ret;
    } 
  }

  public bool m_shared_task_update {
    set {
      questinterfacePINVOKE.Client_m_shared_task_update_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.Client_m_shared_task_update_get(swigCPtr);
      return ret;
    } 
  }

  public bool m_requested_shared_task_removal {
    set {
      questinterfacePINVOKE.Client_m_requested_shared_task_removal_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.Client_m_requested_shared_task_removal_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_Client_p_t GetPartyMembers() {
    SWIGTYPE_p_std__vectorT_Client_p_t ret = new SWIGTYPE_p_std__vectorT_Client_p_t(questinterfacePINVOKE.Client_GetPartyMembers(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_EQ__versions__ClientVersion ClientVersion() {
    SWIGTYPE_p_EQ__versions__ClientVersion ret = new SWIGTYPE_p_EQ__versions__ClientVersion(questinterfacePINVOKE.Client_ClientVersion(swigCPtr), true);
    return ret;
  }

  public uint ClientVersionBit() {
    uint ret = questinterfacePINVOKE.Client_ClientVersionBit(swigCPtr);
    return ret;
  }

  public void SetClientVersion(SWIGTYPE_p_EQ__versions__ClientVersion client_version) {
    questinterfacePINVOKE.Client_SetClientVersion(swigCPtr, SWIGTYPE_p_EQ__versions__ClientVersion.getCPtr(client_version));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SendAdventureError(string error) {
    questinterfacePINVOKE.Client_SendAdventureError(swigCPtr, error);
  }

  public void SendAdventureDetails() {
    questinterfacePINVOKE.Client_SendAdventureDetails(swigCPtr);
  }

  public void SendAdventureCount(uint count, uint total) {
    questinterfacePINVOKE.Client_SendAdventureCount(swigCPtr, count, total);
  }

  public void NewAdventure(int id, int theme, string text, int member_count, string members) {
    questinterfacePINVOKE.Client_NewAdventure(swigCPtr, id, theme, text, member_count, members);
  }

  public bool IsOnAdventure() {
    bool ret = questinterfacePINVOKE.Client_IsOnAdventure(swigCPtr);
    return ret;
  }

  public void LeaveAdventure() {
    questinterfacePINVOKE.Client_LeaveAdventure(swigCPtr);
  }

  public void AdventureFinish(bool win, int theme, int points) {
    questinterfacePINVOKE.Client_AdventureFinish(swigCPtr, win, theme, points);
  }

  public void SetAdventureData(string data) {
    questinterfacePINVOKE.Client_SetAdventureData(swigCPtr, data);
  }

  public void ClearAdventureData() {
    questinterfacePINVOKE.Client_ClearAdventureData(swigCPtr);
  }

  public bool HasAdventureData() {
    bool ret = questinterfacePINVOKE.Client_HasAdventureData(swigCPtr);
    return ret;
  }

  public void ClearCurrentAdventure() {
    questinterfacePINVOKE.Client_ClearCurrentAdventure(swigCPtr);
  }

  public void PendingAdventureRequest() {
    questinterfacePINVOKE.Client_PendingAdventureRequest(swigCPtr);
  }

  public bool GetPendingAdventureRequest() {
    bool ret = questinterfacePINVOKE.Client_GetPendingAdventureRequest(swigCPtr);
    return ret;
  }

  public void ClearPendingAdventureRequest() {
    questinterfacePINVOKE.Client_ClearPendingAdventureRequest(swigCPtr);
  }

  public void PendingAdventureCreate() {
    questinterfacePINVOKE.Client_PendingAdventureCreate(swigCPtr);
  }

  public bool GetPendingAdventureCreate() {
    bool ret = questinterfacePINVOKE.Client_GetPendingAdventureCreate(swigCPtr);
    return ret;
  }

  public void ClearPendingAdventureCreate() {
    questinterfacePINVOKE.Client_ClearPendingAdventureCreate(swigCPtr);
  }

  public void PendingAdventureLeave() {
    questinterfacePINVOKE.Client_PendingAdventureLeave(swigCPtr);
  }

  public bool GetPendingAdventureLeave() {
    bool ret = questinterfacePINVOKE.Client_GetPendingAdventureLeave(swigCPtr);
    return ret;
  }

  public void ClearPendingAdventureLeave() {
    questinterfacePINVOKE.Client_ClearPendingAdventureLeave(swigCPtr);
  }

  public void PendingAdventureDoorClick() {
    questinterfacePINVOKE.Client_PendingAdventureDoorClick(swigCPtr);
  }

  public bool GetPendingAdventureDoorClick() {
    bool ret = questinterfacePINVOKE.Client_GetPendingAdventureDoorClick(swigCPtr);
    return ret;
  }

  public void ClearPendingAdventureDoorClick() {
    questinterfacePINVOKE.Client_ClearPendingAdventureDoorClick(swigCPtr);
  }

  public void ClearPendingAdventureData() {
    questinterfacePINVOKE.Client_ClearPendingAdventureData(swigCPtr);
  }

  public bool CanEnterZone(SWIGTYPE_p_std__string zone_short_name, short instance_version) {
    bool ret = questinterfacePINVOKE.Client_CanEnterZone__SWIG_0(swigCPtr, SWIGTYPE_p_std__string.getCPtr(zone_short_name), instance_version);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool CanEnterZone(SWIGTYPE_p_std__string zone_short_name) {
    bool ret = questinterfacePINVOKE.Client_CanEnterZone__SWIG_1(swigCPtr, SWIGTYPE_p_std__string.getCPtr(zone_short_name));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool CanEnterZone() {
    bool ret = questinterfacePINVOKE.Client_CanEnterZone__SWIG_2(swigCPtr);
    return ret;
  }

  public uint GetAggroCount() {
    uint ret = questinterfacePINVOKE.Client_GetAggroCount(swigCPtr);
    return ret;
  }

  public void IncrementAggroCount(bool raid_target) {
    questinterfacePINVOKE.Client_IncrementAggroCount__SWIG_0(swigCPtr, raid_target);
  }

  public void IncrementAggroCount() {
    questinterfacePINVOKE.Client_IncrementAggroCount__SWIG_1(swigCPtr);
  }

  public void DecrementAggroCount() {
    questinterfacePINVOKE.Client_DecrementAggroCount(swigCPtr);
  }

  public void SendPVPStats() {
    questinterfacePINVOKE.Client_SendPVPStats(swigCPtr);
  }

  public void SendDisciplineTimers() {
    questinterfacePINVOKE.Client_SendDisciplineTimers(swigCPtr);
  }

  public void SendRespawnBinds() {
    questinterfacePINVOKE.Client_SendRespawnBinds(swigCPtr);
  }

  public uint GetLDoNWins() {
    uint ret = questinterfacePINVOKE.Client_GetLDoNWins(swigCPtr);
    return ret;
  }

  public uint GetLDoNLosses() {
    uint ret = questinterfacePINVOKE.Client_GetLDoNLosses(swigCPtr);
    return ret;
  }

  public uint GetLDoNWinsTheme(uint t) {
    uint ret = questinterfacePINVOKE.Client_GetLDoNWinsTheme(swigCPtr, t);
    return ret;
  }

  public uint GetLDoNLossesTheme(uint t) {
    uint ret = questinterfacePINVOKE.Client_GetLDoNLossesTheme(swigCPtr, t);
    return ret;
  }

  public uint GetLDoNPointsTheme(uint t) {
    uint ret = questinterfacePINVOKE.Client_GetLDoNPointsTheme(swigCPtr, t);
    return ret;
  }

  public void UpdateLDoNWinLoss(uint theme_id, bool win, bool remove) {
    questinterfacePINVOKE.Client_UpdateLDoNWinLoss__SWIG_0(swigCPtr, theme_id, win, remove);
  }

  public void UpdateLDoNWinLoss(uint theme_id, bool win) {
    questinterfacePINVOKE.Client_UpdateLDoNWinLoss__SWIG_1(swigCPtr, theme_id, win);
  }

  public void UpdateLDoNWinLoss(uint theme_id) {
    questinterfacePINVOKE.Client_UpdateLDoNWinLoss__SWIG_2(swigCPtr, theme_id);
  }

  public void CheckLDoNHail(NPC n) {
    questinterfacePINVOKE.Client_CheckLDoNHail(swigCPtr, NPC.getCPtr(n));
  }

  public void CheckEmoteHail(NPC n, string message) {
    questinterfacePINVOKE.Client_CheckEmoteHail(swigCPtr, NPC.getCPtr(n), message);
  }

  public void HandleLDoNOpen(NPC target) {
    questinterfacePINVOKE.Client_HandleLDoNOpen(swigCPtr, NPC.getCPtr(target));
  }

  public void HandleLDoNSenseTraps(NPC target, ushort skill, byte type) {
    questinterfacePINVOKE.Client_HandleLDoNSenseTraps(swigCPtr, NPC.getCPtr(target), skill, type);
  }

  public void HandleLDoNDisarm(NPC target, ushort skill, byte type) {
    questinterfacePINVOKE.Client_HandleLDoNDisarm(swigCPtr, NPC.getCPtr(target), skill, type);
  }

  public void HandleLDoNPickLock(NPC target, ushort skill, byte type) {
    questinterfacePINVOKE.Client_HandleLDoNPickLock(swigCPtr, NPC.getCPtr(target), skill, type);
  }

  public int LDoNChest_SkillCheck(NPC target, int skill) {
    int ret = questinterfacePINVOKE.Client_LDoNChest_SkillCheck(swigCPtr, NPC.getCPtr(target), skill);
    return ret;
  }

  public void MarkSingleCompassLoc(float in_x, float in_y, float in_z, byte count) {
    questinterfacePINVOKE.Client_MarkSingleCompassLoc__SWIG_0(swigCPtr, in_x, in_y, in_z, count);
  }

  public void MarkSingleCompassLoc(float in_x, float in_y, float in_z) {
    questinterfacePINVOKE.Client_MarkSingleCompassLoc__SWIG_1(swigCPtr, in_x, in_y, in_z);
  }

  public static void SendCrossZoneMessage(Client client, SWIGTYPE_p_std__string client_name, ushort chat_type, SWIGTYPE_p_std__string message) {
    questinterfacePINVOKE.Client_SendCrossZoneMessage(Client.getCPtr(client), SWIGTYPE_p_std__string.getCPtr(client_name), chat_type, SWIGTYPE_p_std__string.getCPtr(message));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SendCrossZoneMessageString(Client client, SWIGTYPE_p_std__string client_name, ushort chat_type, uint string_id, SWIGTYPE_p_std__initializer_listT_std__string_t arguments) {
    questinterfacePINVOKE.Client_SendCrossZoneMessageString__SWIG_0(Client.getCPtr(client), SWIGTYPE_p_std__string.getCPtr(client_name), chat_type, string_id, SWIGTYPE_p_std__initializer_listT_std__string_t.getCPtr(arguments));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SendCrossZoneMessageString(Client client, SWIGTYPE_p_std__string client_name, ushort chat_type, uint string_id) {
    questinterfacePINVOKE.Client_SendCrossZoneMessageString__SWIG_1(Client.getCPtr(client), SWIGTYPE_p_std__string.getCPtr(client_name), chat_type, string_id);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddExpeditionLockout(ExpeditionLockoutTimer lockout, bool update_db) {
    questinterfacePINVOKE.Client_AddExpeditionLockout__SWIG_0(swigCPtr, ExpeditionLockoutTimer.getCPtr(lockout), update_db);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddExpeditionLockout(ExpeditionLockoutTimer lockout) {
    questinterfacePINVOKE.Client_AddExpeditionLockout__SWIG_1(swigCPtr, ExpeditionLockoutTimer.getCPtr(lockout));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddExpeditionLockoutDuration(SWIGTYPE_p_std__string expedition_name, SWIGTYPE_p_std__string event_Name, int seconds, SWIGTYPE_p_std__string uuid, bool update_db) {
    questinterfacePINVOKE.Client_AddExpeditionLockoutDuration__SWIG_0(swigCPtr, SWIGTYPE_p_std__string.getCPtr(expedition_name), SWIGTYPE_p_std__string.getCPtr(event_Name), seconds, SWIGTYPE_p_std__string.getCPtr(uuid), update_db);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddExpeditionLockoutDuration(SWIGTYPE_p_std__string expedition_name, SWIGTYPE_p_std__string event_Name, int seconds, SWIGTYPE_p_std__string uuid) {
    questinterfacePINVOKE.Client_AddExpeditionLockoutDuration__SWIG_1(swigCPtr, SWIGTYPE_p_std__string.getCPtr(expedition_name), SWIGTYPE_p_std__string.getCPtr(event_Name), seconds, SWIGTYPE_p_std__string.getCPtr(uuid));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddExpeditionLockoutDuration(SWIGTYPE_p_std__string expedition_name, SWIGTYPE_p_std__string event_Name, int seconds) {
    questinterfacePINVOKE.Client_AddExpeditionLockoutDuration__SWIG_2(swigCPtr, SWIGTYPE_p_std__string.getCPtr(expedition_name), SWIGTYPE_p_std__string.getCPtr(event_Name), seconds);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddNewExpeditionLockout(SWIGTYPE_p_std__string expedition_name, SWIGTYPE_p_std__string event_name, uint duration, SWIGTYPE_p_std__string uuid) {
    questinterfacePINVOKE.Client_AddNewExpeditionLockout__SWIG_0(swigCPtr, SWIGTYPE_p_std__string.getCPtr(expedition_name), SWIGTYPE_p_std__string.getCPtr(event_name), duration, SWIGTYPE_p_std__string.getCPtr(uuid));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddNewExpeditionLockout(SWIGTYPE_p_std__string expedition_name, SWIGTYPE_p_std__string event_name, uint duration) {
    questinterfacePINVOKE.Client_AddNewExpeditionLockout__SWIG_1(swigCPtr, SWIGTYPE_p_std__string.getCPtr(expedition_name), SWIGTYPE_p_std__string.getCPtr(event_name), duration);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_Expedition CreateExpedition(SWIGTYPE_p_DynamicZone dz, bool disable_messages) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Client_CreateExpedition__SWIG_0(swigCPtr, SWIGTYPE_p_DynamicZone.getCPtr(dz), disable_messages);
    SWIGTYPE_p_Expedition ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Expedition(cPtr, false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Expedition CreateExpedition(SWIGTYPE_p_DynamicZone dz) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Client_CreateExpedition__SWIG_1(swigCPtr, SWIGTYPE_p_DynamicZone.getCPtr(dz));
    SWIGTYPE_p_Expedition ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Expedition(cPtr, false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Expedition CreateExpedition(SWIGTYPE_p_std__string zone_name, uint version, uint duration, SWIGTYPE_p_std__string expedition_name, uint min_players, uint max_players, bool disable_messages) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Client_CreateExpedition__SWIG_2(swigCPtr, SWIGTYPE_p_std__string.getCPtr(zone_name), version, duration, SWIGTYPE_p_std__string.getCPtr(expedition_name), min_players, max_players, disable_messages);
    SWIGTYPE_p_Expedition ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Expedition(cPtr, false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Expedition CreateExpedition(SWIGTYPE_p_std__string zone_name, uint version, uint duration, SWIGTYPE_p_std__string expedition_name, uint min_players, uint max_players) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Client_CreateExpedition__SWIG_3(swigCPtr, SWIGTYPE_p_std__string.getCPtr(zone_name), version, duration, SWIGTYPE_p_std__string.getCPtr(expedition_name), min_players, max_players);
    SWIGTYPE_p_Expedition ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Expedition(cPtr, false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Expedition CreateExpeditionFromTemplate(uint dz_template_id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Client_CreateExpeditionFromTemplate(swigCPtr, dz_template_id);
    SWIGTYPE_p_Expedition ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Expedition(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_Expedition GetExpedition() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Client_GetExpedition(swigCPtr);
    SWIGTYPE_p_Expedition ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Expedition(cPtr, false);
    return ret;
  }

  public uint GetExpeditionID() {
    uint ret = questinterfacePINVOKE.Client_GetExpeditionID(swigCPtr);
    return ret;
  }

  public ExpeditionLockoutTimer GetExpeditionLockout(SWIGTYPE_p_std__string expedition_name, SWIGTYPE_p_std__string event_name, bool include_expired) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Client_GetExpeditionLockout__SWIG_0(swigCPtr, SWIGTYPE_p_std__string.getCPtr(expedition_name), SWIGTYPE_p_std__string.getCPtr(event_name), include_expired);
    ExpeditionLockoutTimer ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExpeditionLockoutTimer(cPtr, false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ExpeditionLockoutTimer GetExpeditionLockout(SWIGTYPE_p_std__string expedition_name, SWIGTYPE_p_std__string event_name) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Client_GetExpeditionLockout__SWIG_1(swigCPtr, SWIGTYPE_p_std__string.getCPtr(expedition_name), SWIGTYPE_p_std__string.getCPtr(event_name));
    ExpeditionLockoutTimer ret = (cPtr == global::System.IntPtr.Zero) ? null : new ExpeditionLockoutTimer(cPtr, false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_ExpeditionLockoutTimer_t GetExpeditionLockouts() {
    SWIGTYPE_p_std__vectorT_ExpeditionLockoutTimer_t ret = new SWIGTYPE_p_std__vectorT_ExpeditionLockoutTimer_t(questinterfacePINVOKE.Client_GetExpeditionLockouts__SWIG_0(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_ExpeditionLockoutTimer_t GetExpeditionLockouts(SWIGTYPE_p_std__string expedition_name, bool include_expired) {
    SWIGTYPE_p_std__vectorT_ExpeditionLockoutTimer_t ret = new SWIGTYPE_p_std__vectorT_ExpeditionLockoutTimer_t(questinterfacePINVOKE.Client_GetExpeditionLockouts__SWIG_1(swigCPtr, SWIGTYPE_p_std__string.getCPtr(expedition_name), include_expired), true);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_ExpeditionLockoutTimer_t GetExpeditionLockouts(SWIGTYPE_p_std__string expedition_name) {
    SWIGTYPE_p_std__vectorT_ExpeditionLockoutTimer_t ret = new SWIGTYPE_p_std__vectorT_ExpeditionLockoutTimer_t(questinterfacePINVOKE.Client_GetExpeditionLockouts__SWIG_2(swigCPtr, SWIGTYPE_p_std__string.getCPtr(expedition_name)), true);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetPendingExpeditionInviteID() {
    uint ret = questinterfacePINVOKE.Client_GetPendingExpeditionInviteID(swigCPtr);
    return ret;
  }

  public bool HasExpeditionLockout(SWIGTYPE_p_std__string expedition_name, SWIGTYPE_p_std__string event_name, bool include_expired) {
    bool ret = questinterfacePINVOKE.Client_HasExpeditionLockout__SWIG_0(swigCPtr, SWIGTYPE_p_std__string.getCPtr(expedition_name), SWIGTYPE_p_std__string.getCPtr(event_name), include_expired);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool HasExpeditionLockout(SWIGTYPE_p_std__string expedition_name, SWIGTYPE_p_std__string event_name) {
    bool ret = questinterfacePINVOKE.Client_HasExpeditionLockout__SWIG_1(swigCPtr, SWIGTYPE_p_std__string.getCPtr(expedition_name), SWIGTYPE_p_std__string.getCPtr(event_name));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsInExpedition() {
    bool ret = questinterfacePINVOKE.Client_IsInExpedition(swigCPtr);
    return ret;
  }

  public void RemoveAllExpeditionLockouts(SWIGTYPE_p_std__string expedition_name, bool update_db) {
    questinterfacePINVOKE.Client_RemoveAllExpeditionLockouts__SWIG_0(swigCPtr, SWIGTYPE_p_std__string.getCPtr(expedition_name), update_db);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAllExpeditionLockouts(SWIGTYPE_p_std__string expedition_name) {
    questinterfacePINVOKE.Client_RemoveAllExpeditionLockouts__SWIG_1(swigCPtr, SWIGTYPE_p_std__string.getCPtr(expedition_name));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveExpeditionLockout(SWIGTYPE_p_std__string expedition_name, SWIGTYPE_p_std__string event_name, bool update_db) {
    questinterfacePINVOKE.Client_RemoveExpeditionLockout__SWIG_0(swigCPtr, SWIGTYPE_p_std__string.getCPtr(expedition_name), SWIGTYPE_p_std__string.getCPtr(event_name), update_db);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveExpeditionLockout(SWIGTYPE_p_std__string expedition_name, SWIGTYPE_p_std__string event_name) {
    questinterfacePINVOKE.Client_RemoveExpeditionLockout__SWIG_1(swigCPtr, SWIGTYPE_p_std__string.getCPtr(expedition_name), SWIGTYPE_p_std__string.getCPtr(event_name));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RequestPendingExpeditionInvite() {
    questinterfacePINVOKE.Client_RequestPendingExpeditionInvite(swigCPtr);
  }

  public void SendExpeditionLockoutTimers() {
    questinterfacePINVOKE.Client_SendExpeditionLockoutTimers(swigCPtr);
  }

  public void SetExpeditionID(uint expedition_id) {
    questinterfacePINVOKE.Client_SetExpeditionID(swigCPtr, expedition_id);
  }

  public void SetPendingExpeditionInvite(ExpeditionInvite invite) {
    questinterfacePINVOKE.Client_SetPendingExpeditionInvite(swigCPtr, ExpeditionInvite.swigRelease(invite));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void DzListTimers() {
    questinterfacePINVOKE.Client_DzListTimers(swigCPtr);
  }

  public void SetDzRemovalTimer(bool enable_timer) {
    questinterfacePINVOKE.Client_SetDzRemovalTimer(swigCPtr, enable_timer);
  }

  public void SendDzCompassUpdate() {
    questinterfacePINVOKE.Client_SendDzCompassUpdate(swigCPtr);
  }

  public void GoToDzSafeReturnOrBind(SWIGTYPE_p_DynamicZone dynamic_zone) {
    questinterfacePINVOKE.Client_GoToDzSafeReturnOrBind(swigCPtr, SWIGTYPE_p_DynamicZone.getCPtr(dynamic_zone));
  }

  public void MovePCDynamicZone(uint zone_id, int zone_version, bool msg_if_invalid) {
    questinterfacePINVOKE.Client_MovePCDynamicZone__SWIG_0(swigCPtr, zone_id, zone_version, msg_if_invalid);
  }

  public void MovePCDynamicZone(uint zone_id, int zone_version) {
    questinterfacePINVOKE.Client_MovePCDynamicZone__SWIG_1(swigCPtr, zone_id, zone_version);
  }

  public void MovePCDynamicZone(uint zone_id) {
    questinterfacePINVOKE.Client_MovePCDynamicZone__SWIG_2(swigCPtr, zone_id);
  }

  public void MovePCDynamicZone(SWIGTYPE_p_std__string zone_name, int zone_version, bool msg_if_invalid) {
    questinterfacePINVOKE.Client_MovePCDynamicZone__SWIG_3(swigCPtr, SWIGTYPE_p_std__string.getCPtr(zone_name), zone_version, msg_if_invalid);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void MovePCDynamicZone(SWIGTYPE_p_std__string zone_name, int zone_version) {
    questinterfacePINVOKE.Client_MovePCDynamicZone__SWIG_4(swigCPtr, SWIGTYPE_p_std__string.getCPtr(zone_name), zone_version);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void MovePCDynamicZone(SWIGTYPE_p_std__string zone_name) {
    questinterfacePINVOKE.Client_MovePCDynamicZone__SWIG_5(swigCPtr, SWIGTYPE_p_std__string.getCPtr(zone_name));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool TryMovePCDynamicZoneSwitch(int dz_switch_id) {
    bool ret = questinterfacePINVOKE.Client_TryMovePCDynamicZoneSwitch(swigCPtr, dz_switch_id);
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_DynamicZone_p_t GetDynamicZones(uint zone_id, int zone_version) {
    SWIGTYPE_p_std__vectorT_DynamicZone_p_t ret = new SWIGTYPE_p_std__vectorT_DynamicZone_p_t(questinterfacePINVOKE.Client_GetDynamicZones__SWIG_0(swigCPtr, zone_id, zone_version), true);
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_DynamicZone_p_t GetDynamicZones(uint zone_id) {
    SWIGTYPE_p_std__vectorT_DynamicZone_p_t ret = new SWIGTYPE_p_std__vectorT_DynamicZone_p_t(questinterfacePINVOKE.Client_GetDynamicZones__SWIG_1(swigCPtr, zone_id), true);
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_DynamicZone_p_t GetDynamicZones() {
    SWIGTYPE_p_std__vectorT_DynamicZone_p_t ret = new SWIGTYPE_p_std__vectorT_DynamicZone_p_t(questinterfacePINVOKE.Client_GetDynamicZones__SWIG_2(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_std__unique_ptrT_EQApplicationPacket_t CreateDzSwitchListPacket(SWIGTYPE_p_std__vectorT_DynamicZone_p_t dzs) {
    SWIGTYPE_p_std__unique_ptrT_EQApplicationPacket_t ret = new SWIGTYPE_p_std__unique_ptrT_EQApplicationPacket_t(questinterfacePINVOKE.Client_CreateDzSwitchListPacket(swigCPtr, SWIGTYPE_p_std__vectorT_DynamicZone_p_t.getCPtr(dzs)), true);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__unique_ptrT_EQApplicationPacket_t CreateCompassPacket(SWIGTYPE_p_std__vectorT_DynamicZoneCompassEntry_Struct_t entries) {
    SWIGTYPE_p_std__unique_ptrT_EQApplicationPacket_t ret = new SWIGTYPE_p_std__unique_ptrT_EQApplicationPacket_t(questinterfacePINVOKE.Client_CreateCompassPacket(swigCPtr, SWIGTYPE_p_std__vectorT_DynamicZoneCompassEntry_Struct_t.getCPtr(entries)), true);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void AddDynamicZoneID(uint dz_id) {
    questinterfacePINVOKE.Client_AddDynamicZoneID(swigCPtr, dz_id);
  }

  public void RemoveDynamicZoneID(uint dz_id) {
    questinterfacePINVOKE.Client_RemoveDynamicZoneID(swigCPtr, dz_id);
  }

  public void SendDynamicZoneUpdates() {
    questinterfacePINVOKE.Client_SendDynamicZoneUpdates(swigCPtr);
  }

  public void SetDynamicZoneMemberStatus(SWIGTYPE_p_DynamicZoneMemberStatus status) {
    questinterfacePINVOKE.Client_SetDynamicZoneMemberStatus(swigCPtr, SWIGTYPE_p_DynamicZoneMemberStatus.getCPtr(status));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void CreateTaskDynamicZone(int task_id, SWIGTYPE_p_DynamicZone dz_request) {
    questinterfacePINVOKE.Client_CreateTaskDynamicZone(swigCPtr, task_id, SWIGTYPE_p_DynamicZone.getCPtr(dz_request));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void CalcItemScale() {
    questinterfacePINVOKE.Client_CalcItemScale__SWIG_0(swigCPtr);
  }

  public bool CalcItemScale(uint slot_x, uint slot_y) {
    bool ret = questinterfacePINVOKE.Client_CalcItemScale__SWIG_1(swigCPtr, slot_x, slot_y);
    return ret;
  }

  public void DoItemEnterZone() {
    questinterfacePINVOKE.Client_DoItemEnterZone__SWIG_0(swigCPtr);
  }

  public bool DoItemEnterZone(uint slot_x, uint slot_y) {
    bool ret = questinterfacePINVOKE.Client_DoItemEnterZone__SWIG_1(swigCPtr, slot_x, slot_y);
    return ret;
  }

  public void SummonAndRezzAllCorpses() {
    questinterfacePINVOKE.Client_SummonAndRezzAllCorpses(swigCPtr);
  }

  public void SummonAllCorpses(SWIGTYPE_p_glm__vec4 position) {
    questinterfacePINVOKE.Client_SummonAllCorpses(swigCPtr, SWIGTYPE_p_glm__vec4.getCPtr(position));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void DepopAllCorpses() {
    questinterfacePINVOKE.Client_DepopAllCorpses(swigCPtr);
  }

  public void DepopPlayerCorpse(uint dbid) {
    questinterfacePINVOKE.Client_DepopPlayerCorpse(swigCPtr, dbid);
  }

  public void BuryPlayerCorpses() {
    questinterfacePINVOKE.Client_BuryPlayerCorpses(swigCPtr);
  }

  public long GetCorpseCount() {
    long ret = questinterfacePINVOKE.Client_GetCorpseCount(swigCPtr);
    return ret;
  }

  public uint GetCorpseID(int corpse) {
    uint ret = questinterfacePINVOKE.Client_GetCorpseID(swigCPtr, corpse);
    return ret;
  }

  public uint GetCorpseItemAt(int corpse_id, int slot_id) {
    uint ret = questinterfacePINVOKE.Client_GetCorpseItemAt(swigCPtr, corpse_id, slot_id);
    return ret;
  }

  public void SuspendMinion(int value) {
    questinterfacePINVOKE.Client_SuspendMinion(swigCPtr, value);
  }

  public void Doppelganger(ushort spell_id, Mob target, string name_override, int pet_count, int pet_duration) {
    questinterfacePINVOKE.Client_Doppelganger(swigCPtr, spell_id, Mob.getCPtr(target), name_override, pet_count, pet_duration);
  }

  public void NotifyNewTitlesAvailable() {
    questinterfacePINVOKE.Client_NotifyNewTitlesAvailable(swigCPtr);
  }

  public void Signal(int signal_id) {
    questinterfacePINVOKE.Client_Signal(swigCPtr, signal_id);
  }

  public void SendPayload(int payload_id, SWIGTYPE_p_std__string payload_value) {
    questinterfacePINVOKE.Client_SendPayload__SWIG_0(swigCPtr, payload_id, SWIGTYPE_p_std__string.getCPtr(payload_value));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SendPayload(int payload_id) {
    questinterfacePINVOKE.Client_SendPayload__SWIG_1(swigCPtr, payload_id);
  }

  public Mob GetBindSightTarget() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Client_GetBindSightTarget(swigCPtr);
    Mob ret = (cPtr == global::System.IntPtr.Zero) ? null : new Mob(cPtr, false);
    return ret;
  }

  public void SetBindSightTarget(Mob n) {
    questinterfacePINVOKE.Client_SetBindSightTarget(swigCPtr, Mob.getCPtr(n));
  }

  public ushort GetBoatID() {
    ushort ret = questinterfacePINVOKE.Client_GetBoatID(swigCPtr);
    return ret;
  }

  public void SendRewards() {
    questinterfacePINVOKE.Client_SendRewards(swigCPtr);
  }

  public bool TryReward(uint claim_id) {
    bool ret = questinterfacePINVOKE.Client_TryReward(swigCPtr, claim_id);
    return ret;
  }

  public SWIGTYPE_p_QGlobalCache GetQGlobals() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Client_GetQGlobals(swigCPtr);
    SWIGTYPE_p_QGlobalCache ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_QGlobalCache(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_QGlobalCache CreateQGlobals() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Client_CreateQGlobals(swigCPtr);
    SWIGTYPE_p_QGlobalCache ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_QGlobalCache(cPtr, false);
    return ret;
  }

  public void GuildBankAck() {
    questinterfacePINVOKE.Client_GuildBankAck(swigCPtr);
  }

  public void GuildBankDepositAck(bool Fail, sbyte action) {
    questinterfacePINVOKE.Client_GuildBankDepositAck(swigCPtr, Fail, action);
  }

  public bool IsGuildBanker() {
    bool ret = questinterfacePINVOKE.Client_IsGuildBanker(swigCPtr);
    return ret;
  }

  public void SetGuildBanker(bool banker) {
    questinterfacePINVOKE.Client_SetGuildBanker(swigCPtr, banker);
  }

  public void ClearGuildBank() {
    questinterfacePINVOKE.Client_ClearGuildBank(swigCPtr);
  }

  public void SendGroupCreatePacket() {
    questinterfacePINVOKE.Client_SendGroupCreatePacket(swigCPtr);
  }

  public void SendGroupLeaderChangePacket(string LeaderName) {
    questinterfacePINVOKE.Client_SendGroupLeaderChangePacket(swigCPtr, LeaderName);
  }

  public void SendGroupJoinAcknowledge() {
    questinterfacePINVOKE.Client_SendGroupJoinAcknowledge(swigCPtr);
  }

  public void DoTracking() {
    questinterfacePINVOKE.Client_DoTracking(swigCPtr);
  }

  public bool IsTracking() {
    bool ret = questinterfacePINVOKE.Client_IsTracking(swigCPtr);
    return ret;
  }

  public void SetPendingGuildInvitation(bool inPendingGuildInvitation) {
    questinterfacePINVOKE.Client_SetPendingGuildInvitation(swigCPtr, inPendingGuildInvitation);
  }

  public bool GetPendingGuildInvitation() {
    bool ret = questinterfacePINVOKE.Client_GetPendingGuildInvitation(swigCPtr);
    return ret;
  }

  public void LocateCorpse() {
    questinterfacePINVOKE.Client_LocateCorpse(swigCPtr);
  }

  public void SendTargetCommand(uint EntityID) {
    questinterfacePINVOKE.Client_SendTargetCommand(swigCPtr, EntityID);
  }

  public bool MoveItemToInventory(SWIGTYPE_p_EQ__ItemInstance BInst, bool UpdateClient) {
    bool ret = questinterfacePINVOKE.Client_MoveItemToInventory__SWIG_0(swigCPtr, SWIGTYPE_p_EQ__ItemInstance.getCPtr(BInst), UpdateClient);
    return ret;
  }

  public bool MoveItemToInventory(SWIGTYPE_p_EQ__ItemInstance BInst) {
    bool ret = questinterfacePINVOKE.Client_MoveItemToInventory__SWIG_1(swigCPtr, SWIGTYPE_p_EQ__ItemInstance.getCPtr(BInst));
    return ret;
  }

  public void HandleRespawnFromHover(uint Option) {
    questinterfacePINVOKE.Client_HandleRespawnFromHover(swigCPtr, Option);
  }

  public bool IsHoveringForRespawn() {
    bool ret = questinterfacePINVOKE.Client_IsHoveringForRespawn(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_std__listT_RespawnOption_t respawn_options {
    set {
      questinterfacePINVOKE.Client_respawn_options_set(swigCPtr, SWIGTYPE_p_std__listT_RespawnOption_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.Client_respawn_options_get(swigCPtr);
      SWIGTYPE_p_std__listT_RespawnOption_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__listT_RespawnOption_t(cPtr, false);
      return ret;
    } 
  }

  public void AddRespawnOption(SWIGTYPE_p_std__string option_name, uint zoneid, ushort instance_id, float x, float y, float z, float h, bool initial_selection, sbyte position) {
    questinterfacePINVOKE.Client_AddRespawnOption__SWIG_0(swigCPtr, SWIGTYPE_p_std__string.getCPtr(option_name), zoneid, instance_id, x, y, z, h, initial_selection, position);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddRespawnOption(SWIGTYPE_p_std__string option_name, uint zoneid, ushort instance_id, float x, float y, float z, float h, bool initial_selection) {
    questinterfacePINVOKE.Client_AddRespawnOption__SWIG_1(swigCPtr, SWIGTYPE_p_std__string.getCPtr(option_name), zoneid, instance_id, x, y, z, h, initial_selection);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddRespawnOption(SWIGTYPE_p_std__string option_name, uint zoneid, ushort instance_id, float x, float y, float z, float h) {
    questinterfacePINVOKE.Client_AddRespawnOption__SWIG_2(swigCPtr, SWIGTYPE_p_std__string.getCPtr(option_name), zoneid, instance_id, x, y, z, h);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddRespawnOption(SWIGTYPE_p_std__string option_name, uint zoneid, ushort instance_id, float x, float y, float z) {
    questinterfacePINVOKE.Client_AddRespawnOption__SWIG_3(swigCPtr, SWIGTYPE_p_std__string.getCPtr(option_name), zoneid, instance_id, x, y, z);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool RemoveRespawnOption(SWIGTYPE_p_std__string option_name) {
    bool ret = questinterfacePINVOKE.Client_RemoveRespawnOption__SWIG_0(swigCPtr, SWIGTYPE_p_std__string.getCPtr(option_name));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool RemoveRespawnOption(byte position) {
    bool ret = questinterfacePINVOKE.Client_RemoveRespawnOption__SWIG_1(swigCPtr, position);
    return ret;
  }

  public void ClearRespawnOptions() {
    questinterfacePINVOKE.Client_ClearRespawnOptions(swigCPtr);
  }

  public void SetPendingRezzData(int XP, uint DBID, ushort SpellID, string CorpseName) {
    questinterfacePINVOKE.Client_SetPendingRezzData(swigCPtr, XP, DBID, SpellID, CorpseName);
  }

  public bool IsRezzPending() {
    bool ret = questinterfacePINVOKE.Client_IsRezzPending(swigCPtr);
    return ret;
  }

  public void ClearHover() {
    questinterfacePINVOKE.Client_ClearHover(swigCPtr);
  }

  public override bool IsBlockedBuff(int SpellID) {
    bool ret = questinterfacePINVOKE.Client_IsBlockedBuff(swigCPtr, SpellID);
    return ret;
  }

  public override bool IsBlockedPetBuff(int SpellID) {
    bool ret = questinterfacePINVOKE.Client_IsBlockedPetBuff(swigCPtr, SpellID);
    return ret;
  }

  public bool IsDraggingCorpse(ushort CorpseID) {
    bool ret = questinterfacePINVOKE.Client_IsDraggingCorpse__SWIG_0(swigCPtr, CorpseID);
    return ret;
  }

  public bool IsDraggingCorpse() {
    bool ret = questinterfacePINVOKE.Client_IsDraggingCorpse__SWIG_1(swigCPtr);
    return ret;
  }

  public void DragCorpses() {
    questinterfacePINVOKE.Client_DragCorpses(swigCPtr);
  }

  public void ClearDraggedCorpses() {
    questinterfacePINVOKE.Client_ClearDraggedCorpses(swigCPtr);
  }

  public void ConsentCorpses(SWIGTYPE_p_std__string consent_name, bool deny) {
    questinterfacePINVOKE.Client_ConsentCorpses__SWIG_0(swigCPtr, SWIGTYPE_p_std__string.getCPtr(consent_name), deny);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ConsentCorpses(SWIGTYPE_p_std__string consent_name) {
    questinterfacePINVOKE.Client_ConsentCorpses__SWIG_1(swigCPtr, SWIGTYPE_p_std__string.getCPtr(consent_name));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SendAltCurrencies() {
    questinterfacePINVOKE.Client_SendAltCurrencies(swigCPtr);
  }

  public void SetAlternateCurrencyValue(uint currency_id, uint new_amount) {
    questinterfacePINVOKE.Client_SetAlternateCurrencyValue(swigCPtr, currency_id, new_amount);
  }

  public int AddAlternateCurrencyValue(uint currency_id, int amount, bool is_scripted) {
    int ret = questinterfacePINVOKE.Client_AddAlternateCurrencyValue__SWIG_0(swigCPtr, currency_id, amount, is_scripted);
    return ret;
  }

  public int AddAlternateCurrencyValue(uint currency_id, int amount) {
    int ret = questinterfacePINVOKE.Client_AddAlternateCurrencyValue__SWIG_1(swigCPtr, currency_id, amount);
    return ret;
  }

  public void SendAlternateCurrencyValues() {
    questinterfacePINVOKE.Client_SendAlternateCurrencyValues(swigCPtr);
  }

  public void SendAlternateCurrencyValue(uint currency_id, bool send_if_null) {
    questinterfacePINVOKE.Client_SendAlternateCurrencyValue__SWIG_0(swigCPtr, currency_id, send_if_null);
  }

  public void SendAlternateCurrencyValue(uint currency_id) {
    questinterfacePINVOKE.Client_SendAlternateCurrencyValue__SWIG_1(swigCPtr, currency_id);
  }

  public uint GetAlternateCurrencyValue(uint currency_id) {
    uint ret = questinterfacePINVOKE.Client_GetAlternateCurrencyValue(swigCPtr, currency_id);
    return ret;
  }

  public void ProcessAlternateCurrencyQueue() {
    questinterfacePINVOKE.Client_ProcessAlternateCurrencyQueue(swigCPtr);
  }

  public void OpenLFGuildWindow() {
    questinterfacePINVOKE.Client_OpenLFGuildWindow(swigCPtr);
  }

  public void HandleLFGuildResponse(SWIGTYPE_p_ServerPacket pack) {
    questinterfacePINVOKE.Client_HandleLFGuildResponse(swigCPtr, SWIGTYPE_p_ServerPacket.getCPtr(pack));
  }

  public void SendLFGuildStatus() {
    questinterfacePINVOKE.Client_SendLFGuildStatus(swigCPtr);
  }

  public void SendGuildLFGuildStatus() {
    questinterfacePINVOKE.Client_SendGuildLFGuildStatus(swigCPtr);
  }

  public bool XTargettingAvailable() {
    bool ret = questinterfacePINVOKE.Client_XTargettingAvailable(swigCPtr);
    return ret;
  }

  public byte GetMaxXTargets() {
    byte ret = questinterfacePINVOKE.Client_GetMaxXTargets(swigCPtr);
    return ret;
  }

  public void SetMaxXTargets(byte NewMax) {
    questinterfacePINVOKE.Client_SetMaxXTargets(swigCPtr, NewMax);
  }

  public bool IsXTarget(Mob m) {
    bool ret = questinterfacePINVOKE.Client_IsXTarget(swigCPtr, Mob.getCPtr(m));
    return ret;
  }

  public bool IsClientXTarget(Client c) {
    bool ret = questinterfacePINVOKE.Client_IsClientXTarget(swigCPtr, Client.getCPtr(c));
    return ret;
  }

  public void UpdateClientXTarget(Client c) {
    questinterfacePINVOKE.Client_UpdateClientXTarget(swigCPtr, Client.getCPtr(c));
  }

  public void UpdateXTargetType(XTargetType Type, Mob m, string Name) {
    questinterfacePINVOKE.Client_UpdateXTargetType__SWIG_0(swigCPtr, (int)Type, Mob.getCPtr(m), Name);
  }

  public void UpdateXTargetType(XTargetType Type, Mob m) {
    questinterfacePINVOKE.Client_UpdateXTargetType__SWIG_1(swigCPtr, (int)Type, Mob.getCPtr(m));
  }

  public void AddAutoXTarget(Mob m, bool send) {
    questinterfacePINVOKE.Client_AddAutoXTarget__SWIG_0(swigCPtr, Mob.getCPtr(m), send);
  }

  public void AddAutoXTarget(Mob m) {
    questinterfacePINVOKE.Client_AddAutoXTarget__SWIG_1(swigCPtr, Mob.getCPtr(m));
  }

  public void RemoveXTarget(Mob m, bool OnlyAutoSlots) {
    questinterfacePINVOKE.Client_RemoveXTarget(swigCPtr, Mob.getCPtr(m), OnlyAutoSlots);
  }

  public void SendXTargetPacket(uint Slot, Mob m) {
    questinterfacePINVOKE.Client_SendXTargetPacket(swigCPtr, Slot, Mob.getCPtr(m));
  }

  public void SendXTargetUpdates() {
    questinterfacePINVOKE.Client_SendXTargetUpdates(swigCPtr);
  }

  public void RemoveGroupXTargets() {
    questinterfacePINVOKE.Client_RemoveGroupXTargets(swigCPtr);
  }

  public void RemoveAutoXTargets() {
    questinterfacePINVOKE.Client_RemoveAutoXTargets(swigCPtr);
  }

  public void ShowXTargets(Client c) {
    questinterfacePINVOKE.Client_ShowXTargets(swigCPtr, Client.getCPtr(c));
  }

  public SWIGTYPE_p_XTargetAutoHaters GetXTargetAutoMgr() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Client_GetXTargetAutoMgr(swigCPtr);
    SWIGTYPE_p_XTargetAutoHaters ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XTargetAutoHaters(cPtr, false);
    return ret;
  }

  public void SetXTargetAutoMgr(SWIGTYPE_p_XTargetAutoHaters in_) {
    questinterfacePINVOKE.Client_SetXTargetAutoMgr(swigCPtr, SWIGTYPE_p_XTargetAutoHaters.getCPtr(in_));
  }

  public void SetDirtyAutoHaters() {
    questinterfacePINVOKE.Client_SetDirtyAutoHaters(swigCPtr);
  }

  public void ProcessXTargetAutoHaters() {
    questinterfacePINVOKE.Client_ProcessXTargetAutoHaters(swigCPtr);
  }

  public void JoinGroupXTargets(Group g) {
    questinterfacePINVOKE.Client_JoinGroupXTargets(swigCPtr, Group.getCPtr(g));
  }

  public void LeaveGroupXTargets(Group g) {
    questinterfacePINVOKE.Client_LeaveGroupXTargets(swigCPtr, Group.getCPtr(g));
  }

  public void LeaveRaidXTargets(Raid r) {
    questinterfacePINVOKE.Client_LeaveRaidXTargets(swigCPtr, Raid.getCPtr(r));
  }

  public void ClearXTargets() {
    questinterfacePINVOKE.Client_ClearXTargets(swigCPtr);
  }

  public bool GroupFollow(Client inviter) {
    bool ret = questinterfacePINVOKE.Client_GroupFollow(swigCPtr, Client.getCPtr(inviter));
    return ret;
  }

  public bool GetRunMode() {
    bool ret = questinterfacePINVOKE.Client_GetRunMode(swigCPtr);
    return ret;
  }

  public virtual bool CheckWaterAutoFireLoS(Mob m) {
    bool ret = questinterfacePINVOKE.Client_CheckWaterAutoFireLoS(swigCPtr, Mob.getCPtr(m));
    return ret;
  }

  public void SendReloadCommandMessages() {
    questinterfacePINVOKE.Client_SendReloadCommandMessages(swigCPtr);
  }

  public void SendItemRecastTimer(int recast_type, uint recast_delay, bool in_ignore_casting_requirement) {
    questinterfacePINVOKE.Client_SendItemRecastTimer__SWIG_0(swigCPtr, recast_type, recast_delay, in_ignore_casting_requirement);
  }

  public void SendItemRecastTimer(int recast_type, uint recast_delay) {
    questinterfacePINVOKE.Client_SendItemRecastTimer__SWIG_1(swigCPtr, recast_type, recast_delay);
  }

  public void SendItemRecastTimer(int recast_type) {
    questinterfacePINVOKE.Client_SendItemRecastTimer__SWIG_2(swigCPtr, recast_type);
  }

  public void SetItemRecastTimer(int spell_id, uint inventory_slot) {
    questinterfacePINVOKE.Client_SetItemRecastTimer(swigCPtr, spell_id, inventory_slot);
  }

  public void DeleteItemRecastTimer(uint item_id) {
    questinterfacePINVOKE.Client_DeleteItemRecastTimer(swigCPtr, item_id);
  }

  public bool HasItemRecastTimer(int spell_id, uint inventory_slot) {
    bool ret = questinterfacePINVOKE.Client_HasItemRecastTimer(swigCPtr, spell_id, inventory_slot);
    return ret;
  }

  public bool AggroMeterAvailable() {
    bool ret = questinterfacePINVOKE.Client_AggroMeterAvailable(swigCPtr);
    return ret;
  }

  public void SetAggroMeterLock(int in_) {
    questinterfacePINVOKE.Client_SetAggroMeterLock(swigCPtr, in_);
  }

  public void ProcessAggroMeter() {
    questinterfacePINVOKE.Client_ProcessAggroMeter(swigCPtr);
  }

  public void InitializeMercInfo() {
    questinterfacePINVOKE.Client_InitializeMercInfo(swigCPtr);
  }

  public bool CheckCanSpawnMerc(uint template_id) {
    bool ret = questinterfacePINVOKE.Client_CheckCanSpawnMerc(swigCPtr, template_id);
    return ret;
  }

  public bool CheckCanHireMerc(Mob merchant, uint template_id) {
    bool ret = questinterfacePINVOKE.Client_CheckCanHireMerc(swigCPtr, Mob.getCPtr(merchant), template_id);
    return ret;
  }

  public bool CheckCanRetainMerc(uint upkeep) {
    bool ret = questinterfacePINVOKE.Client_CheckCanRetainMerc(swigCPtr, upkeep);
    return ret;
  }

  public bool CheckCanUnsuspendMerc() {
    bool ret = questinterfacePINVOKE.Client_CheckCanUnsuspendMerc(swigCPtr);
    return ret;
  }

  public bool DismissMerc(uint MercID) {
    bool ret = questinterfacePINVOKE.Client_DismissMerc(swigCPtr, MercID);
    return ret;
  }

  public bool MercOnlyOrNoGroup() {
    bool ret = questinterfacePINVOKE.Client_MercOnlyOrNoGroup(swigCPtr);
    return ret;
  }

  public uint GetMercenaryID() {
    uint ret = questinterfacePINVOKE.Client_GetMercenaryID(swigCPtr);
    return ret;
  }

  public byte GetMercSlot() {
    byte ret = questinterfacePINVOKE.Client_GetMercSlot(swigCPtr);
    return ret;
  }

  public void SetMercID(uint newmercid) {
    questinterfacePINVOKE.Client_SetMercID(swigCPtr, newmercid);
  }

  public void SetMercSlot(byte newmercslot) {
    questinterfacePINVOKE.Client_SetMercSlot(swigCPtr, newmercslot);
  }

  public SWIGTYPE_p_Merc GetMerc() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Client_GetMerc(swigCPtr);
    SWIGTYPE_p_Merc ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Merc(cPtr, false);
    return ret;
  }

  public MercInfo GetMercInfo(byte slot) {
    MercInfo ret = new MercInfo(questinterfacePINVOKE.Client_GetMercInfo__SWIG_0(swigCPtr, slot), false);
    return ret;
  }

  public MercInfo GetMercInfo() {
    MercInfo ret = new MercInfo(questinterfacePINVOKE.Client_GetMercInfo__SWIG_1(swigCPtr), false);
    return ret;
  }

  public byte GetNumberOfMercenaries() {
    byte ret = questinterfacePINVOKE.Client_GetNumberOfMercenaries(swigCPtr);
    return ret;
  }

  public void SetMerc(SWIGTYPE_p_Merc newmerc) {
    questinterfacePINVOKE.Client_SetMerc(swigCPtr, SWIGTYPE_p_Merc.getCPtr(newmerc));
  }

  public void SendMercResponsePackets(uint ResponseType) {
    questinterfacePINVOKE.Client_SendMercResponsePackets(swigCPtr, ResponseType);
  }

  public void SendMercMerchantResponsePacket(int response_type) {
    questinterfacePINVOKE.Client_SendMercMerchantResponsePacket(swigCPtr, response_type);
  }

  public void SendMercenaryUnknownPacket(byte type) {
    questinterfacePINVOKE.Client_SendMercenaryUnknownPacket(swigCPtr, type);
  }

  public void SendMercenaryUnsuspendPacket(byte type) {
    questinterfacePINVOKE.Client_SendMercenaryUnsuspendPacket(swigCPtr, type);
  }

  public void SendMercTimer(SWIGTYPE_p_Merc merc) {
    questinterfacePINVOKE.Client_SendMercTimer__SWIG_0(swigCPtr, SWIGTYPE_p_Merc.getCPtr(merc));
  }

  public void SendMercTimer() {
    questinterfacePINVOKE.Client_SendMercTimer__SWIG_1(swigCPtr);
  }

  public void SendMercTimerPacket(int entity_id, int merc_state, int suspended_time, int update_interval, int unk01) {
    questinterfacePINVOKE.Client_SendMercTimerPacket__SWIG_0(swigCPtr, entity_id, merc_state, suspended_time, update_interval, unk01);
  }

  public void SendMercTimerPacket(int entity_id, int merc_state, int suspended_time, int update_interval) {
    questinterfacePINVOKE.Client_SendMercTimerPacket__SWIG_1(swigCPtr, entity_id, merc_state, suspended_time, update_interval);
  }

  public void SendMercTimerPacket(int entity_id, int merc_state, int suspended_time) {
    questinterfacePINVOKE.Client_SendMercTimerPacket__SWIG_2(swigCPtr, entity_id, merc_state, suspended_time);
  }

  public void SendMercSuspendResponsePacket(uint suspended_time) {
    questinterfacePINVOKE.Client_SendMercSuspendResponsePacket(swigCPtr, suspended_time);
  }

  public void SendMercAssignPacket(uint entityID, uint unk01, uint unk02) {
    questinterfacePINVOKE.Client_SendMercAssignPacket(swigCPtr, entityID, unk01, unk02);
  }

  public void SendMercPersonalInfo() {
    questinterfacePINVOKE.Client_SendMercPersonalInfo(swigCPtr);
  }

  public void SendClearMercInfo() {
    questinterfacePINVOKE.Client_SendClearMercInfo(swigCPtr);
  }

  public void SuspendMercCommand() {
    questinterfacePINVOKE.Client_SuspendMercCommand(swigCPtr);
  }

  public void SpawnMercOnZone() {
    questinterfacePINVOKE.Client_SpawnMercOnZone(swigCPtr);
  }

  public void SpawnMerc(SWIGTYPE_p_Merc merc, bool setMaxStats) {
    questinterfacePINVOKE.Client_SpawnMerc(swigCPtr, SWIGTYPE_p_Merc.getCPtr(merc), setMaxStats);
  }

  public void UpdateMercTimer() {
    questinterfacePINVOKE.Client_UpdateMercTimer(swigCPtr);
  }

  public void UpdateMercLevel() {
    questinterfacePINVOKE.Client_UpdateMercLevel(swigCPtr);
  }

  public void CheckMercSuspendTimer() {
    questinterfacePINVOKE.Client_CheckMercSuspendTimer(swigCPtr);
  }

  public SWIGTYPE_p_Timer GetMercTimer() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Client_GetMercTimer(swigCPtr);
    SWIGTYPE_p_Timer ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Timer(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_Timer GetPickLockTimer() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Client_GetPickLockTimer(swigCPtr);
    SWIGTYPE_p_Timer ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Timer(cPtr, false);
    return ret;
  }

  public void SendWebLink(string website) {
    questinterfacePINVOKE.Client_SendWebLink(swigCPtr, website);
  }

  public void SendMarqueeMessage(uint type, SWIGTYPE_p_std__string message, uint duration) {
    questinterfacePINVOKE.Client_SendMarqueeMessage__SWIG_0(swigCPtr, type, SWIGTYPE_p_std__string.getCPtr(message), duration);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SendMarqueeMessage(uint type, SWIGTYPE_p_std__string message) {
    questinterfacePINVOKE.Client_SendMarqueeMessage__SWIG_1(swigCPtr, type, SWIGTYPE_p_std__string.getCPtr(message));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SendMarqueeMessage(uint type, uint priority, uint fade_in, uint fade_out, uint duration, SWIGTYPE_p_std__string message) {
    questinterfacePINVOKE.Client_SendMarqueeMessage__SWIG_2(swigCPtr, type, priority, fade_in, fade_out, duration, SWIGTYPE_p_std__string.getCPtr(message));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SendSpellAnim(ushort targetid, ushort spell_id) {
    questinterfacePINVOKE.Client_SendSpellAnim(swigCPtr, targetid, spell_id);
  }

  public void DuplicateLoreMessage(uint ItemID) {
    questinterfacePINVOKE.Client_DuplicateLoreMessage(swigCPtr, ItemID);
  }

  public void GarbleMessage(string arg0, byte arg1) {
    questinterfacePINVOKE.Client_GarbleMessage(swigCPtr, arg0, arg1);
  }

  public void ItemTimerCheck() {
    questinterfacePINVOKE.Client_ItemTimerCheck(swigCPtr);
  }

  public void TryItemTimer(int slot) {
    questinterfacePINVOKE.Client_TryItemTimer(swigCPtr, slot);
  }

  public void SendItemScale(SWIGTYPE_p_EQ__ItemInstance inst) {
    questinterfacePINVOKE.Client_SendItemScale(swigCPtr, SWIGTYPE_p_EQ__ItemInstance.getCPtr(inst));
  }

  public int GetActSTR() {
    int ret = questinterfacePINVOKE.Client_GetActSTR(swigCPtr);
    return ret;
  }

  public int GetActSTA() {
    int ret = questinterfacePINVOKE.Client_GetActSTA(swigCPtr);
    return ret;
  }

  public int GetActDEX() {
    int ret = questinterfacePINVOKE.Client_GetActDEX(swigCPtr);
    return ret;
  }

  public int GetActAGI() {
    int ret = questinterfacePINVOKE.Client_GetActAGI(swigCPtr);
    return ret;
  }

  public int GetActINT() {
    int ret = questinterfacePINVOKE.Client_GetActINT(swigCPtr);
    return ret;
  }

  public int GetActWIS() {
    int ret = questinterfacePINVOKE.Client_GetActWIS(swigCPtr);
    return ret;
  }

  public int GetActCHA() {
    int ret = questinterfacePINVOKE.Client_GetActCHA(swigCPtr);
    return ret;
  }

  public void LoadAccountFlags() {
    questinterfacePINVOKE.Client_LoadAccountFlags(swigCPtr);
  }

  public void ClearAccountFlag(SWIGTYPE_p_std__string flag) {
    questinterfacePINVOKE.Client_ClearAccountFlag(swigCPtr, SWIGTYPE_p_std__string.getCPtr(flag));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetAccountFlag(SWIGTYPE_p_std__string flag, SWIGTYPE_p_std__string value) {
    questinterfacePINVOKE.Client_SetAccountFlag(swigCPtr, SWIGTYPE_p_std__string.getCPtr(flag), SWIGTYPE_p_std__string.getCPtr(value));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__string GetAccountFlag(SWIGTYPE_p_std__string flag) {
    SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(questinterfacePINVOKE.Client_GetAccountFlag(swigCPtr, SWIGTYPE_p_std__string.getCPtr(flag)), true);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_std__string_t GetAccountFlags() {
    SWIGTYPE_p_std__vectorT_std__string_t ret = new SWIGTYPE_p_std__vectorT_std__string_t(questinterfacePINVOKE.Client_GetAccountFlags(swigCPtr), true);
    return ret;
  }

  public void SetGMStatus(int new_status) {
    questinterfacePINVOKE.Client_SetGMStatus(swigCPtr, new_status);
  }

  public void Consume(SWIGTYPE_p_EQ__ItemData item, byte type, short slot, bool auto_consume) {
    questinterfacePINVOKE.Client_Consume(swigCPtr, SWIGTYPE_p_EQ__ItemData.getCPtr(item), type, slot, auto_consume);
  }

  public void PlayMP3(string fname) {
    questinterfacePINVOKE.Client_PlayMP3(swigCPtr, fname);
  }

  public void ExpeditionSay(string str, int ExpID) {
    questinterfacePINVOKE.Client_ExpeditionSay(swigCPtr, str, ExpID);
  }

  public int GetEnvironmentDamageModifier() {
    int ret = questinterfacePINVOKE.Client_GetEnvironmentDamageModifier(swigCPtr);
    return ret;
  }

  public void SetEnvironmentDamageModifier(int val) {
    questinterfacePINVOKE.Client_SetEnvironmentDamageModifier(swigCPtr, val);
  }

  public bool GetInvulnerableEnvironmentDamage() {
    bool ret = questinterfacePINVOKE.Client_GetInvulnerableEnvironmentDamage(swigCPtr);
    return ret;
  }

  public void SetInvulnerableEnvironmentDamage(bool val) {
    questinterfacePINVOKE.Client_SetInvulnerableEnvironmentDamage(swigCPtr, val);
  }

  public void SetIntoxication(int in_intoxication) {
    questinterfacePINVOKE.Client_SetIntoxication(swigCPtr, in_intoxication);
  }

  public void ApplyWeaponsStance() {
    questinterfacePINVOKE.Client_ApplyWeaponsStance(swigCPtr);
  }

  public void TogglePassiveAlternativeAdvancement(SWIGTYPE_p_AA__Rank rank, uint ability_id) {
    questinterfacePINVOKE.Client_TogglePassiveAlternativeAdvancement(swigCPtr, SWIGTYPE_p_AA__Rank.getCPtr(rank), ability_id);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool UseTogglePassiveHotkey(SWIGTYPE_p_AA__Rank rank) {
    bool ret = questinterfacePINVOKE.Client_UseTogglePassiveHotkey(swigCPtr, SWIGTYPE_p_AA__Rank.getCPtr(rank));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void TogglePurchaseAlternativeAdvancementRank(int rank_id) {
    questinterfacePINVOKE.Client_TogglePurchaseAlternativeAdvancementRank(swigCPtr, rank_id);
  }

  public void ResetAlternateAdvancementRank(uint aa_id) {
    questinterfacePINVOKE.Client_ResetAlternateAdvancementRank(swigCPtr, aa_id);
  }

  public bool IsEffectinAlternateAdvancementRankEffects(SWIGTYPE_p_AA__Rank rank, int effect_id) {
    bool ret = questinterfacePINVOKE.Client_IsEffectinAlternateAdvancementRankEffects(swigCPtr, SWIGTYPE_p_AA__Rank.getCPtr(rank), effect_id);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void TripInterrogateInvState() {
    questinterfacePINVOKE.Client_TripInterrogateInvState(swigCPtr);
  }

  public bool GetInterrogateInvState() {
    bool ret = questinterfacePINVOKE.Client_GetInterrogateInvState(swigCPtr);
    return ret;
  }

  public bool InterrogateInventory(Client requester, bool log, bool silent, bool allowtrip, SWIGTYPE_p_bool error, bool autolog) {
    bool ret = questinterfacePINVOKE.Client_InterrogateInventory__SWIG_0(swigCPtr, Client.getCPtr(requester), log, silent, allowtrip, SWIGTYPE_p_bool.getCPtr(error), autolog);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool InterrogateInventory(Client requester, bool log, bool silent, bool allowtrip, SWIGTYPE_p_bool error) {
    bool ret = questinterfacePINVOKE.Client_InterrogateInventory__SWIG_1(swigCPtr, Client.getCPtr(requester), log, silent, allowtrip, SWIGTYPE_p_bool.getCPtr(error));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetNextInvSnapshot(uint interval_in_min) {
    questinterfacePINVOKE.Client_SetNextInvSnapshot(swigCPtr, interval_in_min);
  }

  public uint GetLastInvSnapshotTime() {
    uint ret = questinterfacePINVOKE.Client_GetLastInvSnapshotTime(swigCPtr);
    return ret;
  }

  public uint GetNextInvSnapshotTime() {
    uint ret = questinterfacePINVOKE.Client_GetNextInvSnapshotTime(swigCPtr);
    return ret;
  }

  public void QuestReward(Mob target, uint copper, uint silver, uint gold, uint platinum, uint itemid, uint exp, bool faction) {
    questinterfacePINVOKE.Client_QuestReward__SWIG_0(swigCPtr, Mob.getCPtr(target), copper, silver, gold, platinum, itemid, exp, faction);
  }

  public void QuestReward(Mob target, uint copper, uint silver, uint gold, uint platinum, uint itemid, uint exp) {
    questinterfacePINVOKE.Client_QuestReward__SWIG_1(swigCPtr, Mob.getCPtr(target), copper, silver, gold, platinum, itemid, exp);
  }

  public void QuestReward(Mob target, uint copper, uint silver, uint gold, uint platinum, uint itemid) {
    questinterfacePINVOKE.Client_QuestReward__SWIG_2(swigCPtr, Mob.getCPtr(target), copper, silver, gold, platinum, itemid);
  }

  public void QuestReward(Mob target, uint copper, uint silver, uint gold, uint platinum) {
    questinterfacePINVOKE.Client_QuestReward__SWIG_3(swigCPtr, Mob.getCPtr(target), copper, silver, gold, platinum);
  }

  public void QuestReward(Mob target, uint copper, uint silver, uint gold) {
    questinterfacePINVOKE.Client_QuestReward__SWIG_4(swigCPtr, Mob.getCPtr(target), copper, silver, gold);
  }

  public void QuestReward(Mob target, uint copper, uint silver) {
    questinterfacePINVOKE.Client_QuestReward__SWIG_5(swigCPtr, Mob.getCPtr(target), copper, silver);
  }

  public void QuestReward(Mob target, uint copper) {
    questinterfacePINVOKE.Client_QuestReward__SWIG_6(swigCPtr, Mob.getCPtr(target), copper);
  }

  public void QuestReward(Mob target) {
    questinterfacePINVOKE.Client_QuestReward__SWIG_7(swigCPtr, Mob.getCPtr(target));
  }

  public void QuestReward(Mob target, SWIGTYPE_p_QuestReward_Struct reward, bool faction) {
    questinterfacePINVOKE.Client_QuestReward__SWIG_8(swigCPtr, Mob.getCPtr(target), SWIGTYPE_p_QuestReward_Struct.getCPtr(reward), faction);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void QuestReward(Mob target, SWIGTYPE_p_QuestReward_Struct reward) {
    questinterfacePINVOKE.Client_QuestReward__SWIG_9(swigCPtr, Mob.getCPtr(target), SWIGTYPE_p_QuestReward_Struct.getCPtr(reward));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void CashReward(uint copper, uint silver, uint gold, uint platinum) {
    questinterfacePINVOKE.Client_CashReward(swigCPtr, copper, silver, gold, platinum);
  }

  public void RewardFaction(int id, int amount) {
    questinterfacePINVOKE.Client_RewardFaction(swigCPtr, id, amount);
  }

  public override void ResetHPUpdateTimer() {
    questinterfacePINVOKE.Client_ResetHPUpdateTimer(swigCPtr);
  }

  public void SendHPUpdateMarquee() {
    questinterfacePINVOKE.Client_SendHPUpdateMarquee(swigCPtr);
  }

  public void CheckRegionTypeChanges() {
    questinterfacePINVOKE.Client_CheckRegionTypeChanges(swigCPtr);
  }

  public WaterRegionType GetLastRegion() {
    WaterRegionType ret = (WaterRegionType)questinterfacePINVOKE.Client_GetLastRegion(swigCPtr);
    return ret;
  }

  public int CalcATK() {
    int ret = questinterfacePINVOKE.Client_CalcATK(swigCPtr);
    return ret;
  }

  public uint trapid {
    set {
      questinterfacePINVOKE.Client_trapid_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.Client_trapid_get(swigCPtr);
      return ret;
    } 
  }

  public void SetLastPositionBeforeBulkUpdate(SWIGTYPE_p_glm__vec4 in_last_position_before_bulk_update) {
    questinterfacePINVOKE.Client_SetLastPositionBeforeBulkUpdate(swigCPtr, SWIGTYPE_p_glm__vec4.getCPtr(in_last_position_before_bulk_update));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_glm__vec4 GetLastPositionBeforeBulkUpdate() {
    SWIGTYPE_p_glm__vec4 ret = new SWIGTYPE_p_glm__vec4(questinterfacePINVOKE.Client_GetLastPositionBeforeBulkUpdate(swigCPtr), false);
    return ret;
  }

  public Raid p_raid_instance {
    set {
      questinterfacePINVOKE.Client_p_raid_instance_set(swigCPtr, Raid.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.Client_p_raid_instance_get(swigCPtr);
      Raid ret = (cPtr == global::System.IntPtr.Zero) ? null : new Raid(cPtr, false);
      return ret;
    } 
  }

  public void ShowDevToolsMenu() {
    questinterfacePINVOKE.Client_ShowDevToolsMenu(swigCPtr);
  }

  public SWIGTYPE_p_CheatManager cheat_manager {
    set {
      questinterfacePINVOKE.Client_cheat_manager_set(swigCPtr, SWIGTYPE_p_CheatManager.getCPtr(value));
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_CheatManager ret = new SWIGTYPE_p_CheatManager(questinterfacePINVOKE.Client_cheat_manager_get(swigCPtr), true);
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_Timer m_list_task_timers_rate_limit {
    set {
      questinterfacePINVOKE.Client_m_list_task_timers_rate_limit_set(swigCPtr, SWIGTYPE_p_Timer.getCPtr(value));
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_Timer ret = new SWIGTYPE_p_Timer(questinterfacePINVOKE.Client_m_list_task_timers_rate_limit_get(swigCPtr), true);
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_std__string GetGuildPublicNote() {
    SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(questinterfacePINVOKE.Client_GetGuildPublicNote(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_PlayerEvent__PlayerEvent GetPlayerEvent() {
    SWIGTYPE_p_PlayerEvent__PlayerEvent ret = new SWIGTYPE_p_PlayerEvent__PlayerEvent(questinterfacePINVOKE.Client_GetPlayerEvent(swigCPtr), true);
    return ret;
  }

  public void RecordKilledNPCEvent(NPC n) {
    questinterfacePINVOKE.Client_RecordKilledNPCEvent(swigCPtr, NPC.getCPtr(n));
  }

  public uint GetEXPForLevel(ushort check_level) {
    uint ret = questinterfacePINVOKE.Client_GetEXPForLevel(swigCPtr, check_level);
    return ret;
  }

  public ushort GetDoorToolEntityId() {
    ushort ret = questinterfacePINVOKE.Client_GetDoorToolEntityId(swigCPtr);
    return ret;
  }

  public void SetDoorToolEntityId(ushort door_tool_entity_id) {
    questinterfacePINVOKE.Client_SetDoorToolEntityId(swigCPtr, door_tool_entity_id);
  }

  public ushort GetObjectToolEntityId() {
    ushort ret = questinterfacePINVOKE.Client_GetObjectToolEntityId(swigCPtr);
    return ret;
  }

  public void SetObjectToolEntityId(ushort object_tool_entity_id) {
    questinterfacePINVOKE.Client_SetObjectToolEntityId(swigCPtr, object_tool_entity_id);
  }

  public bool IsLockSavePosition() {
    bool ret = questinterfacePINVOKE.Client_IsLockSavePosition(swigCPtr);
    return ret;
  }

  public void SetLockSavePosition(bool lock_save_position) {
    questinterfacePINVOKE.Client_SetLockSavePosition(swigCPtr, lock_save_position);
  }

  public void SetSharedTaskId(long shared_task_id) {
    questinterfacePINVOKE.Client_SetSharedTaskId(swigCPtr, shared_task_id);
  }

  public long GetSharedTaskId() {
    long ret = questinterfacePINVOKE.Client_GetSharedTaskId(swigCPtr);
    return ret;
  }

  public XTarget_Struct XTargets {
    set {
      questinterfacePINVOKE.Client_XTargets_set(swigCPtr, XTarget_Struct.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.Client_XTargets_get(swigCPtr);
      XTarget_Struct ret = (cPtr == global::System.IntPtr.Zero) ? null : new XTarget_Struct(cPtr, false);
      return ret;
    } 
  }

  public bool GetBotOption(Client.BotOwnerOption boo) {
    bool ret = questinterfacePINVOKE.Client_GetBotOption(swigCPtr, (int)boo);
    return ret;
  }

  public void SetBotOption(Client.BotOwnerOption boo, bool flag) {
    questinterfacePINVOKE.Client_SetBotOption__SWIG_0(swigCPtr, (int)boo, flag);
  }

  public void SetBotOption(Client.BotOwnerOption boo) {
    questinterfacePINVOKE.Client_SetBotOption__SWIG_1(swigCPtr, (int)boo);
  }

  public bool GetBotPulling() {
    bool ret = questinterfacePINVOKE.Client_GetBotPulling(swigCPtr);
    return ret;
  }

  public void SetBotPulling(bool flag) {
    questinterfacePINVOKE.Client_SetBotPulling__SWIG_0(swigCPtr, flag);
  }

  public void SetBotPulling() {
    questinterfacePINVOKE.Client_SetBotPulling__SWIG_1(swigCPtr);
  }

  public bool GetBotPrecombat() {
    bool ret = questinterfacePINVOKE.Client_GetBotPrecombat(swigCPtr);
    return ret;
  }

  public void SetBotPrecombat(bool flag) {
    questinterfacePINVOKE.Client_SetBotPrecombat__SWIG_0(swigCPtr, flag);
  }

  public void SetBotPrecombat() {
    questinterfacePINVOKE.Client_SetBotPrecombat__SWIG_1(swigCPtr);
  }

  public int GetBotRequiredLevel(byte class_id) {
    int ret = questinterfacePINVOKE.Client_GetBotRequiredLevel__SWIG_0(swigCPtr, class_id);
    return ret;
  }

  public int GetBotRequiredLevel() {
    int ret = questinterfacePINVOKE.Client_GetBotRequiredLevel__SWIG_1(swigCPtr);
    return ret;
  }

  public uint GetBotCreationLimit(byte class_id) {
    uint ret = questinterfacePINVOKE.Client_GetBotCreationLimit__SWIG_0(swigCPtr, class_id);
    return ret;
  }

  public uint GetBotCreationLimit() {
    uint ret = questinterfacePINVOKE.Client_GetBotCreationLimit__SWIG_1(swigCPtr);
    return ret;
  }

  public int GetBotSpawnLimit(byte class_id) {
    int ret = questinterfacePINVOKE.Client_GetBotSpawnLimit__SWIG_0(swigCPtr, class_id);
    return ret;
  }

  public int GetBotSpawnLimit() {
    int ret = questinterfacePINVOKE.Client_GetBotSpawnLimit__SWIG_1(swigCPtr);
    return ret;
  }

  public void SetBotCreationLimit(uint new_creation_limit, byte class_id) {
    questinterfacePINVOKE.Client_SetBotCreationLimit__SWIG_0(swigCPtr, new_creation_limit, class_id);
  }

  public void SetBotCreationLimit(uint new_creation_limit) {
    questinterfacePINVOKE.Client_SetBotCreationLimit__SWIG_1(swigCPtr, new_creation_limit);
  }

  public void SetBotRequiredLevel(int new_required_level, byte class_id) {
    questinterfacePINVOKE.Client_SetBotRequiredLevel__SWIG_0(swigCPtr, new_required_level, class_id);
  }

  public void SetBotRequiredLevel(int new_required_level) {
    questinterfacePINVOKE.Client_SetBotRequiredLevel__SWIG_1(swigCPtr, new_required_level);
  }

  public void SetBotSpawnLimit(int new_spawn_limit, byte class_id) {
    questinterfacePINVOKE.Client_SetBotSpawnLimit__SWIG_0(swigCPtr, new_spawn_limit, class_id);
  }

  public void SetBotSpawnLimit(int new_spawn_limit) {
    questinterfacePINVOKE.Client_SetBotSpawnLimit__SWIG_1(swigCPtr, new_spawn_limit);
  }

  public void CampAllBots(byte class_id) {
    questinterfacePINVOKE.Client_CampAllBots__SWIG_0(swigCPtr, class_id);
  }

  public void CampAllBots() {
    questinterfacePINVOKE.Client_CampAllBots__SWIG_1(swigCPtr);
  }

  public void SpawnRaidBotsOnConnect(Raid raid) {
    questinterfacePINVOKE.Client_SpawnRaidBotsOnConnect(swigCPtr, Raid.getCPtr(raid));
  }

  public SWIGTYPE_p_std__string GetMailKeyFull() {
    SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(questinterfacePINVOKE.Client_GetMailKeyFull(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_std__string GetMailKey() {
    SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(questinterfacePINVOKE.Client_GetMailKey(swigCPtr), false);
    return ret;
  }

  public enum BotOwnerOption : uint {
    booDeathMarquee,
    booStatsUpdate,
    booSpawnMessageSay,
    booSpawnMessageTell,
    booSpawnMessageClassSpecific,
    booUnused,
    booAutoDefend,
    booBuffCounter,
    booMonkWuMessage,
    _booCount
  }

}

public class Corpse : Mob {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Corpse(global::System.IntPtr cPtr, bool cMemoryOwn) : base(questinterfacePINVOKE.Corpse_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Corpse obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Corpse obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_Corpse(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public static void SendEndLootErrorPacket(Client client) {
    questinterfacePINVOKE.Corpse_SendEndLootErrorPacket(Client.getCPtr(client));
  }

  public static void SendLootReqErrorPacket(Client client, LootResponse response) {
    questinterfacePINVOKE.Corpse_SendLootReqErrorPacket__SWIG_0(Client.getCPtr(client), (int)response);
  }

  public static void SendLootReqErrorPacket(Client client) {
    questinterfacePINVOKE.Corpse_SendLootReqErrorPacket__SWIG_1(Client.getCPtr(client));
  }

  public Corpse(NPC npc, SWIGTYPE_p_LootItems item_list, uint npc_type_id, SWIGTYPE_p_p_NPCType npc_type_data, uint decay_time) : this(questinterfacePINVOKE.new_Corpse__SWIG_0(NPC.getCPtr(npc), SWIGTYPE_p_LootItems.getCPtr(item_list), npc_type_id, SWIGTYPE_p_p_NPCType.getCPtr(npc_type_data), decay_time), true) {
  }

  public Corpse(NPC npc, SWIGTYPE_p_LootItems item_list, uint npc_type_id, SWIGTYPE_p_p_NPCType npc_type_data) : this(questinterfacePINVOKE.new_Corpse__SWIG_1(NPC.getCPtr(npc), SWIGTYPE_p_LootItems.getCPtr(item_list), npc_type_id, SWIGTYPE_p_p_NPCType.getCPtr(npc_type_data)), true) {
  }

  public Corpse(Client c, int rez_exp, KilledByTypes killed_by) : this(questinterfacePINVOKE.new_Corpse__SWIG_2(Client.getCPtr(c), rez_exp, (int)killed_by), true) {
  }

  public Corpse(Client c, int rez_exp) : this(questinterfacePINVOKE.new_Corpse__SWIG_3(Client.getCPtr(c), rez_exp), true) {
  }

  public Corpse(uint corpse_id, uint character_id, string character_name, SWIGTYPE_p_LootItems item_list, uint copper, uint silver, uint gold, uint platinum, SWIGTYPE_p_glm__vec4 position, float size, byte gender, ushort race, byte class_, byte deity, byte level, byte texture, byte helm_texture, uint rez_exp, uint gm_rez_exp, KilledByTypes killed_by, bool is_rezzable, uint rez_remaining_time, bool was_at_graveyard) : this(questinterfacePINVOKE.new_Corpse__SWIG_4(corpse_id, character_id, character_name, SWIGTYPE_p_LootItems.getCPtr(item_list), copper, silver, gold, platinum, SWIGTYPE_p_glm__vec4.getCPtr(position), size, gender, race, class_, deity, level, texture, helm_texture, rez_exp, gm_rez_exp, (int)killed_by, is_rezzable, rez_remaining_time, was_at_graveyard), true) {
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public Corpse(uint corpse_id, uint character_id, string character_name, SWIGTYPE_p_LootItems item_list, uint copper, uint silver, uint gold, uint platinum, SWIGTYPE_p_glm__vec4 position, float size, byte gender, ushort race, byte class_, byte deity, byte level, byte texture, byte helm_texture, uint rez_exp, uint gm_rez_exp, KilledByTypes killed_by, bool is_rezzable, uint rez_remaining_time) : this(questinterfacePINVOKE.new_Corpse__SWIG_5(corpse_id, character_id, character_name, SWIGTYPE_p_LootItems.getCPtr(item_list), copper, silver, gold, platinum, SWIGTYPE_p_glm__vec4.getCPtr(position), size, gender, race, class_, deity, level, texture, helm_texture, rez_exp, gm_rez_exp, (int)killed_by, is_rezzable, rez_remaining_time), true) {
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool Death(Mob killer_mob, long damage, ushort spell_id, SWIGTYPE_p_EQ__skills__SkillType attack_skill, KilledByTypes killed_by) {
    bool ret = questinterfacePINVOKE.Corpse_Death__SWIG_0(swigCPtr, Mob.getCPtr(killer_mob), damage, spell_id, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(attack_skill), (int)killed_by);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool Death(Mob killer_mob, long damage, ushort spell_id, SWIGTYPE_p_EQ__skills__SkillType attack_skill) {
    bool ret = questinterfacePINVOKE.Corpse_Death__SWIG_1(swigCPtr, Mob.getCPtr(killer_mob), damage, spell_id, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(attack_skill));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void Damage(Mob from, long damage, ushort spell_id, SWIGTYPE_p_EQ__skills__SkillType attack_skill, bool avoidable, sbyte buffslot, bool iBuffTic, eSpecialAttacks special) {
    questinterfacePINVOKE.Corpse_Damage__SWIG_0(swigCPtr, Mob.getCPtr(from), damage, spell_id, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(attack_skill), avoidable, buffslot, iBuffTic, (int)special);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Damage(Mob from, long damage, ushort spell_id, SWIGTYPE_p_EQ__skills__SkillType attack_skill, bool avoidable, sbyte buffslot, bool iBuffTic) {
    questinterfacePINVOKE.Corpse_Damage__SWIG_1(swigCPtr, Mob.getCPtr(from), damage, spell_id, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(attack_skill), avoidable, buffslot, iBuffTic);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Damage(Mob from, long damage, ushort spell_id, SWIGTYPE_p_EQ__skills__SkillType attack_skill, bool avoidable, sbyte buffslot) {
    questinterfacePINVOKE.Corpse_Damage__SWIG_2(swigCPtr, Mob.getCPtr(from), damage, spell_id, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(attack_skill), avoidable, buffslot);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Damage(Mob from, long damage, ushort spell_id, SWIGTYPE_p_EQ__skills__SkillType attack_skill, bool avoidable) {
    questinterfacePINVOKE.Corpse_Damage__SWIG_3(swigCPtr, Mob.getCPtr(from), damage, spell_id, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(attack_skill), avoidable);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Damage(Mob from, long damage, ushort spell_id, SWIGTYPE_p_EQ__skills__SkillType attack_skill) {
    questinterfacePINVOKE.Corpse_Damage__SWIG_4(swigCPtr, Mob.getCPtr(from), damage, spell_id, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(attack_skill));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool Attack(Mob other, int Hand, bool FromRiposte, bool IsStrikethrough, bool IsFromSpell, ExtraAttackOptions opts) {
    bool ret = questinterfacePINVOKE.Corpse_Attack__SWIG_0(swigCPtr, Mob.getCPtr(other), Hand, FromRiposte, IsStrikethrough, IsFromSpell, ExtraAttackOptions.getCPtr(opts));
    return ret;
  }

  public override bool Attack(Mob other, int Hand, bool FromRiposte, bool IsStrikethrough, bool IsFromSpell) {
    bool ret = questinterfacePINVOKE.Corpse_Attack__SWIG_1(swigCPtr, Mob.getCPtr(other), Hand, FromRiposte, IsStrikethrough, IsFromSpell);
    return ret;
  }

  public override bool Attack(Mob other, int Hand, bool FromRiposte, bool IsStrikethrough) {
    bool ret = questinterfacePINVOKE.Corpse_Attack__SWIG_2(swigCPtr, Mob.getCPtr(other), Hand, FromRiposte, IsStrikethrough);
    return ret;
  }

  public override bool Attack(Mob other, int Hand, bool FromRiposte) {
    bool ret = questinterfacePINVOKE.Corpse_Attack__SWIG_3(swigCPtr, Mob.getCPtr(other), Hand, FromRiposte);
    return ret;
  }

  public override bool Attack(Mob other, int Hand) {
    bool ret = questinterfacePINVOKE.Corpse_Attack__SWIG_4(swigCPtr, Mob.getCPtr(other), Hand);
    return ret;
  }

  public override bool Attack(Mob other) {
    bool ret = questinterfacePINVOKE.Corpse_Attack__SWIG_5(swigCPtr, Mob.getCPtr(other));
    return ret;
  }

  public override bool HasRaid() {
    bool ret = questinterfacePINVOKE.Corpse_HasRaid(swigCPtr);
    return ret;
  }

  public override bool HasGroup() {
    bool ret = questinterfacePINVOKE.Corpse_HasGroup(swigCPtr);
    return ret;
  }

  public override Raid GetRaid() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Corpse_GetRaid(swigCPtr);
    Raid ret = (cPtr == global::System.IntPtr.Zero) ? null : new Raid(cPtr, false);
    return ret;
  }

  public override Group GetGroup() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Corpse_GetGroup(swigCPtr);
    Group ret = (cPtr == global::System.IntPtr.Zero) ? null : new Group(cPtr, false);
    return ret;
  }

  public uint GetCorpseDBID() {
    uint ret = questinterfacePINVOKE.Corpse_GetCorpseDBID(swigCPtr);
    return ret;
  }

  public string GetOwnerName() {
    string ret = questinterfacePINVOKE.Corpse_GetOwnerName(swigCPtr);
    return ret;
  }

  public bool IsEmpty() {
    bool ret = questinterfacePINVOKE.Corpse_IsEmpty(swigCPtr);
    return ret;
  }

  public override bool IsCorpse() {
    bool ret = questinterfacePINVOKE.Corpse_IsCorpse(swigCPtr);
    return ret;
  }

  public override bool IsPlayerCorpse() {
    bool ret = questinterfacePINVOKE.Corpse_IsPlayerCorpse(swigCPtr);
    return ret;
  }

  public override bool IsNPCCorpse() {
    bool ret = questinterfacePINVOKE.Corpse_IsNPCCorpse(swigCPtr);
    return ret;
  }

  public bool IsBecomeNPCCorpse() {
    bool ret = questinterfacePINVOKE.Corpse_IsBecomeNPCCorpse(swigCPtr);
    return ret;
  }

  public virtual void DepopNPCCorpse() {
    questinterfacePINVOKE.Corpse_DepopNPCCorpse(swigCPtr);
  }

  public virtual void DepopPlayerCorpse() {
    questinterfacePINVOKE.Corpse_DepopPlayerCorpse(swigCPtr);
  }

  public override bool Process() {
    bool ret = questinterfacePINVOKE.Corpse_Process(swigCPtr);
    return ret;
  }

  public override bool Save() {
    bool ret = questinterfacePINVOKE.Corpse_Save(swigCPtr);
    return ret;
  }

  public uint GetCharID() {
    uint ret = questinterfacePINVOKE.Corpse_GetCharID(swigCPtr);
    return ret;
  }

  public uint SetCharID(uint iCharID) {
    uint ret = questinterfacePINVOKE.Corpse_SetCharID(swigCPtr, iCharID);
    return ret;
  }

  public uint GetDecayTime() {
    uint ret = questinterfacePINVOKE.Corpse_GetDecayTime(swigCPtr);
    return ret;
  }

  public uint GetRezTime() {
    uint ret = questinterfacePINVOKE.Corpse_GetRezTime(swigCPtr);
    return ret;
  }

  public void ResetDecayTimer() {
    questinterfacePINVOKE.Corpse_ResetDecayTimer(swigCPtr);
  }

  public void SetDecayTimer(uint decay_time) {
    questinterfacePINVOKE.Corpse_SetDecayTimer(swigCPtr, decay_time);
  }

  public void SetConsentGroupID(uint group_id) {
    questinterfacePINVOKE.Corpse_SetConsentGroupID(swigCPtr, group_id);
  }

  public void SetConsentRaidID(uint raid_id) {
    questinterfacePINVOKE.Corpse_SetConsentRaidID(swigCPtr, raid_id);
  }

  public void SetConsentGuildID(uint guild_id) {
    questinterfacePINVOKE.Corpse_SetConsentGuildID(swigCPtr, guild_id);
  }

  public void AddConsentName(SWIGTYPE_p_std__string consent_player_name) {
    questinterfacePINVOKE.Corpse_AddConsentName(swigCPtr, SWIGTYPE_p_std__string.getCPtr(consent_player_name));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveConsentName(SWIGTYPE_p_std__string consent_player_name) {
    questinterfacePINVOKE.Corpse_RemoveConsentName(swigCPtr, SWIGTYPE_p_std__string.getCPtr(consent_player_name));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SendWorldSpawnPlayerCorpseInZone(uint zone_id) {
    questinterfacePINVOKE.Corpse_SendWorldSpawnPlayerCorpseInZone(swigCPtr, zone_id);
  }

  public bool MovePlayerCorpseToGraveyard() {
    bool ret = questinterfacePINVOKE.Corpse_MovePlayerCorpseToGraveyard(swigCPtr);
    return ret;
  }

  public bool MovePlayerCorpseToNonInstance() {
    bool ret = questinterfacePINVOKE.Corpse_MovePlayerCorpseToNonInstance(swigCPtr);
    return ret;
  }

  public void Delete() {
    questinterfacePINVOKE.Corpse_Delete(swigCPtr);
  }

  public void Bury() {
    questinterfacePINVOKE.Corpse_Bury(swigCPtr);
  }

  public void CalcCorpseName() {
    questinterfacePINVOKE.Corpse_CalcCorpseName(swigCPtr);
  }

  public void LoadPlayerCorpseDecayTime(uint dbid) {
    questinterfacePINVOKE.Corpse_LoadPlayerCorpseDecayTime(swigCPtr, dbid);
  }

  public uint GetWornItem(short equip_slot) {
    uint ret = questinterfacePINVOKE.Corpse_GetWornItem(swigCPtr, equip_slot);
    return ret;
  }

  public SWIGTYPE_p_LootItem GetItem(ushort lootslot, SWIGTYPE_p_p_LootItem bag_item_data) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Corpse_GetItem__SWIG_0(swigCPtr, lootslot, SWIGTYPE_p_p_LootItem.getCPtr(bag_item_data));
    SWIGTYPE_p_LootItem ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_LootItem(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_LootItem GetItem(ushort lootslot) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Corpse_GetItem__SWIG_1(swigCPtr, lootslot);
    SWIGTYPE_p_LootItem ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_LootItem(cPtr, false);
    return ret;
  }

  public void SetPlayerKillItemID(int pk_item_id) {
    questinterfacePINVOKE.Corpse_SetPlayerKillItemID(swigCPtr, pk_item_id);
  }

  public int GetPlayerKillItem() {
    int ret = questinterfacePINVOKE.Corpse_GetPlayerKillItem(swigCPtr);
    return ret;
  }

  public void RemoveItem(ushort lootslot) {
    questinterfacePINVOKE.Corpse_RemoveItem__SWIG_0(swigCPtr, lootslot);
  }

  public void RemoveItem(SWIGTYPE_p_LootItem item_data) {
    questinterfacePINVOKE.Corpse_RemoveItem__SWIG_1(swigCPtr, SWIGTYPE_p_LootItem.getCPtr(item_data));
  }

  public void RemoveItemByID(uint item_id, int quantity) {
    questinterfacePINVOKE.Corpse_RemoveItemByID__SWIG_0(swigCPtr, item_id, quantity);
  }

  public void RemoveItemByID(uint item_id) {
    questinterfacePINVOKE.Corpse_RemoveItemByID__SWIG_1(swigCPtr, item_id);
  }

  public void AddItem(uint itemnum, ushort charges, short slot, uint aug1, uint aug2, uint aug3, uint aug4, uint aug5, uint aug6, bool attuned, SWIGTYPE_p_std__string custom_data, uint ornamenticon, uint ornamentidfile, uint ornament_hero_model) {
    questinterfacePINVOKE.Corpse_AddItem__SWIG_0(swigCPtr, itemnum, charges, slot, aug1, aug2, aug3, aug4, aug5, aug6, attuned, SWIGTYPE_p_std__string.getCPtr(custom_data), ornamenticon, ornamentidfile, ornament_hero_model);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddItem(uint itemnum, ushort charges, short slot, uint aug1, uint aug2, uint aug3, uint aug4, uint aug5, uint aug6, bool attuned, SWIGTYPE_p_std__string custom_data, uint ornamenticon, uint ornamentidfile) {
    questinterfacePINVOKE.Corpse_AddItem__SWIG_1(swigCPtr, itemnum, charges, slot, aug1, aug2, aug3, aug4, aug5, aug6, attuned, SWIGTYPE_p_std__string.getCPtr(custom_data), ornamenticon, ornamentidfile);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddItem(uint itemnum, ushort charges, short slot, uint aug1, uint aug2, uint aug3, uint aug4, uint aug5, uint aug6, bool attuned, SWIGTYPE_p_std__string custom_data, uint ornamenticon) {
    questinterfacePINVOKE.Corpse_AddItem__SWIG_2(swigCPtr, itemnum, charges, slot, aug1, aug2, aug3, aug4, aug5, aug6, attuned, SWIGTYPE_p_std__string.getCPtr(custom_data), ornamenticon);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddItem(uint itemnum, ushort charges, short slot, uint aug1, uint aug2, uint aug3, uint aug4, uint aug5, uint aug6, bool attuned, SWIGTYPE_p_std__string custom_data) {
    questinterfacePINVOKE.Corpse_AddItem__SWIG_3(swigCPtr, itemnum, charges, slot, aug1, aug2, aug3, aug4, aug5, aug6, attuned, SWIGTYPE_p_std__string.getCPtr(custom_data));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddItem(uint itemnum, ushort charges, short slot, uint aug1, uint aug2, uint aug3, uint aug4, uint aug5, uint aug6, bool attuned) {
    questinterfacePINVOKE.Corpse_AddItem__SWIG_4(swigCPtr, itemnum, charges, slot, aug1, aug2, aug3, aug4, aug5, aug6, attuned);
  }

  public void AddItem(uint itemnum, ushort charges, short slot, uint aug1, uint aug2, uint aug3, uint aug4, uint aug5, uint aug6) {
    questinterfacePINVOKE.Corpse_AddItem__SWIG_5(swigCPtr, itemnum, charges, slot, aug1, aug2, aug3, aug4, aug5, aug6);
  }

  public void AddItem(uint itemnum, ushort charges, short slot, uint aug1, uint aug2, uint aug3, uint aug4, uint aug5) {
    questinterfacePINVOKE.Corpse_AddItem__SWIG_6(swigCPtr, itemnum, charges, slot, aug1, aug2, aug3, aug4, aug5);
  }

  public void AddItem(uint itemnum, ushort charges, short slot, uint aug1, uint aug2, uint aug3, uint aug4) {
    questinterfacePINVOKE.Corpse_AddItem__SWIG_7(swigCPtr, itemnum, charges, slot, aug1, aug2, aug3, aug4);
  }

  public void AddItem(uint itemnum, ushort charges, short slot, uint aug1, uint aug2, uint aug3) {
    questinterfacePINVOKE.Corpse_AddItem__SWIG_8(swigCPtr, itemnum, charges, slot, aug1, aug2, aug3);
  }

  public void AddItem(uint itemnum, ushort charges, short slot, uint aug1, uint aug2) {
    questinterfacePINVOKE.Corpse_AddItem__SWIG_9(swigCPtr, itemnum, charges, slot, aug1, aug2);
  }

  public void AddItem(uint itemnum, ushort charges, short slot, uint aug1) {
    questinterfacePINVOKE.Corpse_AddItem__SWIG_10(swigCPtr, itemnum, charges, slot, aug1);
  }

  public void AddItem(uint itemnum, ushort charges, short slot) {
    questinterfacePINVOKE.Corpse_AddItem__SWIG_11(swigCPtr, itemnum, charges, slot);
  }

  public void AddItem(uint itemnum, ushort charges) {
    questinterfacePINVOKE.Corpse_AddItem__SWIG_12(swigCPtr, itemnum, charges);
  }

  public void SetCash(uint in_copper, uint in_silver, uint in_gold, uint in_platinum) {
    questinterfacePINVOKE.Corpse_SetCash(swigCPtr, in_copper, in_silver, in_gold, in_platinum);
  }

  public void RemoveCash() {
    questinterfacePINVOKE.Corpse_RemoveCash(swigCPtr);
  }

  public uint GetCopper() {
    uint ret = questinterfacePINVOKE.Corpse_GetCopper(swigCPtr);
    return ret;
  }

  public uint GetSilver() {
    uint ret = questinterfacePINVOKE.Corpse_GetSilver(swigCPtr);
    return ret;
  }

  public uint GetGold() {
    uint ret = questinterfacePINVOKE.Corpse_GetGold(swigCPtr);
    return ret;
  }

  public uint GetPlatinum() {
    uint ret = questinterfacePINVOKE.Corpse_GetPlatinum(swigCPtr);
    return ret;
  }

  public bool IsRezzed() {
    bool ret = questinterfacePINVOKE.Corpse_IsRezzed__SWIG_0(swigCPtr);
    return ret;
  }

  public void IsRezzed(bool in_rez) {
    questinterfacePINVOKE.Corpse_IsRezzed__SWIG_1(swigCPtr, in_rez);
  }

  public void CastRezz(ushort spell_id, Mob caster) {
    questinterfacePINVOKE.Corpse_CastRezz(swigCPtr, spell_id, Mob.getCPtr(caster));
  }

  public void CompleteResurrection(bool timer_expired) {
    questinterfacePINVOKE.Corpse_CompleteResurrection__SWIG_0(swigCPtr, timer_expired);
  }

  public void CompleteResurrection() {
    questinterfacePINVOKE.Corpse_CompleteResurrection__SWIG_1(swigCPtr);
  }

  public bool IsRezzable() {
    bool ret = questinterfacePINVOKE.Corpse_IsRezzable(swigCPtr);
    return ret;
  }

  public void SetRezTimer(bool initial_timer) {
    questinterfacePINVOKE.Corpse_SetRezTimer__SWIG_0(swigCPtr, initial_timer);
  }

  public void SetRezTimer() {
    questinterfacePINVOKE.Corpse_SetRezTimer__SWIG_1(swigCPtr);
  }

  public void QueryLoot(Client to) {
    questinterfacePINVOKE.Corpse_QueryLoot(swigCPtr, Client.getCPtr(to));
  }

  public bool HasItem(uint item_id) {
    bool ret = questinterfacePINVOKE.Corpse_HasItem(swigCPtr, item_id);
    return ret;
  }

  public ushort CountItem(uint item_id) {
    ushort ret = questinterfacePINVOKE.Corpse_CountItem(swigCPtr, item_id);
    return ret;
  }

  public uint GetItemIDBySlot(ushort loot_slot) {
    uint ret = questinterfacePINVOKE.Corpse_GetItemIDBySlot(swigCPtr, loot_slot);
    return ret;
  }

  public ushort GetFirstLootSlotByItemID(uint item_id) {
    ushort ret = questinterfacePINVOKE.Corpse_GetFirstLootSlotByItemID(swigCPtr, item_id);
    return ret;
  }

  public IntVector GetLootList() {
    IntVector ret = new IntVector(questinterfacePINVOKE.Corpse_GetLootList(swigCPtr), true);
    return ret;
  }

  public void LootCorpseItem(Client c, SWIGTYPE_p_EQApplicationPacket app) {
    questinterfacePINVOKE.Corpse_LootCorpseItem(swigCPtr, Client.getCPtr(c), SWIGTYPE_p_EQApplicationPacket.getCPtr(app));
  }

  public void EndLoot(Client c, SWIGTYPE_p_EQApplicationPacket app) {
    questinterfacePINVOKE.Corpse_EndLoot(swigCPtr, Client.getCPtr(c), SWIGTYPE_p_EQApplicationPacket.getCPtr(app));
  }

  public void MakeLootRequestPackets(Client c, SWIGTYPE_p_EQApplicationPacket app) {
    questinterfacePINVOKE.Corpse_MakeLootRequestPackets(swigCPtr, Client.getCPtr(c), SWIGTYPE_p_EQApplicationPacket.getCPtr(app));
  }

  public void AllowPlayerLoot(Mob them, byte slot) {
    questinterfacePINVOKE.Corpse_AllowPlayerLoot(swigCPtr, Mob.getCPtr(them), slot);
  }

  public void AddLooter(Mob who) {
    questinterfacePINVOKE.Corpse_AddLooter(swigCPtr, Mob.getCPtr(who));
  }

  public uint CountItems() {
    uint ret = questinterfacePINVOKE.Corpse_CountItems(swigCPtr);
    return ret;
  }

  public bool CanPlayerLoot(int character_id) {
    bool ret = questinterfacePINVOKE.Corpse_CanPlayerLoot(swigCPtr, character_id);
    return ret;
  }

  public void Lock() {
    questinterfacePINVOKE.Corpse_Lock(swigCPtr);
  }

  public void UnLock() {
    questinterfacePINVOKE.Corpse_UnLock(swigCPtr);
  }

  public bool IsLocked() {
    bool ret = questinterfacePINVOKE.Corpse_IsLocked(swigCPtr);
    return ret;
  }

  public void ResetLooter() {
    questinterfacePINVOKE.Corpse_ResetLooter(swigCPtr);
  }

  public bool IsBeingLooted() {
    bool ret = questinterfacePINVOKE.Corpse_IsBeingLooted(swigCPtr);
    return ret;
  }

  public bool IsBeingLootedBy(Client c) {
    bool ret = questinterfacePINVOKE.Corpse_IsBeingLootedBy(swigCPtr, Client.getCPtr(c));
    return ret;
  }

  public override void FillSpawnStruct(SWIGTYPE_p_NewSpawn_Struct ns, Mob ForWho) {
    questinterfacePINVOKE.Corpse_FillSpawnStruct(swigCPtr, SWIGTYPE_p_NewSpawn_Struct.getCPtr(ns), Mob.getCPtr(ForWho));
  }

  public bool Summon(Client c, bool spell, bool CheckDistance) {
    bool ret = questinterfacePINVOKE.Corpse_Summon(swigCPtr, Client.getCPtr(c), spell, CheckDistance);
    return ret;
  }

  public void Spawn() {
    questinterfacePINVOKE.Corpse_Spawn(swigCPtr);
  }

  public string corpse_name {
    set {
      questinterfacePINVOKE.Corpse_corpse_name_set(swigCPtr, value);
    } 
    get {
      string ret = questinterfacePINVOKE.Corpse_corpse_name_get(swigCPtr);
      return ret;
    } 
  }

  public override uint GetEquippedItemFromTextureSlot(byte material_slot) {
    uint ret = questinterfacePINVOKE.Corpse_GetEquippedItemFromTextureSlot(swigCPtr, material_slot);
    return ret;
  }

  public override uint GetEquipmentColor(byte material_slot) {
    uint ret = questinterfacePINVOKE.Corpse_GetEquipmentColor(swigCPtr, material_slot);
    return ret;
  }

  public long GetRezExp() {
    long ret = questinterfacePINVOKE.Corpse_GetRezExp(swigCPtr);
    return ret;
  }

  public long GetGMRezExp() {
    long ret = questinterfacePINVOKE.Corpse_GetGMRezExp(swigCPtr);
    return ret;
  }

  public byte GetKilledBy() {
    byte ret = questinterfacePINVOKE.Corpse_GetKilledBy(swigCPtr);
    return ret;
  }

  public uint GetRemainingRezTime() {
    uint ret = questinterfacePINVOKE.Corpse_GetRemainingRezTime(swigCPtr);
    return ret;
  }

  public override void UpdateEquipmentLight() {
    questinterfacePINVOKE.Corpse_UpdateEquipmentLight(swigCPtr);
  }

  public void CheckIsOwnerOnline() {
    questinterfacePINVOKE.Corpse_CheckIsOwnerOnline(swigCPtr);
  }

  public void SetOwnerOnline(bool value) {
    questinterfacePINVOKE.Corpse_SetOwnerOnline(swigCPtr, value);
  }

  public bool GetOwnerOnline() {
    bool ret = questinterfacePINVOKE.Corpse_GetOwnerOnline(swigCPtr);
    return ret;
  }

  public static Corpse LoadCharacterCorpse(SWIGTYPE_p_CharacterCorpsesRepository__CharacterCorpses cc, SWIGTYPE_p_glm__vec4 position) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Corpse_LoadCharacterCorpse(SWIGTYPE_p_CharacterCorpsesRepository__CharacterCorpses.getCPtr(cc), SWIGTYPE_p_glm__vec4.getCPtr(position));
    Corpse ret = (cPtr == global::System.IntPtr.Zero) ? null : new Corpse(cPtr, false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

public class Doors : Entity {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Doors(global::System.IntPtr cPtr, bool cMemoryOwn) : base(questinterfacePINVOKE.Doors_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Doors obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Doors obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_Doors(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public Doors(string model, SWIGTYPE_p_glm__vec4 position, byte open_type, ushort size) : this(questinterfacePINVOKE.new_Doors__SWIG_0(model, SWIGTYPE_p_glm__vec4.getCPtr(position), open_type, size), true) {
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public Doors(string model, SWIGTYPE_p_glm__vec4 position, byte open_type) : this(questinterfacePINVOKE.new_Doors__SWIG_1(model, SWIGTYPE_p_glm__vec4.getCPtr(position), open_type), true) {
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public Doors(string model, SWIGTYPE_p_glm__vec4 position) : this(questinterfacePINVOKE.new_Doors__SWIG_2(model, SWIGTYPE_p_glm__vec4.getCPtr(position)), true) {
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public Doors(SWIGTYPE_p_DoorsRepository__Doors door) : this(questinterfacePINVOKE.new_Doors__SWIG_3(SWIGTYPE_p_DoorsRepository__Doors.getCPtr(door)), true) {
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool GetDisableTimer() {
    bool ret = questinterfacePINVOKE.Doors_GetDisableTimer(swigCPtr);
    return ret;
  }

  public override bool IsDoor() {
    bool ret = questinterfacePINVOKE.Doors_IsDoor(swigCPtr);
    return ret;
  }

  public bool IsDoorOpen() {
    bool ret = questinterfacePINVOKE.Doors_IsDoorOpen(swigCPtr);
    return ret;
  }

  public override bool Process() {
    bool ret = questinterfacePINVOKE.Doors_Process(swigCPtr);
    return ret;
  }

  public bool triggered {
    set {
      questinterfacePINVOKE.Doors_triggered_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.Doors_triggered_get(swigCPtr);
      return ret;
    } 
  }

  public string GetDoorName() {
    string ret = questinterfacePINVOKE.Doors_GetDoorName(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_glm__vec4 GetPosition() {
    SWIGTYPE_p_glm__vec4 ret = new SWIGTYPE_p_glm__vec4(questinterfacePINVOKE.Doors_GetPosition(swigCPtr), false);
    return ret;
  }

  public int GetDzSwitchID() {
    int ret = questinterfacePINVOKE.Doors_GetDzSwitchID(swigCPtr);
    return ret;
  }

  public int GetIncline() {
    int ret = questinterfacePINVOKE.Doors_GetIncline(swigCPtr);
    return ret;
  }

  public int GetInvertState() {
    int ret = questinterfacePINVOKE.Doors_GetInvertState(swigCPtr);
    return ret;
  }

  public byte GetDoorID() {
    byte ret = questinterfacePINVOKE.Doors_GetDoorID(swigCPtr);
    return ret;
  }

  public byte GetNoKeyring() {
    byte ret = questinterfacePINVOKE.Doors_GetNoKeyring(swigCPtr);
    return ret;
  }

  public byte GetOpenType() {
    byte ret = questinterfacePINVOKE.Doors_GetOpenType(swigCPtr);
    return ret;
  }

  public byte GetTriggerDoorID() {
    byte ret = questinterfacePINVOKE.Doors_GetTriggerDoorID(swigCPtr);
    return ret;
  }

  public byte GetTriggerType() {
    byte ret = questinterfacePINVOKE.Doors_GetTriggerType(swigCPtr);
    return ret;
  }

  public byte IsLDoNDoor() {
    byte ret = questinterfacePINVOKE.Doors_IsLDoNDoor(swigCPtr);
    return ret;
  }

  public ushort GetLockpick() {
    ushort ret = questinterfacePINVOKE.Doors_GetLockpick(swigCPtr);
    return ret;
  }

  public ushort GetSize() {
    ushort ret = questinterfacePINVOKE.Doors_GetSize(swigCPtr);
    return ret;
  }

  public uint GetClientVersionMask() {
    uint ret = questinterfacePINVOKE.Doors_GetClientVersionMask(swigCPtr);
    return ret;
  }

  public uint GetDoorDBID() {
    uint ret = questinterfacePINVOKE.Doors_GetDoorDBID(swigCPtr);
    return ret;
  }

  public int GetDoorParam() {
    int ret = questinterfacePINVOKE.Doors_GetDoorParam(swigCPtr);
    return ret;
  }

  public uint GetEntityID() {
    uint ret = questinterfacePINVOKE.Doors_GetEntityID(swigCPtr);
    return ret;
  }

  public uint GetGuildID() {
    uint ret = questinterfacePINVOKE.Doors_GetGuildID(swigCPtr);
    return ret;
  }

  public uint GetKeyItem() {
    uint ret = questinterfacePINVOKE.Doors_GetKeyItem(swigCPtr);
    return ret;
  }

  public void CreateDatabaseEntry() {
    questinterfacePINVOKE.Doors_CreateDatabaseEntry(swigCPtr);
  }

  public void ForceClose(Mob sender, bool alt_mode) {
    questinterfacePINVOKE.Doors_ForceClose__SWIG_0(swigCPtr, Mob.getCPtr(sender), alt_mode);
  }

  public void ForceClose(Mob sender) {
    questinterfacePINVOKE.Doors_ForceClose__SWIG_1(swigCPtr, Mob.getCPtr(sender));
  }

  public void ForceOpen(Mob sender, bool alt_mode) {
    questinterfacePINVOKE.Doors_ForceOpen__SWIG_0(swigCPtr, Mob.getCPtr(sender), alt_mode);
  }

  public void ForceOpen(Mob sender) {
    questinterfacePINVOKE.Doors_ForceOpen__SWIG_1(swigCPtr, Mob.getCPtr(sender));
  }

  public void HandleClick(Client sender, byte trigger) {
    questinterfacePINVOKE.Doors_HandleClick(swigCPtr, Client.getCPtr(sender), trigger);
  }

  public void Open(Mob sender, bool alt_mode) {
    questinterfacePINVOKE.Doors_Open__SWIG_0(swigCPtr, Mob.getCPtr(sender), alt_mode);
  }

  public void Open(Mob sender) {
    questinterfacePINVOKE.Doors_Open__SWIG_1(swigCPtr, Mob.getCPtr(sender));
  }

  public void SetDisableTimer(bool flag) {
    questinterfacePINVOKE.Doors_SetDisableTimer(swigCPtr, flag);
  }

  public void SetDoorName(string name) {
    questinterfacePINVOKE.Doors_SetDoorName(swigCPtr, name);
  }

  public void SetEntityID(uint entity) {
    questinterfacePINVOKE.Doors_SetEntityID(swigCPtr, entity);
  }

  public void SetIncline(int in_) {
    questinterfacePINVOKE.Doors_SetIncline(swigCPtr, in_);
  }

  public void SetInvertState(int in_) {
    questinterfacePINVOKE.Doors_SetInvertState(swigCPtr, in_);
  }

  public void SetKeyItem(uint in_) {
    questinterfacePINVOKE.Doors_SetKeyItem(swigCPtr, in_);
  }

  public void SetLocation(float x, float y, float z) {
    questinterfacePINVOKE.Doors_SetLocation(swigCPtr, x, y, z);
  }

  public void SetLockpick(ushort in_) {
    questinterfacePINVOKE.Doors_SetLockpick(swigCPtr, in_);
  }

  public void SetNoKeyring(byte in_) {
    questinterfacePINVOKE.Doors_SetNoKeyring(swigCPtr, in_);
  }

  public void SetOpenState(bool st) {
    questinterfacePINVOKE.Doors_SetOpenState(swigCPtr, st);
  }

  public void SetOpenType(byte in_) {
    questinterfacePINVOKE.Doors_SetOpenType(swigCPtr, in_);
  }

  public void SetPosition(SWIGTYPE_p_glm__vec4 position) {
    questinterfacePINVOKE.Doors_SetPosition(swigCPtr, SWIGTYPE_p_glm__vec4.getCPtr(position));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSize(ushort size) {
    questinterfacePINVOKE.Doors_SetSize(swigCPtr, size);
  }

  public void ToggleState(Mob sender) {
    questinterfacePINVOKE.Doors_ToggleState(swigCPtr, Mob.getCPtr(sender));
  }

  public float GetX() {
    float ret = questinterfacePINVOKE.Doors_GetX(swigCPtr);
    return ret;
  }

  public float GetY() {
    float ret = questinterfacePINVOKE.Doors_GetY(swigCPtr);
    return ret;
  }

  public float GetZ() {
    float ret = questinterfacePINVOKE.Doors_GetZ(swigCPtr);
    return ret;
  }

  public float GetHeading() {
    float ret = questinterfacePINVOKE.Doors_GetHeading(swigCPtr);
    return ret;
  }

  public bool HasDestinationZone() {
    bool ret = questinterfacePINVOKE.Doors_HasDestinationZone(swigCPtr);
    return ret;
  }

  public bool IsDestinationZoneSame() {
    bool ret = questinterfacePINVOKE.Doors_IsDestinationZoneSame(swigCPtr);
    return ret;
  }

  public bool IsDoorBlacklisted() {
    bool ret = questinterfacePINVOKE.Doors_IsDoorBlacklisted(swigCPtr);
    return ret;
  }

}

public class GroupIDConsumer : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal GroupIDConsumer(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GroupIDConsumer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(GroupIDConsumer obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~GroupIDConsumer() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_GroupIDConsumer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public GroupIDConsumer() : this(questinterfacePINVOKE.new_GroupIDConsumer__SWIG_0(), true) {
  }

  public GroupIDConsumer(uint gid) : this(questinterfacePINVOKE.new_GroupIDConsumer__SWIG_1(gid), true) {
  }

  public uint GetID() {
    uint ret = questinterfacePINVOKE.GroupIDConsumer_GetID(swigCPtr);
    return ret;
  }

}

public class Group : GroupIDConsumer {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Group(global::System.IntPtr cPtr, bool cMemoryOwn) : base(questinterfacePINVOKE.Group_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Group obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Group obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_Group(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public Group(Mob leader) : this(questinterfacePINVOKE.new_Group__SWIG_0(Mob.getCPtr(leader)), true) {
  }

  public Group(uint gid) : this(questinterfacePINVOKE.new_Group__SWIG_1(gid), true) {
  }

  public bool AddMember(Mob newmember, string NewMemberName, uint CharacterID, bool ismerc) {
    bool ret = questinterfacePINVOKE.Group_AddMember__SWIG_0(swigCPtr, Mob.getCPtr(newmember), NewMemberName, CharacterID, ismerc);
    return ret;
  }

  public bool AddMember(Mob newmember, string NewMemberName, uint CharacterID) {
    bool ret = questinterfacePINVOKE.Group_AddMember__SWIG_1(swigCPtr, Mob.getCPtr(newmember), NewMemberName, CharacterID);
    return ret;
  }

  public bool AddMember(Mob newmember, string NewMemberName) {
    bool ret = questinterfacePINVOKE.Group_AddMember__SWIG_2(swigCPtr, Mob.getCPtr(newmember), NewMemberName);
    return ret;
  }

  public bool AddMember(Mob newmember) {
    bool ret = questinterfacePINVOKE.Group_AddMember__SWIG_3(swigCPtr, Mob.getCPtr(newmember));
    return ret;
  }

  public void AddMember(string NewMemberName) {
    questinterfacePINVOKE.Group_AddMember__SWIG_4(swigCPtr, NewMemberName);
  }

  public void SendUpdate(uint type, Mob member) {
    questinterfacePINVOKE.Group_SendUpdate(swigCPtr, type, Mob.getCPtr(member));
  }

  public void SendLeadershipAAUpdate() {
    questinterfacePINVOKE.Group_SendLeadershipAAUpdate(swigCPtr);
  }

  public bool DelMemberOOZ(string Name) {
    bool ret = questinterfacePINVOKE.Group_DelMemberOOZ(swigCPtr, Name);
    return ret;
  }

  public bool DelMember(Mob oldmember, bool ignoresender) {
    bool ret = questinterfacePINVOKE.Group_DelMember__SWIG_0(swigCPtr, Mob.getCPtr(oldmember), ignoresender);
    return ret;
  }

  public bool DelMember(Mob oldmember) {
    bool ret = questinterfacePINVOKE.Group_DelMember__SWIG_1(swigCPtr, Mob.getCPtr(oldmember));
    return ret;
  }

  public void DisbandGroup(bool joinraid) {
    questinterfacePINVOKE.Group_DisbandGroup__SWIG_0(swigCPtr, joinraid);
  }

  public void DisbandGroup() {
    questinterfacePINVOKE.Group_DisbandGroup__SWIG_1(swigCPtr);
  }

  public void GetMemberList(SWIGTYPE_p_std__listT_Mob_p_t member_list, bool clear_list) {
    questinterfacePINVOKE.Group_GetMemberList__SWIG_0(swigCPtr, SWIGTYPE_p_std__listT_Mob_p_t.getCPtr(member_list), clear_list);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetMemberList(SWIGTYPE_p_std__listT_Mob_p_t member_list) {
    questinterfacePINVOKE.Group_GetMemberList__SWIG_1(swigCPtr, SWIGTYPE_p_std__listT_Mob_p_t.getCPtr(member_list));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetClientList(SWIGTYPE_p_std__listT_Client_p_t client_list, bool clear_list) {
    questinterfacePINVOKE.Group_GetClientList__SWIG_0(swigCPtr, SWIGTYPE_p_std__listT_Client_p_t.getCPtr(client_list), clear_list);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetClientList(SWIGTYPE_p_std__listT_Client_p_t client_list) {
    questinterfacePINVOKE.Group_GetClientList__SWIG_1(swigCPtr, SWIGTYPE_p_std__listT_Client_p_t.getCPtr(client_list));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetBotList(SWIGTYPE_p_std__listT_Bot_p_t bot_list, bool clear_list) {
    questinterfacePINVOKE.Group_GetBotList__SWIG_0(swigCPtr, SWIGTYPE_p_std__listT_Bot_p_t.getCPtr(bot_list), clear_list);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetBotList(SWIGTYPE_p_std__listT_Bot_p_t bot_list) {
    questinterfacePINVOKE.Group_GetBotList__SWIG_1(swigCPtr, SWIGTYPE_p_std__listT_Bot_p_t.getCPtr(bot_list));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsGroupMember(Mob c) {
    bool ret = questinterfacePINVOKE.Group_IsGroupMember__SWIG_0(swigCPtr, Mob.getCPtr(c));
    return ret;
  }

  public bool IsGroupMember(string name) {
    bool ret = questinterfacePINVOKE.Group_IsGroupMember__SWIG_1(swigCPtr, name);
    return ret;
  }

  public bool Process() {
    bool ret = questinterfacePINVOKE.Group_Process(swigCPtr);
    return ret;
  }

  public bool IsGroup() {
    bool ret = questinterfacePINVOKE.Group_IsGroup(swigCPtr);
    return ret;
  }

  public void SendGroupJoinOOZ(Mob NewMember) {
    questinterfacePINVOKE.Group_SendGroupJoinOOZ(swigCPtr, Mob.getCPtr(NewMember));
  }

  public void CastGroupSpell(Mob caster, ushort spellid) {
    questinterfacePINVOKE.Group_CastGroupSpell(swigCPtr, Mob.getCPtr(caster), spellid);
  }

  public void SplitExp(ulong exp, Mob other) {
    questinterfacePINVOKE.Group_SplitExp(swigCPtr, exp, Mob.getCPtr(other));
  }

  public void GroupMessage(Mob sender, byte language, byte lang_skill, string message) {
    questinterfacePINVOKE.Group_GroupMessage(swigCPtr, Mob.getCPtr(sender), language, lang_skill, message);
  }

  public void GroupMessageString(Mob sender, uint type, uint string_id, string message, string message2, string message3, string message4, string message5, string message6, string message7, string message8, string message9, uint distance) {
    questinterfacePINVOKE.Group_GroupMessageString__SWIG_0(swigCPtr, Mob.getCPtr(sender), type, string_id, message, message2, message3, message4, message5, message6, message7, message8, message9, distance);
  }

  public void GroupMessageString(Mob sender, uint type, uint string_id, string message, string message2, string message3, string message4, string message5, string message6, string message7, string message8, string message9) {
    questinterfacePINVOKE.Group_GroupMessageString__SWIG_1(swigCPtr, Mob.getCPtr(sender), type, string_id, message, message2, message3, message4, message5, message6, message7, message8, message9);
  }

  public void GroupMessageString(Mob sender, uint type, uint string_id, string message, string message2, string message3, string message4, string message5, string message6, string message7, string message8) {
    questinterfacePINVOKE.Group_GroupMessageString__SWIG_2(swigCPtr, Mob.getCPtr(sender), type, string_id, message, message2, message3, message4, message5, message6, message7, message8);
  }

  public void GroupMessageString(Mob sender, uint type, uint string_id, string message, string message2, string message3, string message4, string message5, string message6, string message7) {
    questinterfacePINVOKE.Group_GroupMessageString__SWIG_3(swigCPtr, Mob.getCPtr(sender), type, string_id, message, message2, message3, message4, message5, message6, message7);
  }

  public void GroupMessageString(Mob sender, uint type, uint string_id, string message, string message2, string message3, string message4, string message5, string message6) {
    questinterfacePINVOKE.Group_GroupMessageString__SWIG_4(swigCPtr, Mob.getCPtr(sender), type, string_id, message, message2, message3, message4, message5, message6);
  }

  public void GroupMessageString(Mob sender, uint type, uint string_id, string message, string message2, string message3, string message4, string message5) {
    questinterfacePINVOKE.Group_GroupMessageString__SWIG_5(swigCPtr, Mob.getCPtr(sender), type, string_id, message, message2, message3, message4, message5);
  }

  public void GroupMessageString(Mob sender, uint type, uint string_id, string message, string message2, string message3, string message4) {
    questinterfacePINVOKE.Group_GroupMessageString__SWIG_6(swigCPtr, Mob.getCPtr(sender), type, string_id, message, message2, message3, message4);
  }

  public void GroupMessageString(Mob sender, uint type, uint string_id, string message, string message2, string message3) {
    questinterfacePINVOKE.Group_GroupMessageString__SWIG_7(swigCPtr, Mob.getCPtr(sender), type, string_id, message, message2, message3);
  }

  public void GroupMessageString(Mob sender, uint type, uint string_id, string message, string message2) {
    questinterfacePINVOKE.Group_GroupMessageString__SWIG_8(swigCPtr, Mob.getCPtr(sender), type, string_id, message, message2);
  }

  public void GroupMessageString(Mob sender, uint type, uint string_id, string message) {
    questinterfacePINVOKE.Group_GroupMessageString__SWIG_9(swigCPtr, Mob.getCPtr(sender), type, string_id, message);
  }

  public uint GetTotalGroupDamage(Mob other) {
    uint ret = questinterfacePINVOKE.Group_GetTotalGroupDamage(swigCPtr, Mob.getCPtr(other));
    return ret;
  }

  public void SplitMoney(uint copper, uint silver, uint gold, uint platinum, Client splitter) {
    questinterfacePINVOKE.Group_SplitMoney__SWIG_0(swigCPtr, copper, silver, gold, platinum, Client.getCPtr(splitter));
  }

  public void SplitMoney(uint copper, uint silver, uint gold, uint platinum) {
    questinterfacePINVOKE.Group_SplitMoney__SWIG_1(swigCPtr, copper, silver, gold, platinum);
  }

  public void SetLeader(Mob c) {
    questinterfacePINVOKE.Group_SetLeader(swigCPtr, Mob.getCPtr(c));
  }

  public Mob GetLeader() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Group_GetLeader(swigCPtr);
    Mob ret = (cPtr == global::System.IntPtr.Zero) ? null : new Mob(cPtr, false);
    return ret;
  }

  public string GetLeaderName() {
    string ret = questinterfacePINVOKE.Group_GetLeaderName(swigCPtr);
    return ret;
  }

  public void SendHPManaEndPacketsTo(Mob newmember) {
    questinterfacePINVOKE.Group_SendHPManaEndPacketsTo(swigCPtr, Mob.getCPtr(newmember));
  }

  public void SendHPPacketsFrom(Mob member) {
    questinterfacePINVOKE.Group_SendHPPacketsFrom(swigCPtr, Mob.getCPtr(member));
  }

  public void SendManaPacketFrom(Mob member) {
    questinterfacePINVOKE.Group_SendManaPacketFrom(swigCPtr, Mob.getCPtr(member));
  }

  public void SendEndurancePacketFrom(Mob member) {
    questinterfacePINVOKE.Group_SendEndurancePacketFrom(swigCPtr, Mob.getCPtr(member));
  }

  public bool UpdatePlayer(Mob update) {
    bool ret = questinterfacePINVOKE.Group_UpdatePlayer(swigCPtr, Mob.getCPtr(update));
    return ret;
  }

  public void MemberZoned(Mob removemob) {
    questinterfacePINVOKE.Group_MemberZoned(swigCPtr, Mob.getCPtr(removemob));
  }

  public bool IsLeader(string name) {
    bool ret = questinterfacePINVOKE.Group_IsLeader__SWIG_0(swigCPtr, name);
    return ret;
  }

  public bool IsLeader(Mob m) {
    bool ret = questinterfacePINVOKE.Group_IsLeader__SWIG_1(swigCPtr, Mob.getCPtr(m));
    return ret;
  }

  public byte GroupCount() {
    byte ret = questinterfacePINVOKE.Group_GroupCount(swigCPtr);
    return ret;
  }

  public uint GetHighestLevel() {
    uint ret = questinterfacePINVOKE.Group_GetHighestLevel(swigCPtr);
    return ret;
  }

  public uint GetLowestLevel() {
    uint ret = questinterfacePINVOKE.Group_GetLowestLevel(swigCPtr);
    return ret;
  }

  public void QueuePacket(SWIGTYPE_p_EQApplicationPacket app, bool ack_req) {
    questinterfacePINVOKE.Group_QueuePacket__SWIG_0(swigCPtr, SWIGTYPE_p_EQApplicationPacket.getCPtr(app), ack_req);
  }

  public void QueuePacket(SWIGTYPE_p_EQApplicationPacket app) {
    questinterfacePINVOKE.Group_QueuePacket__SWIG_1(swigCPtr, SWIGTYPE_p_EQApplicationPacket.getCPtr(app));
  }

  public void TeleportGroup(Mob sender, uint zoneID, ushort instance_id, float x, float y, float z, float heading) {
    questinterfacePINVOKE.Group_TeleportGroup(swigCPtr, Mob.getCPtr(sender), zoneID, instance_id, x, y, z, heading);
  }

  public ushort GetAvgLevel() {
    ushort ret = questinterfacePINVOKE.Group_GetAvgLevel(swigCPtr);
    return ret;
  }

  public bool LearnMembers() {
    bool ret = questinterfacePINVOKE.Group_LearnMembers(swigCPtr);
    return ret;
  }

  public void VerifyGroup() {
    questinterfacePINVOKE.Group_VerifyGroup(swigCPtr);
  }

  public void BalanceHP(int penalty, float range, Mob caster, int limit) {
    questinterfacePINVOKE.Group_BalanceHP__SWIG_0(swigCPtr, penalty, range, Mob.getCPtr(caster), limit);
  }

  public void BalanceHP(int penalty, float range, Mob caster) {
    questinterfacePINVOKE.Group_BalanceHP__SWIG_1(swigCPtr, penalty, range, Mob.getCPtr(caster));
  }

  public void BalanceHP(int penalty, float range) {
    questinterfacePINVOKE.Group_BalanceHP__SWIG_2(swigCPtr, penalty, range);
  }

  public void BalanceHP(int penalty) {
    questinterfacePINVOKE.Group_BalanceHP__SWIG_3(swigCPtr, penalty);
  }

  public void BalanceMana(int penalty, float range, Mob caster, int limit) {
    questinterfacePINVOKE.Group_BalanceMana__SWIG_0(swigCPtr, penalty, range, Mob.getCPtr(caster), limit);
  }

  public void BalanceMana(int penalty, float range, Mob caster) {
    questinterfacePINVOKE.Group_BalanceMana__SWIG_1(swigCPtr, penalty, range, Mob.getCPtr(caster));
  }

  public void BalanceMana(int penalty, float range) {
    questinterfacePINVOKE.Group_BalanceMana__SWIG_2(swigCPtr, penalty, range);
  }

  public void BalanceMana(int penalty) {
    questinterfacePINVOKE.Group_BalanceMana__SWIG_3(swigCPtr, penalty);
  }

  public void HealGroup(uint heal_amt, Mob caster, float range) {
    questinterfacePINVOKE.Group_HealGroup__SWIG_0(swigCPtr, heal_amt, Mob.getCPtr(caster), range);
  }

  public void HealGroup(uint heal_amt, Mob caster) {
    questinterfacePINVOKE.Group_HealGroup__SWIG_1(swigCPtr, heal_amt, Mob.getCPtr(caster));
  }

  public void SetGroupAAs(SWIGTYPE_p_GroupLeadershipAA_Struct From) {
    questinterfacePINVOKE.Group_SetGroupAAs(swigCPtr, SWIGTYPE_p_GroupLeadershipAA_Struct.getCPtr(From));
  }

  public void GetGroupAAs(SWIGTYPE_p_GroupLeadershipAA_Struct Into) {
    questinterfacePINVOKE.Group_GetGroupAAs(swigCPtr, SWIGTYPE_p_GroupLeadershipAA_Struct.getCPtr(Into));
  }

  public void UpdateGroupAAs() {
    questinterfacePINVOKE.Group_UpdateGroupAAs(swigCPtr);
  }

  public void SaveGroupLeaderAA() {
    questinterfacePINVOKE.Group_SaveGroupLeaderAA(swigCPtr);
  }

  public void MarkNPC(Mob Target, int Number) {
    questinterfacePINVOKE.Group_MarkNPC(swigCPtr, Mob.getCPtr(Target), Number);
  }

  public sbyte GetNumberNeedingHealedInGroup(sbyte hpr, bool includePets) {
    sbyte ret = questinterfacePINVOKE.Group_GetNumberNeedingHealedInGroup(swigCPtr, hpr, includePets);
    return ret;
  }

  public void DelegateMainTank(string NewMainAssistName, byte toggle) {
    questinterfacePINVOKE.Group_DelegateMainTank__SWIG_0(swigCPtr, NewMainAssistName, toggle);
  }

  public void DelegateMainTank(string NewMainAssistName) {
    questinterfacePINVOKE.Group_DelegateMainTank__SWIG_1(swigCPtr, NewMainAssistName);
  }

  public void DelegateMainAssist(string NewMainAssistName, byte toggle) {
    questinterfacePINVOKE.Group_DelegateMainAssist__SWIG_0(swigCPtr, NewMainAssistName, toggle);
  }

  public void DelegateMainAssist(string NewMainAssistName) {
    questinterfacePINVOKE.Group_DelegateMainAssist__SWIG_1(swigCPtr, NewMainAssistName);
  }

  public void DelegatePuller(string NewMainAssistName, byte toggle) {
    questinterfacePINVOKE.Group_DelegatePuller__SWIG_0(swigCPtr, NewMainAssistName, toggle);
  }

  public void DelegatePuller(string NewMainAssistName) {
    questinterfacePINVOKE.Group_DelegatePuller__SWIG_1(swigCPtr, NewMainAssistName);
  }

  public void UnDelegateMainTank(string OldMainAssistName, byte toggle) {
    questinterfacePINVOKE.Group_UnDelegateMainTank__SWIG_0(swigCPtr, OldMainAssistName, toggle);
  }

  public void UnDelegateMainTank(string OldMainAssistName) {
    questinterfacePINVOKE.Group_UnDelegateMainTank__SWIG_1(swigCPtr, OldMainAssistName);
  }

  public void UnDelegateMainAssist(string OldMainAssistName, byte toggle) {
    questinterfacePINVOKE.Group_UnDelegateMainAssist__SWIG_0(swigCPtr, OldMainAssistName, toggle);
  }

  public void UnDelegateMainAssist(string OldMainAssistName) {
    questinterfacePINVOKE.Group_UnDelegateMainAssist__SWIG_1(swigCPtr, OldMainAssistName);
  }

  public void UnDelegatePuller(string OldMainAssistName, byte toggle) {
    questinterfacePINVOKE.Group_UnDelegatePuller__SWIG_0(swigCPtr, OldMainAssistName, toggle);
  }

  public void UnDelegatePuller(string OldMainAssistName) {
    questinterfacePINVOKE.Group_UnDelegatePuller__SWIG_1(swigCPtr, OldMainAssistName);
  }

  public bool IsNPCMarker(Client c) {
    bool ret = questinterfacePINVOKE.Group_IsNPCMarker(swigCPtr, Client.getCPtr(c));
    return ret;
  }

  public void SetGroupAssistTarget(Mob m) {
    questinterfacePINVOKE.Group_SetGroupAssistTarget(swigCPtr, Mob.getCPtr(m));
  }

  public void SetGroupTankTarget(Mob m) {
    questinterfacePINVOKE.Group_SetGroupTankTarget(swigCPtr, Mob.getCPtr(m));
  }

  public void SetGroupPullerTarget(Mob m) {
    questinterfacePINVOKE.Group_SetGroupPullerTarget(swigCPtr, Mob.getCPtr(m));
  }

  public bool HasRole(Mob m, byte Role) {
    bool ret = questinterfacePINVOKE.Group_HasRole(swigCPtr, Mob.getCPtr(m), Role);
    return ret;
  }

  public void NotifyAssistTarget(Client c) {
    questinterfacePINVOKE.Group_NotifyAssistTarget(swigCPtr, Client.getCPtr(c));
  }

  public void NotifyTankTarget(Client c) {
    questinterfacePINVOKE.Group_NotifyTankTarget(swigCPtr, Client.getCPtr(c));
  }

  public void NotifyPullerTarget(Client c) {
    questinterfacePINVOKE.Group_NotifyPullerTarget(swigCPtr, Client.getCPtr(c));
  }

  public void DelegateMarkNPC(string NewNPCMarkerName) {
    questinterfacePINVOKE.Group_DelegateMarkNPC(swigCPtr, NewNPCMarkerName);
  }

  public void UnDelegateMarkNPC(string OldNPCMarkerName) {
    questinterfacePINVOKE.Group_UnDelegateMarkNPC(swigCPtr, OldNPCMarkerName);
  }

  public void NotifyMainTank(Client c, byte toggle) {
    questinterfacePINVOKE.Group_NotifyMainTank__SWIG_0(swigCPtr, Client.getCPtr(c), toggle);
  }

  public void NotifyMainTank(Client c) {
    questinterfacePINVOKE.Group_NotifyMainTank__SWIG_1(swigCPtr, Client.getCPtr(c));
  }

  public void NotifyMainAssist(Client c, byte toggle) {
    questinterfacePINVOKE.Group_NotifyMainAssist__SWIG_0(swigCPtr, Client.getCPtr(c), toggle);
  }

  public void NotifyMainAssist(Client c) {
    questinterfacePINVOKE.Group_NotifyMainAssist__SWIG_1(swigCPtr, Client.getCPtr(c));
  }

  public void NotifyPuller(Client c, byte toggle) {
    questinterfacePINVOKE.Group_NotifyPuller__SWIG_0(swigCPtr, Client.getCPtr(c), toggle);
  }

  public void NotifyPuller(Client c) {
    questinterfacePINVOKE.Group_NotifyPuller__SWIG_1(swigCPtr, Client.getCPtr(c));
  }

  public void NotifyMarkNPC(Client c) {
    questinterfacePINVOKE.Group_NotifyMarkNPC(swigCPtr, Client.getCPtr(c));
  }

  public uint GetNPCMarkerID() {
    uint ret = questinterfacePINVOKE.Group_GetNPCMarkerID(swigCPtr);
    return ret;
  }

  public void SetMainTank(string NewMainTankName) {
    questinterfacePINVOKE.Group_SetMainTank(swigCPtr, NewMainTankName);
  }

  public void SetMainAssist(string NewMainAssistName) {
    questinterfacePINVOKE.Group_SetMainAssist(swigCPtr, NewMainAssistName);
  }

  public void SetPuller(string NewPullerName) {
    questinterfacePINVOKE.Group_SetPuller(swigCPtr, NewPullerName);
  }

  public string GetMainTankName() {
    string ret = questinterfacePINVOKE.Group_GetMainTankName(swigCPtr);
    return ret;
  }

  public string GetMainAssistName() {
    string ret = questinterfacePINVOKE.Group_GetMainAssistName(swigCPtr);
    return ret;
  }

  public string GetPullerName() {
    string ret = questinterfacePINVOKE.Group_GetPullerName(swigCPtr);
    return ret;
  }

  public bool AmIMainTank(string mob_name) {
    bool ret = questinterfacePINVOKE.Group_AmIMainTank(swigCPtr, mob_name);
    return ret;
  }

  public bool AmIMainAssist(string mob_name) {
    bool ret = questinterfacePINVOKE.Group_AmIMainAssist(swigCPtr, mob_name);
    return ret;
  }

  public bool AmIPuller(string mob_name) {
    bool ret = questinterfacePINVOKE.Group_AmIPuller(swigCPtr, mob_name);
    return ret;
  }

  public void SetNPCMarker(string NewNPCMarkerName) {
    questinterfacePINVOKE.Group_SetNPCMarker(swigCPtr, NewNPCMarkerName);
  }

  public void UnMarkNPC(ushort ID) {
    questinterfacePINVOKE.Group_UnMarkNPC(swigCPtr, ID);
  }

  public void SendMarkedNPCsToMember(Client c, bool Clear) {
    questinterfacePINVOKE.Group_SendMarkedNPCsToMember__SWIG_0(swigCPtr, Client.getCPtr(c), Clear);
  }

  public void SendMarkedNPCsToMember(Client c) {
    questinterfacePINVOKE.Group_SendMarkedNPCsToMember__SWIG_1(swigCPtr, Client.getCPtr(c));
  }

  public int GetLeadershipAA(int AAID) {
    int ret = questinterfacePINVOKE.Group_GetLeadershipAA(swigCPtr, AAID);
    return ret;
  }

  public void ClearAllNPCMarks() {
    questinterfacePINVOKE.Group_ClearAllNPCMarks(swigCPtr);
  }

  public void QueueHPPacketsForNPCHealthAA(Mob sender, SWIGTYPE_p_EQApplicationPacket app) {
    questinterfacePINVOKE.Group_QueueHPPacketsForNPCHealthAA(swigCPtr, Mob.getCPtr(sender), SWIGTYPE_p_EQApplicationPacket.getCPtr(app));
  }

  public void QueueClients(Mob sender, SWIGTYPE_p_EQApplicationPacket app, bool ack_required, bool ignore_sender, float distance) {
    questinterfacePINVOKE.Group_QueueClients__SWIG_0(swigCPtr, Mob.getCPtr(sender), SWIGTYPE_p_EQApplicationPacket.getCPtr(app), ack_required, ignore_sender, distance);
  }

  public void QueueClients(Mob sender, SWIGTYPE_p_EQApplicationPacket app, bool ack_required, bool ignore_sender) {
    questinterfacePINVOKE.Group_QueueClients__SWIG_1(swigCPtr, Mob.getCPtr(sender), SWIGTYPE_p_EQApplicationPacket.getCPtr(app), ack_required, ignore_sender);
  }

  public void QueueClients(Mob sender, SWIGTYPE_p_EQApplicationPacket app, bool ack_required) {
    questinterfacePINVOKE.Group_QueueClients__SWIG_2(swigCPtr, Mob.getCPtr(sender), SWIGTYPE_p_EQApplicationPacket.getCPtr(app), ack_required);
  }

  public void QueueClients(Mob sender, SWIGTYPE_p_EQApplicationPacket app) {
    questinterfacePINVOKE.Group_QueueClients__SWIG_3(swigCPtr, Mob.getCPtr(sender), SWIGTYPE_p_EQApplicationPacket.getCPtr(app));
  }

  public void ChangeLeader(Mob newleader) {
    questinterfacePINVOKE.Group_ChangeLeader(swigCPtr, Mob.getCPtr(newleader));
  }

  public string GetClientNameByIndex(byte index) {
    string ret = questinterfacePINVOKE.Group_GetClientNameByIndex(swigCPtr, index);
    return ret;
  }

  public void UpdateXTargetMarkedNPC(uint Number, Mob m) {
    questinterfacePINVOKE.Group_UpdateXTargetMarkedNPC(swigCPtr, Number, Mob.getCPtr(m));
  }

  public void SetDirtyAutoHaters() {
    questinterfacePINVOKE.Group_SetDirtyAutoHaters(swigCPtr);
  }

  public SWIGTYPE_p_XTargetAutoHaters GetXTargetAutoMgr() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Group_GetXTargetAutoMgr(swigCPtr);
    SWIGTYPE_p_XTargetAutoHaters ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XTargetAutoHaters(cPtr, false);
    return ret;
  }

  public void JoinRaidXTarget(Raid raid, bool first) {
    questinterfacePINVOKE.Group_JoinRaidXTarget__SWIG_0(swigCPtr, Raid.getCPtr(raid), first);
  }

  public void JoinRaidXTarget(Raid raid) {
    questinterfacePINVOKE.Group_JoinRaidXTarget__SWIG_1(swigCPtr, Raid.getCPtr(raid));
  }

  public void SetGroupMentor(int percent, string name) {
    questinterfacePINVOKE.Group_SetGroupMentor(swigCPtr, percent, name);
  }

  public void ClearGroupMentor() {
    questinterfacePINVOKE.Group_ClearGroupMentor(swigCPtr);
  }

  public int GetMentorPercent() {
    int ret = questinterfacePINVOKE.Group_GetMentorPercent(swigCPtr);
    return ret;
  }

  public Client GetMentoree() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Group_GetMentoree(swigCPtr);
    Client ret = (cPtr == global::System.IntPtr.Zero) ? null : new Client(cPtr, false);
    return ret;
  }

  public bool DoesAnyMemberHaveExpeditionLockout(SWIGTYPE_p_std__string expedition_name, SWIGTYPE_p_std__string event_name, int max_check_count) {
    bool ret = questinterfacePINVOKE.Group_DoesAnyMemberHaveExpeditionLockout__SWIG_0(swigCPtr, SWIGTYPE_p_std__string.getCPtr(expedition_name), SWIGTYPE_p_std__string.getCPtr(event_name), max_check_count);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool DoesAnyMemberHaveExpeditionLockout(SWIGTYPE_p_std__string expedition_name, SWIGTYPE_p_std__string event_name) {
    bool ret = questinterfacePINVOKE.Group_DoesAnyMemberHaveExpeditionLockout__SWIG_1(swigCPtr, SWIGTYPE_p_std__string.getCPtr(expedition_name), SWIGTYPE_p_std__string.getCPtr(event_name));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_p_Mob members {
    set {
      questinterfacePINVOKE.Group_members_set(swigCPtr, SWIGTYPE_p_p_Mob.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.Group_members_get(swigCPtr);
      SWIGTYPE_p_p_Mob ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p_Mob(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_a_64__char membername {
    set {
      questinterfacePINVOKE.Group_membername_set(swigCPtr, SWIGTYPE_p_a_64__char.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.Group_membername_get(swigCPtr);
      SWIGTYPE_p_a_64__char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_a_64__char(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_char MemberRoles {
    set {
      questinterfacePINVOKE.Group_MemberRoles_set(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.Group_MemberRoles_get(swigCPtr);
      SWIGTYPE_p_unsigned_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
      return ret;
    } 
  }

  public bool disbandcheck {
    set {
      questinterfacePINVOKE.Group_disbandcheck_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.Group_disbandcheck_get(swigCPtr);
      return ret;
    } 
  }

  public bool castspell {
    set {
      questinterfacePINVOKE.Group_castspell_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.Group_castspell_get(swigCPtr);
      return ret;
    } 
  }

}

public enum ObjectTypes {
  StaticLocked = 0,
  Temporary = 1,
  ToolBox = 10,
  Research = 11,
  Mortar = 12,
  SelfDusting = 13,
  Baking1 = 14,
  Baking2 = 15,
  Tailoring = 16,
  Forge = 17,
  Fletching = 18,
  BrewBarrel = 19,
  Jewelcrafting = 20,
  PotteryWheel = 21,
  PotteryKiln = 22,
  WizardResearch = 24,
  MagicianResearch = 25,
  NecromancerResearch = 26,
  EnchanterResearch = 27,
  Invalid1 = 28,
  Invalid2 = 29,
  Experimental = 30,
  HighElfForge = 31,
  DarkElfForge = 32,
  OgreForge = 33,
  DwarfForge = 34,
  GnomeForge = 35,
  BarbarianForge = 36,
  IksarForge = 38,
  HumanForge = 39,
  HumanForge2 = 40,
  HalflingTailoring = 41,
  EruditeTailoring = 42,
  WoodElfTailoring = 43,
  WoodElfFletching = 44,
  IksarPotteryWheel = 45,
  TrollForge = 47,
  WoodElfForge = 48,
  HalflingForge = 49,
  EruditeForge = 50,
  AugmentationPool = 53,
  StaticUnlocked = 255
}

public class Object : Entity {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Object(global::System.IntPtr cPtr, bool cMemoryOwn) : base(questinterfacePINVOKE.Object_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Object obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Object obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_Object(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public Object(uint id, uint type, uint icon, SWIGTYPE_p_Object_Struct data, SWIGTYPE_p_EQ__ItemInstance inst, bool fix_z) : this(questinterfacePINVOKE.new_Object__SWIG_0(id, type, icon, SWIGTYPE_p_Object_Struct.getCPtr(data), SWIGTYPE_p_EQ__ItemInstance.getCPtr(inst), fix_z), true) {
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public Object(uint id, uint type, uint icon, SWIGTYPE_p_Object_Struct data, SWIGTYPE_p_EQ__ItemInstance inst) : this(questinterfacePINVOKE.new_Object__SWIG_1(id, type, icon, SWIGTYPE_p_Object_Struct.getCPtr(data), SWIGTYPE_p_EQ__ItemInstance.getCPtr(inst)), true) {
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public Object(uint id, uint type, uint icon, SWIGTYPE_p_Object_Struct data) : this(questinterfacePINVOKE.new_Object__SWIG_2(id, type, icon, SWIGTYPE_p_Object_Struct.getCPtr(data)), true) {
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public Object(SWIGTYPE_p_EQ__ItemInstance inst, SWIGTYPE_p_std__string name, float max_x, float min_x, float max_y, float min_y, float z, float heading, uint respawn_timer, bool fix_z) : this(questinterfacePINVOKE.new_Object__SWIG_3(SWIGTYPE_p_EQ__ItemInstance.getCPtr(inst), SWIGTYPE_p_std__string.getCPtr(name), max_x, min_x, max_y, min_y, z, heading, respawn_timer, fix_z), true) {
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public Object(Client client, SWIGTYPE_p_EQ__ItemInstance inst) : this(questinterfacePINVOKE.new_Object__SWIG_4(Client.getCPtr(client), SWIGTYPE_p_EQ__ItemInstance.getCPtr(inst)), true) {
  }

  public Object(SWIGTYPE_p_EQ__ItemInstance inst, float x, float y, float z, float heading, uint decay_time, bool fix_z) : this(questinterfacePINVOKE.new_Object__SWIG_5(SWIGTYPE_p_EQ__ItemInstance.getCPtr(inst), x, y, z, heading, decay_time, fix_z), true) {
  }

  public Object(SWIGTYPE_p_EQ__ItemInstance inst, float x, float y, float z, float heading, uint decay_time) : this(questinterfacePINVOKE.new_Object__SWIG_6(SWIGTYPE_p_EQ__ItemInstance.getCPtr(inst), x, y, z, heading, decay_time), true) {
  }

  public Object(SWIGTYPE_p_EQ__ItemInstance inst, float x, float y, float z, float heading) : this(questinterfacePINVOKE.new_Object__SWIG_7(SWIGTYPE_p_EQ__ItemInstance.getCPtr(inst), x, y, z, heading), true) {
  }

  public Object(SWIGTYPE_p_std__string model, float x, float y, float z, float heading, byte type, uint decay_time) : this(questinterfacePINVOKE.new_Object__SWIG_8(SWIGTYPE_p_std__string.getCPtr(model), x, y, z, heading, type, decay_time), true) {
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public Object(SWIGTYPE_p_std__string model, float x, float y, float z, float heading, byte type) : this(questinterfacePINVOKE.new_Object__SWIG_9(SWIGTYPE_p_std__string.getCPtr(model), x, y, z, heading, type), true) {
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool Process() {
    bool ret = questinterfacePINVOKE.Object_Process(swigCPtr);
    return ret;
  }

  public bool IsGroundSpawn() {
    bool ret = questinterfacePINVOKE.Object_IsGroundSpawn(swigCPtr);
    return ret;
  }

  public bool HandleClick(Client sender, SWIGTYPE_p_ClickObject_Struct click_object) {
    bool ret = questinterfacePINVOKE.Object_HandleClick(swigCPtr, Client.getCPtr(sender), SWIGTYPE_p_ClickObject_Struct.getCPtr(click_object));
    return ret;
  }

  public void Close() {
    questinterfacePINVOKE.Object_Close(swigCPtr);
  }

  public void Delete(bool reset_state) {
    questinterfacePINVOKE.Object_Delete__SWIG_0(swigCPtr, reset_state);
  }

  public void Delete() {
    questinterfacePINVOKE.Object_Delete__SWIG_1(swigCPtr);
  }

  public static void HandleCombine(Client user, SWIGTYPE_p_NewCombine_Struct in_combine, Object worldo) {
    questinterfacePINVOKE.Object_HandleCombine(Client.getCPtr(user), SWIGTYPE_p_NewCombine_Struct.getCPtr(in_combine), Object.getCPtr(worldo));
  }

  public static void HandleAugmentation(Client user, SWIGTYPE_p_AugmentItem_Struct in_augment, Object worldo) {
    questinterfacePINVOKE.Object_HandleAugmentation(Client.getCPtr(user), SWIGTYPE_p_AugmentItem_Struct.getCPtr(in_augment), Object.getCPtr(worldo));
  }

  public static void HandleAutoCombine(Client user, SWIGTYPE_p_RecipeAutoCombine_Struct rac) {
    questinterfacePINVOKE.Object_HandleAutoCombine(Client.getCPtr(user), SWIGTYPE_p_RecipeAutoCombine_Struct.getCPtr(rac));
  }

  public void CreateSpawnPacket(SWIGTYPE_p_EQApplicationPacket app) {
    questinterfacePINVOKE.Object_CreateSpawnPacket(swigCPtr, SWIGTYPE_p_EQApplicationPacket.getCPtr(app));
  }

  public void CreateDeSpawnPacket(SWIGTYPE_p_EQApplicationPacket app) {
    questinterfacePINVOKE.Object_CreateDeSpawnPacket(swigCPtr, SWIGTYPE_p_EQApplicationPacket.getCPtr(app));
  }

  public override void Depop() {
    questinterfacePINVOKE.Object_Depop(swigCPtr);
  }

  public void Repop() {
    questinterfacePINVOKE.Object_Repop(swigCPtr);
  }

  public bool IsFixZEnabled() {
    bool ret = questinterfacePINVOKE.Object_IsFixZEnabled(swigCPtr);
    return ret;
  }

  public void SetFixZ(bool fix_z) {
    questinterfacePINVOKE.Object_SetFixZ(swigCPtr, fix_z);
  }

  public void StartDecay() {
    questinterfacePINVOKE.Object_StartDecay(swigCPtr);
  }

  public SWIGTYPE_p_EQ__ItemInstance GetItem(byte index) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Object_GetItem(swigCPtr, index);
    SWIGTYPE_p_EQ__ItemInstance ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_EQ__ItemInstance(cPtr, false);
    return ret;
  }

  public void PutItem(byte index, SWIGTYPE_p_EQ__ItemInstance inst) {
    questinterfacePINVOKE.Object_PutItem(swigCPtr, index, SWIGTYPE_p_EQ__ItemInstance.getCPtr(inst));
  }

  public void DeleteItem(byte index) {
    questinterfacePINVOKE.Object_DeleteItem(swigCPtr, index);
  }

  public SWIGTYPE_p_EQ__ItemInstance PopItem(byte index) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Object_PopItem(swigCPtr, index);
    SWIGTYPE_p_EQ__ItemInstance ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_EQ__ItemInstance(cPtr, false);
    return ret;
  }

  public override bool IsObject() {
    bool ret = questinterfacePINVOKE.Object_IsObject(swigCPtr);
    return ret;
  }

  public override bool Save() {
    bool ret = questinterfacePINVOKE.Object_Save(swigCPtr);
    return ret;
  }

  public virtual ushort VarSave() {
    ushort ret = questinterfacePINVOKE.Object_VarSave(swigCPtr);
    return ret;
  }

  public virtual void SetID(ushort set_id) {
    questinterfacePINVOKE.Object_SetID(swigCPtr, set_id);
  }

  public void ClearUser() {
    questinterfacePINVOKE.Object_ClearUser(swigCPtr);
  }

  public uint GetDBID() {
    uint ret = questinterfacePINVOKE.Object_GetDBID(swigCPtr);
    return ret;
  }

  public uint GetType() {
    uint ret = questinterfacePINVOKE.Object_GetType(swigCPtr);
    return ret;
  }

  public void SetType(uint type) {
    questinterfacePINVOKE.Object_SetType(swigCPtr, type);
  }

  public uint GetIcon() {
    uint ret = questinterfacePINVOKE.Object_GetIcon(swigCPtr);
    return ret;
  }

  public void SetIcon(uint icon) {
    questinterfacePINVOKE.Object_SetIcon(swigCPtr, icon);
  }

  public uint GetItemID() {
    uint ret = questinterfacePINVOKE.Object_GetItemID(swigCPtr);
    return ret;
  }

  public void SetItemID(uint itemid) {
    questinterfacePINVOKE.Object_SetItemID(swigCPtr, itemid);
  }

  public void GetObjectData(SWIGTYPE_p_Object_Struct Data) {
    questinterfacePINVOKE.Object_GetObjectData(swigCPtr, SWIGTYPE_p_Object_Struct.getCPtr(Data));
  }

  public void SetObjectData(SWIGTYPE_p_Object_Struct Data) {
    questinterfacePINVOKE.Object_SetObjectData(swigCPtr, SWIGTYPE_p_Object_Struct.getCPtr(Data));
  }

  public void GetLocation(SWIGTYPE_p_float x, SWIGTYPE_p_float y, SWIGTYPE_p_float z) {
    questinterfacePINVOKE.Object_GetLocation(swigCPtr, SWIGTYPE_p_float.getCPtr(x), SWIGTYPE_p_float.getCPtr(y), SWIGTYPE_p_float.getCPtr(z));
  }

  public void SetLocation(float x, float y, float z) {
    questinterfacePINVOKE.Object_SetLocation(swigCPtr, x, y, z);
  }

  public void GetHeading(SWIGTYPE_p_float heading) {
    questinterfacePINVOKE.Object_GetHeading(swigCPtr, SWIGTYPE_p_float.getCPtr(heading));
  }

  public void SetHeading(float heading) {
    questinterfacePINVOKE.Object_SetHeading(swigCPtr, heading);
  }

  public float GetX() {
    float ret = questinterfacePINVOKE.Object_GetX(swigCPtr);
    return ret;
  }

  public float GetY() {
    float ret = questinterfacePINVOKE.Object_GetY(swigCPtr);
    return ret;
  }

  public float GetZ() {
    float ret = questinterfacePINVOKE.Object_GetZ(swigCPtr);
    return ret;
  }

  public float GetHeadingData() {
    float ret = questinterfacePINVOKE.Object_GetHeadingData(swigCPtr);
    return ret;
  }

  public void SetX(float pos) {
    questinterfacePINVOKE.Object_SetX(swigCPtr, pos);
  }

  public void SetY(float pos) {
    questinterfacePINVOKE.Object_SetY(swigCPtr, pos);
  }

  public void SetZ(float pos) {
    questinterfacePINVOKE.Object_SetZ(swigCPtr, pos);
  }

  public void SetTiltX(float pos) {
    questinterfacePINVOKE.Object_SetTiltX(swigCPtr, pos);
  }

  public void SetTiltY(float pos) {
    questinterfacePINVOKE.Object_SetTiltY(swigCPtr, pos);
  }

  public float GetTiltX() {
    float ret = questinterfacePINVOKE.Object_GetTiltX(swigCPtr);
    return ret;
  }

  public float GetTiltY() {
    float ret = questinterfacePINVOKE.Object_GetTiltY(swigCPtr);
    return ret;
  }

  public void SetModelName(string modelname) {
    questinterfacePINVOKE.Object_SetModelName(swigCPtr, modelname);
  }

  public string GetModelName() {
    string ret = questinterfacePINVOKE.Object_GetModelName(swigCPtr);
    return ret;
  }

  public float GetSize() {
    float ret = questinterfacePINVOKE.Object_GetSize(swigCPtr);
    return ret;
  }

  public void SetSize(float size) {
    questinterfacePINVOKE.Object_SetSize(swigCPtr, size);
  }

  public ushort GetSolidType() {
    ushort ret = questinterfacePINVOKE.Object_GetSolidType(swigCPtr);
    return ret;
  }

  public void SetSolidType(ushort size) {
    questinterfacePINVOKE.Object_SetSolidType(swigCPtr, size);
  }

  public void SetDisplayName(string in_name) {
    questinterfacePINVOKE.Object_SetDisplayName(swigCPtr, in_name);
  }

  public string GetDisplayName() {
    string ret = questinterfacePINVOKE.Object_GetDisplayName(swigCPtr);
    return ret;
  }

  public bool ClearEntityVariables() {
    bool ret = questinterfacePINVOKE.Object_ClearEntityVariables(swigCPtr);
    return ret;
  }

  public bool DeleteEntityVariable(SWIGTYPE_p_std__string variable_name) {
    bool ret = questinterfacePINVOKE.Object_DeleteEntityVariable(swigCPtr, SWIGTYPE_p_std__string.getCPtr(variable_name));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__string GetEntityVariable(SWIGTYPE_p_std__string variable_name) {
    SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(questinterfacePINVOKE.Object_GetEntityVariable(swigCPtr, SWIGTYPE_p_std__string.getCPtr(variable_name)), true);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_std__string_t GetEntityVariables() {
    SWIGTYPE_p_std__vectorT_std__string_t ret = new SWIGTYPE_p_std__vectorT_std__string_t(questinterfacePINVOKE.Object_GetEntityVariables(swigCPtr), true);
    return ret;
  }

  public void SetEntityVariable(SWIGTYPE_p_std__string variable_name, SWIGTYPE_p_std__string variable_value) {
    questinterfacePINVOKE.Object_SetEntityVariable(swigCPtr, SWIGTYPE_p_std__string.getCPtr(variable_name), SWIGTYPE_p_std__string.getCPtr(variable_value));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool EntityVariableExists(SWIGTYPE_p_std__string variable_name) {
    bool ret = questinterfacePINVOKE.Object_EntityVariableExists(swigCPtr, SWIGTYPE_p_std__string.getCPtr(variable_name));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

public enum MainAssistType {
  MAIN_ASSIST_1_SLOT = 0,
  MAIN_ASSIST_2_SLOT = 1,
  MAIN_ASSIST_3_SLOT = 2,
  MAIN_ASSIST_1 = 1,
  MAIN_ASSIST_2 = 2,
  MAIN_ASSIST_3 = 3
}

public enum MainMarkerType {
  MAIN_MARKER_1_SLOT = 0,
  MAIN_MARKER_2_SLOT = 1,
  MAIN_MARKER_3_SLOT = 2,
  MAIN_MARKER_1 = 1,
  MAIN_MARKER_2 = 2,
  MAIN_MARKER_3 = 3
}

public class Raid_Marked_NPC : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Raid_Marked_NPC(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Raid_Marked_NPC obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Raid_Marked_NPC obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Raid_Marked_NPC() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_Raid_Marked_NPC(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public uint entity_id {
    set {
      questinterfacePINVOKE.Raid_Marked_NPC_entity_id_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.Raid_Marked_NPC_entity_id_get(swigCPtr);
      return ret;
    } 
  }

  public uint zone_id {
    set {
      questinterfacePINVOKE.Raid_Marked_NPC_zone_id_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.Raid_Marked_NPC_zone_id_get(swigCPtr);
      return ret;
    } 
  }

  public uint instance_id {
    set {
      questinterfacePINVOKE.Raid_Marked_NPC_instance_id_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.Raid_Marked_NPC_instance_id_get(swigCPtr);
      return ret;
    } 
  }

  public Raid_Marked_NPC() : this(questinterfacePINVOKE.new_Raid_Marked_NPC(), true) {
  }

}

public class RaidMember : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal RaidMember(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(RaidMember obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(RaidMember obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~RaidMember() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_RaidMember(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public string member_name {
    set {
      questinterfacePINVOKE.RaidMember_member_name_set(swigCPtr, value);
    } 
    get {
      string ret = questinterfacePINVOKE.RaidMember_member_name_get(swigCPtr);
      return ret;
    } 
  }

  public Client member {
    set {
      questinterfacePINVOKE.RaidMember_member_set(swigCPtr, Client.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.RaidMember_member_get(swigCPtr);
      Client ret = (cPtr == global::System.IntPtr.Zero) ? null : new Client(cPtr, false);
      return ret;
    } 
  }

  public uint group_number {
    set {
      questinterfacePINVOKE.RaidMember_group_number_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.RaidMember_group_number_get(swigCPtr);
      return ret;
    } 
  }

  public byte _class {
    set {
      questinterfacePINVOKE.RaidMember__class_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.RaidMember__class_get(swigCPtr);
      return ret;
    } 
  }

  public byte level {
    set {
      questinterfacePINVOKE.RaidMember_level_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.RaidMember_level_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__string note {
    set {
      questinterfacePINVOKE.RaidMember_note_set(swigCPtr, SWIGTYPE_p_std__string.getCPtr(value));
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(questinterfacePINVOKE.RaidMember_note_get(swigCPtr), true);
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool is_group_leader {
    set {
      questinterfacePINVOKE.RaidMember_is_group_leader_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.RaidMember_is_group_leader_get(swigCPtr);
      return ret;
    } 
  }

  public bool is_raid_leader {
    set {
      questinterfacePINVOKE.RaidMember_is_raid_leader_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.RaidMember_is_raid_leader_get(swigCPtr);
      return ret;
    } 
  }

  public bool is_looter {
    set {
      questinterfacePINVOKE.RaidMember_is_looter_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.RaidMember_is_looter_get(swigCPtr);
      return ret;
    } 
  }

  public byte main_marker {
    set {
      questinterfacePINVOKE.RaidMember_main_marker_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.RaidMember_main_marker_get(swigCPtr);
      return ret;
    } 
  }

  public byte main_assister {
    set {
      questinterfacePINVOKE.RaidMember_main_assister_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.RaidMember_main_assister_get(swigCPtr);
      return ret;
    } 
  }

  public bool is_bot {
    set {
      questinterfacePINVOKE.RaidMember_is_bot_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.RaidMember_is_bot_get(swigCPtr);
      return ret;
    } 
  }

  public bool is_raid_main_assist_one {
    set {
      questinterfacePINVOKE.RaidMember_is_raid_main_assist_one_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.RaidMember_is_raid_main_assist_one_get(swigCPtr);
      return ret;
    } 
  }

  public RaidMember() : this(questinterfacePINVOKE.new_RaidMember(), true) {
  }

}

public class GroupMentor : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal GroupMentor(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GroupMentor obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(GroupMentor obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~GroupMentor() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_GroupMentor(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SWIGTYPE_p_std__string name {
    set {
      questinterfacePINVOKE.GroupMentor_name_set(swigCPtr, SWIGTYPE_p_std__string.getCPtr(value));
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(questinterfacePINVOKE.GroupMentor_name_get(swigCPtr), true);
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public Client mentoree {
    set {
      questinterfacePINVOKE.GroupMentor_mentoree_set(swigCPtr, Client.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.GroupMentor_mentoree_get(swigCPtr);
      Client ret = (cPtr == global::System.IntPtr.Zero) ? null : new Client(cPtr, false);
      return ret;
    } 
  }

  public int mentor_percent {
    set {
      questinterfacePINVOKE.GroupMentor_mentor_percent_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.GroupMentor_mentor_percent_get(swigCPtr);
      return ret;
    } 
  }

  public GroupMentor() : this(questinterfacePINVOKE.new_GroupMentor(), true) {
  }

}

public class Raid : GroupIDConsumer {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Raid(global::System.IntPtr cPtr, bool cMemoryOwn) : base(questinterfacePINVOKE.Raid_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Raid obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Raid obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_Raid(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public Raid(Client nLeader) : this(questinterfacePINVOKE.new_Raid__SWIG_0(Client.getCPtr(nLeader)), true) {
  }

  public Raid(uint raidID) : this(questinterfacePINVOKE.new_Raid__SWIG_1(raidID), true) {
  }

  public void SetLeader(Client c) {
    questinterfacePINVOKE.Raid_SetLeader(swigCPtr, Client.getCPtr(c));
  }

  public Client GetLeader() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Raid_GetLeader(swigCPtr);
    Client ret = (cPtr == global::System.IntPtr.Zero) ? null : new Client(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_std__string GetLeaderName() {
    SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(questinterfacePINVOKE.Raid_GetLeaderName(swigCPtr), true);
    return ret;
  }

  public bool IsLeader(Client c) {
    bool ret = questinterfacePINVOKE.Raid_IsLeader__SWIG_0(swigCPtr, Client.getCPtr(c));
    return ret;
  }

  public bool IsLeader(string name) {
    bool ret = questinterfacePINVOKE.Raid_IsLeader__SWIG_1(swigCPtr, name);
    return ret;
  }

  public void SetRaidLeader(string wasLead, string name) {
    questinterfacePINVOKE.Raid_SetRaidLeader(swigCPtr, wasLead, name);
  }

  public bool Process() {
    bool ret = questinterfacePINVOKE.Raid_Process(swigCPtr);
    return ret;
  }

  public void AddMember(Client c, uint group, bool rleader, bool groupleader, bool looter) {
    questinterfacePINVOKE.Raid_AddMember__SWIG_0(swigCPtr, Client.getCPtr(c), group, rleader, groupleader, looter);
  }

  public void AddMember(Client c, uint group, bool rleader, bool groupleader) {
    questinterfacePINVOKE.Raid_AddMember__SWIG_1(swigCPtr, Client.getCPtr(c), group, rleader, groupleader);
  }

  public void AddMember(Client c, uint group, bool rleader) {
    questinterfacePINVOKE.Raid_AddMember__SWIG_2(swigCPtr, Client.getCPtr(c), group, rleader);
  }

  public void AddMember(Client c, uint group) {
    questinterfacePINVOKE.Raid_AddMember__SWIG_3(swigCPtr, Client.getCPtr(c), group);
  }

  public void AddMember(Client c) {
    questinterfacePINVOKE.Raid_AddMember__SWIG_4(swigCPtr, Client.getCPtr(c));
  }

  public void AddBot(SWIGTYPE_p_Bot b, uint group, bool raid_leader, bool group_leader, bool looter) {
    questinterfacePINVOKE.Raid_AddBot__SWIG_0(swigCPtr, SWIGTYPE_p_Bot.getCPtr(b), group, raid_leader, group_leader, looter);
  }

  public void AddBot(SWIGTYPE_p_Bot b, uint group, bool raid_leader, bool group_leader) {
    questinterfacePINVOKE.Raid_AddBot__SWIG_1(swigCPtr, SWIGTYPE_p_Bot.getCPtr(b), group, raid_leader, group_leader);
  }

  public void AddBot(SWIGTYPE_p_Bot b, uint group, bool raid_leader) {
    questinterfacePINVOKE.Raid_AddBot__SWIG_2(swigCPtr, SWIGTYPE_p_Bot.getCPtr(b), group, raid_leader);
  }

  public void AddBot(SWIGTYPE_p_Bot b, uint group) {
    questinterfacePINVOKE.Raid_AddBot__SWIG_3(swigCPtr, SWIGTYPE_p_Bot.getCPtr(b), group);
  }

  public void AddBot(SWIGTYPE_p_Bot b) {
    questinterfacePINVOKE.Raid_AddBot__SWIG_4(swigCPtr, SWIGTYPE_p_Bot.getCPtr(b));
  }

  public void RaidGroupSay(string msg, string from, byte language, byte lang_skill) {
    questinterfacePINVOKE.Raid_RaidGroupSay__SWIG_0(swigCPtr, msg, from, language, lang_skill);
  }

  public void RaidSay(string msg, string from, byte language, byte lang_skill) {
    questinterfacePINVOKE.Raid_RaidSay__SWIG_0(swigCPtr, msg, from, language, lang_skill);
  }

  public bool IsEngaged() {
    bool ret = questinterfacePINVOKE.Raid_IsEngaged(swigCPtr);
    return ret;
  }

  public Mob GetRaidMainAssistOne() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Raid_GetRaidMainAssistOne(swigCPtr);
    Mob ret = (cPtr == global::System.IntPtr.Zero) ? null : new Mob(cPtr, false);
    return ret;
  }

  public void RemoveMember(string character_name) {
    questinterfacePINVOKE.Raid_RemoveMember(swigCPtr, character_name);
  }

  public void DisbandRaid() {
    questinterfacePINVOKE.Raid_DisbandRaid(swigCPtr);
  }

  public void MoveMember(string name, uint newGroup) {
    questinterfacePINVOKE.Raid_MoveMember(swigCPtr, name, newGroup);
  }

  public void SetGroupLeader(string who, bool glFlag) {
    questinterfacePINVOKE.Raid_SetGroupLeader__SWIG_0(swigCPtr, who, glFlag);
  }

  public void SetGroupLeader(string who) {
    questinterfacePINVOKE.Raid_SetGroupLeader__SWIG_1(swigCPtr, who);
  }

  public Client GetGroupLeader(uint group_id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Raid_GetGroupLeader(swigCPtr, group_id);
    Client ret = (cPtr == global::System.IntPtr.Zero) ? null : new Client(cPtr, false);
    return ret;
  }

  public bool IsGroupLeader(string name) {
    bool ret = questinterfacePINVOKE.Raid_IsGroupLeader__SWIG_0(swigCPtr, name);
    return ret;
  }

  public bool IsGroupLeader(Client c) {
    bool ret = questinterfacePINVOKE.Raid_IsGroupLeader__SWIG_1(swigCPtr, Client.getCPtr(c));
    return ret;
  }

  public bool IsRaidMember(string name) {
    bool ret = questinterfacePINVOKE.Raid_IsRaidMember__SWIG_0(swigCPtr, name);
    return ret;
  }

  public bool IsRaidMember(Client c) {
    bool ret = questinterfacePINVOKE.Raid_IsRaidMember__SWIG_1(swigCPtr, Client.getCPtr(c));
    return ret;
  }

  public void UpdateLevel(string name, int newLevel) {
    questinterfacePINVOKE.Raid_UpdateLevel(swigCPtr, name, newLevel);
  }

  public void SetNewRaidLeader(uint i) {
    questinterfacePINVOKE.Raid_SetNewRaidLeader(swigCPtr, i);
  }

  public bool IsAssister(string who) {
    bool ret = questinterfacePINVOKE.Raid_IsAssister(swigCPtr, who);
    return ret;
  }

  public bool IsMarker(string who) {
    bool ret = questinterfacePINVOKE.Raid_IsMarker(swigCPtr, who);
    return ret;
  }

  public void EmptyRaidMembers() {
    questinterfacePINVOKE.Raid_EmptyRaidMembers(swigCPtr);
  }

  public uint GetFreeGroup() {
    uint ret = questinterfacePINVOKE.Raid_GetFreeGroup(swigCPtr);
    return ret;
  }

  public byte GroupCount(uint gid) {
    byte ret = questinterfacePINVOKE.Raid_GroupCount(swigCPtr, gid);
    return ret;
  }

  public byte RaidCount() {
    byte ret = questinterfacePINVOKE.Raid_RaidCount(swigCPtr);
    return ret;
  }

  public uint GetHighestLevel() {
    uint ret = questinterfacePINVOKE.Raid_GetHighestLevel(swigCPtr);
    return ret;
  }

  public uint GetLowestLevel() {
    uint ret = questinterfacePINVOKE.Raid_GetLowestLevel(swigCPtr);
    return ret;
  }

  public uint GetGroup(string name) {
    uint ret = questinterfacePINVOKE.Raid_GetGroup__SWIG_0(swigCPtr, name);
    return ret;
  }

  public uint GetGroup(Client c) {
    uint ret = questinterfacePINVOKE.Raid_GetGroup__SWIG_1(swigCPtr, Client.getCPtr(c));
    return ret;
  }

  public ushort GetAvgLevel() {
    ushort ret = questinterfacePINVOKE.Raid_GetAvgLevel(swigCPtr);
    return ret;
  }

  public uint GetLootType() {
    uint ret = questinterfacePINVOKE.Raid_GetLootType(swigCPtr);
    return ret;
  }

  public void ChangeLootType(uint type) {
    questinterfacePINVOKE.Raid_ChangeLootType(swigCPtr, type);
  }

  public void AddRaidLooter(string looter) {
    questinterfacePINVOKE.Raid_AddRaidLooter(swigCPtr, looter);
  }

  public void RemoveRaidLooter(string looter) {
    questinterfacePINVOKE.Raid_RemoveRaidLooter(swigCPtr, looter);
  }

  public void SetRaidMOTD(SWIGTYPE_p_std__string in_motd) {
    questinterfacePINVOKE.Raid_SetRaidMOTD(swigCPtr, SWIGTYPE_p_std__string.getCPtr(in_motd));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint GetPlayerIndex(string name) {
    uint ret = questinterfacePINVOKE.Raid_GetPlayerIndex__SWIG_0(swigCPtr, name);
    return ret;
  }

  public uint GetPlayerIndex(Client c) {
    uint ret = questinterfacePINVOKE.Raid_GetPlayerIndex__SWIG_1(swigCPtr, Client.getCPtr(c));
    return ret;
  }

  public Client GetClientByIndex(ushort index) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Raid_GetClientByIndex(swigCPtr, index);
    Client ret = (cPtr == global::System.IntPtr.Zero) ? null : new Client(cPtr, false);
    return ret;
  }

  public string GetClientNameByIndex(byte index) {
    string ret = questinterfacePINVOKE.Raid_GetClientNameByIndex(swigCPtr, index);
    return ret;
  }

  public void LockRaid(bool lockFlag) {
    questinterfacePINVOKE.Raid_LockRaid(swigCPtr, lockFlag);
  }

  public bool IsLocked() {
    bool ret = questinterfacePINVOKE.Raid_IsLocked(swigCPtr);
    return ret;
  }

  public void RaidMessageString(Mob sender, uint type, uint string_id, string message, string message2, string message3, string message4, string message5, string message6, string message7, string message8, string message9, uint distance) {
    questinterfacePINVOKE.Raid_RaidMessageString__SWIG_0(swigCPtr, Mob.getCPtr(sender), type, string_id, message, message2, message3, message4, message5, message6, message7, message8, message9, distance);
  }

  public void RaidMessageString(Mob sender, uint type, uint string_id, string message, string message2, string message3, string message4, string message5, string message6, string message7, string message8, string message9) {
    questinterfacePINVOKE.Raid_RaidMessageString__SWIG_1(swigCPtr, Mob.getCPtr(sender), type, string_id, message, message2, message3, message4, message5, message6, message7, message8, message9);
  }

  public void RaidMessageString(Mob sender, uint type, uint string_id, string message, string message2, string message3, string message4, string message5, string message6, string message7, string message8) {
    questinterfacePINVOKE.Raid_RaidMessageString__SWIG_2(swigCPtr, Mob.getCPtr(sender), type, string_id, message, message2, message3, message4, message5, message6, message7, message8);
  }

  public void RaidMessageString(Mob sender, uint type, uint string_id, string message, string message2, string message3, string message4, string message5, string message6, string message7) {
    questinterfacePINVOKE.Raid_RaidMessageString__SWIG_3(swigCPtr, Mob.getCPtr(sender), type, string_id, message, message2, message3, message4, message5, message6, message7);
  }

  public void RaidMessageString(Mob sender, uint type, uint string_id, string message, string message2, string message3, string message4, string message5, string message6) {
    questinterfacePINVOKE.Raid_RaidMessageString__SWIG_4(swigCPtr, Mob.getCPtr(sender), type, string_id, message, message2, message3, message4, message5, message6);
  }

  public void RaidMessageString(Mob sender, uint type, uint string_id, string message, string message2, string message3, string message4, string message5) {
    questinterfacePINVOKE.Raid_RaidMessageString__SWIG_5(swigCPtr, Mob.getCPtr(sender), type, string_id, message, message2, message3, message4, message5);
  }

  public void RaidMessageString(Mob sender, uint type, uint string_id, string message, string message2, string message3, string message4) {
    questinterfacePINVOKE.Raid_RaidMessageString__SWIG_6(swigCPtr, Mob.getCPtr(sender), type, string_id, message, message2, message3, message4);
  }

  public void RaidMessageString(Mob sender, uint type, uint string_id, string message, string message2, string message3) {
    questinterfacePINVOKE.Raid_RaidMessageString__SWIG_7(swigCPtr, Mob.getCPtr(sender), type, string_id, message, message2, message3);
  }

  public void RaidMessageString(Mob sender, uint type, uint string_id, string message, string message2) {
    questinterfacePINVOKE.Raid_RaidMessageString__SWIG_8(swigCPtr, Mob.getCPtr(sender), type, string_id, message, message2);
  }

  public void RaidMessageString(Mob sender, uint type, uint string_id, string message) {
    questinterfacePINVOKE.Raid_RaidMessageString__SWIG_9(swigCPtr, Mob.getCPtr(sender), type, string_id, message);
  }

  public void CastGroupSpell(Mob caster, ushort spellid, uint gid) {
    questinterfacePINVOKE.Raid_CastGroupSpell(swigCPtr, Mob.getCPtr(caster), spellid, gid);
  }

  public void SplitExp(ulong exp, Mob other) {
    questinterfacePINVOKE.Raid_SplitExp(swigCPtr, exp, Mob.getCPtr(other));
  }

  public uint GetTotalRaidDamage(Mob other) {
    uint ret = questinterfacePINVOKE.Raid_GetTotalRaidDamage(swigCPtr, Mob.getCPtr(other));
    return ret;
  }

  public void BalanceHP(int penalty, uint gid, float range, Mob caster, int limit) {
    questinterfacePINVOKE.Raid_BalanceHP__SWIG_0(swigCPtr, penalty, gid, range, Mob.getCPtr(caster), limit);
  }

  public void BalanceHP(int penalty, uint gid, float range, Mob caster) {
    questinterfacePINVOKE.Raid_BalanceHP__SWIG_1(swigCPtr, penalty, gid, range, Mob.getCPtr(caster));
  }

  public void BalanceHP(int penalty, uint gid, float range) {
    questinterfacePINVOKE.Raid_BalanceHP__SWIG_2(swigCPtr, penalty, gid, range);
  }

  public void BalanceHP(int penalty, uint gid) {
    questinterfacePINVOKE.Raid_BalanceHP__SWIG_3(swigCPtr, penalty, gid);
  }

  public void BalanceMana(int penalty, uint gid, float range, Mob caster, int limit) {
    questinterfacePINVOKE.Raid_BalanceMana__SWIG_0(swigCPtr, penalty, gid, range, Mob.getCPtr(caster), limit);
  }

  public void BalanceMana(int penalty, uint gid, float range, Mob caster) {
    questinterfacePINVOKE.Raid_BalanceMana__SWIG_1(swigCPtr, penalty, gid, range, Mob.getCPtr(caster));
  }

  public void BalanceMana(int penalty, uint gid, float range) {
    questinterfacePINVOKE.Raid_BalanceMana__SWIG_2(swigCPtr, penalty, gid, range);
  }

  public void BalanceMana(int penalty, uint gid) {
    questinterfacePINVOKE.Raid_BalanceMana__SWIG_3(swigCPtr, penalty, gid);
  }

  public void HealGroup(uint heal_amt, Mob caster, uint gid, float range) {
    questinterfacePINVOKE.Raid_HealGroup__SWIG_0(swigCPtr, heal_amt, Mob.getCPtr(caster), gid, range);
  }

  public void HealGroup(uint heal_amt, Mob caster, uint gid) {
    questinterfacePINVOKE.Raid_HealGroup__SWIG_1(swigCPtr, heal_amt, Mob.getCPtr(caster), gid);
  }

  public void SplitMoney(uint gid, uint copper, uint silver, uint gold, uint platinum, Client splitter) {
    questinterfacePINVOKE.Raid_SplitMoney__SWIG_0(swigCPtr, gid, copper, silver, gold, platinum, Client.getCPtr(splitter));
  }

  public void SplitMoney(uint gid, uint copper, uint silver, uint gold, uint platinum) {
    questinterfacePINVOKE.Raid_SplitMoney__SWIG_1(swigCPtr, gid, copper, silver, gold, platinum);
  }

  public void TeleportGroup(Mob sender, uint zoneID, ushort instance_id, float x, float y, float z, float heading, uint gid) {
    questinterfacePINVOKE.Raid_TeleportGroup(swigCPtr, Mob.getCPtr(sender), zoneID, instance_id, x, y, z, heading, gid);
  }

  public void TeleportRaid(Mob sender, uint zoneID, ushort instance_id, float x, float y, float z, float heading) {
    questinterfacePINVOKE.Raid_TeleportRaid(swigCPtr, Mob.getCPtr(sender), zoneID, instance_id, x, y, z, heading);
  }

  public void SetRaidDetails() {
    questinterfacePINVOKE.Raid_SetRaidDetails(swigCPtr);
  }

  public void GetRaidDetails() {
    questinterfacePINVOKE.Raid_GetRaidDetails(swigCPtr);
  }

  public void SaveRaidMOTD() {
    questinterfacePINVOKE.Raid_SaveRaidMOTD(swigCPtr);
  }

  public bool LearnMembers() {
    bool ret = questinterfacePINVOKE.Raid_LearnMembers(swigCPtr);
    return ret;
  }

  public void VerifyRaid() {
    questinterfacePINVOKE.Raid_VerifyRaid(swigCPtr);
  }

  public void MemberZoned(Client c) {
    questinterfacePINVOKE.Raid_MemberZoned(swigCPtr, Client.getCPtr(c));
  }

  public void SendHPManaEndPacketsTo(Client c) {
    questinterfacePINVOKE.Raid_SendHPManaEndPacketsTo(swigCPtr, Client.getCPtr(c));
  }

  public void SendHPManaEndPacketsFrom(Mob mob) {
    questinterfacePINVOKE.Raid_SendHPManaEndPacketsFrom(swigCPtr, Mob.getCPtr(mob));
  }

  public void SendManaPacketFrom(Mob mob) {
    questinterfacePINVOKE.Raid_SendManaPacketFrom(swigCPtr, Mob.getCPtr(mob));
  }

  public void SendEndurancePacketFrom(Mob mob) {
    questinterfacePINVOKE.Raid_SendEndurancePacketFrom(swigCPtr, Mob.getCPtr(mob));
  }

  public void RaidSay(string msg, Client c, byte language, byte lang_skill) {
    questinterfacePINVOKE.Raid_RaidSay__SWIG_1(swigCPtr, msg, Client.getCPtr(c), language, lang_skill);
  }

  public void RaidGroupSay(string msg, Client c, byte language, byte lang_skill) {
    questinterfacePINVOKE.Raid_RaidGroupSay__SWIG_1(swigCPtr, msg, Client.getCPtr(c), language, lang_skill);
  }

  public void SaveRaidNote(SWIGTYPE_p_std__string who, SWIGTYPE_p_std__string note) {
    questinterfacePINVOKE.Raid_SaveRaidNote(swigCPtr, SWIGTYPE_p_std__string.getCPtr(who), SWIGTYPE_p_std__string.getCPtr(note));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__vectorT_RaidMember_t GetMembersWithNotes() {
    SWIGTYPE_p_std__vectorT_RaidMember_t ret = new SWIGTYPE_p_std__vectorT_RaidMember_t(questinterfacePINVOKE.Raid_GetMembersWithNotes(swigCPtr), true);
    return ret;
  }

  public void DelegateAbilityAssist(Mob mob, string who) {
    questinterfacePINVOKE.Raid_DelegateAbilityAssist(swigCPtr, Mob.getCPtr(mob), who);
  }

  public void DelegateAbilityMark(Mob mob, string who) {
    questinterfacePINVOKE.Raid_DelegateAbilityMark(swigCPtr, Mob.getCPtr(mob), who);
  }

  public void RaidMarkNPC(Mob mob, uint parameter) {
    questinterfacePINVOKE.Raid_RaidMarkNPC(swigCPtr, Mob.getCPtr(mob), parameter);
  }

  public void UpdateXTargetType(XTargetType Type, Mob m, string name) {
    questinterfacePINVOKE.Raid_UpdateXTargetType__SWIG_0(swigCPtr, (int)Type, Mob.getCPtr(m), name);
  }

  public void UpdateXTargetType(XTargetType Type, Mob m) {
    questinterfacePINVOKE.Raid_UpdateXTargetType__SWIG_1(swigCPtr, (int)Type, Mob.getCPtr(m));
  }

  public int FindNextRaidDelegateSlot(int option) {
    int ret = questinterfacePINVOKE.Raid_FindNextRaidDelegateSlot(swigCPtr, option);
    return ret;
  }

  public void UpdateXtargetMarkedNPC() {
    questinterfacePINVOKE.Raid_UpdateXtargetMarkedNPC(swigCPtr);
  }

  public void RaidClearNPCMarks(Client c) {
    questinterfacePINVOKE.Raid_RaidClearNPCMarks(swigCPtr, Client.getCPtr(c));
  }

  public void RemoveRaidDelegates(string delegatee) {
    questinterfacePINVOKE.Raid_RemoveRaidDelegates(swigCPtr, delegatee);
  }

  public void UpdateRaidXTargets() {
    questinterfacePINVOKE.Raid_UpdateRaidXTargets(swigCPtr);
  }

  public void SendRaidCreate(Client to) {
    questinterfacePINVOKE.Raid_SendRaidCreate(swigCPtr, Client.getCPtr(to));
  }

  public void SendRaidAdd(string who, Client to) {
    questinterfacePINVOKE.Raid_SendRaidAdd(swigCPtr, who, Client.getCPtr(to));
  }

  public void SendRaidAddAll(string who) {
    questinterfacePINVOKE.Raid_SendRaidAddAll(swigCPtr, who);
  }

  public void SendRaidRemove(string who, Client to) {
    questinterfacePINVOKE.Raid_SendRaidRemove(swigCPtr, who, Client.getCPtr(to));
  }

  public void SendRaidRemoveAll(string who) {
    questinterfacePINVOKE.Raid_SendRaidRemoveAll(swigCPtr, who);
  }

  public void SendRaidDisband(Client to) {
    questinterfacePINVOKE.Raid_SendRaidDisband(swigCPtr, Client.getCPtr(to));
  }

  public void SendRaidDisbandAll() {
    questinterfacePINVOKE.Raid_SendRaidDisbandAll(swigCPtr);
  }

  public void SendRaidMove(string who, Client to) {
    questinterfacePINVOKE.Raid_SendRaidMove(swigCPtr, who, Client.getCPtr(to));
  }

  public void SendRaidMoveAll(string who) {
    questinterfacePINVOKE.Raid_SendRaidMoveAll(swigCPtr, who);
  }

  public void SendBulkRaid(Client to) {
    questinterfacePINVOKE.Raid_SendBulkRaid(swigCPtr, Client.getCPtr(to));
  }

  public void SendRaidNotes() {
    questinterfacePINVOKE.Raid_SendRaidNotes(swigCPtr);
  }

  public void SendRaidNotesToWorld() {
    questinterfacePINVOKE.Raid_SendRaidNotesToWorld(swigCPtr);
  }

  public void SendRemoveRaidXTargets(XTargetType Type) {
    questinterfacePINVOKE.Raid_SendRemoveRaidXTargets(swigCPtr, (int)Type);
  }

  public void SendRemoveAllRaidXTargets() {
    questinterfacePINVOKE.Raid_SendRemoveAllRaidXTargets__SWIG_0(swigCPtr);
  }

  public void SendRemoveAllRaidXTargets(string client_name) {
    questinterfacePINVOKE.Raid_SendRemoveAllRaidXTargets__SWIG_1(swigCPtr, client_name);
  }

  public void SendRaidAssistTarget() {
    questinterfacePINVOKE.Raid_SendRaidAssistTarget(swigCPtr);
  }

  public void SendAssistTarget(Client c) {
    questinterfacePINVOKE.Raid_SendAssistTarget(swigCPtr, Client.getCPtr(c));
  }

  public void GroupUpdate(uint gid, bool initial) {
    questinterfacePINVOKE.Raid_GroupUpdate__SWIG_0(swigCPtr, gid, initial);
  }

  public void GroupUpdate(uint gid) {
    questinterfacePINVOKE.Raid_GroupUpdate__SWIG_1(swigCPtr, gid);
  }

  public void SendGroupUpdate(Client to) {
    questinterfacePINVOKE.Raid_SendGroupUpdate(swigCPtr, Client.getCPtr(to));
  }

  public void SendGroupDisband(Client to) {
    questinterfacePINVOKE.Raid_SendGroupDisband(swigCPtr, Client.getCPtr(to));
  }

  public void SendRaidLock() {
    questinterfacePINVOKE.Raid_SendRaidLock(swigCPtr);
  }

  public void SendRaidUnlock() {
    questinterfacePINVOKE.Raid_SendRaidUnlock(swigCPtr);
  }

  public void SendRaidLockTo(Client c) {
    questinterfacePINVOKE.Raid_SendRaidLockTo(swigCPtr, Client.getCPtr(c));
  }

  public void SendRaidUnlockTo(Client c) {
    questinterfacePINVOKE.Raid_SendRaidUnlockTo(swigCPtr, Client.getCPtr(c));
  }

  public void SendRaidGroupAdd(string who, uint gid) {
    questinterfacePINVOKE.Raid_SendRaidGroupAdd(swigCPtr, who, gid);
  }

  public void SendRaidGroupRemove(string who, uint gid) {
    questinterfacePINVOKE.Raid_SendRaidGroupRemove(swigCPtr, who, gid);
  }

  public void SendMakeLeaderPacket(string who) {
    questinterfacePINVOKE.Raid_SendMakeLeaderPacket(swigCPtr, who);
  }

  public void SendMakeLeaderPacketTo(string who, Client to) {
    questinterfacePINVOKE.Raid_SendMakeLeaderPacketTo(swigCPtr, who, Client.getCPtr(to));
  }

  public void SendMakeGroupLeaderPacketAll() {
    questinterfacePINVOKE.Raid_SendMakeGroupLeaderPacketAll(swigCPtr);
  }

  public void SendMakeGroupLeaderPacket(string who) {
    questinterfacePINVOKE.Raid_SendMakeGroupLeaderPacket(swigCPtr, who);
  }

  public void SendMakeGroupLeaderPacketTo(string who, Client to) {
    questinterfacePINVOKE.Raid_SendMakeGroupLeaderPacketTo(swigCPtr, who, Client.getCPtr(to));
  }

  public void SendRaidMOTD(Client c) {
    questinterfacePINVOKE.Raid_SendRaidMOTD__SWIG_0(swigCPtr, Client.getCPtr(c));
  }

  public void SendRaidMOTD() {
    questinterfacePINVOKE.Raid_SendRaidMOTD__SWIG_1(swigCPtr);
  }

  public void SendRaidMOTDToWorld() {
    questinterfacePINVOKE.Raid_SendRaidMOTDToWorld(swigCPtr);
  }

  public void SendRaidAssisterTo(string assister, Client to) {
    questinterfacePINVOKE.Raid_SendRaidAssisterTo(swigCPtr, assister, Client.getCPtr(to));
  }

  public void SendRaidAssister(string assister) {
    questinterfacePINVOKE.Raid_SendRaidAssister(swigCPtr, assister);
  }

  public void SendRaidMarkerTo(string marker, Client to) {
    questinterfacePINVOKE.Raid_SendRaidMarkerTo(swigCPtr, marker, Client.getCPtr(to));
  }

  public void SendRaidMarker(string marker) {
    questinterfacePINVOKE.Raid_SendRaidMarker(swigCPtr, marker);
  }

  public void SendMarkTargets(Client c) {
    questinterfacePINVOKE.Raid_SendMarkTargets(swigCPtr, Client.getCPtr(c));
  }

  public void QueuePacket(SWIGTYPE_p_EQApplicationPacket app, bool ack_req) {
    questinterfacePINVOKE.Raid_QueuePacket__SWIG_0(swigCPtr, SWIGTYPE_p_EQApplicationPacket.getCPtr(app), ack_req);
  }

  public void QueuePacket(SWIGTYPE_p_EQApplicationPacket app) {
    questinterfacePINVOKE.Raid_QueuePacket__SWIG_1(swigCPtr, SWIGTYPE_p_EQApplicationPacket.getCPtr(app));
  }

  public void UpdateGroupAAs(uint gid) {
    questinterfacePINVOKE.Raid_UpdateGroupAAs(swigCPtr, gid);
  }

  public void SaveGroupLeaderAA(uint gid) {
    questinterfacePINVOKE.Raid_SaveGroupLeaderAA(swigCPtr, gid);
  }

  public void UpdateRaidAAs() {
    questinterfacePINVOKE.Raid_UpdateRaidAAs(swigCPtr);
  }

  public void SaveRaidLeaderAA() {
    questinterfacePINVOKE.Raid_SaveRaidLeaderAA(swigCPtr);
  }

  public void SendGroupLeadershipAA(Client c, uint gid) {
    questinterfacePINVOKE.Raid_SendGroupLeadershipAA__SWIG_0(swigCPtr, Client.getCPtr(c), gid);
  }

  public void SendGroupLeadershipAA(uint gid) {
    questinterfacePINVOKE.Raid_SendGroupLeadershipAA__SWIG_1(swigCPtr, gid);
  }

  public void SendAllRaidLeadershipAA() {
    questinterfacePINVOKE.Raid_SendAllRaidLeadershipAA(swigCPtr);
  }

  public void LoadLeadership() {
    questinterfacePINVOKE.Raid_LoadLeadership(swigCPtr);
  }

  public int GetLeadershipAA(int AAID, uint gid) {
    int ret = questinterfacePINVOKE.Raid_GetLeadershipAA__SWIG_0(swigCPtr, AAID, gid);
    return ret;
  }

  public int GetLeadershipAA(int AAID) {
    int ret = questinterfacePINVOKE.Raid_GetLeadershipAA__SWIG_1(swigCPtr, AAID);
    return ret;
  }

  public void SetGroupAAs(uint gid, SWIGTYPE_p_GroupLeadershipAA_Struct glaa) {
    questinterfacePINVOKE.Raid_SetGroupAAs(swigCPtr, gid, SWIGTYPE_p_GroupLeadershipAA_Struct.getCPtr(glaa));
  }

  public void SetRaidAAs(SWIGTYPE_p_RaidLeadershipAA_Struct rlaa) {
    questinterfacePINVOKE.Raid_SetRaidAAs(swigCPtr, SWIGTYPE_p_RaidLeadershipAA_Struct.getCPtr(rlaa));
  }

  public void SetGroupMentor(uint group_id, int percent, string name) {
    questinterfacePINVOKE.Raid_SetGroupMentor(swigCPtr, group_id, percent, name);
  }

  public void ClearGroupMentor(uint group_id) {
    questinterfacePINVOKE.Raid_ClearGroupMentor(swigCPtr, group_id);
  }

  public void CheckGroupMentor(uint group_id, Client c) {
    questinterfacePINVOKE.Raid_CheckGroupMentor(swigCPtr, group_id, Client.getCPtr(c));
  }

  public int GetMentorPercent(uint group_id) {
    int ret = questinterfacePINVOKE.Raid_GetMentorPercent(swigCPtr, group_id);
    return ret;
  }

  public Client GetMentoree(uint group_id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Raid_GetMentoree(swigCPtr, group_id);
    Client ret = (cPtr == global::System.IntPtr.Zero) ? null : new Client(cPtr, false);
    return ret;
  }

  public void SetDirtyAutoHaters() {
    questinterfacePINVOKE.Raid_SetDirtyAutoHaters(swigCPtr);
  }

  public SWIGTYPE_p_XTargetAutoHaters GetXTargetAutoMgr() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Raid_GetXTargetAutoMgr(swigCPtr);
    SWIGTYPE_p_XTargetAutoHaters ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XTargetAutoHaters(cPtr, false);
    return ret;
  }

  public void QueueClients(Mob sender, SWIGTYPE_p_EQApplicationPacket app, bool ack_required, bool ignore_sender, float distance, bool group_only) {
    questinterfacePINVOKE.Raid_QueueClients__SWIG_0(swigCPtr, Mob.getCPtr(sender), SWIGTYPE_p_EQApplicationPacket.getCPtr(app), ack_required, ignore_sender, distance, group_only);
  }

  public void QueueClients(Mob sender, SWIGTYPE_p_EQApplicationPacket app, bool ack_required, bool ignore_sender, float distance) {
    questinterfacePINVOKE.Raid_QueueClients__SWIG_1(swigCPtr, Mob.getCPtr(sender), SWIGTYPE_p_EQApplicationPacket.getCPtr(app), ack_required, ignore_sender, distance);
  }

  public void QueueClients(Mob sender, SWIGTYPE_p_EQApplicationPacket app, bool ack_required, bool ignore_sender) {
    questinterfacePINVOKE.Raid_QueueClients__SWIG_2(swigCPtr, Mob.getCPtr(sender), SWIGTYPE_p_EQApplicationPacket.getCPtr(app), ack_required, ignore_sender);
  }

  public void QueueClients(Mob sender, SWIGTYPE_p_EQApplicationPacket app, bool ack_required) {
    questinterfacePINVOKE.Raid_QueueClients__SWIG_3(swigCPtr, Mob.getCPtr(sender), SWIGTYPE_p_EQApplicationPacket.getCPtr(app), ack_required);
  }

  public void QueueClients(Mob sender, SWIGTYPE_p_EQApplicationPacket app) {
    questinterfacePINVOKE.Raid_QueueClients__SWIG_4(swigCPtr, Mob.getCPtr(sender), SWIGTYPE_p_EQApplicationPacket.getCPtr(app));
  }

  public bool DoesAnyMemberHaveExpeditionLockout(SWIGTYPE_p_std__string expedition_name, SWIGTYPE_p_std__string event_name, int max_check_count) {
    bool ret = questinterfacePINVOKE.Raid_DoesAnyMemberHaveExpeditionLockout__SWIG_0(swigCPtr, SWIGTYPE_p_std__string.getCPtr(expedition_name), SWIGTYPE_p_std__string.getCPtr(event_name), max_check_count);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool DoesAnyMemberHaveExpeditionLockout(SWIGTYPE_p_std__string expedition_name, SWIGTYPE_p_std__string event_name) {
    bool ret = questinterfacePINVOKE.Raid_DoesAnyMemberHaveExpeditionLockout__SWIG_1(swigCPtr, SWIGTYPE_p_std__string.getCPtr(expedition_name), SWIGTYPE_p_std__string.getCPtr(event_name));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_RaidMember_t GetMembers() {
    SWIGTYPE_p_std__vectorT_RaidMember_t ret = new SWIGTYPE_p_std__vectorT_RaidMember_t(questinterfacePINVOKE.Raid_GetMembers(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_RaidMember_t GetRaidGroupMembers(uint gid) {
    SWIGTYPE_p_std__vectorT_RaidMember_t ret = new SWIGTYPE_p_std__vectorT_RaidMember_t(questinterfacePINVOKE.Raid_GetRaidGroupMembers(swigCPtr, gid), true);
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_Bot_p_t GetRaidGroupBotMembers(uint gid) {
    SWIGTYPE_p_std__vectorT_Bot_p_t ret = new SWIGTYPE_p_std__vectorT_Bot_p_t(questinterfacePINVOKE.Raid_GetRaidGroupBotMembers(swigCPtr, gid), true);
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_Bot_p_t GetRaidBotMembers(uint owner) {
    SWIGTYPE_p_std__vectorT_Bot_p_t ret = new SWIGTYPE_p_std__vectorT_Bot_p_t(questinterfacePINVOKE.Raid_GetRaidBotMembers__SWIG_0(swigCPtr, owner), true);
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_Bot_p_t GetRaidBotMembers() {
    SWIGTYPE_p_std__vectorT_Bot_p_t ret = new SWIGTYPE_p_std__vectorT_Bot_p_t(questinterfacePINVOKE.Raid_GetRaidBotMembers__SWIG_1(swigCPtr), true);
    return ret;
  }

  public void HandleBotGroupDisband(uint owner, uint gid) {
    questinterfacePINVOKE.Raid_HandleBotGroupDisband__SWIG_0(swigCPtr, owner, gid);
  }

  public void HandleBotGroupDisband(uint owner) {
    questinterfacePINVOKE.Raid_HandleBotGroupDisband__SWIG_1(swigCPtr, owner);
  }

  public void HandleOfflineBots(uint owner) {
    questinterfacePINVOKE.Raid_HandleOfflineBots(swigCPtr, owner);
  }

  public RaidMember members {
    set {
      questinterfacePINVOKE.Raid_members_set(swigCPtr, RaidMember.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.Raid_members_get(swigCPtr);
      RaidMember ret = (cPtr == global::System.IntPtr.Zero) ? null : new RaidMember(cPtr, false);
      return ret;
    } 
  }

  public string leadername {
    set {
      questinterfacePINVOKE.Raid_leadername_set(swigCPtr, value);
    } 
    get {
      string ret = questinterfacePINVOKE.Raid_leadername_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_a_64__char main_assister_pcs {
    set {
      questinterfacePINVOKE.Raid_main_assister_pcs_set(swigCPtr, SWIGTYPE_p_a_64__char.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.Raid_main_assister_pcs_get(swigCPtr);
      SWIGTYPE_p_a_64__char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_a_64__char(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_a_64__char main_marker_pcs {
    set {
      questinterfacePINVOKE.Raid_main_marker_pcs_set(swigCPtr, SWIGTYPE_p_a_64__char.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.Raid_main_marker_pcs_get(swigCPtr);
      SWIGTYPE_p_a_64__char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_a_64__char(cPtr, false);
      return ret;
    } 
  }

  public Raid_Marked_NPC marked_npcs {
    set {
      questinterfacePINVOKE.Raid_marked_npcs_set(swigCPtr, Raid_Marked_NPC.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.Raid_marked_npcs_get(swigCPtr);
      Raid_Marked_NPC ret = (cPtr == global::System.IntPtr.Zero) ? null : new Raid_Marked_NPC(cPtr, false);
      return ret;
    } 
  }

}

public enum TrapTypes {
  trapTypeDebuff = 0,
  trapTypeAlarm = 1,
  trapTypeMysticSpawn = 2,
  trapTypeBanditSpawn = 3,
  trapTypeDamage = 4
}

public class Trap : Entity {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Trap(global::System.IntPtr cPtr, bool cMemoryOwn) : base(questinterfacePINVOKE.Trap_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Trap obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Trap obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_Trap(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public Trap() : this(questinterfacePINVOKE.new_Trap(), true) {
  }

  public override bool Process() {
    bool ret = questinterfacePINVOKE.Trap_Process(swigCPtr);
    return ret;
  }

  public override bool IsTrap() {
    bool ret = questinterfacePINVOKE.Trap_IsTrap(swigCPtr);
    return ret;
  }

  public void Trigger(Mob trigger) {
    questinterfacePINVOKE.Trap_Trigger(swigCPtr, Mob.getCPtr(trigger));
  }

  public NPC GetHiddenTrigger() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Trap_GetHiddenTrigger(swigCPtr);
    NPC ret = (cPtr == global::System.IntPtr.Zero) ? null : new NPC(cPtr, false);
    return ret;
  }

  public void SetHiddenTrigger(NPC n) {
    questinterfacePINVOKE.Trap_SetHiddenTrigger(swigCPtr, NPC.getCPtr(n));
  }

  public void CreateHiddenTrigger() {
    questinterfacePINVOKE.Trap_CreateHiddenTrigger(swigCPtr);
  }

  public void DestroyHiddenTrigger() {
    questinterfacePINVOKE.Trap_DestroyHiddenTrigger(swigCPtr);
  }

  public void UpdateTrap(bool respawn, bool repopnow) {
    questinterfacePINVOKE.Trap_UpdateTrap__SWIG_0(swigCPtr, respawn, repopnow);
  }

  public void UpdateTrap(bool respawn) {
    questinterfacePINVOKE.Trap_UpdateTrap__SWIG_1(swigCPtr, respawn);
  }

  public void UpdateTrap() {
    questinterfacePINVOKE.Trap_UpdateTrap__SWIG_2(swigCPtr);
  }

  public SWIGTYPE_p_Timer respawn_timer {
    set {
      questinterfacePINVOKE.Trap_respawn_timer_set(swigCPtr, SWIGTYPE_p_Timer.getCPtr(value));
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_Timer ret = new SWIGTYPE_p_Timer(questinterfacePINVOKE.Trap_respawn_timer_get(swigCPtr), true);
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_Timer chkarea_timer {
    set {
      questinterfacePINVOKE.Trap_chkarea_timer_set(swigCPtr, SWIGTYPE_p_Timer.getCPtr(value));
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_Timer ret = new SWIGTYPE_p_Timer(questinterfacePINVOKE.Trap_chkarea_timer_get(swigCPtr), true);
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_Timer reset_timer {
    set {
      questinterfacePINVOKE.Trap_reset_timer_set(swigCPtr, SWIGTYPE_p_Timer.getCPtr(value));
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_Timer ret = new SWIGTYPE_p_Timer(questinterfacePINVOKE.Trap_reset_timer_get(swigCPtr), true);
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public uint trap_id {
    set {
      questinterfacePINVOKE.Trap_trap_id_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.Trap_trap_id_get(swigCPtr);
      return ret;
    } 
  }

  public uint db_id {
    set {
      questinterfacePINVOKE.Trap_db_id_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.Trap_db_id_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_glm__vec3 m_Position {
    set {
      questinterfacePINVOKE.Trap_m_Position_set(swigCPtr, SWIGTYPE_p_glm__vec3.getCPtr(value));
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_glm__vec3 ret = new SWIGTYPE_p_glm__vec3(questinterfacePINVOKE.Trap_m_Position_get(swigCPtr), true);
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float maxzdiff {
    set {
      questinterfacePINVOKE.Trap_maxzdiff_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.Trap_maxzdiff_get(swigCPtr);
      return ret;
    } 
  }

  public float radius {
    set {
      questinterfacePINVOKE.Trap_radius_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.Trap_radius_get(swigCPtr);
      return ret;
    } 
  }

  public byte chance {
    set {
      questinterfacePINVOKE.Trap_chance_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.Trap_chance_get(swigCPtr);
      return ret;
    } 
  }

  public byte effect {
    set {
      questinterfacePINVOKE.Trap_effect_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.Trap_effect_get(swigCPtr);
      return ret;
    } 
  }

  public int effectvalue {
    set {
      questinterfacePINVOKE.Trap_effectvalue_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.Trap_effectvalue_get(swigCPtr);
      return ret;
    } 
  }

  public int effectvalue2 {
    set {
      questinterfacePINVOKE.Trap_effectvalue2_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.Trap_effectvalue2_get(swigCPtr);
      return ret;
    } 
  }

  public byte skill {
    set {
      questinterfacePINVOKE.Trap_skill_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.Trap_skill_get(swigCPtr);
      return ret;
    } 
  }

  public byte level {
    set {
      questinterfacePINVOKE.Trap_level_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.Trap_level_get(swigCPtr);
      return ret;
    } 
  }

  public bool detected {
    set {
      questinterfacePINVOKE.Trap_detected_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.Trap_detected_get(swigCPtr);
      return ret;
    } 
  }

  public bool disarmed {
    set {
      questinterfacePINVOKE.Trap_disarmed_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.Trap_disarmed_get(swigCPtr);
      return ret;
    } 
  }

  public uint respawn_time {
    set {
      questinterfacePINVOKE.Trap_respawn_time_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.Trap_respawn_time_get(swigCPtr);
      return ret;
    } 
  }

  public uint respawn_var {
    set {
      questinterfacePINVOKE.Trap_respawn_var_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.Trap_respawn_var_get(swigCPtr);
      return ret;
    } 
  }

  public byte triggered_number {
    set {
      questinterfacePINVOKE.Trap_triggered_number_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.Trap_triggered_number_get(swigCPtr);
      return ret;
    } 
  }

  public byte times_triggered {
    set {
      questinterfacePINVOKE.Trap_times_triggered_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.Trap_times_triggered_get(swigCPtr);
      return ret;
    } 
  }

  public byte group {
    set {
      questinterfacePINVOKE.Trap_group_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.Trap_group_get(swigCPtr);
      return ret;
    } 
  }

  public bool despawn_when_triggered {
    set {
      questinterfacePINVOKE.Trap_despawn_when_triggered_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.Trap_despawn_when_triggered_get(swigCPtr);
      return ret;
    } 
  }

  public uint charid {
    set {
      questinterfacePINVOKE.Trap_charid_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.Trap_charid_get(swigCPtr);
      return ret;
    } 
  }

  public bool undetectable {
    set {
      questinterfacePINVOKE.Trap_undetectable_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.Trap_undetectable_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__string message {
    set {
      questinterfacePINVOKE.Trap_message_set(swigCPtr, SWIGTYPE_p_std__string.getCPtr(value));
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(questinterfacePINVOKE.Trap_message_get(swigCPtr), true);
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}

public class EXPModifier : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal EXPModifier(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(EXPModifier obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(EXPModifier obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~EXPModifier() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_EXPModifier(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public float aa_modifier {
    set {
      questinterfacePINVOKE.EXPModifier_aa_modifier_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.EXPModifier_aa_modifier_get(swigCPtr);
      return ret;
    } 
  }

  public float exp_modifier {
    set {
      questinterfacePINVOKE.EXPModifier_exp_modifier_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.EXPModifier_exp_modifier_get(swigCPtr);
      return ret;
    } 
  }

  public EXPModifier() : this(questinterfacePINVOKE.new_EXPModifier(), true) {
  }

}

public class ZonePoint : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ZonePoint(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ZonePoint obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ZonePoint obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ZonePoint() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_ZonePoint(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public float x {
    set {
      questinterfacePINVOKE.ZonePoint_x_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.ZonePoint_x_get(swigCPtr);
      return ret;
    } 
  }

  public float y {
    set {
      questinterfacePINVOKE.ZonePoint_y_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.ZonePoint_y_get(swigCPtr);
      return ret;
    } 
  }

  public float z {
    set {
      questinterfacePINVOKE.ZonePoint_z_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.ZonePoint_z_get(swigCPtr);
      return ret;
    } 
  }

  public float heading {
    set {
      questinterfacePINVOKE.ZonePoint_heading_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.ZonePoint_heading_get(swigCPtr);
      return ret;
    } 
  }

  public ushort number {
    set {
      questinterfacePINVOKE.ZonePoint_number_set(swigCPtr, value);
    } 
    get {
      ushort ret = questinterfacePINVOKE.ZonePoint_number_get(swigCPtr);
      return ret;
    } 
  }

  public float target_x {
    set {
      questinterfacePINVOKE.ZonePoint_target_x_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.ZonePoint_target_x_get(swigCPtr);
      return ret;
    } 
  }

  public float target_y {
    set {
      questinterfacePINVOKE.ZonePoint_target_y_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.ZonePoint_target_y_get(swigCPtr);
      return ret;
    } 
  }

  public float target_z {
    set {
      questinterfacePINVOKE.ZonePoint_target_z_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.ZonePoint_target_z_get(swigCPtr);
      return ret;
    } 
  }

  public float target_heading {
    set {
      questinterfacePINVOKE.ZonePoint_target_heading_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.ZonePoint_target_heading_get(swigCPtr);
      return ret;
    } 
  }

  public ushort target_zone_id {
    set {
      questinterfacePINVOKE.ZonePoint_target_zone_id_set(swigCPtr, value);
    } 
    get {
      ushort ret = questinterfacePINVOKE.ZonePoint_target_zone_id_get(swigCPtr);
      return ret;
    } 
  }

  public int target_zone_instance {
    set {
      questinterfacePINVOKE.ZonePoint_target_zone_instance_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.ZonePoint_target_zone_instance_get(swigCPtr);
      return ret;
    } 
  }

  public uint client_version_mask {
    set {
      questinterfacePINVOKE.ZonePoint_client_version_mask_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.ZonePoint_client_version_mask_get(swigCPtr);
      return ret;
    } 
  }

  public bool is_virtual {
    set {
      questinterfacePINVOKE.ZonePoint_is_virtual_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.ZonePoint_is_virtual_get(swigCPtr);
      return ret;
    } 
  }

  public int height {
    set {
      questinterfacePINVOKE.ZonePoint_height_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.ZonePoint_height_get(swigCPtr);
      return ret;
    } 
  }

  public int width {
    set {
      questinterfacePINVOKE.ZonePoint_width_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.ZonePoint_width_get(swigCPtr);
      return ret;
    } 
  }

  public ZonePoint() : this(questinterfacePINVOKE.new_ZonePoint(), true) {
  }

}

public class ZoneClientAuth_Struct : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ZoneClientAuth_Struct(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ZoneClientAuth_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ZoneClientAuth_Struct obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ZoneClientAuth_Struct() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_ZoneClientAuth_Struct(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public uint ip {
    set {
      questinterfacePINVOKE.ZoneClientAuth_Struct_ip_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.ZoneClientAuth_Struct_ip_get(swigCPtr);
      return ret;
    } 
  }

  public uint wid {
    set {
      questinterfacePINVOKE.ZoneClientAuth_Struct_wid_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.ZoneClientAuth_Struct_wid_get(swigCPtr);
      return ret;
    } 
  }

  public uint accid {
    set {
      questinterfacePINVOKE.ZoneClientAuth_Struct_accid_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.ZoneClientAuth_Struct_accid_get(swigCPtr);
      return ret;
    } 
  }

  public short admin {
    set {
      questinterfacePINVOKE.ZoneClientAuth_Struct_admin_set(swigCPtr, value);
    } 
    get {
      short ret = questinterfacePINVOKE.ZoneClientAuth_Struct_admin_get(swigCPtr);
      return ret;
    } 
  }

  public uint charid {
    set {
      questinterfacePINVOKE.ZoneClientAuth_Struct_charid_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.ZoneClientAuth_Struct_charid_get(swigCPtr);
      return ret;
    } 
  }

  public uint lsid {
    set {
      questinterfacePINVOKE.ZoneClientAuth_Struct_lsid_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.ZoneClientAuth_Struct_lsid_get(swigCPtr);
      return ret;
    } 
  }

  public bool tellsoff {
    set {
      questinterfacePINVOKE.ZoneClientAuth_Struct_tellsoff_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.ZoneClientAuth_Struct_tellsoff_get(swigCPtr);
      return ret;
    } 
  }

  public string charname {
    set {
      questinterfacePINVOKE.ZoneClientAuth_Struct_charname_set(swigCPtr, value);
    } 
    get {
      string ret = questinterfacePINVOKE.ZoneClientAuth_Struct_charname_get(swigCPtr);
      return ret;
    } 
  }

  public string lskey {
    set {
      questinterfacePINVOKE.ZoneClientAuth_Struct_lskey_set(swigCPtr, value);
    } 
    get {
      string ret = questinterfacePINVOKE.ZoneClientAuth_Struct_lskey_get(swigCPtr);
      return ret;
    } 
  }

  public bool stale {
    set {
      questinterfacePINVOKE.ZoneClientAuth_Struct_stale_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.ZoneClientAuth_Struct_stale_get(swigCPtr);
      return ret;
    } 
  }

  public ZoneClientAuth_Struct() : this(questinterfacePINVOKE.new_ZoneClientAuth_Struct(), true) {
  }

}

public class ZoneEXPModInfo : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ZoneEXPModInfo(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ZoneEXPModInfo obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ZoneEXPModInfo obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ZoneEXPModInfo() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_ZoneEXPModInfo(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public float ExpMod {
    set {
      questinterfacePINVOKE.ZoneEXPModInfo_ExpMod_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.ZoneEXPModInfo_ExpMod_get(swigCPtr);
      return ret;
    } 
  }

  public float AAExpMod {
    set {
      questinterfacePINVOKE.ZoneEXPModInfo_AAExpMod_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.ZoneEXPModInfo_AAExpMod_get(swigCPtr);
      return ret;
    } 
  }

  public ZoneEXPModInfo() : this(questinterfacePINVOKE.new_ZoneEXPModInfo(), true) {
  }

}

public class Zone : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Zone(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Zone obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Zone obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Zone() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_Zone(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public static bool Bootup(uint iZoneID, uint iInstanceID, bool is_static) {
    bool ret = questinterfacePINVOKE.Zone_Bootup__SWIG_0(iZoneID, iInstanceID, is_static);
    return ret;
  }

  public static bool Bootup(uint iZoneID, uint iInstanceID) {
    bool ret = questinterfacePINVOKE.Zone_Bootup__SWIG_1(iZoneID, iInstanceID);
    return ret;
  }

  public static void Shutdown(bool quiet) {
    questinterfacePINVOKE.Zone_Shutdown__SWIG_0(quiet);
  }

  public static void Shutdown() {
    questinterfacePINVOKE.Zone_Shutdown__SWIG_1();
  }

  public Zone(uint in_zoneid, uint in_instanceid, string in_short_name) : this(questinterfacePINVOKE.new_Zone(in_zoneid, in_instanceid, in_short_name), true) {
  }

  public SWIGTYPE_p_AA__Ability GetAlternateAdvancementAbility(int id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Zone_GetAlternateAdvancementAbility(swigCPtr, id);
    SWIGTYPE_p_AA__Ability ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_AA__Ability(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_AA__Ability GetAlternateAdvancementAbilityByRank(int rank_id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Zone_GetAlternateAdvancementAbilityByRank(swigCPtr, rank_id);
    SWIGTYPE_p_AA__Ability ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_AA__Ability(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_AA__Rank GetAlternateAdvancementRank(int rank_id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Zone_GetAlternateAdvancementRank(swigCPtr, rank_id);
    SWIGTYPE_p_AA__Rank ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_AA__Rank(cPtr, false);
    return ret;
  }

  public bool is_zone_time_localized {
    set {
      questinterfacePINVOKE.Zone_is_zone_time_localized_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.Zone_is_zone_time_localized_get(swigCPtr);
      return ret;
    } 
  }

  public bool quest_idle_override {
    set {
      questinterfacePINVOKE.Zone_quest_idle_override_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.Zone_quest_idle_override_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsIdleWhenEmpty() {
    bool ret = questinterfacePINVOKE.Zone_IsIdleWhenEmpty(swigCPtr);
    return ret;
  }

  public void SetIdleWhenEmpty(bool idle_when_empty) {
    questinterfacePINVOKE.Zone_SetIdleWhenEmpty(swigCPtr, idle_when_empty);
  }

  public uint GetSecondsBeforeIdle() {
    uint ret = questinterfacePINVOKE.Zone_GetSecondsBeforeIdle(swigCPtr);
    return ret;
  }

  public void SetSecondsBeforeIdle(uint seconds_before_idle) {
    questinterfacePINVOKE.Zone_SetSecondsBeforeIdle(swigCPtr, seconds_before_idle);
  }

  public bool AggroLimitReached() {
    bool ret = questinterfacePINVOKE.Zone_AggroLimitReached(swigCPtr);
    return ret;
  }

  public bool AllowMercs() {
    bool ret = questinterfacePINVOKE.Zone_AllowMercs(swigCPtr);
    return ret;
  }

  public bool CanBind() {
    bool ret = questinterfacePINVOKE.Zone_CanBind(swigCPtr);
    return ret;
  }

  public bool CanCastOutdoor() {
    bool ret = questinterfacePINVOKE.Zone_CanCastOutdoor(swigCPtr);
    return ret;
  }

  public bool CanDoCombat() {
    bool ret = questinterfacePINVOKE.Zone_CanDoCombat(swigCPtr);
    return ret;
  }

  public bool CanLevitate() {
    bool ret = questinterfacePINVOKE.Zone_CanLevitate(swigCPtr);
    return ret;
  }

  public bool Depop(bool StartSpawnTimer) {
    bool ret = questinterfacePINVOKE.Zone_Depop__SWIG_0(swigCPtr, StartSpawnTimer);
    return ret;
  }

  public bool Depop() {
    bool ret = questinterfacePINVOKE.Zone_Depop__SWIG_1(swigCPtr);
    return ret;
  }

  public bool did_adventure_actions {
    set {
      questinterfacePINVOKE.Zone_did_adventure_actions_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.Zone_did_adventure_actions_get(swigCPtr);
      return ret;
    } 
  }

  public bool HasGraveyard() {
    bool ret = questinterfacePINVOKE.Zone_HasGraveyard(swigCPtr);
    return ret;
  }

  public bool HasWeather() {
    bool ret = questinterfacePINVOKE.Zone_HasWeather(swigCPtr);
    return ret;
  }

  public bool Init(bool is_static) {
    bool ret = questinterfacePINVOKE.Zone_Init(swigCPtr, is_static);
    return ret;
  }

  public bool IsCity() {
    bool ret = questinterfacePINVOKE.Zone_IsCity(swigCPtr);
    return ret;
  }

  public bool IsHotzone() {
    bool ret = questinterfacePINVOKE.Zone_IsHotzone(swigCPtr);
    return ret;
  }

  public bool IsLoaded() {
    bool ret = questinterfacePINVOKE.Zone_IsLoaded(swigCPtr);
    return ret;
  }

  public bool IsPVPZone() {
    bool ret = questinterfacePINVOKE.Zone_IsPVPZone(swigCPtr);
    return ret;
  }

  public bool IsSpellBlocked(uint spell_id, SWIGTYPE_p_glm__vec3 location) {
    bool ret = questinterfacePINVOKE.Zone_IsSpellBlocked(swigCPtr, spell_id, SWIGTYPE_p_glm__vec3.getCPtr(location));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsUCSServerAvailable() {
    bool ret = questinterfacePINVOKE.Zone_IsUCSServerAvailable(swigCPtr);
    return ret;
  }

  public bool IsZone(uint zone_id, ushort instance_id) {
    bool ret = questinterfacePINVOKE.Zone_IsZone(swigCPtr, zone_id, instance_id);
    return ret;
  }

  public bool LoadGroundSpawns() {
    bool ret = questinterfacePINVOKE.Zone_LoadGroundSpawns(swigCPtr);
    return ret;
  }

  public bool LoadZoneCFG(string filename, ushort instance_version) {
    bool ret = questinterfacePINVOKE.Zone_LoadZoneCFG(swigCPtr, filename, instance_version);
    return ret;
  }

  public bool LoadZoneObjects() {
    bool ret = questinterfacePINVOKE.Zone_LoadZoneObjects(swigCPtr);
    return ret;
  }

  public bool IsSpecialBindLocation(SWIGTYPE_p_glm__vec4 location) {
    bool ret = questinterfacePINVOKE.Zone_IsSpecialBindLocation(swigCPtr, SWIGTYPE_p_glm__vec4.getCPtr(location));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Process() {
    bool ret = questinterfacePINVOKE.Zone_Process(swigCPtr);
    return ret;
  }

  public bool SaveZoneCFG() {
    bool ret = questinterfacePINVOKE.Zone_SaveZoneCFG(swigCPtr);
    return ret;
  }

  public int GetNpcPositionUpdateDistance() {
    int ret = questinterfacePINVOKE.Zone_GetNpcPositionUpdateDistance(swigCPtr);
    return ret;
  }

  public void SetNpcPositionUpdateDistance(int in_npc_position_update_distance) {
    questinterfacePINVOKE.Zone_SetNpcPositionUpdateDistance(swigCPtr, in_npc_position_update_distance);
  }

  public string adv_data {
    set {
      questinterfacePINVOKE.Zone_adv_data_set(swigCPtr, value);
    } 
    get {
      string ret = questinterfacePINVOKE.Zone_adv_data_get(swigCPtr);
      return ret;
    } 
  }

  public string GetSpellBlockedMessage(uint spell_id, SWIGTYPE_p_glm__vec3 location) {
    string ret = questinterfacePINVOKE.Zone_GetSpellBlockedMessage(swigCPtr, spell_id, SWIGTYPE_p_glm__vec3.getCPtr(location));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_EQ__Random random {
    set {
      questinterfacePINVOKE.Zone_random_set(swigCPtr, SWIGTYPE_p_EQ__Random.getCPtr(value));
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_EQ__Random ret = new SWIGTYPE_p_EQ__Random(questinterfacePINVOKE.Zone_random_get(swigCPtr), true);
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_EQTime zone_time {
    set {
      questinterfacePINVOKE.Zone_zone_time_set(swigCPtr, SWIGTYPE_p_EQTime.getCPtr(value));
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_EQTime ret = new SWIGTYPE_p_EQTime(questinterfacePINVOKE.Zone_zone_time_get(swigCPtr), true);
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ZonePoint GetClosestZonePoint(SWIGTYPE_p_glm__vec3 location, string to_name, Client client, float max_distance) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Zone_GetClosestZonePoint__SWIG_0(swigCPtr, SWIGTYPE_p_glm__vec3.getCPtr(location), to_name, Client.getCPtr(client), max_distance);
    ZonePoint ret = (cPtr == global::System.IntPtr.Zero) ? null : new ZonePoint(cPtr, false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ZonePoint GetClosestZonePoint(SWIGTYPE_p_glm__vec3 location, string to_name, Client client) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Zone_GetClosestZonePoint__SWIG_1(swigCPtr, SWIGTYPE_p_glm__vec3.getCPtr(location), to_name, Client.getCPtr(client));
    ZonePoint ret = (cPtr == global::System.IntPtr.Zero) ? null : new ZonePoint(cPtr, false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool BuffTimersSuspended() {
    bool ret = questinterfacePINVOKE.Zone_BuffTimersSuspended(swigCPtr);
    return ret;
  }

  public bool HasMap() {
    bool ret = questinterfacePINVOKE.Zone_HasMap(swigCPtr);
    return ret;
  }

  public bool HasWaterMap() {
    bool ret = questinterfacePINVOKE.Zone_HasWaterMap(swigCPtr);
    return ret;
  }

  public bool InstantGrids() {
    bool ret = questinterfacePINVOKE.Zone_InstantGrids(swigCPtr);
    return ret;
  }

  public bool IsStaticZone() {
    bool ret = questinterfacePINVOKE.Zone_IsStaticZone(swigCPtr);
    return ret;
  }

  public bool IsInstancePersistent() {
    bool ret = questinterfacePINVOKE.Zone_IsInstancePersistent(swigCPtr);
    return ret;
  }

  public string GetFileName() {
    string ret = questinterfacePINVOKE.Zone_GetFileName(swigCPtr);
    return ret;
  }

  public string GetLongName() {
    string ret = questinterfacePINVOKE.Zone_GetLongName(swigCPtr);
    return ret;
  }

  public string GetShortName() {
    string ret = questinterfacePINVOKE.Zone_GetShortName(swigCPtr);
    return ret;
  }

  public byte GetZoneType() {
    byte ret = questinterfacePINVOKE.Zone_GetZoneType(swigCPtr);
    return ret;
  }

  public ushort GetInstanceVersion() {
    ushort ret = questinterfacePINVOKE.Zone_GetInstanceVersion(swigCPtr);
    return ret;
  }

  public uint GetMaxClients() {
    uint ret = questinterfacePINVOKE.Zone_GetMaxClients(swigCPtr);
    return ret;
  }

  public uint graveyard_id() {
    uint ret = questinterfacePINVOKE.Zone_graveyard_id(swigCPtr);
    return ret;
  }

  public uint graveyard_zoneid() {
    uint ret = questinterfacePINVOKE.Zone_graveyard_zoneid(swigCPtr);
    return ret;
  }

  public uint GetInstanceID() {
    uint ret = questinterfacePINVOKE.Zone_GetInstanceID(swigCPtr);
    return ret;
  }

  public uint GetZoneID() {
    uint ret = questinterfacePINVOKE.Zone_GetZoneID(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_glm__vec4 GetSafePoint() {
    SWIGTYPE_p_glm__vec4 ret = new SWIGTYPE_p_glm__vec4(questinterfacePINVOKE.Zone_GetSafePoint(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_glm__vec4 GetGraveyardPoint() {
    SWIGTYPE_p_glm__vec4 ret = new SWIGTYPE_p_glm__vec4(questinterfacePINVOKE.Zone_GetGraveyardPoint(swigCPtr), true);
    return ret;
  }

  public IntVector GetGlobalLootTables(NPC mob) {
    IntVector ret = new IntVector(questinterfacePINVOKE.Zone_GetGlobalLootTables(swigCPtr, NPC.getCPtr(mob)), true);
    return ret;
  }

  public SWIGTYPE_p_Timer GetInstanceTimer() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Zone_GetInstanceTimer(swigCPtr);
    SWIGTYPE_p_Timer ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Timer(cPtr, false);
    return ret;
  }

  public void AddGlobalLootEntry(SWIGTYPE_p_GlobalLootEntry in_) {
    questinterfacePINVOKE.Zone_AddGlobalLootEntry(swigCPtr, SWIGTYPE_p_GlobalLootEntry.getCPtr(in_));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetZoneHasCurrentTime(bool time) {
    questinterfacePINVOKE.Zone_SetZoneHasCurrentTime(swigCPtr, time);
  }

  public void ShowNPCGlobalLoot(Client c, NPC t) {
    questinterfacePINVOKE.Zone_ShowNPCGlobalLoot(swigCPtr, Client.getCPtr(c), NPC.getCPtr(t));
  }

  public void ShowZoneGlobalLoot(Client c) {
    questinterfacePINVOKE.Zone_ShowZoneGlobalLoot(swigCPtr, Client.getCPtr(c));
  }

  public int GetZoneTotalBlockedSpells() {
    int ret = questinterfacePINVOKE.Zone_GetZoneTotalBlockedSpells(swigCPtr);
    return ret;
  }

  public int SaveTempItem(uint merchantid, uint npcid, uint item, int charges, bool sold) {
    int ret = questinterfacePINVOKE.Zone_SaveTempItem__SWIG_0(swigCPtr, merchantid, npcid, item, charges, sold);
    return ret;
  }

  public int SaveTempItem(uint merchantid, uint npcid, uint item, int charges) {
    int ret = questinterfacePINVOKE.Zone_SaveTempItem__SWIG_1(swigCPtr, merchantid, npcid, item, charges);
    return ret;
  }

  public int MobsAggroCount() {
    int ret = questinterfacePINVOKE.Zone_MobsAggroCount(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_DynamicZone GetDynamicZone() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Zone_GetDynamicZone(swigCPtr);
    SWIGTYPE_p_DynamicZone ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_DynamicZone(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_IPathfinder pathing {
    set {
      questinterfacePINVOKE.Zone_pathing_set(swigCPtr, SWIGTYPE_p_IPathfinder.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.Zone_pathing_get(swigCPtr);
      SWIGTYPE_p_IPathfinder ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_IPathfinder(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_NPC_Emote_Struct_p_t npc_emote_list {
    set {
      questinterfacePINVOKE.Zone_npc_emote_list_set(swigCPtr, SWIGTYPE_p_std__vectorT_NPC_Emote_Struct_p_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.Zone_npc_emote_list_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_NPC_Emote_Struct_p_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_NPC_Emote_Struct_p_t(cPtr, false);
      return ret;
    } 
  }

  public LinkedListSpawn2 spawn2_list {
    set {
      questinterfacePINVOKE.Zone_spawn2_list_set(swigCPtr, LinkedListSpawn2.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.Zone_spawn2_list_get(swigCPtr);
      LinkedListSpawn2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new LinkedListSpawn2(cPtr, false);
      return ret;
    } 
  }

  public LinkedListZonePoint zone_point_list {
    set {
      questinterfacePINVOKE.Zone_zone_point_list_set(swigCPtr, LinkedListZonePoint.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.Zone_zone_point_list_get(swigCPtr);
      LinkedListZonePoint ret = (cPtr == global::System.IntPtr.Zero) ? null : new LinkedListZonePoint(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_ZonePointsRepository__ZonePoints_t virtual_zone_point_list {
    set {
      questinterfacePINVOKE.Zone_virtual_zone_point_list_set(swigCPtr, SWIGTYPE_p_std__vectorT_ZonePointsRepository__ZonePoints_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.Zone_virtual_zone_point_list_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_ZonePointsRepository__ZonePoints_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_ZonePointsRepository__ZonePoints_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_Map zonemap {
    set {
      questinterfacePINVOKE.Zone_zonemap_set(swigCPtr, SWIGTYPE_p_Map.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.Zone_zonemap_get(swigCPtr);
      SWIGTYPE_p_Map ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Map(cPtr, false);
      return ret;
    } 
  }

  public MercTemplate GetMercTemplate(uint template_id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Zone_GetMercTemplate(swigCPtr, template_id);
    MercTemplate ret = (cPtr == global::System.IntPtr.Zero) ? null : new MercTemplate(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_NewZone_Struct newzone_data {
    set {
      questinterfacePINVOKE.Zone_newzone_data_set(swigCPtr, SWIGTYPE_p_NewZone_Struct.getCPtr(value));
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_NewZone_Struct ret = new SWIGTYPE_p_NewZone_Struct(questinterfacePINVOKE.Zone_newzone_data_get(swigCPtr), true);
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_QGlobalCache CreateQGlobals() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Zone_CreateQGlobals(swigCPtr);
    SWIGTYPE_p_QGlobalCache ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_QGlobalCache(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_QGlobalCache GetQGlobals() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Zone_GetQGlobals(swigCPtr);
    SWIGTYPE_p_QGlobalCache ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_QGlobalCache(cPtr, false);
    return ret;
  }

  public SpawnConditionManager spawn_conditions {
    set {
      questinterfacePINVOKE.Zone_spawn_conditions_set(swigCPtr, SpawnConditionManager.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.Zone_spawn_conditions_get(swigCPtr);
      SpawnConditionManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new SpawnConditionManager(cPtr, false);
      return ret;
    } 
  }

  public SpawnGroupList spawn_group_list {
    set {
      questinterfacePINVOKE.Zone_spawn_group_list_set(swigCPtr, SpawnGroupList.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.Zone_spawn_group_list_get(swigCPtr);
      SpawnGroupList ret = (cPtr == global::System.IntPtr.Zero) ? null : new SpawnGroupList(cPtr, false);
      return ret;
    } 
  }

  public AltCurrencyDefinitionList AlternateCurrencies {
    set {
      questinterfacePINVOKE.Zone_AlternateCurrencies_set(swigCPtr, AltCurrencyDefinitionList.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.Zone_AlternateCurrencies_get(swigCPtr);
      AltCurrencyDefinitionList ret = (cPtr == global::System.IntPtr.Zero) ? null : new AltCurrencyDefinitionList(cPtr, false);
      return ret;
    } 
  }

  public InternalVeteranRewardList VeteranRewards {
    set {
      questinterfacePINVOKE.Zone_VeteranRewards_set(swigCPtr, InternalVeteranRewardList.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.Zone_VeteranRewards_get(swigCPtr);
      InternalVeteranRewardList ret = (cPtr == global::System.IntPtr.Zero) ? null : new InternalVeteranRewardList(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__mapT_unsigned_int_NPCType_p_t merctable {
    set {
      questinterfacePINVOKE.Zone_merctable_set(swigCPtr, SWIGTYPE_p_std__mapT_unsigned_int_NPCType_p_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.Zone_merctable_get(swigCPtr);
      SWIGTYPE_p_std__mapT_unsigned_int_NPCType_p_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__mapT_unsigned_int_NPCType_p_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__mapT_unsigned_int_NPCType_p_t npctable {
    set {
      questinterfacePINVOKE.Zone_npctable_set(swigCPtr, SWIGTYPE_p_std__mapT_unsigned_int_NPCType_p_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.Zone_npctable_get(swigCPtr);
      SWIGTYPE_p_std__mapT_unsigned_int_NPCType_p_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__mapT_unsigned_int_NPCType_p_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__mapT_unsigned_int_ZoneEXPModInfo_t level_exp_mod {
    set {
      questinterfacePINVOKE.Zone_level_exp_mod_set(swigCPtr, SWIGTYPE_p_std__mapT_unsigned_int_ZoneEXPModInfo_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.Zone_level_exp_mod_get(swigCPtr);
      SWIGTYPE_p_std__mapT_unsigned_int_ZoneEXPModInfo_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__mapT_unsigned_int_ZoneEXPModInfo_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_GridRepository__Grid_t zone_grids {
    set {
      questinterfacePINVOKE.Zone_zone_grids_set(swigCPtr, SWIGTYPE_p_std__vectorT_GridRepository__Grid_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.Zone_zone_grids_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_GridRepository__Grid_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_GridRepository__Grid_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_GridEntriesRepository__GridEntries_t zone_grid_entries {
    set {
      questinterfacePINVOKE.Zone_zone_grid_entries_set(swigCPtr, SWIGTYPE_p_std__vectorT_GridEntriesRepository__GridEntries_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.Zone_zone_grid_entries_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_GridEntriesRepository__GridEntries_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_GridEntriesRepository__GridEntries_t(cPtr, false);
      return ret;
    } 
  }

  public IntExpModifierMap exp_modifiers {
    set {
      questinterfacePINVOKE.Zone_exp_modifiers_set(swigCPtr, IntExpModifierMap.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.Zone_exp_modifiers_get(swigCPtr);
      IntExpModifierMap ret = (cPtr == global::System.IntPtr.Zero) ? null : new IntExpModifierMap(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_time_t weather_timer {
    set {
      questinterfacePINVOKE.Zone_weather_timer_set(swigCPtr, SWIGTYPE_p_time_t.getCPtr(value));
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_time_t ret = new SWIGTYPE_p_time_t(questinterfacePINVOKE.Zone_weather_timer_get(swigCPtr), true);
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_Timer spawn2_timer {
    set {
      questinterfacePINVOKE.Zone_spawn2_timer_set(swigCPtr, SWIGTYPE_p_Timer.getCPtr(value));
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_Timer ret = new SWIGTYPE_p_Timer(questinterfacePINVOKE.Zone_spawn2_timer_get(swigCPtr), true);
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_Timer hot_reload_timer {
    set {
      questinterfacePINVOKE.Zone_hot_reload_timer_set(swigCPtr, SWIGTYPE_p_Timer.getCPtr(value));
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_Timer ret = new SWIGTYPE_p_Timer(questinterfacePINVOKE.Zone_hot_reload_timer_get(swigCPtr), true);
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public byte weather_intensity {
    set {
      questinterfacePINVOKE.Zone_weather_intensity_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.Zone_weather_intensity_get(swigCPtr);
      return ret;
    } 
  }

  public byte zone_weather {
    set {
      questinterfacePINVOKE.Zone_zone_weather_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.Zone_zone_weather_get(swigCPtr);
      return ret;
    } 
  }

  public byte loglevelvar {
    set {
      questinterfacePINVOKE.Zone_loglevelvar_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.Zone_loglevelvar_get(swigCPtr);
      return ret;
    } 
  }

  public byte lootvar {
    set {
      questinterfacePINVOKE.Zone_lootvar_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.Zone_lootvar_get(swigCPtr);
      return ret;
    } 
  }

  public byte merchantvar {
    set {
      questinterfacePINVOKE.Zone_merchantvar_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.Zone_merchantvar_get(swigCPtr);
      return ret;
    } 
  }

  public byte tradevar {
    set {
      questinterfacePINVOKE.Zone_tradevar_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.Zone_tradevar_get(swigCPtr);
      return ret;
    } 
  }

  public uint numzonepoints {
    set {
      questinterfacePINVOKE.Zone_numzonepoints_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.Zone_numzonepoints_get(swigCPtr);
      return ret;
    } 
  }

  public uint CountAuth() {
    uint ret = questinterfacePINVOKE.Zone_CountAuth(swigCPtr);
    return ret;
  }

  public uint CountSpawn2() {
    uint ret = questinterfacePINVOKE.Zone_CountSpawn2(swigCPtr);
    return ret;
  }

  public uint GetSpawnKillCount(uint in_spawnid) {
    uint ret = questinterfacePINVOKE.Zone_GetSpawnKillCount(swigCPtr, in_spawnid);
    return ret;
  }

  public uint GetTempMerchantQuantity(uint NPCID, uint Slot) {
    uint ret = questinterfacePINVOKE.Zone_GetTempMerchantQuantity(swigCPtr, NPCID, Slot);
    return ret;
  }

  public uint GetCurrencyID(uint item_id) {
    uint ret = questinterfacePINVOKE.Zone_GetCurrencyID(swigCPtr, item_id);
    return ret;
  }

  public uint GetCurrencyItemID(uint currency_id) {
    uint ret = questinterfacePINVOKE.Zone_GetCurrencyItemID(swigCPtr, currency_id);
    return ret;
  }

  public SWIGTYPE_p_std__string GetAAName(int aa_id) {
    SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(questinterfacePINVOKE.Zone_GetAAName(swigCPtr, aa_id), true);
    return ret;
  }

  public bool IsRaining() {
    bool ret = questinterfacePINVOKE.Zone_IsRaining(swigCPtr);
    return ret;
  }

  public bool IsSnowing() {
    bool ret = questinterfacePINVOKE.Zone_IsSnowing(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_std__string GetZoneDescription() {
    SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(questinterfacePINVOKE.Zone_GetZoneDescription(swigCPtr), true);
    return ret;
  }

  public void SendReloadMessage(SWIGTYPE_p_std__string reload_type) {
    questinterfacePINVOKE.Zone_SendReloadMessage(swigCPtr, SWIGTYPE_p_std__string.getCPtr(reload_type));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ClearEXPModifier(Client c) {
    questinterfacePINVOKE.Zone_ClearEXPModifier(swigCPtr, Client.getCPtr(c));
  }

  public float GetAAEXPModifier(Client c) {
    float ret = questinterfacePINVOKE.Zone_GetAAEXPModifier(swigCPtr, Client.getCPtr(c));
    return ret;
  }

  public float GetEXPModifier(Client c) {
    float ret = questinterfacePINVOKE.Zone_GetEXPModifier(swigCPtr, Client.getCPtr(c));
    return ret;
  }

  public void SetAAEXPModifier(Client c, float aa_modifier) {
    questinterfacePINVOKE.Zone_SetAAEXPModifier(swigCPtr, Client.getCPtr(c), aa_modifier);
  }

  public void SetEXPModifier(Client c, float exp_modifier) {
    questinterfacePINVOKE.Zone_SetEXPModifier(swigCPtr, Client.getCPtr(c), exp_modifier);
  }

  public void AddAggroMob() {
    questinterfacePINVOKE.Zone_AddAggroMob(swigCPtr);
  }

  public void AddAuth(SWIGTYPE_p_ServerZoneIncomingClient_Struct szic) {
    questinterfacePINVOKE.Zone_AddAuth(swigCPtr, SWIGTYPE_p_ServerZoneIncomingClient_Struct.getCPtr(szic));
  }

  public void ChangeWeather() {
    questinterfacePINVOKE.Zone_ChangeWeather(swigCPtr);
  }

  public void ClearBlockedSpells() {
    questinterfacePINVOKE.Zone_ClearBlockedSpells(swigCPtr);
  }

  public void ClearNPCTypeCache(int id) {
    questinterfacePINVOKE.Zone_ClearNPCTypeCache(swigCPtr, id);
  }

  public void CalculateNpcUpdateDistanceSpread() {
    questinterfacePINVOKE.Zone_CalculateNpcUpdateDistanceSpread(swigCPtr);
  }

  public void DelAggroMob() {
    questinterfacePINVOKE.Zone_DelAggroMob(swigCPtr);
  }

  public void DeleteQGlobal(SWIGTYPE_p_std__string name, uint npcID, uint charID, uint zoneID) {
    questinterfacePINVOKE.Zone_DeleteQGlobal(swigCPtr, SWIGTYPE_p_std__string.getCPtr(name), npcID, charID, zoneID);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Despawn(uint spawngroupID) {
    questinterfacePINVOKE.Zone_Despawn(swigCPtr, spawngroupID);
  }

  public void DoAdventureActions() {
    questinterfacePINVOKE.Zone_DoAdventureActions(swigCPtr);
  }

  public void DoAdventureAssassinationCountIncrease() {
    questinterfacePINVOKE.Zone_DoAdventureAssassinationCountIncrease(swigCPtr);
  }

  public void DoAdventureCountIncrease() {
    questinterfacePINVOKE.Zone_DoAdventureCountIncrease(swigCPtr);
  }

  public void LoadMerchants() {
    questinterfacePINVOKE.Zone_LoadMerchants(swigCPtr);
  }

  public void GetTimeSync() {
    questinterfacePINVOKE.Zone_GetTimeSync(swigCPtr);
  }

  public void LoadAdventureFlavor() {
    questinterfacePINVOKE.Zone_LoadAdventureFlavor(swigCPtr);
  }

  public void LoadAlternateAdvancement() {
    questinterfacePINVOKE.Zone_LoadAlternateAdvancement(swigCPtr);
  }

  public void LoadAlternateCurrencies() {
    questinterfacePINVOKE.Zone_LoadAlternateCurrencies(swigCPtr);
  }

  public void LoadDynamicZoneTemplates() {
    questinterfacePINVOKE.Zone_LoadDynamicZoneTemplates(swigCPtr);
  }

  public void LoadZoneBlockedSpells() {
    questinterfacePINVOKE.Zone_LoadZoneBlockedSpells(swigCPtr);
  }

  public void LoadLDoNTrapEntries() {
    questinterfacePINVOKE.Zone_LoadLDoNTrapEntries(swigCPtr);
  }

  public void LoadLDoNTraps() {
    questinterfacePINVOKE.Zone_LoadLDoNTraps(swigCPtr);
  }

  public void LoadLevelEXPMods() {
    questinterfacePINVOKE.Zone_LoadLevelEXPMods(swigCPtr);
  }

  public void LoadGrids() {
    questinterfacePINVOKE.Zone_LoadGrids(swigCPtr);
  }

  public void LoadMercenarySpells() {
    questinterfacePINVOKE.Zone_LoadMercenarySpells(swigCPtr);
  }

  public void LoadMercenaryTemplates() {
    questinterfacePINVOKE.Zone_LoadMercenaryTemplates(swigCPtr);
  }

  public void LoadNewMerchantData(uint merchantid) {
    questinterfacePINVOKE.Zone_LoadNewMerchantData(swigCPtr, merchantid);
  }

  public void LoadNPCEmotes(SWIGTYPE_p_std__vectorT_NPC_Emote_Struct_p_t v) {
    questinterfacePINVOKE.Zone_LoadNPCEmotes(swigCPtr, SWIGTYPE_p_std__vectorT_NPC_Emote_Struct_p_t.getCPtr(v));
  }

  public void LoadTempMerchantData() {
    questinterfacePINVOKE.Zone_LoadTempMerchantData(swigCPtr);
  }

  public void LoadVeteranRewards() {
    questinterfacePINVOKE.Zone_LoadVeteranRewards(swigCPtr);
  }

  public void LoadZoneDoors() {
    questinterfacePINVOKE.Zone_LoadZoneDoors(swigCPtr);
  }

  public void ReloadStaticData() {
    questinterfacePINVOKE.Zone_ReloadStaticData(swigCPtr);
  }

  public void ReloadWorld(byte global_repop) {
    questinterfacePINVOKE.Zone_ReloadWorld(swigCPtr, global_repop);
  }

  public void RemoveAuth(string iCharName, string iLSKey) {
    questinterfacePINVOKE.Zone_RemoveAuth__SWIG_0(swigCPtr, iCharName, iLSKey);
  }

  public void RemoveAuth(uint lsid) {
    questinterfacePINVOKE.Zone_RemoveAuth__SWIG_1(swigCPtr, lsid);
  }

  public void Repop(bool is_forced) {
    questinterfacePINVOKE.Zone_Repop__SWIG_0(swigCPtr, is_forced);
  }

  public void Repop() {
    questinterfacePINVOKE.Zone_Repop__SWIG_1(swigCPtr);
  }

  public void RequestUCSServerStatus() {
    questinterfacePINVOKE.Zone_RequestUCSServerStatus(swigCPtr);
  }

  public void ResetAuth() {
    questinterfacePINVOKE.Zone_ResetAuth(swigCPtr);
  }

  public void SetDate(ushort year, byte month, byte day, byte hour, byte minute) {
    questinterfacePINVOKE.Zone_SetDate(swigCPtr, year, month, day, hour, minute);
  }

  public void SetInstanceTimer(uint new_duration) {
    questinterfacePINVOKE.Zone_SetInstanceTimer(swigCPtr, new_duration);
  }

  public void SetStaticZone(bool sz) {
    questinterfacePINVOKE.Zone_SetStaticZone(swigCPtr, sz);
  }

  public void SetTime(byte hour, byte minute, bool update_world) {
    questinterfacePINVOKE.Zone_SetTime__SWIG_0(swigCPtr, hour, minute, update_world);
  }

  public void SetTime(byte hour, byte minute) {
    questinterfacePINVOKE.Zone_SetTime__SWIG_1(swigCPtr, hour, minute);
  }

  public void SetUCSServerAvailable(bool ucss_available, uint update_timestamp) {
    questinterfacePINVOKE.Zone_SetUCSServerAvailable(swigCPtr, ucss_available, update_timestamp);
  }

  public void SpawnConditionChanged(SpawnCondition c, short old_value) {
    questinterfacePINVOKE.Zone_SpawnConditionChanged(swigCPtr, SpawnCondition.getCPtr(c), old_value);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void StartShutdownTimer(uint set_time) {
    questinterfacePINVOKE.Zone_StartShutdownTimer__SWIG_0(swigCPtr, set_time);
  }

  public void StartShutdownTimer() {
    questinterfacePINVOKE.Zone_StartShutdownTimer__SWIG_1(swigCPtr);
  }

  public void ResetShutdownTimer() {
    questinterfacePINVOKE.Zone_ResetShutdownTimer(swigCPtr);
  }

  public void StopShutdownTimer() {
    questinterfacePINVOKE.Zone_StopShutdownTimer(swigCPtr);
  }

  public void UpdateQGlobal(uint qid, SWIGTYPE_p_QGlobal newGlobal) {
    questinterfacePINVOKE.Zone_UpdateQGlobal(swigCPtr, qid, SWIGTYPE_p_QGlobal.getCPtr(newGlobal));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void weatherSend(Client client) {
    questinterfacePINVOKE.Zone_weatherSend__SWIG_0(swigCPtr, Client.getCPtr(client));
  }

  public void weatherSend() {
    questinterfacePINVOKE.Zone_weatherSend__SWIG_1(swigCPtr);
  }

  public void ClearSpawnTimers() {
    questinterfacePINVOKE.Zone_ClearSpawnTimers(swigCPtr);
  }

  public bool IsQuestHotReloadQueued() {
    bool ret = questinterfacePINVOKE.Zone_IsQuestHotReloadQueued(swigCPtr);
    return ret;
  }

  public void SetQuestHotReloadQueued(bool in_quest_hot_reload_queued) {
    questinterfacePINVOKE.Zone_SetQuestHotReloadQueued(swigCPtr, in_quest_hot_reload_queued);
  }

  public bool CompareDataBucket(byte bucket_comparison, SWIGTYPE_p_std__string bucket_value, SWIGTYPE_p_std__string player_value) {
    bool ret = questinterfacePINVOKE.Zone_CompareDataBucket(swigCPtr, bucket_comparison, SWIGTYPE_p_std__string.getCPtr(bucket_value), SWIGTYPE_p_std__string.getCPtr(player_value));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_WaterMap watermap {
    set {
      questinterfacePINVOKE.Zone_watermap_set(swigCPtr, SWIGTYPE_p_WaterMap.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.Zone_watermap_get(swigCPtr);
      SWIGTYPE_p_WaterMap ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_WaterMap(cPtr, false);
      return ret;
    } 
  }

  public ZonePoint GetClosestZonePoint(SWIGTYPE_p_glm__vec3 location, uint to, Client client, float max_distance) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Zone_GetClosestZonePoint__SWIG_2(swigCPtr, SWIGTYPE_p_glm__vec3.getCPtr(location), to, Client.getCPtr(client), max_distance);
    ZonePoint ret = (cPtr == global::System.IntPtr.Zero) ? null : new ZonePoint(cPtr, false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ZonePoint GetClosestZonePoint(SWIGTYPE_p_glm__vec3 location, uint to, Client client) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Zone_GetClosestZonePoint__SWIG_3(swigCPtr, SWIGTYPE_p_glm__vec3.getCPtr(location), to, Client.getCPtr(client));
    ZonePoint ret = (cPtr == global::System.IntPtr.Zero) ? null : new ZonePoint(cPtr, false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ZonePoint GetClosestZonePointWithoutZone(float x, float y, float z, Client client, float max_distance) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Zone_GetClosestZonePointWithoutZone__SWIG_0(swigCPtr, x, y, z, Client.getCPtr(client), max_distance);
    ZonePoint ret = (cPtr == global::System.IntPtr.Zero) ? null : new ZonePoint(cPtr, false);
    return ret;
  }

  public ZonePoint GetClosestZonePointWithoutZone(float x, float y, float z, Client client) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Zone_GetClosestZonePointWithoutZone__SWIG_1(swigCPtr, x, y, z, Client.getCPtr(client));
    ZonePoint ret = (cPtr == global::System.IntPtr.Zero) ? null : new ZonePoint(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_Timer GetInitgridsTimer() {
    SWIGTYPE_p_Timer ret = new SWIGTYPE_p_Timer(questinterfacePINVOKE.Zone_GetInitgridsTimer(swigCPtr), true);
    return ret;
  }

  public uint GetInstanceTimeRemaining() {
    uint ret = questinterfacePINVOKE.Zone_GetInstanceTimeRemaining(swigCPtr);
    return ret;
  }

  public void SetInstanceTimeRemaining(uint instance_time_remaining) {
    questinterfacePINVOKE.Zone_SetInstanceTimeRemaining(swigCPtr, instance_time_remaining);
  }

  public static void GMSayHookCallBackProcess(ushort log_category, string func, SWIGTYPE_p_std__string message) {
    questinterfacePINVOKE.Zone_GMSayHookCallBackProcess(log_category, func, SWIGTYPE_p_std__string.getCPtr(message));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SendDiscordMessage(int webhook_id, SWIGTYPE_p_std__string message) {
    questinterfacePINVOKE.Zone_SendDiscordMessage__SWIG_0(webhook_id, SWIGTYPE_p_std__string.getCPtr(message));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SendDiscordMessage(SWIGTYPE_p_std__string webhook_name, SWIGTYPE_p_std__string message) {
    questinterfacePINVOKE.Zone_SendDiscordMessage__SWIG_1(SWIGTYPE_p_std__string.getCPtr(webhook_name), SWIGTYPE_p_std__string.getCPtr(message));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DiscordWebhookMessageHandler(ushort log_category, int webhook_id, SWIGTYPE_p_std__string message) {
    questinterfacePINVOKE.Zone_DiscordWebhookMessageHandler(log_category, webhook_id, SWIGTYPE_p_std__string.getCPtr(message));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetMaxMovementUpdateRange() {
    double ret = questinterfacePINVOKE.Zone_GetMaxMovementUpdateRange(swigCPtr);
    return ret;
  }

  public void SetIsHotzone(bool is_hotzone) {
    questinterfacePINVOKE.Zone_SetIsHotzone(swigCPtr, is_hotzone);
  }

  public void ReloadContentFlags() {
    questinterfacePINVOKE.Zone_ReloadContentFlags(swigCPtr);
  }

  public void LoadNPCFaction(uint npc_faction_id) {
    questinterfacePINVOKE.Zone_LoadNPCFaction(swigCPtr, npc_faction_id);
  }

  public void LoadNPCFactions(SWIGTYPE_p_std__vectorT_unsigned_int_t npc_faction_ids) {
    questinterfacePINVOKE.Zone_LoadNPCFactions(swigCPtr, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(npc_faction_ids));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ClearNPCFactions() {
    questinterfacePINVOKE.Zone_ClearNPCFactions(swigCPtr);
  }

  public void ReloadNPCFactions() {
    questinterfacePINVOKE.Zone_ReloadNPCFactions(swigCPtr);
  }

  public SWIGTYPE_p_NpcFactionRepository__NpcFaction GetNPCFaction(uint npc_faction_id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Zone_GetNPCFaction(swigCPtr, npc_faction_id);
    SWIGTYPE_p_NpcFactionRepository__NpcFaction ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_NpcFactionRepository__NpcFaction(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_NpcFactionEntriesRepository__NpcFactionEntries_t GetNPCFactionEntries(uint npc_faction_id) {
    SWIGTYPE_p_std__vectorT_NpcFactionEntriesRepository__NpcFactionEntries_t ret = new SWIGTYPE_p_std__vectorT_NpcFactionEntriesRepository__NpcFactionEntries_t(questinterfacePINVOKE.Zone_GetNPCFactionEntries(swigCPtr, npc_faction_id), true);
    return ret;
  }

  public void LoadNPCFactionAssociation(uint npc_faction_id) {
    questinterfacePINVOKE.Zone_LoadNPCFactionAssociation(swigCPtr, npc_faction_id);
  }

  public void LoadNPCFactionAssociations(SWIGTYPE_p_std__vectorT_unsigned_int_t npc_faction_ids) {
    questinterfacePINVOKE.Zone_LoadNPCFactionAssociations(swigCPtr, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(npc_faction_ids));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void LoadFactionAssociation(uint faction_id) {
    questinterfacePINVOKE.Zone_LoadFactionAssociation(swigCPtr, faction_id);
  }

  public void LoadFactionAssociations(SWIGTYPE_p_std__vectorT_unsigned_int_t faction_ids) {
    questinterfacePINVOKE.Zone_LoadFactionAssociations(swigCPtr, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(faction_ids));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ClearFactionAssociations() {
    questinterfacePINVOKE.Zone_ClearFactionAssociations(swigCPtr);
  }

  public void ReloadFactionAssociations() {
    questinterfacePINVOKE.Zone_ReloadFactionAssociations(swigCPtr);
  }

  public SWIGTYPE_p_FactionAssociationRepository__FactionAssociation GetFactionAssociation(uint faction_id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Zone_GetFactionAssociation(swigCPtr, faction_id);
    SWIGTYPE_p_FactionAssociationRepository__FactionAssociation ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FactionAssociationRepository__FactionAssociation(cPtr, false);
    return ret;
  }

  public void LoadLootTable(uint loottable_id) {
    questinterfacePINVOKE.Zone_LoadLootTable(swigCPtr, loottable_id);
  }

  public void LoadLootTables(SWIGTYPE_p_std__vectorT_unsigned_int_t loottable_ids) {
    questinterfacePINVOKE.Zone_LoadLootTables(swigCPtr, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(loottable_ids));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ClearLootTables() {
    questinterfacePINVOKE.Zone_ClearLootTables(swigCPtr);
  }

  public void ReloadLootTables() {
    questinterfacePINVOKE.Zone_ReloadLootTables(swigCPtr);
  }

  public SWIGTYPE_p_LoottableRepository__Loottable GetLootTable(uint loottable_id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.Zone_GetLootTable(swigCPtr, loottable_id);
    SWIGTYPE_p_LoottableRepository__Loottable ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_LoottableRepository__Loottable(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_LoottableEntriesRepository__LoottableEntries_t GetLootTableEntries(uint loottable_id) {
    SWIGTYPE_p_std__vectorT_LoottableEntriesRepository__LoottableEntries_t ret = new SWIGTYPE_p_std__vectorT_LoottableEntriesRepository__LoottableEntries_t(questinterfacePINVOKE.Zone_GetLootTableEntries(swigCPtr, loottable_id), true);
    return ret;
  }

  public SWIGTYPE_p_LootdropRepository__Lootdrop GetLootdrop(uint lootdrop_id) {
    SWIGTYPE_p_LootdropRepository__Lootdrop ret = new SWIGTYPE_p_LootdropRepository__Lootdrop(questinterfacePINVOKE.Zone_GetLootdrop(swigCPtr, lootdrop_id), true);
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_LootdropEntriesRepository__LootdropEntries_t GetLootdropEntries(uint lootdrop_id) {
    SWIGTYPE_p_std__vectorT_LootdropEntriesRepository__LootdropEntries_t ret = new SWIGTYPE_p_std__vectorT_LootdropEntriesRepository__LootdropEntries_t(questinterfacePINVOKE.Zone_GetLootdropEntries(swigCPtr, lootdrop_id), true);
    return ret;
  }

  public void ClearBaseData() {
    questinterfacePINVOKE.Zone_ClearBaseData(swigCPtr);
  }

  public SWIGTYPE_p_BaseDataRepository__BaseData GetBaseData(byte level, byte class_id) {
    SWIGTYPE_p_BaseDataRepository__BaseData ret = new SWIGTYPE_p_BaseDataRepository__BaseData(questinterfacePINVOKE.Zone_GetBaseData(swigCPtr, level, class_id), true);
    return ret;
  }

  public void LoadBaseData() {
    questinterfacePINVOKE.Zone_LoadBaseData(swigCPtr);
  }

  public void ReloadBaseData() {
    questinterfacePINVOKE.Zone_ReloadBaseData(swigCPtr);
  }

}

public class Spawn2 : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Spawn2(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Spawn2 obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Spawn2 obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Spawn2() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_Spawn2(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Spawn2(uint spawn2_id, uint spawngroup_id, float x, float y, float z, float heading, uint respawn, uint variance, uint timeleft, uint grid, bool in_path_when_zone_idle, ushort cond_id, short min_value, bool in_enabled, SWIGTYPE_p_EmuAppearance anim) : this(questinterfacePINVOKE.new_Spawn2__SWIG_0(spawn2_id, spawngroup_id, x, y, z, heading, respawn, variance, timeleft, grid, in_path_when_zone_idle, cond_id, min_value, in_enabled, SWIGTYPE_p_EmuAppearance.getCPtr(anim)), true) {
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public Spawn2(uint spawn2_id, uint spawngroup_id, float x, float y, float z, float heading, uint respawn, uint variance, uint timeleft, uint grid, bool in_path_when_zone_idle, ushort cond_id, short min_value, bool in_enabled) : this(questinterfacePINVOKE.new_Spawn2__SWIG_1(spawn2_id, spawngroup_id, x, y, z, heading, respawn, variance, timeleft, grid, in_path_when_zone_idle, cond_id, min_value, in_enabled), true) {
  }

  public Spawn2(uint spawn2_id, uint spawngroup_id, float x, float y, float z, float heading, uint respawn, uint variance, uint timeleft, uint grid, bool in_path_when_zone_idle, ushort cond_id, short min_value) : this(questinterfacePINVOKE.new_Spawn2__SWIG_2(spawn2_id, spawngroup_id, x, y, z, heading, respawn, variance, timeleft, grid, in_path_when_zone_idle, cond_id, min_value), true) {
  }

  public Spawn2(uint spawn2_id, uint spawngroup_id, float x, float y, float z, float heading, uint respawn, uint variance, uint timeleft, uint grid, bool in_path_when_zone_idle, ushort cond_id) : this(questinterfacePINVOKE.new_Spawn2__SWIG_3(spawn2_id, spawngroup_id, x, y, z, heading, respawn, variance, timeleft, grid, in_path_when_zone_idle, cond_id), true) {
  }

  public Spawn2(uint spawn2_id, uint spawngroup_id, float x, float y, float z, float heading, uint respawn, uint variance, uint timeleft, uint grid, bool in_path_when_zone_idle) : this(questinterfacePINVOKE.new_Spawn2__SWIG_4(spawn2_id, spawngroup_id, x, y, z, heading, respawn, variance, timeleft, grid, in_path_when_zone_idle), true) {
  }

  public Spawn2(uint spawn2_id, uint spawngroup_id, float x, float y, float z, float heading, uint respawn, uint variance, uint timeleft, uint grid) : this(questinterfacePINVOKE.new_Spawn2__SWIG_5(spawn2_id, spawngroup_id, x, y, z, heading, respawn, variance, timeleft, grid), true) {
  }

  public Spawn2(uint spawn2_id, uint spawngroup_id, float x, float y, float z, float heading, uint respawn, uint variance, uint timeleft) : this(questinterfacePINVOKE.new_Spawn2__SWIG_6(spawn2_id, spawngroup_id, x, y, z, heading, respawn, variance, timeleft), true) {
  }

  public Spawn2(uint spawn2_id, uint spawngroup_id, float x, float y, float z, float heading, uint respawn, uint variance) : this(questinterfacePINVOKE.new_Spawn2__SWIG_7(spawn2_id, spawngroup_id, x, y, z, heading, respawn, variance), true) {
  }

  public void LoadGrid(int start_wp) {
    questinterfacePINVOKE.Spawn2_LoadGrid__SWIG_0(swigCPtr, start_wp);
  }

  public void LoadGrid() {
    questinterfacePINVOKE.Spawn2_LoadGrid__SWIG_1(swigCPtr);
  }

  public void Enable() {
    questinterfacePINVOKE.Spawn2_Enable(swigCPtr);
  }

  public void Disable() {
    questinterfacePINVOKE.Spawn2_Disable(swigCPtr);
  }

  public bool Enabled() {
    bool ret = questinterfacePINVOKE.Spawn2_Enabled(swigCPtr);
    return ret;
  }

  public bool Process() {
    bool ret = questinterfacePINVOKE.Spawn2_Process(swigCPtr);
    return ret;
  }

  public void Reset() {
    questinterfacePINVOKE.Spawn2_Reset(swigCPtr);
  }

  public void Depop() {
    questinterfacePINVOKE.Spawn2_Depop(swigCPtr);
  }

  public void Repop(uint delay) {
    questinterfacePINVOKE.Spawn2_Repop__SWIG_0(swigCPtr, delay);
  }

  public void Repop() {
    questinterfacePINVOKE.Spawn2_Repop__SWIG_1(swigCPtr);
  }

  public void ForceDespawn() {
    questinterfacePINVOKE.Spawn2_ForceDespawn(swigCPtr);
  }

  public void DeathReset(bool realdeath) {
    questinterfacePINVOKE.Spawn2_DeathReset__SWIG_0(swigCPtr, realdeath);
  }

  public void DeathReset() {
    questinterfacePINVOKE.Spawn2_DeathReset__SWIG_1(swigCPtr);
  }

  public void SpawnConditionChanged(SpawnCondition c, short old_value) {
    questinterfacePINVOKE.Spawn2_SpawnConditionChanged(swigCPtr, SpawnCondition.getCPtr(c), old_value);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint GetID() {
    uint ret = questinterfacePINVOKE.Spawn2_GetID(swigCPtr);
    return ret;
  }

  public float GetX() {
    float ret = questinterfacePINVOKE.Spawn2_GetX(swigCPtr);
    return ret;
  }

  public float GetY() {
    float ret = questinterfacePINVOKE.Spawn2_GetY(swigCPtr);
    return ret;
  }

  public float GetZ() {
    float ret = questinterfacePINVOKE.Spawn2_GetZ(swigCPtr);
    return ret;
  }

  public float GetHeading() {
    float ret = questinterfacePINVOKE.Spawn2_GetHeading(swigCPtr);
    return ret;
  }

  public bool PathWhenZoneIdle() {
    bool ret = questinterfacePINVOKE.Spawn2_PathWhenZoneIdle(swigCPtr);
    return ret;
  }

  public void SetRespawnTimer(uint newrespawntime) {
    questinterfacePINVOKE.Spawn2_SetRespawnTimer(swigCPtr, newrespawntime);
  }

  public void SetVariance(uint newvariance) {
    questinterfacePINVOKE.Spawn2_SetVariance(swigCPtr, newvariance);
  }

  public uint GetVariance() {
    uint ret = questinterfacePINVOKE.Spawn2_GetVariance(swigCPtr);
    return ret;
  }

  public uint RespawnTimer() {
    uint ret = questinterfacePINVOKE.Spawn2_RespawnTimer(swigCPtr);
    return ret;
  }

  public uint SpawnGroupID() {
    uint ret = questinterfacePINVOKE.Spawn2_SpawnGroupID(swigCPtr);
    return ret;
  }

  public uint CurrentNPCID() {
    uint ret = questinterfacePINVOKE.Spawn2_CurrentNPCID(swigCPtr);
    return ret;
  }

  public void SetCurrentNPCID(uint nid) {
    questinterfacePINVOKE.Spawn2_SetCurrentNPCID(swigCPtr, nid);
  }

  public uint GetSpawnCondition() {
    uint ret = questinterfacePINVOKE.Spawn2_GetSpawnCondition(swigCPtr);
    return ret;
  }

  public bool NPCPointerValid() {
    bool ret = questinterfacePINVOKE.Spawn2_NPCPointerValid(swigCPtr);
    return ret;
  }

  public void SetNPCPointer(NPC n) {
    questinterfacePINVOKE.Spawn2_SetNPCPointer(swigCPtr, NPC.getCPtr(n));
  }

  public void SetNPCPointerNull() {
    questinterfacePINVOKE.Spawn2_SetNPCPointerNull(swigCPtr);
  }

  public SWIGTYPE_p_Timer GetTimer() {
    SWIGTYPE_p_Timer ret = new SWIGTYPE_p_Timer(questinterfacePINVOKE.Spawn2_GetTimer(swigCPtr), true);
    return ret;
  }

  public void SetTimer(uint duration) {
    questinterfacePINVOKE.Spawn2_SetTimer(swigCPtr, duration);
  }

  public uint GetKillCount() {
    uint ret = questinterfacePINVOKE.Spawn2_GetKillCount(swigCPtr);
    return ret;
  }

}

public class SpawnCondition : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SpawnCondition(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SpawnCondition obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SpawnCondition obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~SpawnCondition() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_SpawnCondition(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SpawnCondition() : this(questinterfacePINVOKE.new_SpawnCondition(), true) {
  }

  public ushort condition_id {
    set {
      questinterfacePINVOKE.SpawnCondition_condition_id_set(swigCPtr, value);
    } 
    get {
      ushort ret = questinterfacePINVOKE.SpawnCondition_condition_id_get(swigCPtr);
      return ret;
    } 
  }

  public short value {
    set {
      questinterfacePINVOKE.SpawnCondition_value_set(swigCPtr, value);
    } 
    get {
      short ret = questinterfacePINVOKE.SpawnCondition_value_get(swigCPtr);
      return ret;
    } 
  }

  public SpawnCondition.OnChange on_change {
    set {
      questinterfacePINVOKE.SpawnCondition_on_change_set(swigCPtr, (int)value);
    } 
    get {
      SpawnCondition.OnChange ret = (SpawnCondition.OnChange)questinterfacePINVOKE.SpawnCondition_on_change_get(swigCPtr);
      return ret;
    } 
  }

  public enum OnChange {
    DoNothing = 0,
    DoDepop = 1,
    DoRepop = 2,
    DoRepopIfReady = 3,
    DoSignalMin = 10
  }

}

public class SpawnEvent : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SpawnEvent(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SpawnEvent obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SpawnEvent obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~SpawnEvent() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_SpawnEvent(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SpawnEvent() : this(questinterfacePINVOKE.new_SpawnEvent(), true) {
  }

  public uint id {
    set {
      questinterfacePINVOKE.SpawnEvent_id_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.SpawnEvent_id_get(swigCPtr);
      return ret;
    } 
  }

  public ushort condition_id {
    set {
      questinterfacePINVOKE.SpawnEvent_condition_id_set(swigCPtr, value);
    } 
    get {
      ushort ret = questinterfacePINVOKE.SpawnEvent_condition_id_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__string zone_name {
    set {
      questinterfacePINVOKE.SpawnEvent_zone_name_set(swigCPtr, SWIGTYPE_p_std__string.getCPtr(value));
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(questinterfacePINVOKE.SpawnEvent_zone_name_get(swigCPtr), true);
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool enabled {
    set {
      questinterfacePINVOKE.SpawnEvent_enabled_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.SpawnEvent_enabled_get(swigCPtr);
      return ret;
    } 
  }

  public SpawnEvent.Action action {
    set {
      questinterfacePINVOKE.SpawnEvent_action_set(swigCPtr, (int)value);
    } 
    get {
      SpawnEvent.Action ret = (SpawnEvent.Action)questinterfacePINVOKE.SpawnEvent_action_get(swigCPtr);
      return ret;
    } 
  }

  public short argument {
    set {
      questinterfacePINVOKE.SpawnEvent_argument_set(swigCPtr, value);
    } 
    get {
      short ret = questinterfacePINVOKE.SpawnEvent_argument_get(swigCPtr);
      return ret;
    } 
  }

  public bool strict {
    set {
      questinterfacePINVOKE.SpawnEvent_strict_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.SpawnEvent_strict_get(swigCPtr);
      return ret;
    } 
  }

  public uint period {
    set {
      questinterfacePINVOKE.SpawnEvent_period_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.SpawnEvent_period_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_TimeOfDay_Struct next {
    set {
      questinterfacePINVOKE.SpawnEvent_next_set(swigCPtr, SWIGTYPE_p_TimeOfDay_Struct.getCPtr(value));
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_TimeOfDay_Struct ret = new SWIGTYPE_p_TimeOfDay_Struct(questinterfacePINVOKE.SpawnEvent_next_get(swigCPtr), true);
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public enum Action {
    ActionSet = 0,
    ActionAdd = 1,
    ActionSubtract = 2,
    ActionMultiply = 3,
    ActionDivide = 4
  }

}

public class SpawnConditionManager : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SpawnConditionManager(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SpawnConditionManager obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SpawnConditionManager obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~SpawnConditionManager() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_SpawnConditionManager(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SpawnConditionManager() : this(questinterfacePINVOKE.new_SpawnConditionManager(), true) {
  }

  public void Process() {
    questinterfacePINVOKE.SpawnConditionManager_Process(swigCPtr);
  }

  public bool LoadSpawnConditions(SWIGTYPE_p_std__string zone_short_name, uint instance_id) {
    bool ret = questinterfacePINVOKE.SpawnConditionManager_LoadSpawnConditions(swigCPtr, SWIGTYPE_p_std__string.getCPtr(zone_short_name), instance_id);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public short GetCondition(SWIGTYPE_p_std__string zone_short_name, uint instance_id, ushort condition) {
    short ret = questinterfacePINVOKE.SpawnConditionManager_GetCondition(swigCPtr, SWIGTYPE_p_std__string.getCPtr(zone_short_name), instance_id, condition);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetCondition(string zone_short, uint instance_id, ushort condition_id, short new_value, bool world_update) {
    questinterfacePINVOKE.SpawnConditionManager_SetCondition__SWIG_0(swigCPtr, zone_short, instance_id, condition_id, new_value, world_update);
  }

  public void SetCondition(string zone_short, uint instance_id, ushort condition_id, short new_value) {
    questinterfacePINVOKE.SpawnConditionManager_SetCondition__SWIG_1(swigCPtr, zone_short, instance_id, condition_id, new_value);
  }

  public void ToggleEvent(uint event_id, bool enabled, bool strict, bool reset_base) {
    questinterfacePINVOKE.SpawnConditionManager_ToggleEvent(swigCPtr, event_id, enabled, strict, reset_base);
  }

  public bool Check(ushort condition, short min_value) {
    bool ret = questinterfacePINVOKE.SpawnConditionManager_Check(swigCPtr, condition, min_value);
    return ret;
  }

  public void ReloadEvent(uint event_id) {
    questinterfacePINVOKE.SpawnConditionManager_ReloadEvent(swigCPtr, event_id);
  }

}

public class SpawnEntry : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SpawnEntry(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SpawnEntry obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SpawnEntry obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~SpawnEntry() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_SpawnEntry(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SpawnEntry(uint in_NPCType, int in_chance, ushort in_filter, byte in_npc_spawn_limit, byte in_min_time, byte in_max_time) : this(questinterfacePINVOKE.new_SpawnEntry(in_NPCType, in_chance, in_filter, in_npc_spawn_limit, in_min_time, in_max_time), true) {
  }

  public uint NPCType {
    set {
      questinterfacePINVOKE.SpawnEntry_NPCType_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.SpawnEntry_NPCType_get(swigCPtr);
      return ret;
    } 
  }

  public int chance {
    set {
      questinterfacePINVOKE.SpawnEntry_chance_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.SpawnEntry_chance_get(swigCPtr);
      return ret;
    } 
  }

  public byte min_time {
    set {
      questinterfacePINVOKE.SpawnEntry_min_time_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.SpawnEntry_min_time_get(swigCPtr);
      return ret;
    } 
  }

  public byte max_time {
    set {
      questinterfacePINVOKE.SpawnEntry_max_time_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.SpawnEntry_max_time_get(swigCPtr);
      return ret;
    } 
  }

  public ushort condition_value_filter {
    set {
      questinterfacePINVOKE.SpawnEntry_condition_value_filter_set(swigCPtr, value);
    } 
    get {
      ushort ret = questinterfacePINVOKE.SpawnEntry_condition_value_filter_get(swigCPtr);
      return ret;
    } 
  }

  public byte npc_spawn_limit {
    set {
      questinterfacePINVOKE.SpawnEntry_npc_spawn_limit_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.SpawnEntry_npc_spawn_limit_get(swigCPtr);
      return ret;
    } 
  }

}

public class SpawnGroup : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SpawnGroup(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SpawnGroup obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SpawnGroup obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~SpawnGroup() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_SpawnGroup(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SpawnGroup(uint in_id, string name, int in_group_spawn_limit, float dist, float maxx, float minx, float maxy, float miny, int delay_in, int despawn_in, uint despawn_timer_in, int min_delay_in, bool wp_spawns_in) : this(questinterfacePINVOKE.new_SpawnGroup(in_id, name, in_group_spawn_limit, dist, maxx, minx, maxy, miny, delay_in, despawn_in, despawn_timer_in, min_delay_in, wp_spawns_in), true) {
  }

  public uint GetNPCType(ushort condition_value_filter) {
    uint ret = questinterfacePINVOKE.SpawnGroup_GetNPCType__SWIG_0(swigCPtr, condition_value_filter);
    return ret;
  }

  public uint GetNPCType() {
    uint ret = questinterfacePINVOKE.SpawnGroup_GetNPCType__SWIG_1(swigCPtr);
    return ret;
  }

  public void AddSpawnEntry(SWIGTYPE_p_std__unique_ptrT_SpawnEntry_t newEntry) {
    questinterfacePINVOKE.SpawnGroup_AddSpawnEntry(swigCPtr, SWIGTYPE_p_std__unique_ptrT_SpawnEntry_t.getCPtr(newEntry));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint id {
    set {
      questinterfacePINVOKE.SpawnGroup_id_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.SpawnGroup_id_get(swigCPtr);
      return ret;
    } 
  }

  public bool wp_spawns {
    set {
      questinterfacePINVOKE.SpawnGroup_wp_spawns_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.SpawnGroup_wp_spawns_get(swigCPtr);
      return ret;
    } 
  }

  public float roamdist {
    set {
      questinterfacePINVOKE.SpawnGroup_roamdist_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.SpawnGroup_roamdist_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_float roambox {
    set {
      questinterfacePINVOKE.SpawnGroup_roambox_set(swigCPtr, SWIGTYPE_p_float.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.SpawnGroup_roambox_get(swigCPtr);
      SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
      return ret;
    } 
  }

  public int min_delay {
    set {
      questinterfacePINVOKE.SpawnGroup_min_delay_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.SpawnGroup_min_delay_get(swigCPtr);
      return ret;
    } 
  }

  public int delay {
    set {
      questinterfacePINVOKE.SpawnGroup_delay_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.SpawnGroup_delay_get(swigCPtr);
      return ret;
    } 
  }

  public int despawn {
    set {
      questinterfacePINVOKE.SpawnGroup_despawn_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.SpawnGroup_despawn_get(swigCPtr);
      return ret;
    } 
  }

  public uint despawn_timer {
    set {
      questinterfacePINVOKE.SpawnGroup_despawn_timer_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.SpawnGroup_despawn_timer_get(swigCPtr);
      return ret;
    } 
  }

}

public class SpawnGroupList : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SpawnGroupList(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SpawnGroupList obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SpawnGroupList obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~SpawnGroupList() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_SpawnGroupList(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SpawnGroupList() : this(questinterfacePINVOKE.new_SpawnGroupList__SWIG_0(), true) {
  }

  public SpawnGroupList(SpawnGroupList other) : this(questinterfacePINVOKE.new_SpawnGroupList__SWIG_1(SpawnGroupList.getCPtr(other)), true) {
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddSpawnGroup(SWIGTYPE_p_std__unique_ptrT_SpawnGroup_t new_group) {
    questinterfacePINVOKE.SpawnGroupList_AddSpawnGroup(swigCPtr, SWIGTYPE_p_std__unique_ptrT_SpawnGroup_t.getCPtr(new_group));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public SpawnGroup GetSpawnGroup(uint id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.SpawnGroupList_GetSpawnGroup(swigCPtr, id);
    SpawnGroup ret = (cPtr == global::System.IntPtr.Zero) ? null : new SpawnGroup(cPtr, false);
    return ret;
  }

  public void ClearSpawnGroups() {
    questinterfacePINVOKE.SpawnGroupList_ClearSpawnGroups(swigCPtr);
  }

  public void ReloadSpawnGroups() {
    questinterfacePINVOKE.SpawnGroupList_ReloadSpawnGroups(swigCPtr);
  }

}

public class wplist : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal wplist(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(wplist obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(wplist obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~wplist() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_wplist(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public int index {
    set {
      questinterfacePINVOKE.wplist_index_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.wplist_index_get(swigCPtr);
      return ret;
    } 
  }

  public float x {
    set {
      questinterfacePINVOKE.wplist_x_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.wplist_x_get(swigCPtr);
      return ret;
    } 
  }

  public float y {
    set {
      questinterfacePINVOKE.wplist_y_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.wplist_y_get(swigCPtr);
      return ret;
    } 
  }

  public float z {
    set {
      questinterfacePINVOKE.wplist_z_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.wplist_z_get(swigCPtr);
      return ret;
    } 
  }

  public int pause {
    set {
      questinterfacePINVOKE.wplist_pause_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.wplist_pause_get(swigCPtr);
      return ret;
    } 
  }

  public float heading {
    set {
      questinterfacePINVOKE.wplist_heading_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.wplist_heading_get(swigCPtr);
      return ret;
    } 
  }

  public bool centerpoint {
    set {
      questinterfacePINVOKE.wplist_centerpoint_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.wplist_centerpoint_get(swigCPtr);
      return ret;
    } 
  }

  public wplist() : this(questinterfacePINVOKE.new_wplist(), true) {
  }

}

public class DBnpcspells_entries_Struct : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DBnpcspells_entries_Struct(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DBnpcspells_entries_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(DBnpcspells_entries_Struct obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~DBnpcspells_entries_Struct() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_DBnpcspells_entries_Struct(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ushort spellid {
    set {
      questinterfacePINVOKE.DBnpcspells_entries_Struct_spellid_set(swigCPtr, value);
    } 
    get {
      ushort ret = questinterfacePINVOKE.DBnpcspells_entries_Struct_spellid_get(swigCPtr);
      return ret;
    } 
  }

  public byte minlevel {
    set {
      questinterfacePINVOKE.DBnpcspells_entries_Struct_minlevel_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.DBnpcspells_entries_Struct_minlevel_get(swigCPtr);
      return ret;
    } 
  }

  public byte maxlevel {
    set {
      questinterfacePINVOKE.DBnpcspells_entries_Struct_maxlevel_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.DBnpcspells_entries_Struct_maxlevel_get(swigCPtr);
      return ret;
    } 
  }

  public uint type {
    set {
      questinterfacePINVOKE.DBnpcspells_entries_Struct_type_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.DBnpcspells_entries_Struct_type_get(swigCPtr);
      return ret;
    } 
  }

  public short manacost {
    set {
      questinterfacePINVOKE.DBnpcspells_entries_Struct_manacost_set(swigCPtr, value);
    } 
    get {
      short ret = questinterfacePINVOKE.DBnpcspells_entries_Struct_manacost_get(swigCPtr);
      return ret;
    } 
  }

  public short priority {
    set {
      questinterfacePINVOKE.DBnpcspells_entries_Struct_priority_set(swigCPtr, value);
    } 
    get {
      short ret = questinterfacePINVOKE.DBnpcspells_entries_Struct_priority_get(swigCPtr);
      return ret;
    } 
  }

  public int recast_delay {
    set {
      questinterfacePINVOKE.DBnpcspells_entries_Struct_recast_delay_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.DBnpcspells_entries_Struct_recast_delay_get(swigCPtr);
      return ret;
    } 
  }

  public short resist_adjust {
    set {
      questinterfacePINVOKE.DBnpcspells_entries_Struct_resist_adjust_set(swigCPtr, value);
    } 
    get {
      short ret = questinterfacePINVOKE.DBnpcspells_entries_Struct_resist_adjust_get(swigCPtr);
      return ret;
    } 
  }

  public sbyte min_hp {
    set {
      questinterfacePINVOKE.DBnpcspells_entries_Struct_min_hp_set(swigCPtr, value);
    } 
    get {
      sbyte ret = questinterfacePINVOKE.DBnpcspells_entries_Struct_min_hp_get(swigCPtr);
      return ret;
    } 
  }

  public sbyte max_hp {
    set {
      questinterfacePINVOKE.DBnpcspells_entries_Struct_max_hp_set(swigCPtr, value);
    } 
    get {
      sbyte ret = questinterfacePINVOKE.DBnpcspells_entries_Struct_max_hp_get(swigCPtr);
      return ret;
    } 
  }

  public DBnpcspells_entries_Struct() : this(questinterfacePINVOKE.new_DBnpcspells_entries_Struct(), true) {
  }

}

public class DBnpcspellseffects_entries_Struct : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DBnpcspellseffects_entries_Struct(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DBnpcspellseffects_entries_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(DBnpcspellseffects_entries_Struct obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~DBnpcspellseffects_entries_Struct() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_DBnpcspellseffects_entries_Struct(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public short spelleffectid {
    set {
      questinterfacePINVOKE.DBnpcspellseffects_entries_Struct_spelleffectid_set(swigCPtr, value);
    } 
    get {
      short ret = questinterfacePINVOKE.DBnpcspellseffects_entries_Struct_spelleffectid_get(swigCPtr);
      return ret;
    } 
  }

  public byte minlevel {
    set {
      questinterfacePINVOKE.DBnpcspellseffects_entries_Struct_minlevel_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.DBnpcspellseffects_entries_Struct_minlevel_get(swigCPtr);
      return ret;
    } 
  }

  public byte maxlevel {
    set {
      questinterfacePINVOKE.DBnpcspellseffects_entries_Struct_maxlevel_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.DBnpcspellseffects_entries_Struct_maxlevel_get(swigCPtr);
      return ret;
    } 
  }

  public int base_value {
    set {
      questinterfacePINVOKE.DBnpcspellseffects_entries_Struct_base_value_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.DBnpcspellseffects_entries_Struct_base_value_get(swigCPtr);
      return ret;
    } 
  }

  public int limit {
    set {
      questinterfacePINVOKE.DBnpcspellseffects_entries_Struct_limit_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.DBnpcspellseffects_entries_Struct_limit_get(swigCPtr);
      return ret;
    } 
  }

  public int max_value {
    set {
      questinterfacePINVOKE.DBnpcspellseffects_entries_Struct_max_value_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.DBnpcspellseffects_entries_Struct_max_value_get(swigCPtr);
      return ret;
    } 
  }

  public DBnpcspellseffects_entries_Struct() : this(questinterfacePINVOKE.new_DBnpcspellseffects_entries_Struct(), true) {
  }

}

public class DBnpcspells_Struct : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DBnpcspells_Struct(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DBnpcspells_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(DBnpcspells_Struct obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~DBnpcspells_Struct() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_DBnpcspells_Struct(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public uint parent_list {
    set {
      questinterfacePINVOKE.DBnpcspells_Struct_parent_list_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.DBnpcspells_Struct_parent_list_get(swigCPtr);
      return ret;
    } 
  }

  public ushort attack_proc {
    set {
      questinterfacePINVOKE.DBnpcspells_Struct_attack_proc_set(swigCPtr, value);
    } 
    get {
      ushort ret = questinterfacePINVOKE.DBnpcspells_Struct_attack_proc_get(swigCPtr);
      return ret;
    } 
  }

  public byte proc_chance {
    set {
      questinterfacePINVOKE.DBnpcspells_Struct_proc_chance_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.DBnpcspells_Struct_proc_chance_get(swigCPtr);
      return ret;
    } 
  }

  public ushort range_proc {
    set {
      questinterfacePINVOKE.DBnpcspells_Struct_range_proc_set(swigCPtr, value);
    } 
    get {
      ushort ret = questinterfacePINVOKE.DBnpcspells_Struct_range_proc_get(swigCPtr);
      return ret;
    } 
  }

  public short rproc_chance {
    set {
      questinterfacePINVOKE.DBnpcspells_Struct_rproc_chance_set(swigCPtr, value);
    } 
    get {
      short ret = questinterfacePINVOKE.DBnpcspells_Struct_rproc_chance_get(swigCPtr);
      return ret;
    } 
  }

  public ushort defensive_proc {
    set {
      questinterfacePINVOKE.DBnpcspells_Struct_defensive_proc_set(swigCPtr, value);
    } 
    get {
      ushort ret = questinterfacePINVOKE.DBnpcspells_Struct_defensive_proc_get(swigCPtr);
      return ret;
    } 
  }

  public short dproc_chance {
    set {
      questinterfacePINVOKE.DBnpcspells_Struct_dproc_chance_set(swigCPtr, value);
    } 
    get {
      short ret = questinterfacePINVOKE.DBnpcspells_Struct_dproc_chance_get(swigCPtr);
      return ret;
    } 
  }

  public uint fail_recast {
    set {
      questinterfacePINVOKE.DBnpcspells_Struct_fail_recast_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.DBnpcspells_Struct_fail_recast_get(swigCPtr);
      return ret;
    } 
  }

  public uint engaged_no_sp_recast_min {
    set {
      questinterfacePINVOKE.DBnpcspells_Struct_engaged_no_sp_recast_min_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.DBnpcspells_Struct_engaged_no_sp_recast_min_get(swigCPtr);
      return ret;
    } 
  }

  public uint engaged_no_sp_recast_max {
    set {
      questinterfacePINVOKE.DBnpcspells_Struct_engaged_no_sp_recast_max_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.DBnpcspells_Struct_engaged_no_sp_recast_max_get(swigCPtr);
      return ret;
    } 
  }

  public byte engaged_beneficial_self_chance {
    set {
      questinterfacePINVOKE.DBnpcspells_Struct_engaged_beneficial_self_chance_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.DBnpcspells_Struct_engaged_beneficial_self_chance_get(swigCPtr);
      return ret;
    } 
  }

  public byte engaged_beneficial_other_chance {
    set {
      questinterfacePINVOKE.DBnpcspells_Struct_engaged_beneficial_other_chance_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.DBnpcspells_Struct_engaged_beneficial_other_chance_get(swigCPtr);
      return ret;
    } 
  }

  public byte engaged_detrimental_chance {
    set {
      questinterfacePINVOKE.DBnpcspells_Struct_engaged_detrimental_chance_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.DBnpcspells_Struct_engaged_detrimental_chance_get(swigCPtr);
      return ret;
    } 
  }

  public uint pursue_no_sp_recast_min {
    set {
      questinterfacePINVOKE.DBnpcspells_Struct_pursue_no_sp_recast_min_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.DBnpcspells_Struct_pursue_no_sp_recast_min_get(swigCPtr);
      return ret;
    } 
  }

  public uint pursue_no_sp_recast_max {
    set {
      questinterfacePINVOKE.DBnpcspells_Struct_pursue_no_sp_recast_max_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.DBnpcspells_Struct_pursue_no_sp_recast_max_get(swigCPtr);
      return ret;
    } 
  }

  public byte pursue_detrimental_chance {
    set {
      questinterfacePINVOKE.DBnpcspells_Struct_pursue_detrimental_chance_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.DBnpcspells_Struct_pursue_detrimental_chance_get(swigCPtr);
      return ret;
    } 
  }

  public uint idle_no_sp_recast_min {
    set {
      questinterfacePINVOKE.DBnpcspells_Struct_idle_no_sp_recast_min_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.DBnpcspells_Struct_idle_no_sp_recast_min_get(swigCPtr);
      return ret;
    } 
  }

  public uint idle_no_sp_recast_max {
    set {
      questinterfacePINVOKE.DBnpcspells_Struct_idle_no_sp_recast_max_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.DBnpcspells_Struct_idle_no_sp_recast_max_get(swigCPtr);
      return ret;
    } 
  }

  public byte idle_beneficial_chance {
    set {
      questinterfacePINVOKE.DBnpcspells_Struct_idle_beneficial_chance_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.DBnpcspells_Struct_idle_beneficial_chance_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_DBnpcspells_entries_Struct_t entries {
    set {
      questinterfacePINVOKE.DBnpcspells_Struct_entries_set(swigCPtr, SWIGTYPE_p_std__vectorT_DBnpcspells_entries_Struct_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.DBnpcspells_Struct_entries_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_DBnpcspells_entries_Struct_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_DBnpcspells_entries_Struct_t(cPtr, false);
      return ret;
    } 
  }

  public DBnpcspells_Struct() : this(questinterfacePINVOKE.new_DBnpcspells_Struct(), true) {
  }

}

public class DBnpcspellseffects_Struct : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DBnpcspellseffects_Struct(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DBnpcspellseffects_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(DBnpcspellseffects_Struct obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~DBnpcspellseffects_Struct() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_DBnpcspellseffects_Struct(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public uint parent_list {
    set {
      questinterfacePINVOKE.DBnpcspellseffects_Struct_parent_list_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.DBnpcspellseffects_Struct_parent_list_get(swigCPtr);
      return ret;
    } 
  }

  public uint numentries {
    set {
      questinterfacePINVOKE.DBnpcspellseffects_Struct_numentries_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.DBnpcspellseffects_Struct_numentries_get(swigCPtr);
      return ret;
    } 
  }

  public DBnpcspellseffects_entries_Struct entries {
    set {
      questinterfacePINVOKE.DBnpcspellseffects_Struct_entries_set(swigCPtr, DBnpcspellseffects_entries_Struct.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.DBnpcspellseffects_Struct_entries_get(swigCPtr);
      DBnpcspellseffects_entries_Struct ret = (cPtr == global::System.IntPtr.Zero) ? null : new DBnpcspellseffects_entries_Struct(cPtr, false);
      return ret;
    } 
  }

  public DBnpcspellseffects_Struct() : this(questinterfacePINVOKE.new_DBnpcspellseffects_Struct(), true) {
  }

}

public class DBbotspells_entries_Struct : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DBbotspells_entries_Struct(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DBbotspells_entries_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(DBbotspells_entries_Struct obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~DBbotspells_entries_Struct() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_DBbotspells_entries_Struct(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ushort spellid {
    set {
      questinterfacePINVOKE.DBbotspells_entries_Struct_spellid_set(swigCPtr, value);
    } 
    get {
      ushort ret = questinterfacePINVOKE.DBbotspells_entries_Struct_spellid_get(swigCPtr);
      return ret;
    } 
  }

  public byte minlevel {
    set {
      questinterfacePINVOKE.DBbotspells_entries_Struct_minlevel_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.DBbotspells_entries_Struct_minlevel_get(swigCPtr);
      return ret;
    } 
  }

  public byte maxlevel {
    set {
      questinterfacePINVOKE.DBbotspells_entries_Struct_maxlevel_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.DBbotspells_entries_Struct_maxlevel_get(swigCPtr);
      return ret;
    } 
  }

  public uint type {
    set {
      questinterfacePINVOKE.DBbotspells_entries_Struct_type_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.DBbotspells_entries_Struct_type_get(swigCPtr);
      return ret;
    } 
  }

  public short manacost {
    set {
      questinterfacePINVOKE.DBbotspells_entries_Struct_manacost_set(swigCPtr, value);
    } 
    get {
      short ret = questinterfacePINVOKE.DBbotspells_entries_Struct_manacost_get(swigCPtr);
      return ret;
    } 
  }

  public short priority {
    set {
      questinterfacePINVOKE.DBbotspells_entries_Struct_priority_set(swigCPtr, value);
    } 
    get {
      short ret = questinterfacePINVOKE.DBbotspells_entries_Struct_priority_get(swigCPtr);
      return ret;
    } 
  }

  public int recast_delay {
    set {
      questinterfacePINVOKE.DBbotspells_entries_Struct_recast_delay_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.DBbotspells_entries_Struct_recast_delay_get(swigCPtr);
      return ret;
    } 
  }

  public short resist_adjust {
    set {
      questinterfacePINVOKE.DBbotspells_entries_Struct_resist_adjust_set(swigCPtr, value);
    } 
    get {
      short ret = questinterfacePINVOKE.DBbotspells_entries_Struct_resist_adjust_get(swigCPtr);
      return ret;
    } 
  }

  public sbyte min_hp {
    set {
      questinterfacePINVOKE.DBbotspells_entries_Struct_min_hp_set(swigCPtr, value);
    } 
    get {
      sbyte ret = questinterfacePINVOKE.DBbotspells_entries_Struct_min_hp_get(swigCPtr);
      return ret;
    } 
  }

  public sbyte max_hp {
    set {
      questinterfacePINVOKE.DBbotspells_entries_Struct_max_hp_set(swigCPtr, value);
    } 
    get {
      sbyte ret = questinterfacePINVOKE.DBbotspells_entries_Struct_max_hp_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__string bucket_name {
    set {
      questinterfacePINVOKE.DBbotspells_entries_Struct_bucket_name_set(swigCPtr, SWIGTYPE_p_std__string.getCPtr(value));
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(questinterfacePINVOKE.DBbotspells_entries_Struct_bucket_name_get(swigCPtr), true);
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_std__string bucket_value {
    set {
      questinterfacePINVOKE.DBbotspells_entries_Struct_bucket_value_set(swigCPtr, SWIGTYPE_p_std__string.getCPtr(value));
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(questinterfacePINVOKE.DBbotspells_entries_Struct_bucket_value_get(swigCPtr), true);
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public byte bucket_comparison {
    set {
      questinterfacePINVOKE.DBbotspells_entries_Struct_bucket_comparison_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.DBbotspells_entries_Struct_bucket_comparison_get(swigCPtr);
      return ret;
    } 
  }

  public DBbotspells_entries_Struct() : this(questinterfacePINVOKE.new_DBbotspells_entries_Struct(), true) {
  }

}

public class DBbotspells_Struct : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DBbotspells_Struct(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DBbotspells_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(DBbotspells_Struct obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~DBbotspells_Struct() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_DBbotspells_Struct(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public uint parent_list {
    set {
      questinterfacePINVOKE.DBbotspells_Struct_parent_list_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.DBbotspells_Struct_parent_list_get(swigCPtr);
      return ret;
    } 
  }

  public ushort attack_proc {
    set {
      questinterfacePINVOKE.DBbotspells_Struct_attack_proc_set(swigCPtr, value);
    } 
    get {
      ushort ret = questinterfacePINVOKE.DBbotspells_Struct_attack_proc_get(swigCPtr);
      return ret;
    } 
  }

  public byte proc_chance {
    set {
      questinterfacePINVOKE.DBbotspells_Struct_proc_chance_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.DBbotspells_Struct_proc_chance_get(swigCPtr);
      return ret;
    } 
  }

  public ushort range_proc {
    set {
      questinterfacePINVOKE.DBbotspells_Struct_range_proc_set(swigCPtr, value);
    } 
    get {
      ushort ret = questinterfacePINVOKE.DBbotspells_Struct_range_proc_get(swigCPtr);
      return ret;
    } 
  }

  public short rproc_chance {
    set {
      questinterfacePINVOKE.DBbotspells_Struct_rproc_chance_set(swigCPtr, value);
    } 
    get {
      short ret = questinterfacePINVOKE.DBbotspells_Struct_rproc_chance_get(swigCPtr);
      return ret;
    } 
  }

  public ushort defensive_proc {
    set {
      questinterfacePINVOKE.DBbotspells_Struct_defensive_proc_set(swigCPtr, value);
    } 
    get {
      ushort ret = questinterfacePINVOKE.DBbotspells_Struct_defensive_proc_get(swigCPtr);
      return ret;
    } 
  }

  public short dproc_chance {
    set {
      questinterfacePINVOKE.DBbotspells_Struct_dproc_chance_set(swigCPtr, value);
    } 
    get {
      short ret = questinterfacePINVOKE.DBbotspells_Struct_dproc_chance_get(swigCPtr);
      return ret;
    } 
  }

  public uint fail_recast {
    set {
      questinterfacePINVOKE.DBbotspells_Struct_fail_recast_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.DBbotspells_Struct_fail_recast_get(swigCPtr);
      return ret;
    } 
  }

  public uint engaged_no_sp_recast_min {
    set {
      questinterfacePINVOKE.DBbotspells_Struct_engaged_no_sp_recast_min_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.DBbotspells_Struct_engaged_no_sp_recast_min_get(swigCPtr);
      return ret;
    } 
  }

  public uint engaged_no_sp_recast_max {
    set {
      questinterfacePINVOKE.DBbotspells_Struct_engaged_no_sp_recast_max_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.DBbotspells_Struct_engaged_no_sp_recast_max_get(swigCPtr);
      return ret;
    } 
  }

  public byte engaged_beneficial_self_chance {
    set {
      questinterfacePINVOKE.DBbotspells_Struct_engaged_beneficial_self_chance_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.DBbotspells_Struct_engaged_beneficial_self_chance_get(swigCPtr);
      return ret;
    } 
  }

  public byte engaged_beneficial_other_chance {
    set {
      questinterfacePINVOKE.DBbotspells_Struct_engaged_beneficial_other_chance_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.DBbotspells_Struct_engaged_beneficial_other_chance_get(swigCPtr);
      return ret;
    } 
  }

  public byte engaged_detrimental_chance {
    set {
      questinterfacePINVOKE.DBbotspells_Struct_engaged_detrimental_chance_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.DBbotspells_Struct_engaged_detrimental_chance_get(swigCPtr);
      return ret;
    } 
  }

  public uint pursue_no_sp_recast_min {
    set {
      questinterfacePINVOKE.DBbotspells_Struct_pursue_no_sp_recast_min_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.DBbotspells_Struct_pursue_no_sp_recast_min_get(swigCPtr);
      return ret;
    } 
  }

  public uint pursue_no_sp_recast_max {
    set {
      questinterfacePINVOKE.DBbotspells_Struct_pursue_no_sp_recast_max_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.DBbotspells_Struct_pursue_no_sp_recast_max_get(swigCPtr);
      return ret;
    } 
  }

  public byte pursue_detrimental_chance {
    set {
      questinterfacePINVOKE.DBbotspells_Struct_pursue_detrimental_chance_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.DBbotspells_Struct_pursue_detrimental_chance_get(swigCPtr);
      return ret;
    } 
  }

  public uint idle_no_sp_recast_min {
    set {
      questinterfacePINVOKE.DBbotspells_Struct_idle_no_sp_recast_min_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.DBbotspells_Struct_idle_no_sp_recast_min_get(swigCPtr);
      return ret;
    } 
  }

  public uint idle_no_sp_recast_max {
    set {
      questinterfacePINVOKE.DBbotspells_Struct_idle_no_sp_recast_max_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.DBbotspells_Struct_idle_no_sp_recast_max_get(swigCPtr);
      return ret;
    } 
  }

  public byte idle_beneficial_chance {
    set {
      questinterfacePINVOKE.DBbotspells_Struct_idle_beneficial_chance_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.DBbotspells_Struct_idle_beneficial_chance_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_DBbotspells_entries_Struct_t entries {
    set {
      questinterfacePINVOKE.DBbotspells_Struct_entries_set(swigCPtr, SWIGTYPE_p_std__vectorT_DBbotspells_entries_Struct_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.DBbotspells_Struct_entries_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_DBbotspells_entries_Struct_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_DBbotspells_entries_Struct_t(cPtr, false);
      return ret;
    } 
  }

  public DBbotspells_Struct() : this(questinterfacePINVOKE.new_DBbotspells_Struct(), true) {
  }

}

public class DBTradeskillRecipe_Struct : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DBTradeskillRecipe_Struct(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DBTradeskillRecipe_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(DBTradeskillRecipe_Struct obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~DBTradeskillRecipe_Struct() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_DBTradeskillRecipe_Struct(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SWIGTYPE_p_EQ__skills__SkillType tradeskill {
    set {
      questinterfacePINVOKE.DBTradeskillRecipe_Struct_tradeskill_set(swigCPtr, SWIGTYPE_p_EQ__skills__SkillType.getCPtr(value));
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_EQ__skills__SkillType ret = new SWIGTYPE_p_EQ__skills__SkillType(questinterfacePINVOKE.DBTradeskillRecipe_Struct_tradeskill_get(swigCPtr), true);
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public short skill_needed {
    set {
      questinterfacePINVOKE.DBTradeskillRecipe_Struct_skill_needed_set(swigCPtr, value);
    } 
    get {
      short ret = questinterfacePINVOKE.DBTradeskillRecipe_Struct_skill_needed_get(swigCPtr);
      return ret;
    } 
  }

  public ushort trivial {
    set {
      questinterfacePINVOKE.DBTradeskillRecipe_Struct_trivial_set(swigCPtr, value);
    } 
    get {
      ushort ret = questinterfacePINVOKE.DBTradeskillRecipe_Struct_trivial_get(swigCPtr);
      return ret;
    } 
  }

  public bool nofail {
    set {
      questinterfacePINVOKE.DBTradeskillRecipe_Struct_nofail_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.DBTradeskillRecipe_Struct_nofail_get(swigCPtr);
      return ret;
    } 
  }

  public bool replace_container {
    set {
      questinterfacePINVOKE.DBTradeskillRecipe_Struct_replace_container_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.DBTradeskillRecipe_Struct_replace_container_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_char_t_t onsuccess {
    set {
      questinterfacePINVOKE.DBTradeskillRecipe_Struct_onsuccess_set(swigCPtr, SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_char_t_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.DBTradeskillRecipe_Struct_onsuccess_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_char_t_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_char_t_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_char_t_t onfail {
    set {
      questinterfacePINVOKE.DBTradeskillRecipe_Struct_onfail_set(swigCPtr, SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_char_t_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.DBTradeskillRecipe_Struct_onfail_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_char_t_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_char_t_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_char_t_t salvage {
    set {
      questinterfacePINVOKE.DBTradeskillRecipe_Struct_salvage_set(swigCPtr, SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_char_t_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.DBTradeskillRecipe_Struct_salvage_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_char_t_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_char_t_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__string name {
    set {
      questinterfacePINVOKE.DBTradeskillRecipe_Struct_name_set(swigCPtr, SWIGTYPE_p_std__string.getCPtr(value));
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(questinterfacePINVOKE.DBTradeskillRecipe_Struct_name_get(swigCPtr), true);
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public byte must_learn {
    set {
      questinterfacePINVOKE.DBTradeskillRecipe_Struct_must_learn_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.DBTradeskillRecipe_Struct_must_learn_get(swigCPtr);
      return ret;
    } 
  }

  public bool has_learnt {
    set {
      questinterfacePINVOKE.DBTradeskillRecipe_Struct_has_learnt_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.DBTradeskillRecipe_Struct_has_learnt_get(swigCPtr);
      return ret;
    } 
  }

  public uint madecount {
    set {
      questinterfacePINVOKE.DBTradeskillRecipe_Struct_madecount_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.DBTradeskillRecipe_Struct_madecount_get(swigCPtr);
      return ret;
    } 
  }

  public uint recipe_id {
    set {
      questinterfacePINVOKE.DBTradeskillRecipe_Struct_recipe_id_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.DBTradeskillRecipe_Struct_recipe_id_get(swigCPtr);
      return ret;
    } 
  }

  public bool quest {
    set {
      questinterfacePINVOKE.DBTradeskillRecipe_Struct_quest_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.DBTradeskillRecipe_Struct_quest_get(swigCPtr);
      return ret;
    } 
  }

  public DBTradeskillRecipe_Struct() : this(questinterfacePINVOKE.new_DBTradeskillRecipe_Struct(), true) {
  }

}

public class PetRecord : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PetRecord(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PetRecord obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(PetRecord obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~PetRecord() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_PetRecord(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public uint npc_type {
    set {
      questinterfacePINVOKE.PetRecord_npc_type_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.PetRecord_npc_type_get(swigCPtr);
      return ret;
    } 
  }

  public bool temporary {
    set {
      questinterfacePINVOKE.PetRecord_temporary_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.PetRecord_temporary_get(swigCPtr);
      return ret;
    } 
  }

  public short petpower {
    set {
      questinterfacePINVOKE.PetRecord_petpower_set(swigCPtr, value);
    } 
    get {
      short ret = questinterfacePINVOKE.PetRecord_petpower_get(swigCPtr);
      return ret;
    } 
  }

  public byte petcontrol {
    set {
      questinterfacePINVOKE.PetRecord_petcontrol_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.PetRecord_petcontrol_get(swigCPtr);
      return ret;
    } 
  }

  public byte petnaming {
    set {
      questinterfacePINVOKE.PetRecord_petnaming_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.PetRecord_petnaming_get(swigCPtr);
      return ret;
    } 
  }

  public bool monsterflag {
    set {
      questinterfacePINVOKE.PetRecord_monsterflag_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.PetRecord_monsterflag_get(swigCPtr);
      return ret;
    } 
  }

  public uint equipmentset {
    set {
      questinterfacePINVOKE.PetRecord_equipmentset_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.PetRecord_equipmentset_get(swigCPtr);
      return ret;
    } 
  }

  public PetRecord() : this(questinterfacePINVOKE.new_PetRecord(), true) {
  }

}

public class AuraRecord : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal AuraRecord(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AuraRecord obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(AuraRecord obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~AuraRecord() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_AuraRecord(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public uint npc_type {
    set {
      questinterfacePINVOKE.AuraRecord_npc_type_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.AuraRecord_npc_type_get(swigCPtr);
      return ret;
    } 
  }

  public string name {
    set {
      questinterfacePINVOKE.AuraRecord_name_set(swigCPtr, value);
    } 
    get {
      string ret = questinterfacePINVOKE.AuraRecord_name_get(swigCPtr);
      return ret;
    } 
  }

  public int spell_id {
    set {
      questinterfacePINVOKE.AuraRecord_spell_id_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.AuraRecord_spell_id_get(swigCPtr);
      return ret;
    } 
  }

  public int distance {
    set {
      questinterfacePINVOKE.AuraRecord_distance_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.AuraRecord_distance_get(swigCPtr);
      return ret;
    } 
  }

  public int aura_type {
    set {
      questinterfacePINVOKE.AuraRecord_aura_type_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.AuraRecord_aura_type_get(swigCPtr);
      return ret;
    } 
  }

  public int spawn_type {
    set {
      questinterfacePINVOKE.AuraRecord_spawn_type_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.AuraRecord_spawn_type_get(swigCPtr);
      return ret;
    } 
  }

  public int movement {
    set {
      questinterfacePINVOKE.AuraRecord_movement_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.AuraRecord_movement_get(swigCPtr);
      return ret;
    } 
  }

  public int duration {
    set {
      questinterfacePINVOKE.AuraRecord_duration_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.AuraRecord_duration_get(swigCPtr);
      return ret;
    } 
  }

  public int icon {
    set {
      questinterfacePINVOKE.AuraRecord_icon_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.AuraRecord_icon_get(swigCPtr);
      return ret;
    } 
  }

  public int cast_time {
    set {
      questinterfacePINVOKE.AuraRecord_cast_time_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.AuraRecord_cast_time_get(swigCPtr);
      return ret;
    } 
  }

  public AuraRecord() : this(questinterfacePINVOKE.new_AuraRecord(), true) {
  }

}

public class PetInfo : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PetInfo(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PetInfo obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(PetInfo obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~PetInfo() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_PetInfo(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ushort SpellID {
    set {
      questinterfacePINVOKE.PetInfo_SpellID_set(swigCPtr, value);
    } 
    get {
      ushort ret = questinterfacePINVOKE.PetInfo_SpellID_get(swigCPtr);
      return ret;
    } 
  }

  public short petpower {
    set {
      questinterfacePINVOKE.PetInfo_petpower_set(swigCPtr, value);
    } 
    get {
      short ret = questinterfacePINVOKE.PetInfo_petpower_get(swigCPtr);
      return ret;
    } 
  }

  public uint HP {
    set {
      questinterfacePINVOKE.PetInfo_HP_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.PetInfo_HP_get(swigCPtr);
      return ret;
    } 
  }

  public uint Mana {
    set {
      questinterfacePINVOKE.PetInfo_Mana_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.PetInfo_Mana_get(swigCPtr);
      return ret;
    } 
  }

  public float size {
    set {
      questinterfacePINVOKE.PetInfo_size_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.PetInfo_size_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_SpellBuff_Struct Buffs {
    set {
      questinterfacePINVOKE.PetInfo_Buffs_set(swigCPtr, SWIGTYPE_p_SpellBuff_Struct.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.PetInfo_Buffs_get(swigCPtr);
      SWIGTYPE_p_SpellBuff_Struct ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_SpellBuff_Struct(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_int Items {
    set {
      questinterfacePINVOKE.PetInfo_Items_set(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.PetInfo_Items_get(swigCPtr);
      SWIGTYPE_p_unsigned_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
      return ret;
    } 
  }

  public string Name {
    set {
      questinterfacePINVOKE.PetInfo_Name_set(swigCPtr, value);
    } 
    get {
      string ret = questinterfacePINVOKE.PetInfo_Name_get(swigCPtr);
      return ret;
    } 
  }

  public bool taunting {
    set {
      questinterfacePINVOKE.PetInfo_taunting_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.PetInfo_taunting_get(swigCPtr);
      return ret;
    } 
  }

  public PetInfo() : this(questinterfacePINVOKE.new_PetInfo(), true) {
  }

}

public class ZoneSpellsBlocked : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ZoneSpellsBlocked(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ZoneSpellsBlocked obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ZoneSpellsBlocked obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ZoneSpellsBlocked() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_ZoneSpellsBlocked(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public uint spellid {
    set {
      questinterfacePINVOKE.ZoneSpellsBlocked_spellid_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.ZoneSpellsBlocked_spellid_get(swigCPtr);
      return ret;
    } 
  }

  public sbyte type {
    set {
      questinterfacePINVOKE.ZoneSpellsBlocked_type_set(swigCPtr, value);
    } 
    get {
      sbyte ret = questinterfacePINVOKE.ZoneSpellsBlocked_type_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_glm__vec3 m_Location {
    set {
      questinterfacePINVOKE.ZoneSpellsBlocked_m_Location_set(swigCPtr, SWIGTYPE_p_glm__vec3.getCPtr(value));
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_glm__vec3 ret = new SWIGTYPE_p_glm__vec3(questinterfacePINVOKE.ZoneSpellsBlocked_m_Location_get(swigCPtr), true);
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_glm__vec3 m_Difference {
    set {
      questinterfacePINVOKE.ZoneSpellsBlocked_m_Difference_set(swigCPtr, SWIGTYPE_p_glm__vec3.getCPtr(value));
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_glm__vec3 ret = new SWIGTYPE_p_glm__vec3(questinterfacePINVOKE.ZoneSpellsBlocked_m_Difference_get(swigCPtr), true);
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string message {
    set {
      questinterfacePINVOKE.ZoneSpellsBlocked_message_set(swigCPtr, value);
    } 
    get {
      string ret = questinterfacePINVOKE.ZoneSpellsBlocked_message_get(swigCPtr);
      return ret;
    } 
  }

  public ZoneSpellsBlocked() : this(questinterfacePINVOKE.new_ZoneSpellsBlocked(), true) {
  }

}

public class TraderCharges_Struct : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal TraderCharges_Struct(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TraderCharges_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(TraderCharges_Struct obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~TraderCharges_Struct() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_TraderCharges_Struct(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SWIGTYPE_p_unsigned_int ItemID {
    set {
      questinterfacePINVOKE.TraderCharges_Struct_ItemID_set(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.TraderCharges_Struct_ItemID_get(swigCPtr);
      SWIGTYPE_p_unsigned_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int SerialNumber {
    set {
      questinterfacePINVOKE.TraderCharges_Struct_SerialNumber_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.TraderCharges_Struct_SerialNumber_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_int ItemCost {
    set {
      questinterfacePINVOKE.TraderCharges_Struct_ItemCost_set(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.TraderCharges_Struct_ItemCost_get(swigCPtr);
      SWIGTYPE_p_unsigned_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int Charges {
    set {
      questinterfacePINVOKE.TraderCharges_Struct_Charges_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.TraderCharges_Struct_Charges_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public TraderCharges_Struct() : this(questinterfacePINVOKE.new_TraderCharges_Struct(), true) {
  }

}

public class MercStanceInfo : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MercStanceInfo(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MercStanceInfo obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(MercStanceInfo obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~MercStanceInfo() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_MercStanceInfo(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public byte ProficiencyID {
    set {
      questinterfacePINVOKE.MercStanceInfo_ProficiencyID_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.MercStanceInfo_ProficiencyID_get(swigCPtr);
      return ret;
    } 
  }

  public byte ClassID {
    set {
      questinterfacePINVOKE.MercStanceInfo_ClassID_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.MercStanceInfo_ClassID_get(swigCPtr);
      return ret;
    } 
  }

  public uint StanceID {
    set {
      questinterfacePINVOKE.MercStanceInfo_StanceID_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.MercStanceInfo_StanceID_get(swigCPtr);
      return ret;
    } 
  }

  public byte IsDefault {
    set {
      questinterfacePINVOKE.MercStanceInfo_IsDefault_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.MercStanceInfo_IsDefault_get(swigCPtr);
      return ret;
    } 
  }

  public MercStanceInfo() : this(questinterfacePINVOKE.new_MercStanceInfo(), true) {
  }

}

public class MercTemplate : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MercTemplate(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MercTemplate obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(MercTemplate obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~MercTemplate() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_MercTemplate(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public uint MercTemplateID {
    set {
      questinterfacePINVOKE.MercTemplate_MercTemplateID_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.MercTemplate_MercTemplateID_get(swigCPtr);
      return ret;
    } 
  }

  public uint MercType {
    set {
      questinterfacePINVOKE.MercTemplate_MercType_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.MercTemplate_MercType_get(swigCPtr);
      return ret;
    } 
  }

  public uint MercSubType {
    set {
      questinterfacePINVOKE.MercTemplate_MercSubType_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.MercTemplate_MercSubType_get(swigCPtr);
      return ret;
    } 
  }

  public ushort RaceID {
    set {
      questinterfacePINVOKE.MercTemplate_RaceID_set(swigCPtr, value);
    } 
    get {
      ushort ret = questinterfacePINVOKE.MercTemplate_RaceID_get(swigCPtr);
      return ret;
    } 
  }

  public byte ClassID {
    set {
      questinterfacePINVOKE.MercTemplate_ClassID_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.MercTemplate_ClassID_get(swigCPtr);
      return ret;
    } 
  }

  public uint MercNPCID {
    set {
      questinterfacePINVOKE.MercTemplate_MercNPCID_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.MercTemplate_MercNPCID_get(swigCPtr);
      return ret;
    } 
  }

  public byte ProficiencyID {
    set {
      questinterfacePINVOKE.MercTemplate_ProficiencyID_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.MercTemplate_ProficiencyID_get(swigCPtr);
      return ret;
    } 
  }

  public byte TierID {
    set {
      questinterfacePINVOKE.MercTemplate_TierID_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.MercTemplate_TierID_get(swigCPtr);
      return ret;
    } 
  }

  public byte CostFormula {
    set {
      questinterfacePINVOKE.MercTemplate_CostFormula_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.MercTemplate_CostFormula_get(swigCPtr);
      return ret;
    } 
  }

  public uint ClientVersion {
    set {
      questinterfacePINVOKE.MercTemplate_ClientVersion_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.MercTemplate_ClientVersion_get(swigCPtr);
      return ret;
    } 
  }

  public byte MercNameType {
    set {
      questinterfacePINVOKE.MercTemplate_MercNameType_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.MercTemplate_MercNameType_get(swigCPtr);
      return ret;
    } 
  }

  public string MercNamePrefix {
    set {
      questinterfacePINVOKE.MercTemplate_MercNamePrefix_set(swigCPtr, value);
    } 
    get {
      string ret = questinterfacePINVOKE.MercTemplate_MercNamePrefix_get(swigCPtr);
      return ret;
    } 
  }

  public string MercNameSuffix {
    set {
      questinterfacePINVOKE.MercTemplate_MercNameSuffix_set(swigCPtr, value);
    } 
    get {
      string ret = questinterfacePINVOKE.MercTemplate_MercNameSuffix_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_int Stances {
    set {
      questinterfacePINVOKE.MercTemplate_Stances_set(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.MercTemplate_Stances_get(swigCPtr);
      SWIGTYPE_p_unsigned_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
      return ret;
    } 
  }

  public MercTemplate() : this(questinterfacePINVOKE.new_MercTemplate(), true) {
  }

}

public class MercInfo : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MercInfo(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MercInfo obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(MercInfo obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~MercInfo() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_MercInfo(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public uint mercid {
    set {
      questinterfacePINVOKE.MercInfo_mercid_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.MercInfo_mercid_get(swigCPtr);
      return ret;
    } 
  }

  public byte slot {
    set {
      questinterfacePINVOKE.MercInfo_slot_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.MercInfo_slot_get(swigCPtr);
      return ret;
    } 
  }

  public string merc_name {
    set {
      questinterfacePINVOKE.MercInfo_merc_name_set(swigCPtr, value);
    } 
    get {
      string ret = questinterfacePINVOKE.MercInfo_merc_name_get(swigCPtr);
      return ret;
    } 
  }

  public uint MercTemplateID {
    set {
      questinterfacePINVOKE.MercInfo_MercTemplateID_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.MercInfo_MercTemplateID_get(swigCPtr);
      return ret;
    } 
  }

  public MercTemplate myTemplate {
    set {
      questinterfacePINVOKE.MercInfo_myTemplate_set(swigCPtr, MercTemplate.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.MercInfo_myTemplate_get(swigCPtr);
      MercTemplate ret = (cPtr == global::System.IntPtr.Zero) ? null : new MercTemplate(cPtr, false);
      return ret;
    } 
  }

  public uint SuspendedTime {
    set {
      questinterfacePINVOKE.MercInfo_SuspendedTime_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.MercInfo_SuspendedTime_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsSuspended {
    set {
      questinterfacePINVOKE.MercInfo_IsSuspended_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.MercInfo_IsSuspended_get(swigCPtr);
      return ret;
    } 
  }

  public uint MercTimerRemaining {
    set {
      questinterfacePINVOKE.MercInfo_MercTimerRemaining_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.MercInfo_MercTimerRemaining_get(swigCPtr);
      return ret;
    } 
  }

  public byte Gender {
    set {
      questinterfacePINVOKE.MercInfo_Gender_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.MercInfo_Gender_get(swigCPtr);
      return ret;
    } 
  }

  public float MercSize {
    set {
      questinterfacePINVOKE.MercInfo_MercSize_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.MercInfo_MercSize_get(swigCPtr);
      return ret;
    } 
  }

  public int State {
    set {
      questinterfacePINVOKE.MercInfo_State_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.MercInfo_State_get(swigCPtr);
      return ret;
    } 
  }

  public uint Stance {
    set {
      questinterfacePINVOKE.MercInfo_Stance_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.MercInfo_Stance_get(swigCPtr);
      return ret;
    } 
  }

  public int hp {
    set {
      questinterfacePINVOKE.MercInfo_hp_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.MercInfo_hp_get(swigCPtr);
      return ret;
    } 
  }

  public int mana {
    set {
      questinterfacePINVOKE.MercInfo_mana_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.MercInfo_mana_get(swigCPtr);
      return ret;
    } 
  }

  public int endurance {
    set {
      questinterfacePINVOKE.MercInfo_endurance_set(swigCPtr, value);
    } 
    get {
      int ret = questinterfacePINVOKE.MercInfo_endurance_get(swigCPtr);
      return ret;
    } 
  }

  public byte face {
    set {
      questinterfacePINVOKE.MercInfo_face_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.MercInfo_face_get(swigCPtr);
      return ret;
    } 
  }

  public byte luclinHairStyle {
    set {
      questinterfacePINVOKE.MercInfo_luclinHairStyle_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.MercInfo_luclinHairStyle_get(swigCPtr);
      return ret;
    } 
  }

  public byte luclinHairColor {
    set {
      questinterfacePINVOKE.MercInfo_luclinHairColor_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.MercInfo_luclinHairColor_get(swigCPtr);
      return ret;
    } 
  }

  public byte luclinEyeColor {
    set {
      questinterfacePINVOKE.MercInfo_luclinEyeColor_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.MercInfo_luclinEyeColor_get(swigCPtr);
      return ret;
    } 
  }

  public byte luclinEyeColor2 {
    set {
      questinterfacePINVOKE.MercInfo_luclinEyeColor2_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.MercInfo_luclinEyeColor2_get(swigCPtr);
      return ret;
    } 
  }

  public byte luclinBeardColor {
    set {
      questinterfacePINVOKE.MercInfo_luclinBeardColor_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.MercInfo_luclinBeardColor_get(swigCPtr);
      return ret;
    } 
  }

  public byte luclinBeard {
    set {
      questinterfacePINVOKE.MercInfo_luclinBeard_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.MercInfo_luclinBeard_get(swigCPtr);
      return ret;
    } 
  }

  public uint drakkinHeritage {
    set {
      questinterfacePINVOKE.MercInfo_drakkinHeritage_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.MercInfo_drakkinHeritage_get(swigCPtr);
      return ret;
    } 
  }

  public uint drakkinTattoo {
    set {
      questinterfacePINVOKE.MercInfo_drakkinTattoo_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.MercInfo_drakkinTattoo_get(swigCPtr);
      return ret;
    } 
  }

  public uint drakkinDetails {
    set {
      questinterfacePINVOKE.MercInfo_drakkinDetails_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.MercInfo_drakkinDetails_get(swigCPtr);
      return ret;
    } 
  }

  public MercInfo() : this(questinterfacePINVOKE.new_MercInfo(), true) {
  }

}

public class MercSpellEntry : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MercSpellEntry(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MercSpellEntry obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(MercSpellEntry obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~MercSpellEntry() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_MercSpellEntry(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public byte proficiencyid {
    set {
      questinterfacePINVOKE.MercSpellEntry_proficiencyid_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.MercSpellEntry_proficiencyid_get(swigCPtr);
      return ret;
    } 
  }

  public ushort spellid {
    set {
      questinterfacePINVOKE.MercSpellEntry_spellid_set(swigCPtr, value);
    } 
    get {
      ushort ret = questinterfacePINVOKE.MercSpellEntry_spellid_get(swigCPtr);
      return ret;
    } 
  }

  public uint type {
    set {
      questinterfacePINVOKE.MercSpellEntry_type_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.MercSpellEntry_type_get(swigCPtr);
      return ret;
    } 
  }

  public short stance {
    set {
      questinterfacePINVOKE.MercSpellEntry_stance_set(swigCPtr, value);
    } 
    get {
      short ret = questinterfacePINVOKE.MercSpellEntry_stance_get(swigCPtr);
      return ret;
    } 
  }

  public byte minlevel {
    set {
      questinterfacePINVOKE.MercSpellEntry_minlevel_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.MercSpellEntry_minlevel_get(swigCPtr);
      return ret;
    } 
  }

  public byte maxlevel {
    set {
      questinterfacePINVOKE.MercSpellEntry_maxlevel_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.MercSpellEntry_maxlevel_get(swigCPtr);
      return ret;
    } 
  }

  public short slot {
    set {
      questinterfacePINVOKE.MercSpellEntry_slot_set(swigCPtr, value);
    } 
    get {
      short ret = questinterfacePINVOKE.MercSpellEntry_slot_get(swigCPtr);
      return ret;
    } 
  }

  public ushort proc_chance {
    set {
      questinterfacePINVOKE.MercSpellEntry_proc_chance_set(swigCPtr, value);
    } 
    get {
      ushort ret = questinterfacePINVOKE.MercSpellEntry_proc_chance_get(swigCPtr);
      return ret;
    } 
  }

  public uint time_cancast {
    set {
      questinterfacePINVOKE.MercSpellEntry_time_cancast_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.MercSpellEntry_time_cancast_get(swigCPtr);
      return ret;
    } 
  }

  public MercSpellEntry() : this(questinterfacePINVOKE.new_MercSpellEntry(), true) {
  }

}

public class ClientMercEntry : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ClientMercEntry(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ClientMercEntry obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ClientMercEntry obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ClientMercEntry() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_ClientMercEntry(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public uint id {
    set {
      questinterfacePINVOKE.ClientMercEntry_id_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.ClientMercEntry_id_get(swigCPtr);
      return ret;
    } 
  }

  public uint npcid {
    set {
      questinterfacePINVOKE.ClientMercEntry_npcid_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.ClientMercEntry_npcid_get(swigCPtr);
      return ret;
    } 
  }

  public ClientMercEntry() : this(questinterfacePINVOKE.new_ClientMercEntry(), true) {
  }

}

public class CharacterCorpseItemEntry : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CharacterCorpseItemEntry(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CharacterCorpseItemEntry obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(CharacterCorpseItemEntry obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~CharacterCorpseItemEntry() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_CharacterCorpseItemEntry(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public uint item_id {
    set {
      questinterfacePINVOKE.CharacterCorpseItemEntry_item_id_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.CharacterCorpseItemEntry_item_id_get(swigCPtr);
      return ret;
    } 
  }

  public short equip_slot {
    set {
      questinterfacePINVOKE.CharacterCorpseItemEntry_equip_slot_set(swigCPtr, value);
    } 
    get {
      short ret = questinterfacePINVOKE.CharacterCorpseItemEntry_equip_slot_get(swigCPtr);
      return ret;
    } 
  }

  public ushort charges {
    set {
      questinterfacePINVOKE.CharacterCorpseItemEntry_charges_set(swigCPtr, value);
    } 
    get {
      ushort ret = questinterfacePINVOKE.CharacterCorpseItemEntry_charges_get(swigCPtr);
      return ret;
    } 
  }

  public ushort lootslot {
    set {
      questinterfacePINVOKE.CharacterCorpseItemEntry_lootslot_set(swigCPtr, value);
    } 
    get {
      ushort ret = questinterfacePINVOKE.CharacterCorpseItemEntry_lootslot_get(swigCPtr);
      return ret;
    } 
  }

  public uint aug_1 {
    set {
      questinterfacePINVOKE.CharacterCorpseItemEntry_aug_1_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.CharacterCorpseItemEntry_aug_1_get(swigCPtr);
      return ret;
    } 
  }

  public uint aug_2 {
    set {
      questinterfacePINVOKE.CharacterCorpseItemEntry_aug_2_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.CharacterCorpseItemEntry_aug_2_get(swigCPtr);
      return ret;
    } 
  }

  public uint aug_3 {
    set {
      questinterfacePINVOKE.CharacterCorpseItemEntry_aug_3_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.CharacterCorpseItemEntry_aug_3_get(swigCPtr);
      return ret;
    } 
  }

  public uint aug_4 {
    set {
      questinterfacePINVOKE.CharacterCorpseItemEntry_aug_4_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.CharacterCorpseItemEntry_aug_4_get(swigCPtr);
      return ret;
    } 
  }

  public uint aug_5 {
    set {
      questinterfacePINVOKE.CharacterCorpseItemEntry_aug_5_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.CharacterCorpseItemEntry_aug_5_get(swigCPtr);
      return ret;
    } 
  }

  public uint aug_6 {
    set {
      questinterfacePINVOKE.CharacterCorpseItemEntry_aug_6_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.CharacterCorpseItemEntry_aug_6_get(swigCPtr);
      return ret;
    } 
  }

  public bool attuned {
    set {
      questinterfacePINVOKE.CharacterCorpseItemEntry_attuned_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.CharacterCorpseItemEntry_attuned_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__string custom_data {
    set {
      questinterfacePINVOKE.CharacterCorpseItemEntry_custom_data_set(swigCPtr, SWIGTYPE_p_std__string.getCPtr(value));
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(questinterfacePINVOKE.CharacterCorpseItemEntry_custom_data_get(swigCPtr), true);
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public uint ornamenticon {
    set {
      questinterfacePINVOKE.CharacterCorpseItemEntry_ornamenticon_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.CharacterCorpseItemEntry_ornamenticon_get(swigCPtr);
      return ret;
    } 
  }

  public uint ornamentidfile {
    set {
      questinterfacePINVOKE.CharacterCorpseItemEntry_ornamentidfile_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.CharacterCorpseItemEntry_ornamentidfile_get(swigCPtr);
      return ret;
    } 
  }

  public uint ornament_hero_model {
    set {
      questinterfacePINVOKE.CharacterCorpseItemEntry_ornament_hero_model_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.CharacterCorpseItemEntry_ornament_hero_model_get(swigCPtr);
      return ret;
    } 
  }

  public CharacterCorpseItemEntry() : this(questinterfacePINVOKE.new_CharacterCorpseItemEntry(), true) {
  }

}

public class CharacterCorpseEntry : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CharacterCorpseEntry(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CharacterCorpseEntry obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(CharacterCorpseEntry obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~CharacterCorpseEntry() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_CharacterCorpseEntry(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public bool locked {
    set {
      questinterfacePINVOKE.CharacterCorpseEntry_locked_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.CharacterCorpseEntry_locked_get(swigCPtr);
      return ret;
    } 
  }

  public ulong exp {
    set {
      questinterfacePINVOKE.CharacterCorpseEntry_exp_set(swigCPtr, value);
    } 
    get {
      ulong ret = questinterfacePINVOKE.CharacterCorpseEntry_exp_get(swigCPtr);
      return ret;
    } 
  }

  public ulong gm_exp {
    set {
      questinterfacePINVOKE.CharacterCorpseEntry_gm_exp_set(swigCPtr, value);
    } 
    get {
      ulong ret = questinterfacePINVOKE.CharacterCorpseEntry_gm_exp_get(swigCPtr);
      return ret;
    } 
  }

  public float size {
    set {
      questinterfacePINVOKE.CharacterCorpseEntry_size_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.CharacterCorpseEntry_size_get(swigCPtr);
      return ret;
    } 
  }

  public byte level {
    set {
      questinterfacePINVOKE.CharacterCorpseEntry_level_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.CharacterCorpseEntry_level_get(swigCPtr);
      return ret;
    } 
  }

  public uint race {
    set {
      questinterfacePINVOKE.CharacterCorpseEntry_race_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.CharacterCorpseEntry_race_get(swigCPtr);
      return ret;
    } 
  }

  public byte gender {
    set {
      questinterfacePINVOKE.CharacterCorpseEntry_gender_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.CharacterCorpseEntry_gender_get(swigCPtr);
      return ret;
    } 
  }

  public byte class_ {
    set {
      questinterfacePINVOKE.CharacterCorpseEntry_class__set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.CharacterCorpseEntry_class__get(swigCPtr);
      return ret;
    } 
  }

  public byte deity {
    set {
      questinterfacePINVOKE.CharacterCorpseEntry_deity_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.CharacterCorpseEntry_deity_get(swigCPtr);
      return ret;
    } 
  }

  public byte texture {
    set {
      questinterfacePINVOKE.CharacterCorpseEntry_texture_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.CharacterCorpseEntry_texture_get(swigCPtr);
      return ret;
    } 
  }

  public byte helmtexture {
    set {
      questinterfacePINVOKE.CharacterCorpseEntry_helmtexture_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.CharacterCorpseEntry_helmtexture_get(swigCPtr);
      return ret;
    } 
  }

  public uint copper {
    set {
      questinterfacePINVOKE.CharacterCorpseEntry_copper_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.CharacterCorpseEntry_copper_get(swigCPtr);
      return ret;
    } 
  }

  public uint silver {
    set {
      questinterfacePINVOKE.CharacterCorpseEntry_silver_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.CharacterCorpseEntry_silver_get(swigCPtr);
      return ret;
    } 
  }

  public uint gold {
    set {
      questinterfacePINVOKE.CharacterCorpseEntry_gold_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.CharacterCorpseEntry_gold_get(swigCPtr);
      return ret;
    } 
  }

  public uint plat {
    set {
      questinterfacePINVOKE.CharacterCorpseEntry_plat_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.CharacterCorpseEntry_plat_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_EQ__TintProfile item_tint {
    set {
      questinterfacePINVOKE.CharacterCorpseEntry_item_tint_set(swigCPtr, SWIGTYPE_p_EQ__TintProfile.getCPtr(value));
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_EQ__TintProfile ret = new SWIGTYPE_p_EQ__TintProfile(questinterfacePINVOKE.CharacterCorpseEntry_item_tint_get(swigCPtr), true);
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public byte haircolor {
    set {
      questinterfacePINVOKE.CharacterCorpseEntry_haircolor_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.CharacterCorpseEntry_haircolor_get(swigCPtr);
      return ret;
    } 
  }

  public byte beardcolor {
    set {
      questinterfacePINVOKE.CharacterCorpseEntry_beardcolor_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.CharacterCorpseEntry_beardcolor_get(swigCPtr);
      return ret;
    } 
  }

  public byte eyecolor1 {
    set {
      questinterfacePINVOKE.CharacterCorpseEntry_eyecolor1_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.CharacterCorpseEntry_eyecolor1_get(swigCPtr);
      return ret;
    } 
  }

  public byte eyecolor2 {
    set {
      questinterfacePINVOKE.CharacterCorpseEntry_eyecolor2_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.CharacterCorpseEntry_eyecolor2_get(swigCPtr);
      return ret;
    } 
  }

  public byte hairstyle {
    set {
      questinterfacePINVOKE.CharacterCorpseEntry_hairstyle_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.CharacterCorpseEntry_hairstyle_get(swigCPtr);
      return ret;
    } 
  }

  public byte face {
    set {
      questinterfacePINVOKE.CharacterCorpseEntry_face_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.CharacterCorpseEntry_face_get(swigCPtr);
      return ret;
    } 
  }

  public byte beard {
    set {
      questinterfacePINVOKE.CharacterCorpseEntry_beard_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.CharacterCorpseEntry_beard_get(swigCPtr);
      return ret;
    } 
  }

  public byte killed_by {
    set {
      questinterfacePINVOKE.CharacterCorpseEntry_killed_by_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.CharacterCorpseEntry_killed_by_get(swigCPtr);
      return ret;
    } 
  }

  public bool rezzable {
    set {
      questinterfacePINVOKE.CharacterCorpseEntry_rezzable_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.CharacterCorpseEntry_rezzable_get(swigCPtr);
      return ret;
    } 
  }

  public uint rez_time {
    set {
      questinterfacePINVOKE.CharacterCorpseEntry_rez_time_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.CharacterCorpseEntry_rez_time_get(swigCPtr);
      return ret;
    } 
  }

  public uint drakkin_heritage {
    set {
      questinterfacePINVOKE.CharacterCorpseEntry_drakkin_heritage_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.CharacterCorpseEntry_drakkin_heritage_get(swigCPtr);
      return ret;
    } 
  }

  public uint drakkin_tattoo {
    set {
      questinterfacePINVOKE.CharacterCorpseEntry_drakkin_tattoo_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.CharacterCorpseEntry_drakkin_tattoo_get(swigCPtr);
      return ret;
    } 
  }

  public uint drakkin_details {
    set {
      questinterfacePINVOKE.CharacterCorpseEntry_drakkin_details_set(swigCPtr, value);
    } 
    get {
      uint ret = questinterfacePINVOKE.CharacterCorpseEntry_drakkin_details_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_CharacterCorpseItemEntry_t items {
    set {
      questinterfacePINVOKE.CharacterCorpseEntry_items_set(swigCPtr, SWIGTYPE_p_std__vectorT_CharacterCorpseItemEntry_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.CharacterCorpseEntry_items_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_CharacterCorpseItemEntry_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_CharacterCorpseItemEntry_t(cPtr, false);
      return ret;
    } 
  }

  public CharacterCorpseEntry() : this(questinterfacePINVOKE.new_CharacterCorpseEntry(), true) {
  }

}

public class PetStruct : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PetStruct(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PetStruct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(PetStruct obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~PetStruct() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_PetStruct(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ushort race_id {
    set {
      questinterfacePINVOKE.PetStruct_race_id_set(swigCPtr, value);
    } 
    get {
      ushort ret = questinterfacePINVOKE.PetStruct_race_id_get(swigCPtr);
      return ret;
    } 
  }

  public byte texture {
    set {
      questinterfacePINVOKE.PetStruct_texture_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.PetStruct_texture_get(swigCPtr);
      return ret;
    } 
  }

  public byte helm_texture {
    set {
      questinterfacePINVOKE.PetStruct_helm_texture_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.PetStruct_helm_texture_get(swigCPtr);
      return ret;
    } 
  }

  public byte gender {
    set {
      questinterfacePINVOKE.PetStruct_gender_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.PetStruct_gender_get(swigCPtr);
      return ret;
    } 
  }

  public float size_modifier {
    set {
      questinterfacePINVOKE.PetStruct_size_modifier_set(swigCPtr, value);
    } 
    get {
      float ret = questinterfacePINVOKE.PetStruct_size_modifier_get(swigCPtr);
      return ret;
    } 
  }

  public byte face {
    set {
      questinterfacePINVOKE.PetStruct_face_set(swigCPtr, value);
    } 
    get {
      byte ret = questinterfacePINVOKE.PetStruct_face_get(swigCPtr);
      return ret;
    } 
  }

  public PetStruct() : this(questinterfacePINVOKE.new_PetStruct(), true) {
  }

}

public class ZoneDatabase : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ZoneDatabase(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ZoneDatabase obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ZoneDatabase obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ZoneDatabase() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_ZoneDatabase(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ZoneDatabase() : this(questinterfacePINVOKE.new_ZoneDatabase__SWIG_0(), true) {
  }

  public ZoneDatabase(string host, string user, string passwd, string database, uint port) : this(questinterfacePINVOKE.new_ZoneDatabase__SWIG_1(host, user, passwd, database, port), true) {
  }

  public void LoadWorldContainer(uint parentid, SWIGTYPE_p_EQ__ItemInstance container) {
    questinterfacePINVOKE.ZoneDatabase_LoadWorldContainer(swigCPtr, parentid, SWIGTYPE_p_EQ__ItemInstance.getCPtr(container));
  }

  public void SaveWorldContainer(uint zone_id, uint parent_id, SWIGTYPE_p_EQ__ItemInstance container) {
    questinterfacePINVOKE.ZoneDatabase_SaveWorldContainer(swigCPtr, zone_id, parent_id, SWIGTYPE_p_EQ__ItemInstance.getCPtr(container));
  }

  public void DeleteWorldContainer(uint parent_id, uint zone_id) {
    questinterfacePINVOKE.ZoneDatabase_DeleteWorldContainer(swigCPtr, parent_id, zone_id);
  }

  public uint AddObject(uint type, uint icon, SWIGTYPE_p_Object_Struct object_, SWIGTYPE_p_EQ__ItemInstance inst) {
    uint ret = questinterfacePINVOKE.ZoneDatabase_AddObject(swigCPtr, type, icon, SWIGTYPE_p_Object_Struct.getCPtr(object_), SWIGTYPE_p_EQ__ItemInstance.getCPtr(inst));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void UpdateObject(uint object_id, uint type, uint icon, SWIGTYPE_p_Object_Struct object_, SWIGTYPE_p_EQ__ItemInstance inst) {
    questinterfacePINVOKE.ZoneDatabase_UpdateObject(swigCPtr, object_id, type, icon, SWIGTYPE_p_Object_Struct.getCPtr(object_), SWIGTYPE_p_EQ__ItemInstance.getCPtr(inst));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void DeleteObject(uint object_id) {
    questinterfacePINVOKE.ZoneDatabase_DeleteObject(swigCPtr, object_id);
  }

  public SWIGTYPE_p_GroundSpawns LoadGroundSpawns(uint zone_id, short instance_version, SWIGTYPE_p_GroundSpawns gs) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.ZoneDatabase_LoadGroundSpawns(swigCPtr, zone_id, instance_version, SWIGTYPE_p_GroundSpawns.getCPtr(gs));
    SWIGTYPE_p_GroundSpawns ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_GroundSpawns(cPtr, false);
    return ret;
  }

  public void SaveTraderItem(uint char_id, uint itemid, uint uniqueid, int charges, uint itemcost, byte slot) {
    questinterfacePINVOKE.ZoneDatabase_SaveTraderItem(swigCPtr, char_id, itemid, uniqueid, charges, itemcost, slot);
  }

  public void UpdateTraderItemCharges(int char_id, uint ItemInstID, int charges) {
    questinterfacePINVOKE.ZoneDatabase_UpdateTraderItemCharges(swigCPtr, char_id, ItemInstID, charges);
  }

  public void UpdateTraderItemPrice(int CharID, uint ItemID, uint Charges, uint NewPrice) {
    questinterfacePINVOKE.ZoneDatabase_UpdateTraderItemPrice(swigCPtr, CharID, ItemID, Charges, NewPrice);
  }

  public void DeleteTraderItem(uint char_id) {
    questinterfacePINVOKE.ZoneDatabase_DeleteTraderItem__SWIG_0(swigCPtr, char_id);
  }

  public void DeleteTraderItem(uint char_id, ushort slot_id) {
    questinterfacePINVOKE.ZoneDatabase_DeleteTraderItem__SWIG_1(swigCPtr, char_id, slot_id);
  }

  public SWIGTYPE_p_EQ__ItemInstance LoadSingleTraderItem(uint char_id, int uniqueid) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.ZoneDatabase_LoadSingleTraderItem(swigCPtr, char_id, uniqueid);
    SWIGTYPE_p_EQ__ItemInstance ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_EQ__ItemInstance(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_Trader_Struct LoadTraderItem(uint char_id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.ZoneDatabase_LoadTraderItem(swigCPtr, char_id);
    SWIGTYPE_p_Trader_Struct ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Trader_Struct(cPtr, false);
    return ret;
  }

  public TraderCharges_Struct LoadTraderItemWithCharges(uint char_id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.ZoneDatabase_LoadTraderItemWithCharges(swigCPtr, char_id);
    TraderCharges_Struct ret = (cPtr == global::System.IntPtr.Zero) ? null : new TraderCharges_Struct(cPtr, false);
    return ret;
  }

  public void AddBuyLine(uint CharID, uint BuySlot, uint ItemID, string ItemName, uint Quantity, uint Price) {
    questinterfacePINVOKE.ZoneDatabase_AddBuyLine(swigCPtr, CharID, BuySlot, ItemID, ItemName, Quantity, Price);
  }

  public void RemoveBuyLine(uint CharID, uint BuySlot) {
    questinterfacePINVOKE.ZoneDatabase_RemoveBuyLine(swigCPtr, CharID, BuySlot);
  }

  public void DeleteBuyLines(uint CharID) {
    questinterfacePINVOKE.ZoneDatabase_DeleteBuyLines(swigCPtr, CharID);
  }

  public void UpdateBuyLine(uint CharID, uint BuySlot, uint Quantity) {
    questinterfacePINVOKE.ZoneDatabase_UpdateBuyLine(swigCPtr, CharID, BuySlot, Quantity);
  }

  public void UpdateGMStatus(uint account_id, int new_status) {
    questinterfacePINVOKE.ZoneDatabase_UpdateGMStatus(swigCPtr, account_id, new_status);
  }

  public void SaveBuffs(Client c) {
    questinterfacePINVOKE.ZoneDatabase_SaveBuffs(swigCPtr, Client.getCPtr(c));
  }

  public void LoadBuffs(Client c) {
    questinterfacePINVOKE.ZoneDatabase_LoadBuffs(swigCPtr, Client.getCPtr(c));
  }

  public void SaveAuras(Client c) {
    questinterfacePINVOKE.ZoneDatabase_SaveAuras(swigCPtr, Client.getCPtr(c));
  }

  public void LoadAuras(Client c) {
    questinterfacePINVOKE.ZoneDatabase_LoadAuras(swigCPtr, Client.getCPtr(c));
  }

  public void LoadPetInfo(Client c) {
    questinterfacePINVOKE.ZoneDatabase_LoadPetInfo(swigCPtr, Client.getCPtr(c));
  }

  public void SavePetInfo(Client c) {
    questinterfacePINVOKE.ZoneDatabase_SavePetInfo(swigCPtr, Client.getCPtr(c));
  }

  public void RemoveTempFactions(Client c) {
    questinterfacePINVOKE.ZoneDatabase_RemoveTempFactions(swigCPtr, Client.getCPtr(c));
  }

  public void UpdateItemRecast(uint char_id, uint recast_type, uint timestamp) {
    questinterfacePINVOKE.ZoneDatabase_UpdateItemRecast(swigCPtr, char_id, recast_type, timestamp);
  }

  public void DeleteItemRecast(uint char_id, uint recast_type) {
    questinterfacePINVOKE.ZoneDatabase_DeleteItemRecast(swigCPtr, char_id, recast_type);
  }

  public bool DeleteCharacterAAs(uint character_id) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_DeleteCharacterAAs(swigCPtr, character_id);
    return ret;
  }

  public bool DeleteCharacterBandolier(uint character_id, uint bandolier_id) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_DeleteCharacterBandolier(swigCPtr, character_id, bandolier_id);
    return ret;
  }

  public bool DeleteCharacterDiscipline(uint character_id, uint slot_id) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_DeleteCharacterDiscipline(swigCPtr, character_id, slot_id);
    return ret;
  }

  public bool DeleteCharacterMaterialColor(uint character_id) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_DeleteCharacterMaterialColor(swigCPtr, character_id);
    return ret;
  }

  public bool DeleteCharacterLeadershipAbilities(uint character_id) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_DeleteCharacterLeadershipAbilities(swigCPtr, character_id);
    return ret;
  }

  public bool DeleteCharacterMemorizedSpell(uint character_id, uint slot_id) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_DeleteCharacterMemorizedSpell(swigCPtr, character_id, slot_id);
    return ret;
  }

  public bool DeleteCharacterSpell(uint character_id, uint slot_id) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_DeleteCharacterSpell(swigCPtr, character_id, slot_id);
    return ret;
  }

  public bool LoadCharacterBandolier(uint character_id, SWIGTYPE_p_PlayerProfile_Struct pp) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_LoadCharacterBandolier(swigCPtr, character_id, SWIGTYPE_p_PlayerProfile_Struct.getCPtr(pp));
    return ret;
  }

  public bool LoadCharacterBindPoint(uint character_id, SWIGTYPE_p_PlayerProfile_Struct pp) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_LoadCharacterBindPoint(swigCPtr, character_id, SWIGTYPE_p_PlayerProfile_Struct.getCPtr(pp));
    return ret;
  }

  public bool LoadCharacterCurrency(uint character_id, SWIGTYPE_p_PlayerProfile_Struct pp) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_LoadCharacterCurrency(swigCPtr, character_id, SWIGTYPE_p_PlayerProfile_Struct.getCPtr(pp));
    return ret;
  }

  public bool LoadCharacterData(uint character_id, SWIGTYPE_p_PlayerProfile_Struct pp, SWIGTYPE_p_ExtendedProfile_Struct m_epp) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_LoadCharacterData(swigCPtr, character_id, SWIGTYPE_p_PlayerProfile_Struct.getCPtr(pp), SWIGTYPE_p_ExtendedProfile_Struct.getCPtr(m_epp));
    return ret;
  }

  public bool LoadCharacterDisciplines(uint character_id, SWIGTYPE_p_PlayerProfile_Struct pp) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_LoadCharacterDisciplines(swigCPtr, character_id, SWIGTYPE_p_PlayerProfile_Struct.getCPtr(pp));
    return ret;
  }

  public bool LoadCharacterFactionValues(uint character_id, SWIGTYPE_p_faction_map val_list) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_LoadCharacterFactionValues(swigCPtr, character_id, SWIGTYPE_p_faction_map.getCPtr(val_list));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool LoadCharacterLanguages(uint character_id, SWIGTYPE_p_PlayerProfile_Struct pp) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_LoadCharacterLanguages(swigCPtr, character_id, SWIGTYPE_p_PlayerProfile_Struct.getCPtr(pp));
    return ret;
  }

  public bool LoadCharacterLeadershipAbilities(uint character_id, SWIGTYPE_p_PlayerProfile_Struct pp) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_LoadCharacterLeadershipAbilities(swigCPtr, character_id, SWIGTYPE_p_PlayerProfile_Struct.getCPtr(pp));
    return ret;
  }

  public bool LoadCharacterMaterialColor(uint character_id, SWIGTYPE_p_PlayerProfile_Struct pp) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_LoadCharacterMaterialColor(swigCPtr, character_id, SWIGTYPE_p_PlayerProfile_Struct.getCPtr(pp));
    return ret;
  }

  public bool LoadCharacterMemmedSpells(uint character_id, SWIGTYPE_p_PlayerProfile_Struct pp) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_LoadCharacterMemmedSpells(swigCPtr, character_id, SWIGTYPE_p_PlayerProfile_Struct.getCPtr(pp));
    return ret;
  }

  public bool LoadCharacterPotionBelt(uint character_id, SWIGTYPE_p_PlayerProfile_Struct pp) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_LoadCharacterPotionBelt(swigCPtr, character_id, SWIGTYPE_p_PlayerProfile_Struct.getCPtr(pp));
    return ret;
  }

  public bool LoadCharacterSkills(uint character_id, SWIGTYPE_p_PlayerProfile_Struct pp) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_LoadCharacterSkills(swigCPtr, character_id, SWIGTYPE_p_PlayerProfile_Struct.getCPtr(pp));
    return ret;
  }

  public bool LoadCharacterSpellBook(uint character_id, SWIGTYPE_p_PlayerProfile_Struct pp) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_LoadCharacterSpellBook(swigCPtr, character_id, SWIGTYPE_p_PlayerProfile_Struct.getCPtr(pp));
    return ret;
  }

  public bool SaveCharacterBandolier(uint character_id, byte bandolier_id, byte bandolier_slot, uint item_id, uint icon, string bandolier_name) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_SaveCharacterBandolier(swigCPtr, character_id, bandolier_id, bandolier_slot, item_id, icon, bandolier_name);
    return ret;
  }

  public bool SaveCharacterCurrency(uint character_id, SWIGTYPE_p_PlayerProfile_Struct pp) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_SaveCharacterCurrency(swigCPtr, character_id, SWIGTYPE_p_PlayerProfile_Struct.getCPtr(pp));
    return ret;
  }

  public bool SaveCharacterData(Client c, SWIGTYPE_p_PlayerProfile_Struct pp, SWIGTYPE_p_ExtendedProfile_Struct m_epp) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_SaveCharacterData(swigCPtr, Client.getCPtr(c), SWIGTYPE_p_PlayerProfile_Struct.getCPtr(pp), SWIGTYPE_p_ExtendedProfile_Struct.getCPtr(m_epp));
    return ret;
  }

  public bool SaveCharacterDiscipline(uint character_id, uint slot_id, uint disc_id) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_SaveCharacterDiscipline(swigCPtr, character_id, slot_id, disc_id);
    return ret;
  }

  public bool SaveCharacterLanguage(uint character_id, uint lang_id, uint value) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_SaveCharacterLanguage(swigCPtr, character_id, lang_id, value);
    return ret;
  }

  public bool SaveCharacterLeadershipAbilities(uint character_id, SWIGTYPE_p_PlayerProfile_Struct pp) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_SaveCharacterLeadershipAbilities(swigCPtr, character_id, SWIGTYPE_p_PlayerProfile_Struct.getCPtr(pp));
    return ret;
  }

  public bool SaveCharacterMaterialColor(uint character_id, byte slot_id, uint color) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_SaveCharacterMaterialColor(swigCPtr, character_id, slot_id, color);
    return ret;
  }

  public bool SaveCharacterMemorizedSpell(uint character_id, uint spell_id, uint slot_id) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_SaveCharacterMemorizedSpell(swigCPtr, character_id, spell_id, slot_id);
    return ret;
  }

  public bool SaveCharacterPotionBelt(uint character_id, byte potion_id, uint item_id, uint icon) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_SaveCharacterPotionBelt(swigCPtr, character_id, potion_id, item_id, icon);
    return ret;
  }

  public bool SaveCharacterSkill(uint character_id, uint skill_id, uint value) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_SaveCharacterSkill(swigCPtr, character_id, skill_id, value);
    return ret;
  }

  public bool SaveCharacterSpell(uint character_id, uint spell_id, uint slot_id) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_SaveCharacterSpell(swigCPtr, character_id, spell_id, slot_id);
    return ret;
  }

  public void ZeroPlayerProfileCurrency(SWIGTYPE_p_PlayerProfile_Struct pp) {
    questinterfacePINVOKE.ZoneDatabase_ZeroPlayerProfileCurrency(swigCPtr, SWIGTYPE_p_PlayerProfile_Struct.getCPtr(pp));
  }

  public void LoadCharacterEXPModifier(Client c) {
    questinterfacePINVOKE.ZoneDatabase_LoadCharacterEXPModifier(swigCPtr, Client.getCPtr(c));
  }

  public void SaveCharacterEXPModifier(Client c) {
    questinterfacePINVOKE.ZoneDatabase_SaveCharacterEXPModifier(swigCPtr, Client.getCPtr(c));
  }

  public float GetAAEXPModifierByCharID(uint character_id, uint zone_id, short instance_version) {
    float ret = questinterfacePINVOKE.ZoneDatabase_GetAAEXPModifierByCharID__SWIG_0(swigCPtr, character_id, zone_id, instance_version);
    return ret;
  }

  public float GetAAEXPModifierByCharID(uint character_id, uint zone_id) {
    float ret = questinterfacePINVOKE.ZoneDatabase_GetAAEXPModifierByCharID__SWIG_1(swigCPtr, character_id, zone_id);
    return ret;
  }

  public float GetEXPModifierByCharID(uint character_id, uint zone_id, short instance_version) {
    float ret = questinterfacePINVOKE.ZoneDatabase_GetEXPModifierByCharID__SWIG_0(swigCPtr, character_id, zone_id, instance_version);
    return ret;
  }

  public float GetEXPModifierByCharID(uint character_id, uint zone_id) {
    float ret = questinterfacePINVOKE.ZoneDatabase_GetEXPModifierByCharID__SWIG_1(swigCPtr, character_id, zone_id);
    return ret;
  }

  public void SetAAEXPModifierByCharID(uint character_id, uint zone_id, float aa_modifier, short instance_version) {
    questinterfacePINVOKE.ZoneDatabase_SetAAEXPModifierByCharID__SWIG_0(swigCPtr, character_id, zone_id, aa_modifier, instance_version);
  }

  public void SetAAEXPModifierByCharID(uint character_id, uint zone_id, float aa_modifier) {
    questinterfacePINVOKE.ZoneDatabase_SetAAEXPModifierByCharID__SWIG_1(swigCPtr, character_id, zone_id, aa_modifier);
  }

  public void SetEXPModifierByCharID(uint character_id, uint zone_id, float exp_modifier, short instance_version) {
    questinterfacePINVOKE.ZoneDatabase_SetEXPModifierByCharID__SWIG_0(swigCPtr, character_id, zone_id, exp_modifier, instance_version);
  }

  public void SetEXPModifierByCharID(uint character_id, uint zone_id, float exp_modifier) {
    questinterfacePINVOKE.ZoneDatabase_SetEXPModifierByCharID__SWIG_1(swigCPtr, character_id, zone_id, exp_modifier);
  }

  public bool NoRentExpired(SWIGTYPE_p_std__string name) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_NoRentExpired(swigCPtr, SWIGTYPE_p_std__string.getCPtr(name));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SaveCharacterInvSnapshot(uint character_id) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_SaveCharacterInvSnapshot(swigCPtr, character_id);
    return ret;
  }

  public int CountCharacterInvSnapshots(uint character_id) {
    int ret = questinterfacePINVOKE.ZoneDatabase_CountCharacterInvSnapshots(swigCPtr, character_id);
    return ret;
  }

  public void ClearCharacterInvSnapshots(uint character_id, bool from_now) {
    questinterfacePINVOKE.ZoneDatabase_ClearCharacterInvSnapshots__SWIG_0(swigCPtr, character_id, from_now);
  }

  public void ClearCharacterInvSnapshots(uint character_id) {
    questinterfacePINVOKE.ZoneDatabase_ClearCharacterInvSnapshots__SWIG_1(swigCPtr, character_id);
  }

  public void ListCharacterInvSnapshots(uint character_id, SWIGTYPE_p_std__listT_std__pairT_unsigned_int_int_t_t is_list) {
    questinterfacePINVOKE.ZoneDatabase_ListCharacterInvSnapshots(swigCPtr, character_id, SWIGTYPE_p_std__listT_std__pairT_unsigned_int_int_t_t.getCPtr(is_list));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool ValidateCharacterInvSnapshotTimestamp(uint character_id, uint timestamp) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_ValidateCharacterInvSnapshotTimestamp(swigCPtr, character_id, timestamp);
    return ret;
  }

  public void ParseCharacterInvSnapshot(uint character_id, uint timestamp, SWIGTYPE_p_std__listT_std__pairT_short_unsigned_int_t_t parse_list) {
    questinterfacePINVOKE.ZoneDatabase_ParseCharacterInvSnapshot(swigCPtr, character_id, timestamp, SWIGTYPE_p_std__listT_std__pairT_short_unsigned_int_t_t.getCPtr(parse_list));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void DivergeCharacterInvSnapshotFromInventory(uint character_id, uint timestamp, SWIGTYPE_p_std__listT_std__pairT_short_unsigned_int_t_t compare_list) {
    questinterfacePINVOKE.ZoneDatabase_DivergeCharacterInvSnapshotFromInventory(swigCPtr, character_id, timestamp, SWIGTYPE_p_std__listT_std__pairT_short_unsigned_int_t_t.getCPtr(compare_list));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void DivergeCharacterInventoryFromInvSnapshot(uint character_id, uint timestamp, SWIGTYPE_p_std__listT_std__pairT_short_unsigned_int_t_t compare_list) {
    questinterfacePINVOKE.ZoneDatabase_DivergeCharacterInventoryFromInvSnapshot(swigCPtr, character_id, timestamp, SWIGTYPE_p_std__listT_std__pairT_short_unsigned_int_t_t.getCPtr(compare_list));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool RestoreCharacterInvSnapshot(uint character_id, uint timestamp) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_RestoreCharacterInvSnapshot(swigCPtr, character_id, timestamp);
    return ret;
  }

  public bool BuryAllCharacterCorpses(uint character_id) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_BuryAllCharacterCorpses(swigCPtr, character_id);
    return ret;
  }

  public bool BuryCharacterCorpse(uint corpse_id) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_BuryCharacterCorpse(swigCPtr, corpse_id);
    return ret;
  }

  public long CountCharacterCorpses(uint character_id) {
    long ret = questinterfacePINVOKE.ZoneDatabase_CountCharacterCorpses(swigCPtr, character_id);
    return ret;
  }

  public long CountCharacterCorpsesByZoneID(uint character_id, uint zone_id) {
    long ret = questinterfacePINVOKE.ZoneDatabase_CountCharacterCorpsesByZoneID(swigCPtr, character_id, zone_id);
    return ret;
  }

  public bool DeleteCharacterCorpse(uint corpse_id) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_DeleteCharacterCorpse(swigCPtr, corpse_id);
    return ret;
  }

  public bool DeleteItemOffCharacterCorpse(uint corpse_id, uint slot_id, uint item_id) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_DeleteItemOffCharacterCorpse(swigCPtr, corpse_id, slot_id, item_id);
    return ret;
  }

  public uint GetCharacterBuriedCorpseCount(uint character_id) {
    uint ret = questinterfacePINVOKE.ZoneDatabase_GetCharacterBuriedCorpseCount(swigCPtr, character_id);
    return ret;
  }

  public long GetCharacterCorpseCount(uint character_id) {
    long ret = questinterfacePINVOKE.ZoneDatabase_GetCharacterCorpseCount(swigCPtr, character_id);
    return ret;
  }

  public uint GetCharacterCorpseDecayTimer(uint corpse_id) {
    uint ret = questinterfacePINVOKE.ZoneDatabase_GetCharacterCorpseDecayTimer(swigCPtr, corpse_id);
    return ret;
  }

  public uint GetCharacterCorpseID(uint character_id, byte corpse_limit) {
    uint ret = questinterfacePINVOKE.ZoneDatabase_GetCharacterCorpseID(swigCPtr, character_id, corpse_limit);
    return ret;
  }

  public uint GetCharacterCorpseItemAt(uint corpse_id, ushort slot_id) {
    uint ret = questinterfacePINVOKE.ZoneDatabase_GetCharacterCorpseItemAt(swigCPtr, corpse_id, slot_id);
    return ret;
  }

  public bool GetDecayTimes(SWIGTYPE_p_npcDecayTimes_Struct npc_decay_times) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_GetDecayTimes(swigCPtr, SWIGTYPE_p_npcDecayTimes_Struct.getCPtr(npc_decay_times));
    return ret;
  }

  public uint GetFirstCorpseID(uint character_id) {
    uint ret = questinterfacePINVOKE.ZoneDatabase_GetFirstCorpseID(swigCPtr, character_id);
    return ret;
  }

  public Corpse LoadCharacterCorpse(uint corpse_id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.ZoneDatabase_LoadCharacterCorpse(swigCPtr, corpse_id);
    Corpse ret = (cPtr == global::System.IntPtr.Zero) ? null : new Corpse(cPtr, false);
    return ret;
  }

  public bool LoadCharacterCorpses(uint zone_id, ushort instance_id) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_LoadCharacterCorpses(swigCPtr, zone_id, instance_id);
    return ret;
  }

  public void MarkCorpseAsResurrected(uint corpse_id) {
    questinterfacePINVOKE.ZoneDatabase_MarkCorpseAsResurrected(swigCPtr, corpse_id);
  }

  public uint SaveCharacterCorpse(uint character_id, SWIGTYPE_p_std__string name, uint zone_id, ushort instance_id, CharacterCorpseEntry c, SWIGTYPE_p_glm__vec4 position, uint guild_consent_id) {
    uint ret = questinterfacePINVOKE.ZoneDatabase_SaveCharacterCorpse(swigCPtr, character_id, SWIGTYPE_p_std__string.getCPtr(name), zone_id, instance_id, CharacterCorpseEntry.getCPtr(c), SWIGTYPE_p_glm__vec4.getCPtr(position), guild_consent_id);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint SendCharacterCorpseToGraveyard(uint corpse_id, uint zone_id, ushort instance_id, SWIGTYPE_p_glm__vec4 position) {
    uint ret = questinterfacePINVOKE.ZoneDatabase_SendCharacterCorpseToGraveyard(swigCPtr, corpse_id, zone_id, instance_id, SWIGTYPE_p_glm__vec4.getCPtr(position));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SendCharacterCorpseToNonInstance(uint corpse_id) {
    questinterfacePINVOKE.ZoneDatabase_SendCharacterCorpseToNonInstance(swigCPtr, corpse_id);
  }

  public Corpse SummonBuriedCharacterCorpses(uint character_id, uint zone_id, ushort instance_id, SWIGTYPE_p_glm__vec4 position) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.ZoneDatabase_SummonBuriedCharacterCorpses(swigCPtr, character_id, zone_id, instance_id, SWIGTYPE_p_glm__vec4.getCPtr(position));
    Corpse ret = (cPtr == global::System.IntPtr.Zero) ? null : new Corpse(cPtr, false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SummonAllCharacterCorpses(uint character_id, uint zone_id, ushort instance_id, SWIGTYPE_p_glm__vec4 position) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_SummonAllCharacterCorpses(swigCPtr, character_id, zone_id, instance_id, SWIGTYPE_p_glm__vec4.getCPtr(position));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool UnburyCharacterCorpse(uint corpse_id, uint zone_id, ushort instance_id, SWIGTYPE_p_glm__vec4 position) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_UnburyCharacterCorpse(swigCPtr, corpse_id, zone_id, instance_id, SWIGTYPE_p_glm__vec4.getCPtr(position));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint UpdateCharacterCorpse(uint corpse_id, uint character_id, SWIGTYPE_p_std__string name, uint zone_id, ushort instance_id, CharacterCorpseEntry c, SWIGTYPE_p_glm__vec4 position, uint guild_consent_id, bool is_resurrected) {
    uint ret = questinterfacePINVOKE.ZoneDatabase_UpdateCharacterCorpse__SWIG_0(swigCPtr, corpse_id, character_id, SWIGTYPE_p_std__string.getCPtr(name), zone_id, instance_id, CharacterCorpseEntry.getCPtr(c), SWIGTYPE_p_glm__vec4.getCPtr(position), guild_consent_id, is_resurrected);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint UpdateCharacterCorpse(uint corpse_id, uint character_id, SWIGTYPE_p_std__string name, uint zone_id, ushort instance_id, CharacterCorpseEntry c, SWIGTYPE_p_glm__vec4 position, uint guild_consent_id) {
    uint ret = questinterfacePINVOKE.ZoneDatabase_UpdateCharacterCorpse__SWIG_1(swigCPtr, corpse_id, character_id, SWIGTYPE_p_std__string.getCPtr(name), zone_id, instance_id, CharacterCorpseEntry.getCPtr(c), SWIGTYPE_p_glm__vec4.getCPtr(position), guild_consent_id);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint UpdateCharacterCorpseConsent(uint character_id, uint guild_consent_id) {
    uint ret = questinterfacePINVOKE.ZoneDatabase_UpdateCharacterCorpseConsent(swigCPtr, character_id, guild_consent_id);
    return ret;
  }

  public bool GetFactionData(SWIGTYPE_p_FactionMods fd, uint class_mod, uint race_mod, uint deity_mod, int faction_id) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_GetFactionData(swigCPtr, SWIGTYPE_p_FactionMods.getCPtr(fd), class_mod, race_mod, deity_mod, faction_id);
    return ret;
  }

  public bool GetFactionName(int faction_id, string name, uint buflen) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_GetFactionName__SWIG_0(swigCPtr, faction_id, name, buflen);
    return ret;
  }

  public SWIGTYPE_p_std__string GetFactionName(int faction_id) {
    SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(questinterfacePINVOKE.ZoneDatabase_GetFactionName__SWIG_1(swigCPtr, faction_id), true);
    return ret;
  }

  public bool GetFactionIDsForNPC(uint npc_faction_id, SWIGTYPE_p_std__listT_NpcFactionEntriesRepository__NpcFactionEntries_t faction_list, SWIGTYPE_p_int primary_faction) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_GetFactionIDsForNPC__SWIG_0(swigCPtr, npc_faction_id, SWIGTYPE_p_std__listT_NpcFactionEntriesRepository__NpcFactionEntries_t.getCPtr(faction_list), SWIGTYPE_p_int.getCPtr(primary_faction));
    return ret;
  }

  public bool GetFactionIDsForNPC(uint npc_faction_id, SWIGTYPE_p_std__listT_NpcFactionEntriesRepository__NpcFactionEntries_t faction_list) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_GetFactionIDsForNPC__SWIG_1(swigCPtr, npc_faction_id, SWIGTYPE_p_std__listT_NpcFactionEntriesRepository__NpcFactionEntries_t.getCPtr(faction_list));
    return ret;
  }

  public bool SetCharacterFactionLevel(uint char_id, int faction_id, int value, byte temp, SWIGTYPE_p_faction_map val_list) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_SetCharacterFactionLevel(swigCPtr, char_id, faction_id, value, temp, SWIGTYPE_p_faction_map.getCPtr(val_list));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool LoadFactionData() {
    bool ret = questinterfacePINVOKE.ZoneDatabase_LoadFactionData(swigCPtr);
    return ret;
  }

  public uint GetMaxFaction() {
    uint ret = questinterfacePINVOKE.ZoneDatabase_GetMaxFaction(swigCPtr);
    return ret;
  }

  public bool LoadAlternateAdvancementAbilities(SWIGTYPE_p_std__unordered_mapT_int_std__unique_ptrT_AA__Ability_t_std__hashT_int_t_t abilities, SWIGTYPE_p_std__unordered_mapT_int_std__unique_ptrT_AA__Rank_t_std__hashT_int_t_t ranks) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_LoadAlternateAdvancementAbilities(swigCPtr, SWIGTYPE_p_std__unordered_mapT_int_std__unique_ptrT_AA__Ability_t_std__hashT_int_t_t.getCPtr(abilities), SWIGTYPE_p_std__unordered_mapT_int_std__unique_ptrT_AA__Rank_t_std__hashT_int_t_t.getCPtr(ranks));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool LoadAlternateAdvancement(Client c) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_LoadAlternateAdvancement(swigCPtr, Client.getCPtr(c));
    return ret;
  }

  public bool SaveZoneCFG(uint zone_id, ushort instance_version, SWIGTYPE_p_NewZone_Struct zd) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_SaveZoneCFG(swigCPtr, zone_id, instance_version, SWIGTYPE_p_NewZone_Struct.getCPtr(zd));
    return ret;
  }

  public bool LoadStaticZonePoints(LinkedListZonePoint zone_point_list, string zonename, uint version) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_LoadStaticZonePoints(swigCPtr, LinkedListZonePoint.getCPtr(zone_point_list), zonename, version);
    return ret;
  }

  public int getZoneShutDownDelay(uint zoneID, uint version) {
    int ret = questinterfacePINVOKE.ZoneDatabase_getZoneShutDownDelay(swigCPtr, zoneID, version);
    return ret;
  }

  public bool LoadSpawnGroups(string zone_name, ushort version, SpawnGroupList spawn_group_list) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_LoadSpawnGroups(swigCPtr, zone_name, version, SpawnGroupList.getCPtr(spawn_group_list));
    return ret;
  }

  public bool LoadSpawnGroupsByID(int spawn_group_id, SpawnGroupList spawn_group_list) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_LoadSpawnGroupsByID(swigCPtr, spawn_group_id, SpawnGroupList.getCPtr(spawn_group_list));
    return ret;
  }

  public bool PopulateZoneSpawnList(uint zoneid, LinkedListSpawn2 spawn2_list, short version) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_PopulateZoneSpawnList(swigCPtr, zoneid, LinkedListSpawn2.getCPtr(spawn2_list), version);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool CreateSpawn2(Client c, uint spawngroup_id, SWIGTYPE_p_std__string zone_short_name, SWIGTYPE_p_glm__vec4 position, uint respawn, uint variance, ushort condition, short condition_value) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_CreateSpawn2(swigCPtr, Client.getCPtr(c), spawngroup_id, SWIGTYPE_p_std__string.getCPtr(zone_short_name), SWIGTYPE_p_glm__vec4.getCPtr(position), respawn, variance, condition, condition_value);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void UpdateRespawnTime(uint spawn2_id, ushort instance_id, uint timeleft) {
    questinterfacePINVOKE.ZoneDatabase_UpdateRespawnTime(swigCPtr, spawn2_id, instance_id, timeleft);
  }

  public uint GetSpawnTimeLeft(uint spawn2_id, ushort instance_id) {
    uint ret = questinterfacePINVOKE.ZoneDatabase_GetSpawnTimeLeft(swigCPtr, spawn2_id, instance_id);
    return ret;
  }

  public void UpdateSpawn2Status(uint id, byte new_status, uint instance_id) {
    questinterfacePINVOKE.ZoneDatabase_UpdateSpawn2Status(swigCPtr, id, new_status, instance_id);
  }

  public uint GetFreeGrid(uint zone_id) {
    uint ret = questinterfacePINVOKE.ZoneDatabase_GetFreeGrid(swigCPtr, zone_id);
    return ret;
  }

  public void DeleteWaypoint(Client c, uint grid_id, uint number, uint zone_id) {
    questinterfacePINVOKE.ZoneDatabase_DeleteWaypoint(swigCPtr, Client.getCPtr(c), grid_id, number, zone_id);
  }

  public void AddWaypoint(Client c, uint grid_id, uint number, SWIGTYPE_p_glm__vec4 position, uint pause, uint zone_id) {
    questinterfacePINVOKE.ZoneDatabase_AddWaypoint(swigCPtr, Client.getCPtr(c), grid_id, number, SWIGTYPE_p_glm__vec4.getCPtr(position), pause, zone_id);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint AddWaypointForSpawn(Client c, uint spawn2_id, SWIGTYPE_p_glm__vec4 position, uint pause, int type, int type2, uint zone_id) {
    uint ret = questinterfacePINVOKE.ZoneDatabase_AddWaypointForSpawn(swigCPtr, Client.getCPtr(c), spawn2_id, SWIGTYPE_p_glm__vec4.getCPtr(position), pause, type, type2, zone_id);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void ModifyGrid(Client c, bool remove, uint grid_id, byte type, byte type2, uint zone_id) {
    questinterfacePINVOKE.ZoneDatabase_ModifyGrid__SWIG_0(swigCPtr, Client.getCPtr(c), remove, grid_id, type, type2, zone_id);
  }

  public void ModifyGrid(Client c, bool remove, uint grid_id, byte type, byte type2) {
    questinterfacePINVOKE.ZoneDatabase_ModifyGrid__SWIG_1(swigCPtr, Client.getCPtr(c), remove, grid_id, type, type2);
  }

  public void ModifyGrid(Client c, bool remove, uint grid_id, byte type) {
    questinterfacePINVOKE.ZoneDatabase_ModifyGrid__SWIG_2(swigCPtr, Client.getCPtr(c), remove, grid_id, type);
  }

  public void ModifyGrid(Client c, bool remove, uint grid_id) {
    questinterfacePINVOKE.ZoneDatabase_ModifyGrid__SWIG_3(swigCPtr, Client.getCPtr(c), remove, grid_id);
  }

  public bool GridExistsInZone(uint zone_id, uint grid_id) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_GridExistsInZone(swigCPtr, zone_id, grid_id);
    return ret;
  }

  public int GetHighestGrid(uint zone_id) {
    int ret = questinterfacePINVOKE.ZoneDatabase_GetHighestGrid(swigCPtr, zone_id);
    return ret;
  }

  public int GetHighestWaypoint(uint zone_id, uint grid_id) {
    int ret = questinterfacePINVOKE.ZoneDatabase_GetHighestWaypoint(swigCPtr, zone_id, grid_id);
    return ret;
  }

  public int GetRandomWaypointFromGrid(SWIGTYPE_p_glm__vec4 loc, uint zone_id, uint grid_id) {
    int ret = questinterfacePINVOKE.ZoneDatabase_GetRandomWaypointFromGrid(swigCPtr, SWIGTYPE_p_glm__vec4.getCPtr(loc), zone_id, grid_id);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint NPCSpawnDB(byte command, SWIGTYPE_p_std__string zone, uint instance_version, Client c, NPC n, uint extra) {
    uint ret = questinterfacePINVOKE.ZoneDatabase_NPCSpawnDB__SWIG_0(swigCPtr, command, SWIGTYPE_p_std__string.getCPtr(zone), instance_version, Client.getCPtr(c), NPC.getCPtr(n), extra);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint NPCSpawnDB(byte command, SWIGTYPE_p_std__string zone, uint instance_version, Client c, NPC n) {
    uint ret = questinterfacePINVOKE.ZoneDatabase_NPCSpawnDB__SWIG_1(swigCPtr, command, SWIGTYPE_p_std__string.getCPtr(zone), instance_version, Client.getCPtr(c), NPC.getCPtr(n));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint NPCSpawnDB(byte command, SWIGTYPE_p_std__string zone, uint instance_version, Client c) {
    uint ret = questinterfacePINVOKE.ZoneDatabase_NPCSpawnDB__SWIG_2(swigCPtr, command, SWIGTYPE_p_std__string.getCPtr(zone), instance_version, Client.getCPtr(c));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint CreateNewNPCCommand(SWIGTYPE_p_std__string zone, uint instance_version, Client c, NPC n, uint extra) {
    uint ret = questinterfacePINVOKE.ZoneDatabase_CreateNewNPCCommand(swigCPtr, SWIGTYPE_p_std__string.getCPtr(zone), instance_version, Client.getCPtr(c), NPC.getCPtr(n), extra);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint AddNewNPCSpawnGroupCommand(SWIGTYPE_p_std__string zone, uint instance_version, Client c, NPC n, uint in_respawn_time) {
    uint ret = questinterfacePINVOKE.ZoneDatabase_AddNewNPCSpawnGroupCommand(swigCPtr, SWIGTYPE_p_std__string.getCPtr(zone), instance_version, Client.getCPtr(c), NPC.getCPtr(n), in_respawn_time);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint DeleteSpawnLeaveInNPCTypeTable(SWIGTYPE_p_std__string zone, Client c, NPC n) {
    uint ret = questinterfacePINVOKE.ZoneDatabase_DeleteSpawnLeaveInNPCTypeTable(swigCPtr, SWIGTYPE_p_std__string.getCPtr(zone), Client.getCPtr(c), NPC.getCPtr(n));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint DeleteSpawnRemoveFromNPCTypeTable(SWIGTYPE_p_std__string zone, uint instance_version, Client c, NPC n) {
    uint ret = questinterfacePINVOKE.ZoneDatabase_DeleteSpawnRemoveFromNPCTypeTable(swigCPtr, SWIGTYPE_p_std__string.getCPtr(zone), instance_version, Client.getCPtr(c), NPC.getCPtr(n));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint AddSpawnFromSpawnGroup(SWIGTYPE_p_std__string zone, uint instance_version, Client c, NPC n, uint spawngroup_id) {
    uint ret = questinterfacePINVOKE.ZoneDatabase_AddSpawnFromSpawnGroup(swigCPtr, SWIGTYPE_p_std__string.getCPtr(zone), instance_version, Client.getCPtr(c), NPC.getCPtr(n), spawngroup_id);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint AddNPCTypes(SWIGTYPE_p_std__string zone, uint instance_version, Client c, NPC n, uint spawngroup_id) {
    uint ret = questinterfacePINVOKE.ZoneDatabase_AddNPCTypes(swigCPtr, SWIGTYPE_p_std__string.getCPtr(zone), instance_version, Client.getCPtr(c), NPC.getCPtr(n), spawngroup_id);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint UpdateNPCTypeAppearance(Client c, NPC n) {
    uint ret = questinterfacePINVOKE.ZoneDatabase_UpdateNPCTypeAppearance(swigCPtr, Client.getCPtr(c), NPC.getCPtr(n));
    return ret;
  }

  public bool SetSpecialAttkFlag(byte id, string flag) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_SetSpecialAttkFlag(swigCPtr, id, flag);
    return ret;
  }

  public bool GetPetEntry(SWIGTYPE_p_std__string pet_type, PetRecord r) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_GetPetEntry(swigCPtr, SWIGTYPE_p_std__string.getCPtr(pet_type), PetRecord.getCPtr(r));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetPoweredPetEntry(SWIGTYPE_p_std__string pet_type, short pet_power, PetRecord r) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_GetPoweredPetEntry(swigCPtr, SWIGTYPE_p_std__string.getCPtr(pet_type), pet_power, PetRecord.getCPtr(r));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetBasePetItems(int equipmentset, SWIGTYPE_p_unsigned_int items) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_GetBasePetItems(swigCPtr, equipmentset, SWIGTYPE_p_unsigned_int.getCPtr(items));
    return ret;
  }

  public PetStruct GetBeastlordPetData(ushort race_id) {
    PetStruct ret = new PetStruct(questinterfacePINVOKE.ZoneDatabase_GetBeastlordPetData(swigCPtr, race_id), true);
    return ret;
  }

  public uint GetMaxNPCSpellsID() {
    uint ret = questinterfacePINVOKE.ZoneDatabase_GetMaxNPCSpellsID(swigCPtr);
    return ret;
  }

  public uint GetMaxNPCSpellsEffectsID() {
    uint ret = questinterfacePINVOKE.ZoneDatabase_GetMaxNPCSpellsEffectsID(swigCPtr);
    return ret;
  }

  public bool GetAuraEntry(ushort spell_id, AuraRecord record) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_GetAuraEntry(swigCPtr, spell_id, AuraRecord.getCPtr(record));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void LoadGlobalLoot() {
    questinterfacePINVOKE.ZoneDatabase_LoadGlobalLoot(swigCPtr);
  }

  public DBnpcspells_Struct GetNPCSpells(uint iDBSpellsID) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.ZoneDatabase_GetNPCSpells(swigCPtr, iDBSpellsID);
    DBnpcspells_Struct ret = (cPtr == global::System.IntPtr.Zero) ? null : new DBnpcspells_Struct(cPtr, false);
    return ret;
  }

  public DBnpcspellseffects_Struct GetNPCSpellsEffects(uint iDBSpellsEffectsID) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.ZoneDatabase_GetNPCSpellsEffects(swigCPtr, iDBSpellsEffectsID);
    DBnpcspellseffects_Struct ret = (cPtr == global::System.IntPtr.Zero) ? null : new DBnpcspellseffects_Struct(cPtr, false);
    return ret;
  }

  public void ClearNPCSpells() {
    questinterfacePINVOKE.ZoneDatabase_ClearNPCSpells(swigCPtr);
  }

  public SWIGTYPE_p_NPCType LoadNPCTypesData(uint id, bool bulk_load) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.ZoneDatabase_LoadNPCTypesData__SWIG_0(swigCPtr, id, bulk_load);
    SWIGTYPE_p_NPCType ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_NPCType(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_NPCType LoadNPCTypesData(uint id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.ZoneDatabase_LoadNPCTypesData__SWIG_1(swigCPtr, id);
    SWIGTYPE_p_NPCType ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_NPCType(cPtr, false);
    return ret;
  }

  public DBbotspells_Struct GetBotSpells(uint bot_spell_id) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.ZoneDatabase_GetBotSpells(swigCPtr, bot_spell_id);
    DBbotspells_Struct ret = (cPtr == global::System.IntPtr.Zero) ? null : new DBbotspells_Struct(cPtr, false);
    return ret;
  }

  public void ClearBotSpells() {
    questinterfacePINVOKE.ZoneDatabase_ClearBotSpells(swigCPtr);
  }

  public SWIGTYPE_p_NPCType GetMercenaryType(uint id, ushort race_id, uint owner_level) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.ZoneDatabase_GetMercenaryType(swigCPtr, id, race_id, owner_level);
    SWIGTYPE_p_NPCType ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_NPCType(cPtr, false);
    return ret;
  }

  public void LoadMercenaryEquipment(SWIGTYPE_p_Merc m) {
    questinterfacePINVOKE.ZoneDatabase_LoadMercenaryEquipment(swigCPtr, SWIGTYPE_p_Merc.getCPtr(m));
  }

  public void SaveMercenaryBuffs(SWIGTYPE_p_Merc m) {
    questinterfacePINVOKE.ZoneDatabase_SaveMercenaryBuffs(swigCPtr, SWIGTYPE_p_Merc.getCPtr(m));
  }

  public void LoadMercenaryBuffs(SWIGTYPE_p_Merc m) {
    questinterfacePINVOKE.ZoneDatabase_LoadMercenaryBuffs(swigCPtr, SWIGTYPE_p_Merc.getCPtr(m));
  }

  public bool LoadMercenaryInfo(Client c) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_LoadMercenaryInfo(swigCPtr, Client.getCPtr(c));
    return ret;
  }

  public bool LoadCurrentMercenary(Client c) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_LoadCurrentMercenary(swigCPtr, Client.getCPtr(c));
    return ret;
  }

  public bool SaveMercenary(SWIGTYPE_p_Merc m) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_SaveMercenary(swigCPtr, SWIGTYPE_p_Merc.getCPtr(m));
    return ret;
  }

  public bool DeleteMercenary(uint mercenary_id) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_DeleteMercenary(swigCPtr, mercenary_id);
    return ret;
  }

  public void DeletePetitionFromDB(SWIGTYPE_p_Petition wpet) {
    questinterfacePINVOKE.ZoneDatabase_DeletePetitionFromDB(swigCPtr, SWIGTYPE_p_Petition.getCPtr(wpet));
  }

  public void UpdatePetitionToDB(SWIGTYPE_p_Petition wpet) {
    questinterfacePINVOKE.ZoneDatabase_UpdatePetitionToDB(swigCPtr, SWIGTYPE_p_Petition.getCPtr(wpet));
  }

  public void InsertPetitionToDB(SWIGTYPE_p_Petition wpet) {
    questinterfacePINVOKE.ZoneDatabase_InsertPetitionToDB(swigCPtr, SWIGTYPE_p_Petition.getCPtr(wpet));
  }

  public void RefreshPetitionsFromDB() {
    questinterfacePINVOKE.ZoneDatabase_RefreshPetitionsFromDB(swigCPtr);
  }

  public void SaveMerchantTemp(uint npcid, uint slot, uint zone_id, uint instance_id, uint item, uint charges) {
    questinterfacePINVOKE.ZoneDatabase_SaveMerchantTemp(swigCPtr, npcid, slot, zone_id, instance_id, item, charges);
  }

  public void DeleteMerchantTemp(uint npcid, uint slot, uint zone_id, uint instance_id) {
    questinterfacePINVOKE.ZoneDatabase_DeleteMerchantTemp(swigCPtr, npcid, slot, zone_id, instance_id);
  }

  public bool GetTradeRecipe(SWIGTYPE_p_EQ__ItemInstance container, byte c_type, uint some_id, Client c, DBTradeskillRecipe_Struct spec, SWIGTYPE_p_bool is_augmented) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_GetTradeRecipe__SWIG_0(swigCPtr, SWIGTYPE_p_EQ__ItemInstance.getCPtr(container), c_type, some_id, Client.getCPtr(c), DBTradeskillRecipe_Struct.getCPtr(spec), SWIGTYPE_p_bool.getCPtr(is_augmented));
    return ret;
  }

  public bool GetTradeRecipe(uint recipe_id, byte c_type, uint some_id, Client c, DBTradeskillRecipe_Struct spec) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_GetTradeRecipe__SWIG_1(swigCPtr, recipe_id, c_type, some_id, Client.getCPtr(c), DBTradeskillRecipe_Struct.getCPtr(spec));
    return ret;
  }

  public uint LoadForage(uint zone_id, byte skill_level) {
    uint ret = questinterfacePINVOKE.ZoneDatabase_LoadForage(swigCPtr, zone_id, skill_level);
    return ret;
  }

  public uint LoadFishing(uint zone_id, byte skill_level, SWIGTYPE_p_unsigned_int npc_id, SWIGTYPE_p_unsigned_char npc_chance) {
    uint ret = questinterfacePINVOKE.ZoneDatabase_LoadFishing(swigCPtr, zone_id, skill_level, SWIGTYPE_p_unsigned_int.getCPtr(npc_id), SWIGTYPE_p_unsigned_char.getCPtr(npc_chance));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void UpdateRecipeMadecount(uint recipe_id, uint char_id, uint madecount) {
    questinterfacePINVOKE.ZoneDatabase_UpdateRecipeMadecount(swigCPtr, recipe_id, char_id, madecount);
  }

  public bool EnableRecipe(uint recipe_id) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_EnableRecipe(swigCPtr, recipe_id);
    return ret;
  }

  public bool DisableRecipe(uint recipe_id) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_DisableRecipe(swigCPtr, recipe_id);
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_unsigned_int_t GetRecipeComponentItemIDs(SWIGTYPE_p_RecipeCountType count_type, uint recipe_id) {
    SWIGTYPE_p_std__vectorT_unsigned_int_t ret = new SWIGTYPE_p_std__vectorT_unsigned_int_t(questinterfacePINVOKE.ZoneDatabase_GetRecipeComponentItemIDs(swigCPtr, SWIGTYPE_p_RecipeCountType.getCPtr(count_type), recipe_id), true);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public sbyte GetRecipeComponentCount(SWIGTYPE_p_RecipeCountType count_type, uint recipe_id, uint item_id) {
    sbyte ret = questinterfacePINVOKE.ZoneDatabase_GetRecipeComponentCount(swigCPtr, SWIGTYPE_p_RecipeCountType.getCPtr(count_type), recipe_id, item_id);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool LoadTributes() {
    bool ret = questinterfacePINVOKE.ZoneDatabase_LoadTributes(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_DoorsRepository__Doors_t LoadDoors(SWIGTYPE_p_std__string zone_name, short version) {
    SWIGTYPE_p_std__vectorT_DoorsRepository__Doors_t ret = new SWIGTYPE_p_std__vectorT_DoorsRepository__Doors_t(questinterfacePINVOKE.ZoneDatabase_LoadDoors(swigCPtr, SWIGTYPE_p_std__string.getCPtr(zone_name), version), true);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetDoorsCountPlusOne() {
    uint ret = questinterfacePINVOKE.ZoneDatabase_GetDoorsCountPlusOne(swigCPtr);
    return ret;
  }

  public int GetDoorsDBCountPlusOne(SWIGTYPE_p_std__string zone_short_name, short version) {
    int ret = questinterfacePINVOKE.ZoneDatabase_GetDoorsDBCountPlusOne(swigCPtr, SWIGTYPE_p_std__string.getCPtr(zone_short_name), version);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public long GetBlockedSpellsCount(uint zone_id) {
    long ret = questinterfacePINVOKE.ZoneDatabase_GetBlockedSpellsCount(swigCPtr, zone_id);
    return ret;
  }

  public bool LoadBlockedSpells(long blocked_spells_count, ZoneSpellsBlocked into, uint zone_id) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_LoadBlockedSpells(swigCPtr, blocked_spells_count, ZoneSpellsBlocked.getCPtr(into), zone_id);
    return ret;
  }

  public bool LoadTraps(SWIGTYPE_p_std__string zone_short_name, short instance_version) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_LoadTraps(swigCPtr, SWIGTYPE_p_std__string.getCPtr(zone_short_name), instance_version);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SetTrapData(Trap t, bool repop) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_SetTrapData__SWIG_0(swigCPtr, Trap.getCPtr(t), repop);
    return ret;
  }

  public bool SetTrapData(Trap t) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_SetTrapData__SWIG_1(swigCPtr, Trap.getCPtr(t));
    return ret;
  }

  public uint GetZoneTimezone(uint zoneid, uint version) {
    uint ret = questinterfacePINVOKE.ZoneDatabase_GetZoneTimezone(swigCPtr, zoneid, version);
    return ret;
  }

  public bool SetZoneTimezone(uint zoneid, uint version, uint tz) {
    bool ret = questinterfacePINVOKE.ZoneDatabase_SetZoneTimezone(swigCPtr, zoneid, version, tz);
    return ret;
  }

  public void RefreshGroupFromDB(Client c) {
    questinterfacePINVOKE.ZoneDatabase_RefreshGroupFromDB(swigCPtr, Client.getCPtr(c));
  }

  public void ListAllInstances(Client c, uint character_id) {
    questinterfacePINVOKE.ZoneDatabase_ListAllInstances(swigCPtr, Client.getCPtr(c), character_id);
  }

  public void QGlobalPurge() {
    questinterfacePINVOKE.ZoneDatabase_QGlobalPurge(swigCPtr);
  }

  public void LoadAltCurrencyValues(uint char_id, SWIGTYPE_p_std__mapT_unsigned_int_unsigned_int_t currency) {
    questinterfacePINVOKE.ZoneDatabase_LoadAltCurrencyValues(swigCPtr, char_id, SWIGTYPE_p_std__mapT_unsigned_int_unsigned_int_t.getCPtr(currency));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void UpdateAltCurrencyValue(uint char_id, uint currency_id, uint value) {
    questinterfacePINVOKE.ZoneDatabase_UpdateAltCurrencyValue(swigCPtr, char_id, currency_id, value);
  }

  public uint GetKarma(uint account_id) {
    uint ret = questinterfacePINVOKE.ZoneDatabase_GetKarma(swigCPtr, account_id);
    return ret;
  }

  public void UpdateKarma(uint account_id, uint amount) {
    questinterfacePINVOKE.ZoneDatabase_UpdateKarma(swigCPtr, account_id, amount);
  }

  public SWIGTYPE_p_BotDatabase botdb {
    set {
      questinterfacePINVOKE.ZoneDatabase_botdb_set(swigCPtr, SWIGTYPE_p_BotDatabase.getCPtr(value));
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_BotDatabase ret = new SWIGTYPE_p_BotDatabase(questinterfacePINVOKE.ZoneDatabase_botdb_get(swigCPtr), true);
      if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static void LoadCharacterTribute(Client c) {
    questinterfacePINVOKE.ZoneDatabase_LoadCharacterTribute(Client.getCPtr(c));
  }

  public static void SaveCharacterBinds(Client c) {
    questinterfacePINVOKE.ZoneDatabase_SaveCharacterBinds(Client.getCPtr(c));
  }

  public static void SaveCharacterTribute(Client c) {
    questinterfacePINVOKE.ZoneDatabase_SaveCharacterTribute(Client.getCPtr(c));
  }

}

public class LinkedListNewSpawn : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal LinkedListNewSpawn(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(LinkedListNewSpawn obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(LinkedListNewSpawn obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~LinkedListNewSpawn() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_LinkedListNewSpawn(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public LinkedListNewSpawn() : this(questinterfacePINVOKE.new_LinkedListNewSpawn(), true) {
  }

  public bool dont_delete {
    set {
      questinterfacePINVOKE.LinkedListNewSpawn_dont_delete_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.LinkedListNewSpawn_dont_delete_get(swigCPtr);
      return ret;
    } 
  }

  public void Append(SWIGTYPE_p_NewSpawn_Struct arg0) {
    questinterfacePINVOKE.LinkedListNewSpawn_Append(swigCPtr, SWIGTYPE_p_NewSpawn_Struct.getCPtr(arg0));
  }

  public void Insert(SWIGTYPE_p_NewSpawn_Struct arg0) {
    questinterfacePINVOKE.LinkedListNewSpawn_Insert(swigCPtr, SWIGTYPE_p_NewSpawn_Struct.getCPtr(arg0));
  }

  public SWIGTYPE_p_NewSpawn_Struct Pop() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.LinkedListNewSpawn_Pop(swigCPtr);
    SWIGTYPE_p_NewSpawn_Struct ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_NewSpawn_Struct(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_NewSpawn_Struct PeekTop() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.LinkedListNewSpawn_PeekTop(swigCPtr);
    SWIGTYPE_p_NewSpawn_Struct ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_NewSpawn_Struct(cPtr, false);
    return ret;
  }

  public void Clear() {
    questinterfacePINVOKE.LinkedListNewSpawn_Clear(swigCPtr);
  }

  public void LCount() {
    questinterfacePINVOKE.LinkedListNewSpawn_LCount(swigCPtr);
  }

  public void ResetCount() {
    questinterfacePINVOKE.LinkedListNewSpawn_ResetCount(swigCPtr);
  }

  public uint Count() {
    uint ret = questinterfacePINVOKE.LinkedListNewSpawn_Count(swigCPtr);
    return ret;
  }

  public LinkedListElementNewSpawn GetFirst() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.LinkedListNewSpawn_GetFirst(swigCPtr);
    LinkedListElementNewSpawn ret = (cPtr == global::System.IntPtr.Zero) ? null : new LinkedListElementNewSpawn(cPtr, false);
    return ret;
  }

}

public class LinkedListSpawn2 : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal LinkedListSpawn2(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(LinkedListSpawn2 obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(LinkedListSpawn2 obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~LinkedListSpawn2() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_LinkedListSpawn2(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public LinkedListSpawn2() : this(questinterfacePINVOKE.new_LinkedListSpawn2(), true) {
  }

  public bool dont_delete {
    set {
      questinterfacePINVOKE.LinkedListSpawn2_dont_delete_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.LinkedListSpawn2_dont_delete_get(swigCPtr);
      return ret;
    } 
  }

  public void Append(Spawn2 arg0) {
    questinterfacePINVOKE.LinkedListSpawn2_Append(swigCPtr, Spawn2.getCPtr(arg0));
  }

  public void Insert(Spawn2 arg0) {
    questinterfacePINVOKE.LinkedListSpawn2_Insert(swigCPtr, Spawn2.getCPtr(arg0));
  }

  public Spawn2 Pop() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.LinkedListSpawn2_Pop(swigCPtr);
    Spawn2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Spawn2(cPtr, false);
    return ret;
  }

  public Spawn2 PeekTop() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.LinkedListSpawn2_PeekTop(swigCPtr);
    Spawn2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Spawn2(cPtr, false);
    return ret;
  }

  public void Clear() {
    questinterfacePINVOKE.LinkedListSpawn2_Clear(swigCPtr);
  }

  public void LCount() {
    questinterfacePINVOKE.LinkedListSpawn2_LCount(swigCPtr);
  }

  public void ResetCount() {
    questinterfacePINVOKE.LinkedListSpawn2_ResetCount(swigCPtr);
  }

  public uint Count() {
    uint ret = questinterfacePINVOKE.LinkedListSpawn2_Count(swigCPtr);
    return ret;
  }

  public LinkedListElementSpawn2 GetFirst() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.LinkedListSpawn2_GetFirst(swigCPtr);
    LinkedListElementSpawn2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new LinkedListElementSpawn2(cPtr, false);
    return ret;
  }

}

public class LinkedListZonePoint : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal LinkedListZonePoint(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(LinkedListZonePoint obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(LinkedListZonePoint obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~LinkedListZonePoint() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_LinkedListZonePoint(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public LinkedListZonePoint() : this(questinterfacePINVOKE.new_LinkedListZonePoint(), true) {
  }

  public bool dont_delete {
    set {
      questinterfacePINVOKE.LinkedListZonePoint_dont_delete_set(swigCPtr, value);
    } 
    get {
      bool ret = questinterfacePINVOKE.LinkedListZonePoint_dont_delete_get(swigCPtr);
      return ret;
    } 
  }

  public void Append(ZonePoint arg0) {
    questinterfacePINVOKE.LinkedListZonePoint_Append(swigCPtr, ZonePoint.getCPtr(arg0));
  }

  public void Insert(ZonePoint arg0) {
    questinterfacePINVOKE.LinkedListZonePoint_Insert(swigCPtr, ZonePoint.getCPtr(arg0));
  }

  public ZonePoint Pop() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.LinkedListZonePoint_Pop(swigCPtr);
    ZonePoint ret = (cPtr == global::System.IntPtr.Zero) ? null : new ZonePoint(cPtr, false);
    return ret;
  }

  public ZonePoint PeekTop() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.LinkedListZonePoint_PeekTop(swigCPtr);
    ZonePoint ret = (cPtr == global::System.IntPtr.Zero) ? null : new ZonePoint(cPtr, false);
    return ret;
  }

  public void Clear() {
    questinterfacePINVOKE.LinkedListZonePoint_Clear(swigCPtr);
  }

  public void LCount() {
    questinterfacePINVOKE.LinkedListZonePoint_LCount(swigCPtr);
  }

  public void ResetCount() {
    questinterfacePINVOKE.LinkedListZonePoint_ResetCount(swigCPtr);
  }

  public uint Count() {
    uint ret = questinterfacePINVOKE.LinkedListZonePoint_Count(swigCPtr);
    return ret;
  }

  public LinkedListElementZonePoint GetFirst() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.LinkedListZonePoint_GetFirst(swigCPtr);
    LinkedListElementZonePoint ret = (cPtr == global::System.IntPtr.Zero) ? null : new LinkedListElementZonePoint(cPtr, false);
    return ret;
  }

}

public class LinkedListElementNewSpawn : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal LinkedListElementNewSpawn(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(LinkedListElementNewSpawn obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(LinkedListElementNewSpawn obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~LinkedListElementNewSpawn() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_LinkedListElementNewSpawn(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public LinkedListElementNewSpawn(SWIGTYPE_p_NewSpawn_Struct arg0) : this(questinterfacePINVOKE.new_LinkedListElementNewSpawn(SWIGTYPE_p_NewSpawn_Struct.getCPtr(arg0)), true) {
  }

  public LinkedListElementNewSpawn GetLast() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.LinkedListElementNewSpawn_GetLast(swigCPtr);
    LinkedListElementNewSpawn ret = (cPtr == global::System.IntPtr.Zero) ? null : new LinkedListElementNewSpawn(cPtr, false);
    return ret;
  }

  public LinkedListElementNewSpawn GetNext() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.LinkedListElementNewSpawn_GetNext(swigCPtr);
    LinkedListElementNewSpawn ret = (cPtr == global::System.IntPtr.Zero) ? null : new LinkedListElementNewSpawn(cPtr, false);
    return ret;
  }

  public LinkedListElementNewSpawn GetPrev() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.LinkedListElementNewSpawn_GetPrev(swigCPtr);
    LinkedListElementNewSpawn ret = (cPtr == global::System.IntPtr.Zero) ? null : new LinkedListElementNewSpawn(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_p_NewSpawn_Struct GetData() {
    SWIGTYPE_p_p_NewSpawn_Struct ret = new SWIGTYPE_p_p_NewSpawn_Struct(questinterfacePINVOKE.LinkedListElementNewSpawn_GetData__SWIG_0(swigCPtr), false);
    return ret;
  }

  public void SetData(SWIGTYPE_p_NewSpawn_Struct d) {
    questinterfacePINVOKE.LinkedListElementNewSpawn_SetData(swigCPtr, SWIGTYPE_p_NewSpawn_Struct.getCPtr(d));
  }

  public void SetLastNext(LinkedListElementNewSpawn p) {
    questinterfacePINVOKE.LinkedListElementNewSpawn_SetLastNext(swigCPtr, LinkedListElementNewSpawn.getCPtr(p));
  }

  public void SetNext(LinkedListElementNewSpawn n) {
    questinterfacePINVOKE.LinkedListElementNewSpawn_SetNext(swigCPtr, LinkedListElementNewSpawn.getCPtr(n));
  }

  public void SetPrev(LinkedListElementNewSpawn p) {
    questinterfacePINVOKE.LinkedListElementNewSpawn_SetPrev(swigCPtr, LinkedListElementNewSpawn.getCPtr(p));
  }

  public void ReplaceData(SWIGTYPE_p_NewSpawn_Struct arg0) {
    questinterfacePINVOKE.LinkedListElementNewSpawn_ReplaceData(swigCPtr, SWIGTYPE_p_NewSpawn_Struct.getCPtr(arg0));
  }

  public SWIGTYPE_p_NewSpawn_Struct GetObject() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.LinkedListElementNewSpawn_GetObject(swigCPtr);
    SWIGTYPE_p_NewSpawn_Struct ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_NewSpawn_Struct(cPtr, false);
    return ret;
  }

}

public class LinkedListElementSpawn2 : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal LinkedListElementSpawn2(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(LinkedListElementSpawn2 obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(LinkedListElementSpawn2 obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~LinkedListElementSpawn2() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_LinkedListElementSpawn2(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public LinkedListElementSpawn2(Spawn2 arg0) : this(questinterfacePINVOKE.new_LinkedListElementSpawn2(Spawn2.getCPtr(arg0)), true) {
  }

  public LinkedListElementSpawn2 GetLast() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.LinkedListElementSpawn2_GetLast(swigCPtr);
    LinkedListElementSpawn2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new LinkedListElementSpawn2(cPtr, false);
    return ret;
  }

  public LinkedListElementSpawn2 GetNext() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.LinkedListElementSpawn2_GetNext(swigCPtr);
    LinkedListElementSpawn2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new LinkedListElementSpawn2(cPtr, false);
    return ret;
  }

  public LinkedListElementSpawn2 GetPrev() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.LinkedListElementSpawn2_GetPrev(swigCPtr);
    LinkedListElementSpawn2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new LinkedListElementSpawn2(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_p_Spawn2 GetData() {
    SWIGTYPE_p_p_Spawn2 ret = new SWIGTYPE_p_p_Spawn2(questinterfacePINVOKE.LinkedListElementSpawn2_GetData__SWIG_0(swigCPtr), false);
    return ret;
  }

  public void SetData(Spawn2 d) {
    questinterfacePINVOKE.LinkedListElementSpawn2_SetData(swigCPtr, Spawn2.getCPtr(d));
  }

  public void SetLastNext(LinkedListElementSpawn2 p) {
    questinterfacePINVOKE.LinkedListElementSpawn2_SetLastNext(swigCPtr, LinkedListElementSpawn2.getCPtr(p));
  }

  public void SetNext(LinkedListElementSpawn2 n) {
    questinterfacePINVOKE.LinkedListElementSpawn2_SetNext(swigCPtr, LinkedListElementSpawn2.getCPtr(n));
  }

  public void SetPrev(LinkedListElementSpawn2 p) {
    questinterfacePINVOKE.LinkedListElementSpawn2_SetPrev(swigCPtr, LinkedListElementSpawn2.getCPtr(p));
  }

  public void ReplaceData(Spawn2 arg0) {
    questinterfacePINVOKE.LinkedListElementSpawn2_ReplaceData(swigCPtr, Spawn2.getCPtr(arg0));
  }

  public Spawn2 GetObject() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.LinkedListElementSpawn2_GetObject(swigCPtr);
    Spawn2 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Spawn2(cPtr, false);
    return ret;
  }

}

public class LinkedListElementZonePoint : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal LinkedListElementZonePoint(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(LinkedListElementZonePoint obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(LinkedListElementZonePoint obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~LinkedListElementZonePoint() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_LinkedListElementZonePoint(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public LinkedListElementZonePoint(ZonePoint arg0) : this(questinterfacePINVOKE.new_LinkedListElementZonePoint(ZonePoint.getCPtr(arg0)), true) {
  }

  public LinkedListElementZonePoint GetLast() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.LinkedListElementZonePoint_GetLast(swigCPtr);
    LinkedListElementZonePoint ret = (cPtr == global::System.IntPtr.Zero) ? null : new LinkedListElementZonePoint(cPtr, false);
    return ret;
  }

  public LinkedListElementZonePoint GetNext() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.LinkedListElementZonePoint_GetNext(swigCPtr);
    LinkedListElementZonePoint ret = (cPtr == global::System.IntPtr.Zero) ? null : new LinkedListElementZonePoint(cPtr, false);
    return ret;
  }

  public LinkedListElementZonePoint GetPrev() {
    global::System.IntPtr cPtr = questinterfacePINVOKE.LinkedListElementZonePoint_GetPrev(swigCPtr);
    LinkedListElementZonePoint ret = (cPtr == global::System.IntPtr.Zero) ? null : new LinkedListElementZonePoint(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_p_ZonePoint GetData() {
    SWIGTYPE_p_p_ZonePoint ret = new SWIGTYPE_p_p_ZonePoint(questinterfacePINVOKE.LinkedListElementZonePoint_GetData__SWIG_0(swigCPtr), false);
    return ret;
  }

  public void SetData(ZonePoint d) {
    questinterfacePINVOKE.LinkedListElementZonePoint_SetData(swigCPtr, ZonePoint.getCPtr(d));
  }

  public void SetLastNext(LinkedListElementZonePoint p) {
    questinterfacePINVOKE.LinkedListElementZonePoint_SetLastNext(swigCPtr, LinkedListElementZonePoint.getCPtr(p));
  }

  public void SetNext(LinkedListElementZonePoint n) {
    questinterfacePINVOKE.LinkedListElementZonePoint_SetNext(swigCPtr, LinkedListElementZonePoint.getCPtr(n));
  }

  public void SetPrev(LinkedListElementZonePoint p) {
    questinterfacePINVOKE.LinkedListElementZonePoint_SetPrev(swigCPtr, LinkedListElementZonePoint.getCPtr(p));
  }

  public void ReplaceData(ZonePoint arg0) {
    questinterfacePINVOKE.LinkedListElementZonePoint_ReplaceData(swigCPtr, ZonePoint.getCPtr(arg0));
  }

}

public class IntVector : global::System.IDisposable, global::System.Collections.IEnumerable, global::System.Collections.Generic.IList<int>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IntVector(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IntVector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(IntVector obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~IntVector() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_IntVector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public IntVector(global::System.Collections.IEnumerable c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (int element in c) {
      this.Add(element);
    }
  }

  public IntVector(global::System.Collections.Generic.IEnumerable<int> c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (int element in c) {
      this.Add(element);
    }
  }

  public bool IsFixedSize {
    get {
      return false;
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public int this[int index]  {
    get {
      return getitem(index);
    }
    set {
      setitem(index, value);
    }
  }

  public int Capacity {
    get {
      return (int)capacity();
    }
    set {
      if (value < 0 || (uint)value < size())
        throw new global::System.ArgumentOutOfRangeException("Capacity");
      reserve((uint)value);
    }
  }

  public bool IsEmpty {
    get {
      return empty();
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsSynchronized {
    get {
      return false;
    }
  }

  public void CopyTo(int[] array)
  {
    CopyTo(0, array, 0, this.Count);
  }

  public void CopyTo(int[] array, int arrayIndex)
  {
    CopyTo(0, array, arrayIndex, this.Count);
  }

  public void CopyTo(int index, int[] array, int arrayIndex, int count)
  {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (index < 0)
      throw new global::System.ArgumentOutOfRangeException("index", "Value is less than zero");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (count < 0)
      throw new global::System.ArgumentOutOfRangeException("count", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (index+count > this.Count || arrayIndex+count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");
    for (int i=0; i<count; i++)
      array.SetValue(getitemcopy(index+i), arrayIndex+i);
  }

  public int[] ToArray() {
    int[] array = new int[this.Count];
    this.CopyTo(array);
    return array;
  }

  global::System.Collections.Generic.IEnumerator<int> global::System.Collections.Generic.IEnumerable<int>.GetEnumerator() {
    return new IntVectorEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new IntVectorEnumerator(this);
  }

  public IntVectorEnumerator GetEnumerator() {
    return new IntVectorEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class IntVectorEnumerator : global::System.Collections.IEnumerator
    , global::System.Collections.Generic.IEnumerator<int>
  {
    private IntVector collectionRef;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public IntVectorEnumerator(IntVector collection) {
      collectionRef = collection;
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public int Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (int)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        currentObject = collectionRef[currentIndex];
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
        currentIndex = -1;
        currentObject = null;
    }
  }

  public IntVector() : this(questinterfacePINVOKE.new_IntVector__SWIG_0(), true) {
  }

  public IntVector(IntVector other) : this(questinterfacePINVOKE.new_IntVector__SWIG_1(IntVector.getCPtr(other)), true) {
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Clear() {
    questinterfacePINVOKE.IntVector_Clear(swigCPtr);
  }

  public void Add(int x) {
    questinterfacePINVOKE.IntVector_Add(swigCPtr, x);
  }

  private uint size() {
    uint ret = questinterfacePINVOKE.IntVector_size(swigCPtr);
    return ret;
  }

  private bool empty() {
    bool ret = questinterfacePINVOKE.IntVector_empty(swigCPtr);
    return ret;
  }

  private uint capacity() {
    uint ret = questinterfacePINVOKE.IntVector_capacity(swigCPtr);
    return ret;
  }

  private void reserve(uint n) {
    questinterfacePINVOKE.IntVector_reserve(swigCPtr, n);
  }

  public IntVector(int capacity) : this(questinterfacePINVOKE.new_IntVector__SWIG_2(capacity), true) {
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  private int getitemcopy(int index) {
    int ret = questinterfacePINVOKE.IntVector_getitemcopy(swigCPtr, index);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private int getitem(int index) {
    int ret = questinterfacePINVOKE.IntVector_getitem(swigCPtr, index);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(int index, int val) {
    questinterfacePINVOKE.IntVector_setitem(swigCPtr, index, val);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddRange(IntVector values) {
    questinterfacePINVOKE.IntVector_AddRange(swigCPtr, IntVector.getCPtr(values));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public IntVector GetRange(int index, int count) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.IntVector_GetRange(swigCPtr, index, count);
    IntVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new IntVector(cPtr, true);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Insert(int index, int x) {
    questinterfacePINVOKE.IntVector_Insert(swigCPtr, index, x);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void InsertRange(int index, IntVector values) {
    questinterfacePINVOKE.IntVector_InsertRange(swigCPtr, index, IntVector.getCPtr(values));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAt(int index) {
    questinterfacePINVOKE.IntVector_RemoveAt(swigCPtr, index);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveRange(int index, int count) {
    questinterfacePINVOKE.IntVector_RemoveRange(swigCPtr, index, count);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public static IntVector Repeat(int value, int count) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.IntVector_Repeat(value, count);
    IntVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new IntVector(cPtr, true);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Reverse() {
    questinterfacePINVOKE.IntVector_Reverse__SWIG_0(swigCPtr);
  }

  public void Reverse(int index, int count) {
    questinterfacePINVOKE.IntVector_Reverse__SWIG_1(swigCPtr, index, count);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRange(int index, IntVector values) {
    questinterfacePINVOKE.IntVector_SetRange(swigCPtr, index, IntVector.getCPtr(values));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Contains(int value) {
    bool ret = questinterfacePINVOKE.IntVector_Contains(swigCPtr, value);
    return ret;
  }

  public int IndexOf(int value) {
    int ret = questinterfacePINVOKE.IntVector_IndexOf(swigCPtr, value);
    return ret;
  }

  public int LastIndexOf(int value) {
    int ret = questinterfacePINVOKE.IntVector_LastIndexOf(swigCPtr, value);
    return ret;
  }

  public bool Remove(int value) {
    bool ret = questinterfacePINVOKE.IntVector_Remove(swigCPtr, value);
    return ret;
  }

}

public class DoubleVector : global::System.IDisposable, global::System.Collections.IEnumerable, global::System.Collections.Generic.IList<double>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DoubleVector(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DoubleVector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(DoubleVector obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~DoubleVector() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_DoubleVector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public DoubleVector(global::System.Collections.IEnumerable c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (double element in c) {
      this.Add(element);
    }
  }

  public DoubleVector(global::System.Collections.Generic.IEnumerable<double> c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (double element in c) {
      this.Add(element);
    }
  }

  public bool IsFixedSize {
    get {
      return false;
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public double this[int index]  {
    get {
      return getitem(index);
    }
    set {
      setitem(index, value);
    }
  }

  public int Capacity {
    get {
      return (int)capacity();
    }
    set {
      if (value < 0 || (uint)value < size())
        throw new global::System.ArgumentOutOfRangeException("Capacity");
      reserve((uint)value);
    }
  }

  public bool IsEmpty {
    get {
      return empty();
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsSynchronized {
    get {
      return false;
    }
  }

  public void CopyTo(double[] array)
  {
    CopyTo(0, array, 0, this.Count);
  }

  public void CopyTo(double[] array, int arrayIndex)
  {
    CopyTo(0, array, arrayIndex, this.Count);
  }

  public void CopyTo(int index, double[] array, int arrayIndex, int count)
  {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (index < 0)
      throw new global::System.ArgumentOutOfRangeException("index", "Value is less than zero");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (count < 0)
      throw new global::System.ArgumentOutOfRangeException("count", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (index+count > this.Count || arrayIndex+count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");
    for (int i=0; i<count; i++)
      array.SetValue(getitemcopy(index+i), arrayIndex+i);
  }

  public double[] ToArray() {
    double[] array = new double[this.Count];
    this.CopyTo(array);
    return array;
  }

  global::System.Collections.Generic.IEnumerator<double> global::System.Collections.Generic.IEnumerable<double>.GetEnumerator() {
    return new DoubleVectorEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new DoubleVectorEnumerator(this);
  }

  public DoubleVectorEnumerator GetEnumerator() {
    return new DoubleVectorEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class DoubleVectorEnumerator : global::System.Collections.IEnumerator
    , global::System.Collections.Generic.IEnumerator<double>
  {
    private DoubleVector collectionRef;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public DoubleVectorEnumerator(DoubleVector collection) {
      collectionRef = collection;
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public double Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (double)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        currentObject = collectionRef[currentIndex];
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
        currentIndex = -1;
        currentObject = null;
    }
  }

  public DoubleVector() : this(questinterfacePINVOKE.new_DoubleVector__SWIG_0(), true) {
  }

  public DoubleVector(DoubleVector other) : this(questinterfacePINVOKE.new_DoubleVector__SWIG_1(DoubleVector.getCPtr(other)), true) {
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Clear() {
    questinterfacePINVOKE.DoubleVector_Clear(swigCPtr);
  }

  public void Add(double x) {
    questinterfacePINVOKE.DoubleVector_Add(swigCPtr, x);
  }

  private uint size() {
    uint ret = questinterfacePINVOKE.DoubleVector_size(swigCPtr);
    return ret;
  }

  private bool empty() {
    bool ret = questinterfacePINVOKE.DoubleVector_empty(swigCPtr);
    return ret;
  }

  private uint capacity() {
    uint ret = questinterfacePINVOKE.DoubleVector_capacity(swigCPtr);
    return ret;
  }

  private void reserve(uint n) {
    questinterfacePINVOKE.DoubleVector_reserve(swigCPtr, n);
  }

  public DoubleVector(int capacity) : this(questinterfacePINVOKE.new_DoubleVector__SWIG_2(capacity), true) {
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  private double getitemcopy(int index) {
    double ret = questinterfacePINVOKE.DoubleVector_getitemcopy(swigCPtr, index);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private double getitem(int index) {
    double ret = questinterfacePINVOKE.DoubleVector_getitem(swigCPtr, index);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(int index, double val) {
    questinterfacePINVOKE.DoubleVector_setitem(swigCPtr, index, val);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddRange(DoubleVector values) {
    questinterfacePINVOKE.DoubleVector_AddRange(swigCPtr, DoubleVector.getCPtr(values));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public DoubleVector GetRange(int index, int count) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.DoubleVector_GetRange(swigCPtr, index, count);
    DoubleVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new DoubleVector(cPtr, true);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Insert(int index, double x) {
    questinterfacePINVOKE.DoubleVector_Insert(swigCPtr, index, x);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void InsertRange(int index, DoubleVector values) {
    questinterfacePINVOKE.DoubleVector_InsertRange(swigCPtr, index, DoubleVector.getCPtr(values));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAt(int index) {
    questinterfacePINVOKE.DoubleVector_RemoveAt(swigCPtr, index);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveRange(int index, int count) {
    questinterfacePINVOKE.DoubleVector_RemoveRange(swigCPtr, index, count);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public static DoubleVector Repeat(double value, int count) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.DoubleVector_Repeat(value, count);
    DoubleVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new DoubleVector(cPtr, true);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Reverse() {
    questinterfacePINVOKE.DoubleVector_Reverse__SWIG_0(swigCPtr);
  }

  public void Reverse(int index, int count) {
    questinterfacePINVOKE.DoubleVector_Reverse__SWIG_1(swigCPtr, index, count);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRange(int index, DoubleVector values) {
    questinterfacePINVOKE.DoubleVector_SetRange(swigCPtr, index, DoubleVector.getCPtr(values));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Contains(double value) {
    bool ret = questinterfacePINVOKE.DoubleVector_Contains(swigCPtr, value);
    return ret;
  }

  public int IndexOf(double value) {
    int ret = questinterfacePINVOKE.DoubleVector_IndexOf(swigCPtr, value);
    return ret;
  }

  public int LastIndexOf(double value) {
    int ret = questinterfacePINVOKE.DoubleVector_LastIndexOf(swigCPtr, value);
    return ret;
  }

  public bool Remove(double value) {
    bool ret = questinterfacePINVOKE.DoubleVector_Remove(swigCPtr, value);
    return ret;
  }

}

public class IntList : global::System.IDisposable, global::System.Collections.IEnumerable, global::System.Collections.Generic.ICollection<int>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IntList(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IntList obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(IntList obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~IntList() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_IntList(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public IntList(global::System.Collections.IEnumerable c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (int element in c) {
      this.AddLast(element);
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public IntListNode First {
    get {
      if (Count == 0)
        return null;
      return new IntListNode(getFirstIter(), this);
    }
  }

  public IntListNode Last {
    get {
      if (Count == 0)
        return null;
      return new IntListNode(getLastIter(), this);
    }
  }

  public IntListNode AddFirst(int value) {
    push_front(value);
    return new IntListNode(getFirstIter(), this);
  }

  public void AddFirst(IntListNode newNode) {
    ValidateNewNode(newNode);
    if (!newNode.inlist) {
      push_front(newNode.csharpvalue);
      newNode.iter = getFirstIter();
      newNode.inlist = true;
    } else {
      throw new global::System.InvalidOperationException("The " + newNode.GetType().Name + " node already belongs to a " + this.GetType().Name);
    }
  }

  public IntListNode AddLast(int value) {
    push_back(value);
    return new IntListNode(getLastIter(), this);
  }

  public void AddLast(IntListNode newNode) {
    ValidateNewNode(newNode);
    if (!newNode.inlist) {
      push_back(newNode.csharpvalue);
      newNode.iter = getLastIter();
      newNode.inlist = true;
    } else {
      throw new global::System.InvalidOperationException("The " + newNode.GetType().Name + " node already belongs to a " + this.GetType().Name);
    }
  }

  public IntListNode AddBefore(IntListNode node, int value) {
    return new IntListNode(insertNode(node.iter, value), this);
  }

  public void AddBefore(IntListNode node, IntListNode newNode) {
    ValidateNode(node);
    ValidateNewNode(newNode);
    if (!newNode.inlist) {
      newNode.iter = insertNode(node.iter, newNode.csharpvalue);
      newNode.inlist = true;
    } else {
      throw new global::System.InvalidOperationException("The " + newNode.GetType().Name + " node already belongs to a " + this.GetType().Name);
    }
  }

  public IntListNode AddAfter(IntListNode node, int value) {
    node = node.Next;
    return new IntListNode(insertNode(node.iter, value), this);
  }

  public void AddAfter(IntListNode node, IntListNode newNode) {
    ValidateNode(node);
    ValidateNewNode(newNode);
    if (!newNode.inlist) {
      if (node == this.Last)
        AddLast(newNode);
      else
      {
        node = node.Next;
        newNode.iter = insertNode(node.iter, newNode.csharpvalue);
        newNode.inlist = true;
      }
    } else {
      throw new global::System.InvalidOperationException("The " + newNode.GetType().Name + " node already belongs to a " + this.GetType().Name);
    }
  }

  public void Add(int value) {
    AddLast(value);
  }

  public void Remove(IntListNode node) {
    ValidateNode(node);
    eraseIter(node.iter);
  }

  public void CopyTo(int[] array, int index) {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (index < 0 || index > array.Length)
      throw new global::System.ArgumentOutOfRangeException("index", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    IntListNode node = this.First;
    if (node != null) {
      do {
        array[index++] = node.Value;
        node = node.Next;
      } while (node != null);
    }
  }

  internal void ValidateNode(IntListNode node) {
    if (node == null) {
      throw new System.ArgumentNullException("node");
    }
    if (!node.inlist || node.list != this) {
      throw new System.InvalidOperationException("node");
    }
  }

  internal void ValidateNewNode(IntListNode node) {
    if (node == null) {
      throw new System.ArgumentNullException("node");
    }
  }

  global::System.Collections.Generic.IEnumerator<int> global::System.Collections.Generic.IEnumerable<int>.GetEnumerator() {
    return new IntListEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new IntListEnumerator(this);
  }

  public IntListEnumerator GetEnumerator() {
    return new IntListEnumerator(this);
  }

  public sealed class IntListEnumerator : global::System.Collections.IEnumerator,
    global::System.Collections.Generic.IEnumerator<int>
  {
    private IntList collectionRef;
    private IntListNode currentNode;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public IntListEnumerator(IntList collection) {
      collectionRef = collection;
      currentNode = collection.First;
      currentIndex = 0;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public int Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (int)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      if (currentNode == null) {
        currentIndex = collectionRef.Count + 1;
        return false;
      }
      ++currentIndex;
      currentObject = currentNode.Value;
      currentNode = currentNode.Next;
      return true;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
      currentIndex = -1;
      currentObject = null;
    }
  }

  public sealed class IntListNode {
    internal IntList list;
    internal System.IntPtr iter;
    internal int csharpvalue;
    internal bool inlist;

    public IntListNode(int value) {
      csharpvalue = value;
      inlist = false;
    }

    internal IntListNode(System.IntPtr iter, IntList list) {
      this.list = list;
      this.iter = iter;
      inlist = true;
    }

    public IntList List {
      get {
        return this.list;
      }
    }

    public IntListNode Next {
      get {
        if (list.getNextIter(iter) == System.IntPtr.Zero)
          return null;
        return new IntListNode(list.getNextIter(iter), list);
      }
    }

    public IntListNode Previous {
      get {
        if (list.getPrevIter(iter) == System.IntPtr.Zero)
          return null;
        return new IntListNode(list.getPrevIter(iter), list);
      }
    }

    public int Value {
      get {
        return list.getItem(this.iter);
      }
      set {
        list.setItem(this.iter, value);
      }
    }

    public static bool operator==(IntListNode node1, IntListNode node2) {
      if (object.ReferenceEquals(node1, null) && object.ReferenceEquals(node2, null))
        return true;
      if (object.ReferenceEquals(node1, null) || object.ReferenceEquals(node2, null))
        return false;
      return node1.Equals(node2);
    }

    public static bool operator!=(IntListNode node1, IntListNode node2) {
      if (node1 == null && node2 == null)
        return false;
      if (node1 == null || node2 == null)
        return true;
      return !node1.Equals(node2);
    }

    public bool Equals(IntListNode node) {
      if (node == null)
        return false;
      if (!node.inlist || !this.inlist)
        return object.ReferenceEquals(this, node);
      return list.equals(this.iter, node.iter);
    }

    public override bool Equals(object node) {
      return Equals((IntListNode)node);
    }

    public override int GetHashCode() {
      int hash = 13;
      if (inlist) {
        hash = (hash * 7) + this.list.GetHashCode();
        hash = (hash * 7) + this.Value.GetHashCode();
        hash = (hash * 7) + this.list.getNextIter(this.iter).GetHashCode();
        hash = (hash * 7) + this.list.getPrevIter(this.iter).GetHashCode();
      } else {
        hash = (hash * 7) + this.csharpvalue.GetHashCode();
      }
      return hash;
    }

    public void Dispose() {
      list.deleteIter(this.iter);
    }
  }

  private void push_front(int x) {
    questinterfacePINVOKE.IntList_push_front(swigCPtr, x);
  }

  private void push_back(int x) {
    questinterfacePINVOKE.IntList_push_back(swigCPtr, x);
  }

  public void RemoveFirst() {
    questinterfacePINVOKE.IntList_RemoveFirst(swigCPtr);
  }

  public void RemoveLast() {
    questinterfacePINVOKE.IntList_RemoveLast(swigCPtr);
  }

  private uint size() {
    uint ret = questinterfacePINVOKE.IntList_size(swigCPtr);
    return ret;
  }

  public void Clear() {
    questinterfacePINVOKE.IntList_Clear(swigCPtr);
  }

  private int getItem(global::System.IntPtr iter) {
    int ret = questinterfacePINVOKE.IntList_getItem(swigCPtr, iter);
    return ret;
  }

  private void setItem(global::System.IntPtr iter, int val) {
    questinterfacePINVOKE.IntList_setItem(swigCPtr, iter, val);
  }

  private global::System.IntPtr getFirstIter() {
    global::System.IntPtr ret = questinterfacePINVOKE.IntList_getFirstIter(swigCPtr);
    return ret;
  }

  private global::System.IntPtr getLastIter() {
    global::System.IntPtr ret = questinterfacePINVOKE.IntList_getLastIter(swigCPtr);
    return ret;
  }

  private global::System.IntPtr getNextIter(global::System.IntPtr iter) {
    global::System.IntPtr ret = questinterfacePINVOKE.IntList_getNextIter(swigCPtr, iter);
    return ret;
  }

  private global::System.IntPtr getPrevIter(global::System.IntPtr iter) {
    global::System.IntPtr ret = questinterfacePINVOKE.IntList_getPrevIter(swigCPtr, iter);
    return ret;
  }

  public global::System.IntPtr insertNode(global::System.IntPtr iter, int value) {
    global::System.IntPtr ret = questinterfacePINVOKE.IntList_insertNode(swigCPtr, iter, value);
    return ret;
  }

  public void eraseIter(global::System.IntPtr iter) {
    questinterfacePINVOKE.IntList_eraseIter(swigCPtr, iter);
  }

  private void deleteIter(global::System.IntPtr iter) {
    questinterfacePINVOKE.IntList_deleteIter(swigCPtr, iter);
  }

  public bool equals(global::System.IntPtr iter1, global::System.IntPtr iter2) {
    bool ret = questinterfacePINVOKE.IntList_equals(swigCPtr, iter1, iter2);
    return ret;
  }

  public bool Contains(int value) {
    bool ret = questinterfacePINVOKE.IntList_Contains(swigCPtr, value);
    return ret;
  }

  public bool Remove(int value) {
    bool ret = questinterfacePINVOKE.IntList_Remove(swigCPtr, value);
    return ret;
  }

  private global::System.IntPtr find(int value) {
    global::System.IntPtr ret = questinterfacePINVOKE.IntList_find(swigCPtr, value);
    return ret;
  }

  public IntListNode Find(int value) {
    System.IntPtr tmp = find(value);
    if (tmp != System.IntPtr.Zero) {
      return new IntListNode(tmp, this);
    }
    return null;
  }

  public IntList() : this(questinterfacePINVOKE.new_IntList(), true) {
  }

}

public class DoubleList : global::System.IDisposable, global::System.Collections.IEnumerable, global::System.Collections.Generic.ICollection<double>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DoubleList(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DoubleList obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(DoubleList obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~DoubleList() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_DoubleList(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public DoubleList(global::System.Collections.IEnumerable c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (double element in c) {
      this.AddLast(element);
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public DoubleListNode First {
    get {
      if (Count == 0)
        return null;
      return new DoubleListNode(getFirstIter(), this);
    }
  }

  public DoubleListNode Last {
    get {
      if (Count == 0)
        return null;
      return new DoubleListNode(getLastIter(), this);
    }
  }

  public DoubleListNode AddFirst(double value) {
    push_front(value);
    return new DoubleListNode(getFirstIter(), this);
  }

  public void AddFirst(DoubleListNode newNode) {
    ValidateNewNode(newNode);
    if (!newNode.inlist) {
      push_front(newNode.csharpvalue);
      newNode.iter = getFirstIter();
      newNode.inlist = true;
    } else {
      throw new global::System.InvalidOperationException("The " + newNode.GetType().Name + " node already belongs to a " + this.GetType().Name);
    }
  }

  public DoubleListNode AddLast(double value) {
    push_back(value);
    return new DoubleListNode(getLastIter(), this);
  }

  public void AddLast(DoubleListNode newNode) {
    ValidateNewNode(newNode);
    if (!newNode.inlist) {
      push_back(newNode.csharpvalue);
      newNode.iter = getLastIter();
      newNode.inlist = true;
    } else {
      throw new global::System.InvalidOperationException("The " + newNode.GetType().Name + " node already belongs to a " + this.GetType().Name);
    }
  }

  public DoubleListNode AddBefore(DoubleListNode node, double value) {
    return new DoubleListNode(insertNode(node.iter, value), this);
  }

  public void AddBefore(DoubleListNode node, DoubleListNode newNode) {
    ValidateNode(node);
    ValidateNewNode(newNode);
    if (!newNode.inlist) {
      newNode.iter = insertNode(node.iter, newNode.csharpvalue);
      newNode.inlist = true;
    } else {
      throw new global::System.InvalidOperationException("The " + newNode.GetType().Name + " node already belongs to a " + this.GetType().Name);
    }
  }

  public DoubleListNode AddAfter(DoubleListNode node, double value) {
    node = node.Next;
    return new DoubleListNode(insertNode(node.iter, value), this);
  }

  public void AddAfter(DoubleListNode node, DoubleListNode newNode) {
    ValidateNode(node);
    ValidateNewNode(newNode);
    if (!newNode.inlist) {
      if (node == this.Last)
        AddLast(newNode);
      else
      {
        node = node.Next;
        newNode.iter = insertNode(node.iter, newNode.csharpvalue);
        newNode.inlist = true;
      }
    } else {
      throw new global::System.InvalidOperationException("The " + newNode.GetType().Name + " node already belongs to a " + this.GetType().Name);
    }
  }

  public void Add(double value) {
    AddLast(value);
  }

  public void Remove(DoubleListNode node) {
    ValidateNode(node);
    eraseIter(node.iter);
  }

  public void CopyTo(double[] array, int index) {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (index < 0 || index > array.Length)
      throw new global::System.ArgumentOutOfRangeException("index", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    DoubleListNode node = this.First;
    if (node != null) {
      do {
        array[index++] = node.Value;
        node = node.Next;
      } while (node != null);
    }
  }

  internal void ValidateNode(DoubleListNode node) {
    if (node == null) {
      throw new System.ArgumentNullException("node");
    }
    if (!node.inlist || node.list != this) {
      throw new System.InvalidOperationException("node");
    }
  }

  internal void ValidateNewNode(DoubleListNode node) {
    if (node == null) {
      throw new System.ArgumentNullException("node");
    }
  }

  global::System.Collections.Generic.IEnumerator<double> global::System.Collections.Generic.IEnumerable<double>.GetEnumerator() {
    return new DoubleListEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new DoubleListEnumerator(this);
  }

  public DoubleListEnumerator GetEnumerator() {
    return new DoubleListEnumerator(this);
  }

  public sealed class DoubleListEnumerator : global::System.Collections.IEnumerator,
    global::System.Collections.Generic.IEnumerator<double>
  {
    private DoubleList collectionRef;
    private DoubleListNode currentNode;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public DoubleListEnumerator(DoubleList collection) {
      collectionRef = collection;
      currentNode = collection.First;
      currentIndex = 0;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public double Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (double)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      if (currentNode == null) {
        currentIndex = collectionRef.Count + 1;
        return false;
      }
      ++currentIndex;
      currentObject = currentNode.Value;
      currentNode = currentNode.Next;
      return true;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
      currentIndex = -1;
      currentObject = null;
    }
  }

  public sealed class DoubleListNode {
    internal DoubleList list;
    internal System.IntPtr iter;
    internal double csharpvalue;
    internal bool inlist;

    public DoubleListNode(double value) {
      csharpvalue = value;
      inlist = false;
    }

    internal DoubleListNode(System.IntPtr iter, DoubleList list) {
      this.list = list;
      this.iter = iter;
      inlist = true;
    }

    public DoubleList List {
      get {
        return this.list;
      }
    }

    public DoubleListNode Next {
      get {
        if (list.getNextIter(iter) == System.IntPtr.Zero)
          return null;
        return new DoubleListNode(list.getNextIter(iter), list);
      }
    }

    public DoubleListNode Previous {
      get {
        if (list.getPrevIter(iter) == System.IntPtr.Zero)
          return null;
        return new DoubleListNode(list.getPrevIter(iter), list);
      }
    }

    public double Value {
      get {
        return list.getItem(this.iter);
      }
      set {
        list.setItem(this.iter, value);
      }
    }

    public static bool operator==(DoubleListNode node1, DoubleListNode node2) {
      if (object.ReferenceEquals(node1, null) && object.ReferenceEquals(node2, null))
        return true;
      if (object.ReferenceEquals(node1, null) || object.ReferenceEquals(node2, null))
        return false;
      return node1.Equals(node2);
    }

    public static bool operator!=(DoubleListNode node1, DoubleListNode node2) {
      if (node1 == null && node2 == null)
        return false;
      if (node1 == null || node2 == null)
        return true;
      return !node1.Equals(node2);
    }

    public bool Equals(DoubleListNode node) {
      if (node == null)
        return false;
      if (!node.inlist || !this.inlist)
        return object.ReferenceEquals(this, node);
      return list.equals(this.iter, node.iter);
    }

    public override bool Equals(object node) {
      return Equals((DoubleListNode)node);
    }

    public override int GetHashCode() {
      int hash = 13;
      if (inlist) {
        hash = (hash * 7) + this.list.GetHashCode();
        hash = (hash * 7) + this.Value.GetHashCode();
        hash = (hash * 7) + this.list.getNextIter(this.iter).GetHashCode();
        hash = (hash * 7) + this.list.getPrevIter(this.iter).GetHashCode();
      } else {
        hash = (hash * 7) + this.csharpvalue.GetHashCode();
      }
      return hash;
    }

    public void Dispose() {
      list.deleteIter(this.iter);
    }
  }

  private void push_front(double x) {
    questinterfacePINVOKE.DoubleList_push_front(swigCPtr, x);
  }

  private void push_back(double x) {
    questinterfacePINVOKE.DoubleList_push_back(swigCPtr, x);
  }

  public void RemoveFirst() {
    questinterfacePINVOKE.DoubleList_RemoveFirst(swigCPtr);
  }

  public void RemoveLast() {
    questinterfacePINVOKE.DoubleList_RemoveLast(swigCPtr);
  }

  private uint size() {
    uint ret = questinterfacePINVOKE.DoubleList_size(swigCPtr);
    return ret;
  }

  public void Clear() {
    questinterfacePINVOKE.DoubleList_Clear(swigCPtr);
  }

  private double getItem(global::System.IntPtr iter) {
    double ret = questinterfacePINVOKE.DoubleList_getItem(swigCPtr, iter);
    return ret;
  }

  private void setItem(global::System.IntPtr iter, double val) {
    questinterfacePINVOKE.DoubleList_setItem(swigCPtr, iter, val);
  }

  private global::System.IntPtr getFirstIter() {
    global::System.IntPtr ret = questinterfacePINVOKE.DoubleList_getFirstIter(swigCPtr);
    return ret;
  }

  private global::System.IntPtr getLastIter() {
    global::System.IntPtr ret = questinterfacePINVOKE.DoubleList_getLastIter(swigCPtr);
    return ret;
  }

  private global::System.IntPtr getNextIter(global::System.IntPtr iter) {
    global::System.IntPtr ret = questinterfacePINVOKE.DoubleList_getNextIter(swigCPtr, iter);
    return ret;
  }

  private global::System.IntPtr getPrevIter(global::System.IntPtr iter) {
    global::System.IntPtr ret = questinterfacePINVOKE.DoubleList_getPrevIter(swigCPtr, iter);
    return ret;
  }

  public global::System.IntPtr insertNode(global::System.IntPtr iter, double value) {
    global::System.IntPtr ret = questinterfacePINVOKE.DoubleList_insertNode(swigCPtr, iter, value);
    return ret;
  }

  public void eraseIter(global::System.IntPtr iter) {
    questinterfacePINVOKE.DoubleList_eraseIter(swigCPtr, iter);
  }

  private void deleteIter(global::System.IntPtr iter) {
    questinterfacePINVOKE.DoubleList_deleteIter(swigCPtr, iter);
  }

  public bool equals(global::System.IntPtr iter1, global::System.IntPtr iter2) {
    bool ret = questinterfacePINVOKE.DoubleList_equals(swigCPtr, iter1, iter2);
    return ret;
  }

  public bool Contains(double value) {
    bool ret = questinterfacePINVOKE.DoubleList_Contains(swigCPtr, value);
    return ret;
  }

  public bool Remove(double value) {
    bool ret = questinterfacePINVOKE.DoubleList_Remove(swigCPtr, value);
    return ret;
  }

  private global::System.IntPtr find(double value) {
    global::System.IntPtr ret = questinterfacePINVOKE.DoubleList_find(swigCPtr, value);
    return ret;
  }

  public DoubleListNode Find(double value) {
    System.IntPtr tmp = find(value);
    if (tmp != System.IntPtr.Zero) {
      return new DoubleListNode(tmp, this);
    }
    return null;
  }

  public DoubleList() : this(questinterfacePINVOKE.new_DoubleList(), true) {
  }

}

public class AltCurrencyDefinitionList : global::System.IDisposable, global::System.Collections.IEnumerable, global::System.Collections.Generic.IEnumerable<SWIGTYPE_p_AltCurrencyDefinition_Struct>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal AltCurrencyDefinitionList(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AltCurrencyDefinitionList obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(AltCurrencyDefinitionList obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~AltCurrencyDefinitionList() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_AltCurrencyDefinitionList(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public AltCurrencyDefinitionList(global::System.Collections.IEnumerable c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (SWIGTYPE_p_AltCurrencyDefinition_Struct element in c) {
      this.AddLast(element);
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public AltCurrencyDefinitionListNode First {
    get {
      if (Count == 0)
        return null;
      return new AltCurrencyDefinitionListNode(getFirstIter(), this);
    }
  }

  public AltCurrencyDefinitionListNode Last {
    get {
      if (Count == 0)
        return null;
      return new AltCurrencyDefinitionListNode(getLastIter(), this);
    }
  }

  public AltCurrencyDefinitionListNode AddFirst(SWIGTYPE_p_AltCurrencyDefinition_Struct value) {
    push_front(value);
    return new AltCurrencyDefinitionListNode(getFirstIter(), this);
  }

  public void AddFirst(AltCurrencyDefinitionListNode newNode) {
    ValidateNewNode(newNode);
    if (!newNode.inlist) {
      push_front(newNode.csharpvalue);
      newNode.iter = getFirstIter();
      newNode.inlist = true;
    } else {
      throw new global::System.InvalidOperationException("The " + newNode.GetType().Name + " node already belongs to a " + this.GetType().Name);
    }
  }

  public AltCurrencyDefinitionListNode AddLast(SWIGTYPE_p_AltCurrencyDefinition_Struct value) {
    push_back(value);
    return new AltCurrencyDefinitionListNode(getLastIter(), this);
  }

  public void AddLast(AltCurrencyDefinitionListNode newNode) {
    ValidateNewNode(newNode);
    if (!newNode.inlist) {
      push_back(newNode.csharpvalue);
      newNode.iter = getLastIter();
      newNode.inlist = true;
    } else {
      throw new global::System.InvalidOperationException("The " + newNode.GetType().Name + " node already belongs to a " + this.GetType().Name);
    }
  }

  public AltCurrencyDefinitionListNode AddBefore(AltCurrencyDefinitionListNode node, SWIGTYPE_p_AltCurrencyDefinition_Struct value) {
    return new AltCurrencyDefinitionListNode(insertNode(node.iter, value), this);
  }

  public void AddBefore(AltCurrencyDefinitionListNode node, AltCurrencyDefinitionListNode newNode) {
    ValidateNode(node);
    ValidateNewNode(newNode);
    if (!newNode.inlist) {
      newNode.iter = insertNode(node.iter, newNode.csharpvalue);
      newNode.inlist = true;
    } else {
      throw new global::System.InvalidOperationException("The " + newNode.GetType().Name + " node already belongs to a " + this.GetType().Name);
    }
  }

  public AltCurrencyDefinitionListNode AddAfter(AltCurrencyDefinitionListNode node, SWIGTYPE_p_AltCurrencyDefinition_Struct value) {
    node = node.Next;
    return new AltCurrencyDefinitionListNode(insertNode(node.iter, value), this);
  }

  public void AddAfter(AltCurrencyDefinitionListNode node, AltCurrencyDefinitionListNode newNode) {
    ValidateNode(node);
    ValidateNewNode(newNode);
    if (!newNode.inlist) {
      if (node == this.Last)
        AddLast(newNode);
      else
      {
        node = node.Next;
        newNode.iter = insertNode(node.iter, newNode.csharpvalue);
        newNode.inlist = true;
      }
    } else {
      throw new global::System.InvalidOperationException("The " + newNode.GetType().Name + " node already belongs to a " + this.GetType().Name);
    }
  }

  public void Add(SWIGTYPE_p_AltCurrencyDefinition_Struct value) {
    AddLast(value);
  }

  public void Remove(AltCurrencyDefinitionListNode node) {
    ValidateNode(node);
    eraseIter(node.iter);
  }

  public void CopyTo(SWIGTYPE_p_AltCurrencyDefinition_Struct[] array, int index) {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (index < 0 || index > array.Length)
      throw new global::System.ArgumentOutOfRangeException("index", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    AltCurrencyDefinitionListNode node = this.First;
    if (node != null) {
      do {
        array[index++] = node.Value;
        node = node.Next;
      } while (node != null);
    }
  }

  internal void ValidateNode(AltCurrencyDefinitionListNode node) {
    if (node == null) {
      throw new System.ArgumentNullException("node");
    }
    if (!node.inlist || node.list != this) {
      throw new System.InvalidOperationException("node");
    }
  }

  internal void ValidateNewNode(AltCurrencyDefinitionListNode node) {
    if (node == null) {
      throw new System.ArgumentNullException("node");
    }
  }

  global::System.Collections.Generic.IEnumerator<SWIGTYPE_p_AltCurrencyDefinition_Struct> global::System.Collections.Generic.IEnumerable<SWIGTYPE_p_AltCurrencyDefinition_Struct>.GetEnumerator() {
    return new AltCurrencyDefinitionListEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new AltCurrencyDefinitionListEnumerator(this);
  }

  public AltCurrencyDefinitionListEnumerator GetEnumerator() {
    return new AltCurrencyDefinitionListEnumerator(this);
  }

  public sealed class AltCurrencyDefinitionListEnumerator : global::System.Collections.IEnumerator,
    global::System.Collections.Generic.IEnumerator<SWIGTYPE_p_AltCurrencyDefinition_Struct>
  {
    private AltCurrencyDefinitionList collectionRef;
    private AltCurrencyDefinitionListNode currentNode;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public AltCurrencyDefinitionListEnumerator(AltCurrencyDefinitionList collection) {
      collectionRef = collection;
      currentNode = collection.First;
      currentIndex = 0;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public SWIGTYPE_p_AltCurrencyDefinition_Struct Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (SWIGTYPE_p_AltCurrencyDefinition_Struct)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      if (currentNode == null) {
        currentIndex = collectionRef.Count + 1;
        return false;
      }
      ++currentIndex;
      currentObject = currentNode.Value;
      currentNode = currentNode.Next;
      return true;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
      currentIndex = -1;
      currentObject = null;
    }
  }

  public sealed class AltCurrencyDefinitionListNode {
    internal AltCurrencyDefinitionList list;
    internal System.IntPtr iter;
    internal SWIGTYPE_p_AltCurrencyDefinition_Struct csharpvalue;
    internal bool inlist;

    public AltCurrencyDefinitionListNode(SWIGTYPE_p_AltCurrencyDefinition_Struct value) {
      csharpvalue = value;
      inlist = false;
    }

    internal AltCurrencyDefinitionListNode(System.IntPtr iter, AltCurrencyDefinitionList list) {
      this.list = list;
      this.iter = iter;
      inlist = true;
    }

    public AltCurrencyDefinitionList List {
      get {
        return this.list;
      }
    }

    public AltCurrencyDefinitionListNode Next {
      get {
        if (list.getNextIter(iter) == System.IntPtr.Zero)
          return null;
        return new AltCurrencyDefinitionListNode(list.getNextIter(iter), list);
      }
    }

    public AltCurrencyDefinitionListNode Previous {
      get {
        if (list.getPrevIter(iter) == System.IntPtr.Zero)
          return null;
        return new AltCurrencyDefinitionListNode(list.getPrevIter(iter), list);
      }
    }

    public SWIGTYPE_p_AltCurrencyDefinition_Struct Value {
      get {
        return list.getItem(this.iter);
      }
      set {
        list.setItem(this.iter, value);
      }
    }

    public static bool operator==(AltCurrencyDefinitionListNode node1, AltCurrencyDefinitionListNode node2) {
      if (object.ReferenceEquals(node1, null) && object.ReferenceEquals(node2, null))
        return true;
      if (object.ReferenceEquals(node1, null) || object.ReferenceEquals(node2, null))
        return false;
      return node1.Equals(node2);
    }

    public static bool operator!=(AltCurrencyDefinitionListNode node1, AltCurrencyDefinitionListNode node2) {
      if (node1 == null && node2 == null)
        return false;
      if (node1 == null || node2 == null)
        return true;
      return !node1.Equals(node2);
    }

    public bool Equals(AltCurrencyDefinitionListNode node) {
      if (node == null)
        return false;
      if (!node.inlist || !this.inlist)
        return object.ReferenceEquals(this, node);
      return list.equals(this.iter, node.iter);
    }

    public override bool Equals(object node) {
      return Equals((AltCurrencyDefinitionListNode)node);
    }

    public override int GetHashCode() {
      int hash = 13;
      if (inlist) {
        hash = (hash * 7) + this.list.GetHashCode();
        hash = (hash * 7) + this.Value.GetHashCode();
        hash = (hash * 7) + this.list.getNextIter(this.iter).GetHashCode();
        hash = (hash * 7) + this.list.getPrevIter(this.iter).GetHashCode();
      } else {
        hash = (hash * 7) + this.csharpvalue.GetHashCode();
      }
      return hash;
    }

    public void Dispose() {
      list.deleteIter(this.iter);
    }
  }

  private void push_front(SWIGTYPE_p_AltCurrencyDefinition_Struct x) {
    questinterfacePINVOKE.AltCurrencyDefinitionList_push_front(swigCPtr, SWIGTYPE_p_AltCurrencyDefinition_Struct.getCPtr(x));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  private void push_back(SWIGTYPE_p_AltCurrencyDefinition_Struct x) {
    questinterfacePINVOKE.AltCurrencyDefinitionList_push_back(swigCPtr, SWIGTYPE_p_AltCurrencyDefinition_Struct.getCPtr(x));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveFirst() {
    questinterfacePINVOKE.AltCurrencyDefinitionList_RemoveFirst(swigCPtr);
  }

  public void RemoveLast() {
    questinterfacePINVOKE.AltCurrencyDefinitionList_RemoveLast(swigCPtr);
  }

  private uint size() {
    uint ret = questinterfacePINVOKE.AltCurrencyDefinitionList_size(swigCPtr);
    return ret;
  }

  public void Clear() {
    questinterfacePINVOKE.AltCurrencyDefinitionList_Clear(swigCPtr);
  }

  private SWIGTYPE_p_AltCurrencyDefinition_Struct getItem(global::System.IntPtr iter) {
    SWIGTYPE_p_AltCurrencyDefinition_Struct ret = new SWIGTYPE_p_AltCurrencyDefinition_Struct(questinterfacePINVOKE.AltCurrencyDefinitionList_getItem(swigCPtr, iter), false);
    return ret;
  }

  private void setItem(global::System.IntPtr iter, SWIGTYPE_p_AltCurrencyDefinition_Struct val) {
    questinterfacePINVOKE.AltCurrencyDefinitionList_setItem(swigCPtr, iter, SWIGTYPE_p_AltCurrencyDefinition_Struct.getCPtr(val));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  private global::System.IntPtr getFirstIter() {
    global::System.IntPtr ret = questinterfacePINVOKE.AltCurrencyDefinitionList_getFirstIter(swigCPtr);
    return ret;
  }

  private global::System.IntPtr getLastIter() {
    global::System.IntPtr ret = questinterfacePINVOKE.AltCurrencyDefinitionList_getLastIter(swigCPtr);
    return ret;
  }

  private global::System.IntPtr getNextIter(global::System.IntPtr iter) {
    global::System.IntPtr ret = questinterfacePINVOKE.AltCurrencyDefinitionList_getNextIter(swigCPtr, iter);
    return ret;
  }

  private global::System.IntPtr getPrevIter(global::System.IntPtr iter) {
    global::System.IntPtr ret = questinterfacePINVOKE.AltCurrencyDefinitionList_getPrevIter(swigCPtr, iter);
    return ret;
  }

  public global::System.IntPtr insertNode(global::System.IntPtr iter, SWIGTYPE_p_AltCurrencyDefinition_Struct value) {
    global::System.IntPtr ret = questinterfacePINVOKE.AltCurrencyDefinitionList_insertNode(swigCPtr, iter, SWIGTYPE_p_AltCurrencyDefinition_Struct.getCPtr(value));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void eraseIter(global::System.IntPtr iter) {
    questinterfacePINVOKE.AltCurrencyDefinitionList_eraseIter(swigCPtr, iter);
  }

  private void deleteIter(global::System.IntPtr iter) {
    questinterfacePINVOKE.AltCurrencyDefinitionList_deleteIter(swigCPtr, iter);
  }

  public bool equals(global::System.IntPtr iter1, global::System.IntPtr iter2) {
    bool ret = questinterfacePINVOKE.AltCurrencyDefinitionList_equals(swigCPtr, iter1, iter2);
    return ret;
  }

  public AltCurrencyDefinitionList() : this(questinterfacePINVOKE.new_AltCurrencyDefinitionList(), true) {
  }

}

public class InternalVeteranRewardList : global::System.IDisposable, global::System.Collections.IEnumerable, global::System.Collections.Generic.IEnumerable<SWIGTYPE_p_InternalVeteranReward>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal InternalVeteranRewardList(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(InternalVeteranRewardList obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(InternalVeteranRewardList obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~InternalVeteranRewardList() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_InternalVeteranRewardList(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public InternalVeteranRewardList(global::System.Collections.IEnumerable c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (SWIGTYPE_p_InternalVeteranReward element in c) {
      this.AddLast(element);
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public InternalVeteranRewardListNode First {
    get {
      if (Count == 0)
        return null;
      return new InternalVeteranRewardListNode(getFirstIter(), this);
    }
  }

  public InternalVeteranRewardListNode Last {
    get {
      if (Count == 0)
        return null;
      return new InternalVeteranRewardListNode(getLastIter(), this);
    }
  }

  public InternalVeteranRewardListNode AddFirst(SWIGTYPE_p_InternalVeteranReward value) {
    push_front(value);
    return new InternalVeteranRewardListNode(getFirstIter(), this);
  }

  public void AddFirst(InternalVeteranRewardListNode newNode) {
    ValidateNewNode(newNode);
    if (!newNode.inlist) {
      push_front(newNode.csharpvalue);
      newNode.iter = getFirstIter();
      newNode.inlist = true;
    } else {
      throw new global::System.InvalidOperationException("The " + newNode.GetType().Name + " node already belongs to a " + this.GetType().Name);
    }
  }

  public InternalVeteranRewardListNode AddLast(SWIGTYPE_p_InternalVeteranReward value) {
    push_back(value);
    return new InternalVeteranRewardListNode(getLastIter(), this);
  }

  public void AddLast(InternalVeteranRewardListNode newNode) {
    ValidateNewNode(newNode);
    if (!newNode.inlist) {
      push_back(newNode.csharpvalue);
      newNode.iter = getLastIter();
      newNode.inlist = true;
    } else {
      throw new global::System.InvalidOperationException("The " + newNode.GetType().Name + " node already belongs to a " + this.GetType().Name);
    }
  }

  public InternalVeteranRewardListNode AddBefore(InternalVeteranRewardListNode node, SWIGTYPE_p_InternalVeteranReward value) {
    return new InternalVeteranRewardListNode(insertNode(node.iter, value), this);
  }

  public void AddBefore(InternalVeteranRewardListNode node, InternalVeteranRewardListNode newNode) {
    ValidateNode(node);
    ValidateNewNode(newNode);
    if (!newNode.inlist) {
      newNode.iter = insertNode(node.iter, newNode.csharpvalue);
      newNode.inlist = true;
    } else {
      throw new global::System.InvalidOperationException("The " + newNode.GetType().Name + " node already belongs to a " + this.GetType().Name);
    }
  }

  public InternalVeteranRewardListNode AddAfter(InternalVeteranRewardListNode node, SWIGTYPE_p_InternalVeteranReward value) {
    node = node.Next;
    return new InternalVeteranRewardListNode(insertNode(node.iter, value), this);
  }

  public void AddAfter(InternalVeteranRewardListNode node, InternalVeteranRewardListNode newNode) {
    ValidateNode(node);
    ValidateNewNode(newNode);
    if (!newNode.inlist) {
      if (node == this.Last)
        AddLast(newNode);
      else
      {
        node = node.Next;
        newNode.iter = insertNode(node.iter, newNode.csharpvalue);
        newNode.inlist = true;
      }
    } else {
      throw new global::System.InvalidOperationException("The " + newNode.GetType().Name + " node already belongs to a " + this.GetType().Name);
    }
  }

  public void Add(SWIGTYPE_p_InternalVeteranReward value) {
    AddLast(value);
  }

  public void Remove(InternalVeteranRewardListNode node) {
    ValidateNode(node);
    eraseIter(node.iter);
  }

  public void CopyTo(SWIGTYPE_p_InternalVeteranReward[] array, int index) {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (index < 0 || index > array.Length)
      throw new global::System.ArgumentOutOfRangeException("index", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    InternalVeteranRewardListNode node = this.First;
    if (node != null) {
      do {
        array[index++] = node.Value;
        node = node.Next;
      } while (node != null);
    }
  }

  internal void ValidateNode(InternalVeteranRewardListNode node) {
    if (node == null) {
      throw new System.ArgumentNullException("node");
    }
    if (!node.inlist || node.list != this) {
      throw new System.InvalidOperationException("node");
    }
  }

  internal void ValidateNewNode(InternalVeteranRewardListNode node) {
    if (node == null) {
      throw new System.ArgumentNullException("node");
    }
  }

  global::System.Collections.Generic.IEnumerator<SWIGTYPE_p_InternalVeteranReward> global::System.Collections.Generic.IEnumerable<SWIGTYPE_p_InternalVeteranReward>.GetEnumerator() {
    return new InternalVeteranRewardListEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new InternalVeteranRewardListEnumerator(this);
  }

  public InternalVeteranRewardListEnumerator GetEnumerator() {
    return new InternalVeteranRewardListEnumerator(this);
  }

  public sealed class InternalVeteranRewardListEnumerator : global::System.Collections.IEnumerator,
    global::System.Collections.Generic.IEnumerator<SWIGTYPE_p_InternalVeteranReward>
  {
    private InternalVeteranRewardList collectionRef;
    private InternalVeteranRewardListNode currentNode;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public InternalVeteranRewardListEnumerator(InternalVeteranRewardList collection) {
      collectionRef = collection;
      currentNode = collection.First;
      currentIndex = 0;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public SWIGTYPE_p_InternalVeteranReward Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (SWIGTYPE_p_InternalVeteranReward)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      if (currentNode == null) {
        currentIndex = collectionRef.Count + 1;
        return false;
      }
      ++currentIndex;
      currentObject = currentNode.Value;
      currentNode = currentNode.Next;
      return true;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
      currentIndex = -1;
      currentObject = null;
    }
  }

  public sealed class InternalVeteranRewardListNode {
    internal InternalVeteranRewardList list;
    internal System.IntPtr iter;
    internal SWIGTYPE_p_InternalVeteranReward csharpvalue;
    internal bool inlist;

    public InternalVeteranRewardListNode(SWIGTYPE_p_InternalVeteranReward value) {
      csharpvalue = value;
      inlist = false;
    }

    internal InternalVeteranRewardListNode(System.IntPtr iter, InternalVeteranRewardList list) {
      this.list = list;
      this.iter = iter;
      inlist = true;
    }

    public InternalVeteranRewardList List {
      get {
        return this.list;
      }
    }

    public InternalVeteranRewardListNode Next {
      get {
        if (list.getNextIter(iter) == System.IntPtr.Zero)
          return null;
        return new InternalVeteranRewardListNode(list.getNextIter(iter), list);
      }
    }

    public InternalVeteranRewardListNode Previous {
      get {
        if (list.getPrevIter(iter) == System.IntPtr.Zero)
          return null;
        return new InternalVeteranRewardListNode(list.getPrevIter(iter), list);
      }
    }

    public SWIGTYPE_p_InternalVeteranReward Value {
      get {
        return list.getItem(this.iter);
      }
      set {
        list.setItem(this.iter, value);
      }
    }

    public static bool operator==(InternalVeteranRewardListNode node1, InternalVeteranRewardListNode node2) {
      if (object.ReferenceEquals(node1, null) && object.ReferenceEquals(node2, null))
        return true;
      if (object.ReferenceEquals(node1, null) || object.ReferenceEquals(node2, null))
        return false;
      return node1.Equals(node2);
    }

    public static bool operator!=(InternalVeteranRewardListNode node1, InternalVeteranRewardListNode node2) {
      if (node1 == null && node2 == null)
        return false;
      if (node1 == null || node2 == null)
        return true;
      return !node1.Equals(node2);
    }

    public bool Equals(InternalVeteranRewardListNode node) {
      if (node == null)
        return false;
      if (!node.inlist || !this.inlist)
        return object.ReferenceEquals(this, node);
      return list.equals(this.iter, node.iter);
    }

    public override bool Equals(object node) {
      return Equals((InternalVeteranRewardListNode)node);
    }

    public override int GetHashCode() {
      int hash = 13;
      if (inlist) {
        hash = (hash * 7) + this.list.GetHashCode();
        hash = (hash * 7) + this.Value.GetHashCode();
        hash = (hash * 7) + this.list.getNextIter(this.iter).GetHashCode();
        hash = (hash * 7) + this.list.getPrevIter(this.iter).GetHashCode();
      } else {
        hash = (hash * 7) + this.csharpvalue.GetHashCode();
      }
      return hash;
    }

    public void Dispose() {
      list.deleteIter(this.iter);
    }
  }

  private void push_front(SWIGTYPE_p_InternalVeteranReward x) {
    questinterfacePINVOKE.InternalVeteranRewardList_push_front(swigCPtr, SWIGTYPE_p_InternalVeteranReward.getCPtr(x));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  private void push_back(SWIGTYPE_p_InternalVeteranReward x) {
    questinterfacePINVOKE.InternalVeteranRewardList_push_back(swigCPtr, SWIGTYPE_p_InternalVeteranReward.getCPtr(x));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveFirst() {
    questinterfacePINVOKE.InternalVeteranRewardList_RemoveFirst(swigCPtr);
  }

  public void RemoveLast() {
    questinterfacePINVOKE.InternalVeteranRewardList_RemoveLast(swigCPtr);
  }

  private uint size() {
    uint ret = questinterfacePINVOKE.InternalVeteranRewardList_size(swigCPtr);
    return ret;
  }

  public void Clear() {
    questinterfacePINVOKE.InternalVeteranRewardList_Clear(swigCPtr);
  }

  private SWIGTYPE_p_InternalVeteranReward getItem(global::System.IntPtr iter) {
    SWIGTYPE_p_InternalVeteranReward ret = new SWIGTYPE_p_InternalVeteranReward(questinterfacePINVOKE.InternalVeteranRewardList_getItem(swigCPtr, iter), false);
    return ret;
  }

  private void setItem(global::System.IntPtr iter, SWIGTYPE_p_InternalVeteranReward val) {
    questinterfacePINVOKE.InternalVeteranRewardList_setItem(swigCPtr, iter, SWIGTYPE_p_InternalVeteranReward.getCPtr(val));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  private global::System.IntPtr getFirstIter() {
    global::System.IntPtr ret = questinterfacePINVOKE.InternalVeteranRewardList_getFirstIter(swigCPtr);
    return ret;
  }

  private global::System.IntPtr getLastIter() {
    global::System.IntPtr ret = questinterfacePINVOKE.InternalVeteranRewardList_getLastIter(swigCPtr);
    return ret;
  }

  private global::System.IntPtr getNextIter(global::System.IntPtr iter) {
    global::System.IntPtr ret = questinterfacePINVOKE.InternalVeteranRewardList_getNextIter(swigCPtr, iter);
    return ret;
  }

  private global::System.IntPtr getPrevIter(global::System.IntPtr iter) {
    global::System.IntPtr ret = questinterfacePINVOKE.InternalVeteranRewardList_getPrevIter(swigCPtr, iter);
    return ret;
  }

  public global::System.IntPtr insertNode(global::System.IntPtr iter, SWIGTYPE_p_InternalVeteranReward value) {
    global::System.IntPtr ret = questinterfacePINVOKE.InternalVeteranRewardList_insertNode(swigCPtr, iter, SWIGTYPE_p_InternalVeteranReward.getCPtr(value));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void eraseIter(global::System.IntPtr iter) {
    questinterfacePINVOKE.InternalVeteranRewardList_eraseIter(swigCPtr, iter);
  }

  private void deleteIter(global::System.IntPtr iter) {
    questinterfacePINVOKE.InternalVeteranRewardList_deleteIter(swigCPtr, iter);
  }

  public bool equals(global::System.IntPtr iter1, global::System.IntPtr iter2) {
    bool ret = questinterfacePINVOKE.InternalVeteranRewardList_equals(swigCPtr, iter1, iter2);
    return ret;
  }

  public InternalVeteranRewardList() : this(questinterfacePINVOKE.new_InternalVeteranRewardList(), true) {
  }

}

public class IntStringMap : global::System.IDisposable 
    , global::System.Collections.Generic.IDictionary<int, SWIGTYPE_p_std__string>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IntStringMap(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IntStringMap obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(IntStringMap obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~IntStringMap() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_IntStringMap(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }


  public SWIGTYPE_p_std__string this[int key] {
    get {
      return getitem(key);
    }

    set {
      setitem(key, value);
    }
  }

  public bool TryGetValue(int key, out SWIGTYPE_p_std__string value) {
    if (this.ContainsKey(key)) {
      value = this[key];
      return true;
    }
    value = default(SWIGTYPE_p_std__string);
    return false;
  }

  public bool IsEmpty {
    get {
      return empty();
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public global::System.Collections.Generic.ICollection<int> Keys {
    get {
      global::System.Collections.Generic.ICollection<int> keys = new global::System.Collections.Generic.List<int>();
      int size = this.Count;
      if (size > 0) {
        global::System.IntPtr iter = create_iterator_begin();
        for (int i = 0; i < size; i++) {
          keys.Add(get_next_key(iter));
        }
        destroy_iterator(iter);
      }
      return keys;
    }
  }

  public global::System.Collections.Generic.ICollection<SWIGTYPE_p_std__string> Values {
    get {
      global::System.Collections.Generic.ICollection<SWIGTYPE_p_std__string> vals = new global::System.Collections.Generic.List<SWIGTYPE_p_std__string>();
      foreach (global::System.Collections.Generic.KeyValuePair<int, SWIGTYPE_p_std__string> pair in this) {
        vals.Add(pair.Value);
      }
      return vals;
    }
  }

  public void Add(global::System.Collections.Generic.KeyValuePair<int, SWIGTYPE_p_std__string> item) {
    Add(item.Key, item.Value);
  }

  public bool Remove(global::System.Collections.Generic.KeyValuePair<int, SWIGTYPE_p_std__string> item) {
    if (Contains(item)) {
      return Remove(item.Key);
    } else {
      return false;
    }
  }

  public bool Contains(global::System.Collections.Generic.KeyValuePair<int, SWIGTYPE_p_std__string> item) {
    if (this[item.Key] == item.Value) {
      return true;
    } else {
      return false;
    }
  }

  public void CopyTo(global::System.Collections.Generic.KeyValuePair<int, SWIGTYPE_p_std__string>[] array) {
    CopyTo(array, 0);
  }

  public void CopyTo(global::System.Collections.Generic.KeyValuePair<int, SWIGTYPE_p_std__string>[] array, int arrayIndex) {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (arrayIndex+this.Count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");

    global::System.Collections.Generic.IList<int> keyList = new global::System.Collections.Generic.List<int>(this.Keys);
    for (int i = 0; i < keyList.Count; i++) {
      int currentKey = keyList[i];
      array.SetValue(new global::System.Collections.Generic.KeyValuePair<int, SWIGTYPE_p_std__string>(currentKey, this[currentKey]), arrayIndex+i);
    }
  }

  global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<int, SWIGTYPE_p_std__string>> global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<int, SWIGTYPE_p_std__string>>.GetEnumerator() {
    return new IntStringMapEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new IntStringMapEnumerator(this);
  }

  public IntStringMapEnumerator GetEnumerator() {
    return new IntStringMapEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class IntStringMapEnumerator : global::System.Collections.IEnumerator,
      global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<int, SWIGTYPE_p_std__string>>
  {
    private IntStringMap collectionRef;
    private global::System.Collections.Generic.IList<int> keyCollection;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public IntStringMapEnumerator(IntStringMap collection) {
      collectionRef = collection;
      keyCollection = new global::System.Collections.Generic.List<int>(collection.Keys);
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public global::System.Collections.Generic.KeyValuePair<int, SWIGTYPE_p_std__string> Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (global::System.Collections.Generic.KeyValuePair<int, SWIGTYPE_p_std__string>)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        int currentKey = keyCollection[currentIndex];
        currentObject = new global::System.Collections.Generic.KeyValuePair<int, SWIGTYPE_p_std__string>(currentKey, collectionRef[currentKey]);
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
      currentIndex = -1;
      currentObject = null;
    }
  }


  public IntStringMap() : this(questinterfacePINVOKE.new_IntStringMap__SWIG_0(), true) {
  }

  public IntStringMap(IntStringMap other) : this(questinterfacePINVOKE.new_IntStringMap__SWIG_1(IntStringMap.getCPtr(other)), true) {
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  private uint size() {
    uint ret = questinterfacePINVOKE.IntStringMap_size(swigCPtr);
    return ret;
  }

  private bool empty() {
    bool ret = questinterfacePINVOKE.IntStringMap_empty(swigCPtr);
    return ret;
  }

  public void Clear() {
    questinterfacePINVOKE.IntStringMap_Clear(swigCPtr);
  }

  private SWIGTYPE_p_std__string getitem(int key) {
    SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(questinterfacePINVOKE.IntStringMap_getitem(swigCPtr, key), false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(int key, SWIGTYPE_p_std__string x) {
    questinterfacePINVOKE.IntStringMap_setitem(swigCPtr, key, SWIGTYPE_p_std__string.getCPtr(x));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool ContainsKey(int key) {
    bool ret = questinterfacePINVOKE.IntStringMap_ContainsKey(swigCPtr, key);
    return ret;
  }

  public void Add(int key, SWIGTYPE_p_std__string value) {
    questinterfacePINVOKE.IntStringMap_Add(swigCPtr, key, SWIGTYPE_p_std__string.getCPtr(value));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Remove(int key) {
    bool ret = questinterfacePINVOKE.IntStringMap_Remove(swigCPtr, key);
    return ret;
  }

  private global::System.IntPtr create_iterator_begin() {
    global::System.IntPtr ret = questinterfacePINVOKE.IntStringMap_create_iterator_begin(swigCPtr);
    return ret;
  }

  private int get_next_key(global::System.IntPtr swigiterator) {
    int ret = questinterfacePINVOKE.IntStringMap_get_next_key(swigCPtr, swigiterator);
    return ret;
  }

  private void destroy_iterator(global::System.IntPtr swigiterator) {
    questinterfacePINVOKE.IntStringMap_destroy_iterator(swigCPtr, swigiterator);
  }

}

public class IntDoubleMap : global::System.IDisposable 
    , global::System.Collections.Generic.IDictionary<int, double>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IntDoubleMap(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IntDoubleMap obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(IntDoubleMap obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~IntDoubleMap() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_IntDoubleMap(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }


  public double this[int key] {
    get {
      return getitem(key);
    }

    set {
      setitem(key, value);
    }
  }

  public bool TryGetValue(int key, out double value) {
    if (this.ContainsKey(key)) {
      value = this[key];
      return true;
    }
    value = default(double);
    return false;
  }

  public bool IsEmpty {
    get {
      return empty();
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public global::System.Collections.Generic.ICollection<int> Keys {
    get {
      global::System.Collections.Generic.ICollection<int> keys = new global::System.Collections.Generic.List<int>();
      int size = this.Count;
      if (size > 0) {
        global::System.IntPtr iter = create_iterator_begin();
        for (int i = 0; i < size; i++) {
          keys.Add(get_next_key(iter));
        }
        destroy_iterator(iter);
      }
      return keys;
    }
  }

  public global::System.Collections.Generic.ICollection<double> Values {
    get {
      global::System.Collections.Generic.ICollection<double> vals = new global::System.Collections.Generic.List<double>();
      foreach (global::System.Collections.Generic.KeyValuePair<int, double> pair in this) {
        vals.Add(pair.Value);
      }
      return vals;
    }
  }

  public void Add(global::System.Collections.Generic.KeyValuePair<int, double> item) {
    Add(item.Key, item.Value);
  }

  public bool Remove(global::System.Collections.Generic.KeyValuePair<int, double> item) {
    if (Contains(item)) {
      return Remove(item.Key);
    } else {
      return false;
    }
  }

  public bool Contains(global::System.Collections.Generic.KeyValuePair<int, double> item) {
    if (this[item.Key] == item.Value) {
      return true;
    } else {
      return false;
    }
  }

  public void CopyTo(global::System.Collections.Generic.KeyValuePair<int, double>[] array) {
    CopyTo(array, 0);
  }

  public void CopyTo(global::System.Collections.Generic.KeyValuePair<int, double>[] array, int arrayIndex) {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (arrayIndex+this.Count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");

    global::System.Collections.Generic.IList<int> keyList = new global::System.Collections.Generic.List<int>(this.Keys);
    for (int i = 0; i < keyList.Count; i++) {
      int currentKey = keyList[i];
      array.SetValue(new global::System.Collections.Generic.KeyValuePair<int, double>(currentKey, this[currentKey]), arrayIndex+i);
    }
  }

  global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<int, double>> global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<int, double>>.GetEnumerator() {
    return new IntDoubleMapEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new IntDoubleMapEnumerator(this);
  }

  public IntDoubleMapEnumerator GetEnumerator() {
    return new IntDoubleMapEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class IntDoubleMapEnumerator : global::System.Collections.IEnumerator,
      global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<int, double>>
  {
    private IntDoubleMap collectionRef;
    private global::System.Collections.Generic.IList<int> keyCollection;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public IntDoubleMapEnumerator(IntDoubleMap collection) {
      collectionRef = collection;
      keyCollection = new global::System.Collections.Generic.List<int>(collection.Keys);
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public global::System.Collections.Generic.KeyValuePair<int, double> Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (global::System.Collections.Generic.KeyValuePair<int, double>)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        int currentKey = keyCollection[currentIndex];
        currentObject = new global::System.Collections.Generic.KeyValuePair<int, double>(currentKey, collectionRef[currentKey]);
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
      currentIndex = -1;
      currentObject = null;
    }
  }


  public IntDoubleMap() : this(questinterfacePINVOKE.new_IntDoubleMap__SWIG_0(), true) {
  }

  public IntDoubleMap(IntDoubleMap other) : this(questinterfacePINVOKE.new_IntDoubleMap__SWIG_1(IntDoubleMap.getCPtr(other)), true) {
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  private uint size() {
    uint ret = questinterfacePINVOKE.IntDoubleMap_size(swigCPtr);
    return ret;
  }

  private bool empty() {
    bool ret = questinterfacePINVOKE.IntDoubleMap_empty(swigCPtr);
    return ret;
  }

  public void Clear() {
    questinterfacePINVOKE.IntDoubleMap_Clear(swigCPtr);
  }

  private double getitem(int key) {
    double ret = questinterfacePINVOKE.IntDoubleMap_getitem(swigCPtr, key);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(int key, double x) {
    questinterfacePINVOKE.IntDoubleMap_setitem(swigCPtr, key, x);
  }

  public bool ContainsKey(int key) {
    bool ret = questinterfacePINVOKE.IntDoubleMap_ContainsKey(swigCPtr, key);
    return ret;
  }

  public void Add(int key, double value) {
    questinterfacePINVOKE.IntDoubleMap_Add(swigCPtr, key, value);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Remove(int key) {
    bool ret = questinterfacePINVOKE.IntDoubleMap_Remove(swigCPtr, key);
    return ret;
  }

  private global::System.IntPtr create_iterator_begin() {
    global::System.IntPtr ret = questinterfacePINVOKE.IntDoubleMap_create_iterator_begin(swigCPtr);
    return ret;
  }

  private int get_next_key(global::System.IntPtr swigiterator) {
    int ret = questinterfacePINVOKE.IntDoubleMap_get_next_key(swigCPtr, swigiterator);
    return ret;
  }

  private void destroy_iterator(global::System.IntPtr swigiterator) {
    questinterfacePINVOKE.IntDoubleMap_destroy_iterator(swigCPtr, swigiterator);
  }

}

public class IntExpModifierMap : global::System.IDisposable 
    , global::System.Collections.Generic.IDictionary<uint, EXPModifier>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IntExpModifierMap(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IntExpModifierMap obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(IntExpModifierMap obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~IntExpModifierMap() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_IntExpModifierMap(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }


  public EXPModifier this[uint key] {
    get {
      return getitem(key);
    }

    set {
      setitem(key, value);
    }
  }

  public bool TryGetValue(uint key, out EXPModifier value) {
    if (this.ContainsKey(key)) {
      value = this[key];
      return true;
    }
    value = default(EXPModifier);
    return false;
  }

  public bool IsEmpty {
    get {
      return empty();
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public global::System.Collections.Generic.ICollection<uint> Keys {
    get {
      global::System.Collections.Generic.ICollection<uint> keys = new global::System.Collections.Generic.List<uint>();
      int size = this.Count;
      if (size > 0) {
        global::System.IntPtr iter = create_iterator_begin();
        for (int i = 0; i < size; i++) {
          keys.Add(get_next_key(iter));
        }
        destroy_iterator(iter);
      }
      return keys;
    }
  }

  public global::System.Collections.Generic.ICollection<EXPModifier> Values {
    get {
      global::System.Collections.Generic.ICollection<EXPModifier> vals = new global::System.Collections.Generic.List<EXPModifier>();
      foreach (global::System.Collections.Generic.KeyValuePair<uint, EXPModifier> pair in this) {
        vals.Add(pair.Value);
      }
      return vals;
    }
  }

  public void Add(global::System.Collections.Generic.KeyValuePair<uint, EXPModifier> item) {
    Add(item.Key, item.Value);
  }

  public bool Remove(global::System.Collections.Generic.KeyValuePair<uint, EXPModifier> item) {
    if (Contains(item)) {
      return Remove(item.Key);
    } else {
      return false;
    }
  }

  public bool Contains(global::System.Collections.Generic.KeyValuePair<uint, EXPModifier> item) {
    if (this[item.Key] == item.Value) {
      return true;
    } else {
      return false;
    }
  }

  public void CopyTo(global::System.Collections.Generic.KeyValuePair<uint, EXPModifier>[] array) {
    CopyTo(array, 0);
  }

  public void CopyTo(global::System.Collections.Generic.KeyValuePair<uint, EXPModifier>[] array, int arrayIndex) {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (arrayIndex+this.Count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");

    global::System.Collections.Generic.IList<uint> keyList = new global::System.Collections.Generic.List<uint>(this.Keys);
    for (int i = 0; i < keyList.Count; i++) {
      uint currentKey = keyList[i];
      array.SetValue(new global::System.Collections.Generic.KeyValuePair<uint, EXPModifier>(currentKey, this[currentKey]), arrayIndex+i);
    }
  }

  global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<uint, EXPModifier>> global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<uint, EXPModifier>>.GetEnumerator() {
    return new IntExpModifierMapEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new IntExpModifierMapEnumerator(this);
  }

  public IntExpModifierMapEnumerator GetEnumerator() {
    return new IntExpModifierMapEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class IntExpModifierMapEnumerator : global::System.Collections.IEnumerator,
      global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<uint, EXPModifier>>
  {
    private IntExpModifierMap collectionRef;
    private global::System.Collections.Generic.IList<uint> keyCollection;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public IntExpModifierMapEnumerator(IntExpModifierMap collection) {
      collectionRef = collection;
      keyCollection = new global::System.Collections.Generic.List<uint>(collection.Keys);
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public global::System.Collections.Generic.KeyValuePair<uint, EXPModifier> Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (global::System.Collections.Generic.KeyValuePair<uint, EXPModifier>)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        uint currentKey = keyCollection[currentIndex];
        currentObject = new global::System.Collections.Generic.KeyValuePair<uint, EXPModifier>(currentKey, collectionRef[currentKey]);
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
      currentIndex = -1;
      currentObject = null;
    }
  }


  public IntExpModifierMap() : this(questinterfacePINVOKE.new_IntExpModifierMap__SWIG_0(), true) {
  }

  public IntExpModifierMap(IntExpModifierMap other) : this(questinterfacePINVOKE.new_IntExpModifierMap__SWIG_1(IntExpModifierMap.getCPtr(other)), true) {
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  private uint size() {
    uint ret = questinterfacePINVOKE.IntExpModifierMap_size(swigCPtr);
    return ret;
  }

  private bool empty() {
    bool ret = questinterfacePINVOKE.IntExpModifierMap_empty(swigCPtr);
    return ret;
  }

  public void Clear() {
    questinterfacePINVOKE.IntExpModifierMap_Clear(swigCPtr);
  }

  private EXPModifier getitem(uint key) {
    EXPModifier ret = new EXPModifier(questinterfacePINVOKE.IntExpModifierMap_getitem(swigCPtr, key), false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(uint key, EXPModifier x) {
    questinterfacePINVOKE.IntExpModifierMap_setitem(swigCPtr, key, EXPModifier.getCPtr(x));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool ContainsKey(uint key) {
    bool ret = questinterfacePINVOKE.IntExpModifierMap_ContainsKey(swigCPtr, key);
    return ret;
  }

  public void Add(uint key, EXPModifier value) {
    questinterfacePINVOKE.IntExpModifierMap_Add(swigCPtr, key, EXPModifier.getCPtr(value));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Remove(uint key) {
    bool ret = questinterfacePINVOKE.IntExpModifierMap_Remove(swigCPtr, key);
    return ret;
  }

  private global::System.IntPtr create_iterator_begin() {
    global::System.IntPtr ret = questinterfacePINVOKE.IntExpModifierMap_create_iterator_begin(swigCPtr);
    return ret;
  }

  private uint get_next_key(global::System.IntPtr swigiterator) {
    uint ret = questinterfacePINVOKE.IntExpModifierMap_get_next_key(swigCPtr, swigiterator);
    return ret;
  }

  private void destroy_iterator(global::System.IntPtr swigiterator) {
    questinterfacePINVOKE.IntExpModifierMap_destroy_iterator(swigCPtr, swigiterator);
  }

}

public class IntNpcMap : global::System.IDisposable 
    , global::System.Collections.Generic.IDictionary<uint, SWIGTYPE_p_NPCType>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IntNpcMap(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IntNpcMap obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(IntNpcMap obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~IntNpcMap() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_IntNpcMap(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }


  public SWIGTYPE_p_NPCType this[uint key] {
    get {
      return getitem(key);
    }

    set {
      setitem(key, value);
    }
  }

  public bool TryGetValue(uint key, out SWIGTYPE_p_NPCType value) {
    if (this.ContainsKey(key)) {
      value = this[key];
      return true;
    }
    value = default(SWIGTYPE_p_NPCType);
    return false;
  }

  public bool IsEmpty {
    get {
      return empty();
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public global::System.Collections.Generic.ICollection<uint> Keys {
    get {
      global::System.Collections.Generic.ICollection<uint> keys = new global::System.Collections.Generic.List<uint>();
      int size = this.Count;
      if (size > 0) {
        global::System.IntPtr iter = create_iterator_begin();
        for (int i = 0; i < size; i++) {
          keys.Add(get_next_key(iter));
        }
        destroy_iterator(iter);
      }
      return keys;
    }
  }

  public global::System.Collections.Generic.ICollection<SWIGTYPE_p_NPCType> Values {
    get {
      global::System.Collections.Generic.ICollection<SWIGTYPE_p_NPCType> vals = new global::System.Collections.Generic.List<SWIGTYPE_p_NPCType>();
      foreach (global::System.Collections.Generic.KeyValuePair<uint, SWIGTYPE_p_NPCType> pair in this) {
        vals.Add(pair.Value);
      }
      return vals;
    }
  }

  public void Add(global::System.Collections.Generic.KeyValuePair<uint, SWIGTYPE_p_NPCType> item) {
    Add(item.Key, item.Value);
  }

  public bool Remove(global::System.Collections.Generic.KeyValuePair<uint, SWIGTYPE_p_NPCType> item) {
    if (Contains(item)) {
      return Remove(item.Key);
    } else {
      return false;
    }
  }

  public bool Contains(global::System.Collections.Generic.KeyValuePair<uint, SWIGTYPE_p_NPCType> item) {
    if (this[item.Key] == item.Value) {
      return true;
    } else {
      return false;
    }
  }

  public void CopyTo(global::System.Collections.Generic.KeyValuePair<uint, SWIGTYPE_p_NPCType>[] array) {
    CopyTo(array, 0);
  }

  public void CopyTo(global::System.Collections.Generic.KeyValuePair<uint, SWIGTYPE_p_NPCType>[] array, int arrayIndex) {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (arrayIndex+this.Count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");

    global::System.Collections.Generic.IList<uint> keyList = new global::System.Collections.Generic.List<uint>(this.Keys);
    for (int i = 0; i < keyList.Count; i++) {
      uint currentKey = keyList[i];
      array.SetValue(new global::System.Collections.Generic.KeyValuePair<uint, SWIGTYPE_p_NPCType>(currentKey, this[currentKey]), arrayIndex+i);
    }
  }

  global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<uint, SWIGTYPE_p_NPCType>> global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<uint, SWIGTYPE_p_NPCType>>.GetEnumerator() {
    return new IntNpcMapEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new IntNpcMapEnumerator(this);
  }

  public IntNpcMapEnumerator GetEnumerator() {
    return new IntNpcMapEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class IntNpcMapEnumerator : global::System.Collections.IEnumerator,
      global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<uint, SWIGTYPE_p_NPCType>>
  {
    private IntNpcMap collectionRef;
    private global::System.Collections.Generic.IList<uint> keyCollection;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public IntNpcMapEnumerator(IntNpcMap collection) {
      collectionRef = collection;
      keyCollection = new global::System.Collections.Generic.List<uint>(collection.Keys);
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public global::System.Collections.Generic.KeyValuePair<uint, SWIGTYPE_p_NPCType> Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (global::System.Collections.Generic.KeyValuePair<uint, SWIGTYPE_p_NPCType>)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        uint currentKey = keyCollection[currentIndex];
        currentObject = new global::System.Collections.Generic.KeyValuePair<uint, SWIGTYPE_p_NPCType>(currentKey, collectionRef[currentKey]);
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
      currentIndex = -1;
      currentObject = null;
    }
  }


  public IntNpcMap() : this(questinterfacePINVOKE.new_IntNpcMap__SWIG_0(), true) {
  }

  public IntNpcMap(IntNpcMap other) : this(questinterfacePINVOKE.new_IntNpcMap__SWIG_1(IntNpcMap.getCPtr(other)), true) {
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  private uint size() {
    uint ret = questinterfacePINVOKE.IntNpcMap_size(swigCPtr);
    return ret;
  }

  private bool empty() {
    bool ret = questinterfacePINVOKE.IntNpcMap_empty(swigCPtr);
    return ret;
  }

  public void Clear() {
    questinterfacePINVOKE.IntNpcMap_Clear(swigCPtr);
  }

  private SWIGTYPE_p_NPCType getitem(uint key) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.IntNpcMap_getitem(swigCPtr, key);
    SWIGTYPE_p_NPCType ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_NPCType(cPtr, false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(uint key, SWIGTYPE_p_NPCType x) {
    questinterfacePINVOKE.IntNpcMap_setitem(swigCPtr, key, SWIGTYPE_p_NPCType.getCPtr(x));
  }

  public bool ContainsKey(uint key) {
    bool ret = questinterfacePINVOKE.IntNpcMap_ContainsKey(swigCPtr, key);
    return ret;
  }

  public void Add(uint key, SWIGTYPE_p_NPCType value) {
    questinterfacePINVOKE.IntNpcMap_Add(swigCPtr, key, SWIGTYPE_p_NPCType.getCPtr(value));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Remove(uint key) {
    bool ret = questinterfacePINVOKE.IntNpcMap_Remove(swigCPtr, key);
    return ret;
  }

  private global::System.IntPtr create_iterator_begin() {
    global::System.IntPtr ret = questinterfacePINVOKE.IntNpcMap_create_iterator_begin(swigCPtr);
    return ret;
  }

  private uint get_next_key(global::System.IntPtr swigiterator) {
    uint ret = questinterfacePINVOKE.IntNpcMap_get_next_key(swigCPtr, swigiterator);
    return ret;
  }

  private void destroy_iterator(global::System.IntPtr swigiterator) {
    questinterfacePINVOKE.IntNpcMap_destroy_iterator(swigCPtr, swigiterator);
  }

}

public class IntClientMap : global::System.IDisposable 
    , global::System.Collections.Generic.IDictionary<ushort, Client>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IntClientMap(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IntClientMap obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(IntClientMap obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~IntClientMap() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_IntClientMap(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }


  public Client this[ushort key] {
    get {
      return getitem(key);
    }

    set {
      setitem(key, value);
    }
  }

  public bool TryGetValue(ushort key, out Client value) {
    if (this.ContainsKey(key)) {
      value = this[key];
      return true;
    }
    value = default(Client);
    return false;
  }

  public bool IsEmpty {
    get {
      return empty();
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public global::System.Collections.Generic.ICollection<ushort> Keys {
    get {
      global::System.Collections.Generic.ICollection<ushort> keys = new global::System.Collections.Generic.List<ushort>();
      int size = this.Count;
      if (size > 0) {
        global::System.IntPtr iter = create_iterator_begin();
        for (int i = 0; i < size; i++) {
          keys.Add(get_next_key(iter));
        }
        destroy_iterator(iter);
      }
      return keys;
    }
  }

  public global::System.Collections.Generic.ICollection<Client> Values {
    get {
      global::System.Collections.Generic.ICollection<Client> vals = new global::System.Collections.Generic.List<Client>();
      foreach (global::System.Collections.Generic.KeyValuePair<ushort, Client> pair in this) {
        vals.Add(pair.Value);
      }
      return vals;
    }
  }

  public void Add(global::System.Collections.Generic.KeyValuePair<ushort, Client> item) {
    Add(item.Key, item.Value);
  }

  public bool Remove(global::System.Collections.Generic.KeyValuePair<ushort, Client> item) {
    if (Contains(item)) {
      return Remove(item.Key);
    } else {
      return false;
    }
  }

  public bool Contains(global::System.Collections.Generic.KeyValuePair<ushort, Client> item) {
    if (this[item.Key] == item.Value) {
      return true;
    } else {
      return false;
    }
  }

  public void CopyTo(global::System.Collections.Generic.KeyValuePair<ushort, Client>[] array) {
    CopyTo(array, 0);
  }

  public void CopyTo(global::System.Collections.Generic.KeyValuePair<ushort, Client>[] array, int arrayIndex) {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (arrayIndex+this.Count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");

    global::System.Collections.Generic.IList<ushort> keyList = new global::System.Collections.Generic.List<ushort>(this.Keys);
    for (int i = 0; i < keyList.Count; i++) {
      ushort currentKey = keyList[i];
      array.SetValue(new global::System.Collections.Generic.KeyValuePair<ushort, Client>(currentKey, this[currentKey]), arrayIndex+i);
    }
  }

  global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<ushort, Client>> global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<ushort, Client>>.GetEnumerator() {
    return new IntClientMapEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new IntClientMapEnumerator(this);
  }

  public IntClientMapEnumerator GetEnumerator() {
    return new IntClientMapEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class IntClientMapEnumerator : global::System.Collections.IEnumerator,
      global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<ushort, Client>>
  {
    private IntClientMap collectionRef;
    private global::System.Collections.Generic.IList<ushort> keyCollection;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public IntClientMapEnumerator(IntClientMap collection) {
      collectionRef = collection;
      keyCollection = new global::System.Collections.Generic.List<ushort>(collection.Keys);
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public global::System.Collections.Generic.KeyValuePair<ushort, Client> Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (global::System.Collections.Generic.KeyValuePair<ushort, Client>)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        ushort currentKey = keyCollection[currentIndex];
        currentObject = new global::System.Collections.Generic.KeyValuePair<ushort, Client>(currentKey, collectionRef[currentKey]);
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
      currentIndex = -1;
      currentObject = null;
    }
  }


  public IntClientMap() : this(questinterfacePINVOKE.new_IntClientMap__SWIG_0(), true) {
  }

  public IntClientMap(IntClientMap other) : this(questinterfacePINVOKE.new_IntClientMap__SWIG_1(IntClientMap.getCPtr(other)), true) {
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  private uint size() {
    uint ret = questinterfacePINVOKE.IntClientMap_size(swigCPtr);
    return ret;
  }

  private bool empty() {
    bool ret = questinterfacePINVOKE.IntClientMap_empty(swigCPtr);
    return ret;
  }

  public void Clear() {
    questinterfacePINVOKE.IntClientMap_Clear(swigCPtr);
  }

  private Client getitem(ushort key) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.IntClientMap_getitem(swigCPtr, key);
    Client ret = (cPtr == global::System.IntPtr.Zero) ? null : new Client(cPtr, false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(ushort key, Client x) {
    questinterfacePINVOKE.IntClientMap_setitem(swigCPtr, key, Client.getCPtr(x));
  }

  public bool ContainsKey(ushort key) {
    bool ret = questinterfacePINVOKE.IntClientMap_ContainsKey(swigCPtr, key);
    return ret;
  }

  public void Add(ushort key, Client value) {
    questinterfacePINVOKE.IntClientMap_Add(swigCPtr, key, Client.getCPtr(value));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Remove(ushort key) {
    bool ret = questinterfacePINVOKE.IntClientMap_Remove(swigCPtr, key);
    return ret;
  }

  private global::System.IntPtr create_iterator_begin() {
    global::System.IntPtr ret = questinterfacePINVOKE.IntClientMap_create_iterator_begin(swigCPtr);
    return ret;
  }

  private ushort get_next_key(global::System.IntPtr swigiterator) {
    ushort ret = questinterfacePINVOKE.IntClientMap_get_next_key(swigCPtr, swigiterator);
    return ret;
  }

  private void destroy_iterator(global::System.IntPtr swigiterator) {
    questinterfacePINVOKE.IntClientMap_destroy_iterator(swigCPtr, swigiterator);
  }

}

public class IntMobMap : global::System.IDisposable 
    , global::System.Collections.Generic.IDictionary<ushort, Mob>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IntMobMap(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IntMobMap obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(IntMobMap obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~IntMobMap() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_IntMobMap(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }


  public Mob this[ushort key] {
    get {
      return getitem(key);
    }

    set {
      setitem(key, value);
    }
  }

  public bool TryGetValue(ushort key, out Mob value) {
    if (this.ContainsKey(key)) {
      value = this[key];
      return true;
    }
    value = default(Mob);
    return false;
  }

  public bool IsEmpty {
    get {
      return empty();
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public global::System.Collections.Generic.ICollection<ushort> Keys {
    get {
      global::System.Collections.Generic.ICollection<ushort> keys = new global::System.Collections.Generic.List<ushort>();
      int size = this.Count;
      if (size > 0) {
        global::System.IntPtr iter = create_iterator_begin();
        for (int i = 0; i < size; i++) {
          keys.Add(get_next_key(iter));
        }
        destroy_iterator(iter);
      }
      return keys;
    }
  }

  public global::System.Collections.Generic.ICollection<Mob> Values {
    get {
      global::System.Collections.Generic.ICollection<Mob> vals = new global::System.Collections.Generic.List<Mob>();
      foreach (global::System.Collections.Generic.KeyValuePair<ushort, Mob> pair in this) {
        vals.Add(pair.Value);
      }
      return vals;
    }
  }

  public void Add(global::System.Collections.Generic.KeyValuePair<ushort, Mob> item) {
    Add(item.Key, item.Value);
  }

  public bool Remove(global::System.Collections.Generic.KeyValuePair<ushort, Mob> item) {
    if (Contains(item)) {
      return Remove(item.Key);
    } else {
      return false;
    }
  }

  public bool Contains(global::System.Collections.Generic.KeyValuePair<ushort, Mob> item) {
    if (this[item.Key] == item.Value) {
      return true;
    } else {
      return false;
    }
  }

  public void CopyTo(global::System.Collections.Generic.KeyValuePair<ushort, Mob>[] array) {
    CopyTo(array, 0);
  }

  public void CopyTo(global::System.Collections.Generic.KeyValuePair<ushort, Mob>[] array, int arrayIndex) {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (arrayIndex+this.Count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");

    global::System.Collections.Generic.IList<ushort> keyList = new global::System.Collections.Generic.List<ushort>(this.Keys);
    for (int i = 0; i < keyList.Count; i++) {
      ushort currentKey = keyList[i];
      array.SetValue(new global::System.Collections.Generic.KeyValuePair<ushort, Mob>(currentKey, this[currentKey]), arrayIndex+i);
    }
  }

  global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<ushort, Mob>> global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<ushort, Mob>>.GetEnumerator() {
    return new IntMobMapEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new IntMobMapEnumerator(this);
  }

  public IntMobMapEnumerator GetEnumerator() {
    return new IntMobMapEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class IntMobMapEnumerator : global::System.Collections.IEnumerator,
      global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<ushort, Mob>>
  {
    private IntMobMap collectionRef;
    private global::System.Collections.Generic.IList<ushort> keyCollection;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public IntMobMapEnumerator(IntMobMap collection) {
      collectionRef = collection;
      keyCollection = new global::System.Collections.Generic.List<ushort>(collection.Keys);
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public global::System.Collections.Generic.KeyValuePair<ushort, Mob> Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (global::System.Collections.Generic.KeyValuePair<ushort, Mob>)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        ushort currentKey = keyCollection[currentIndex];
        currentObject = new global::System.Collections.Generic.KeyValuePair<ushort, Mob>(currentKey, collectionRef[currentKey]);
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
      currentIndex = -1;
      currentObject = null;
    }
  }


  public IntMobMap() : this(questinterfacePINVOKE.new_IntMobMap__SWIG_0(), true) {
  }

  public IntMobMap(IntMobMap other) : this(questinterfacePINVOKE.new_IntMobMap__SWIG_1(IntMobMap.getCPtr(other)), true) {
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  private uint size() {
    uint ret = questinterfacePINVOKE.IntMobMap_size(swigCPtr);
    return ret;
  }

  private bool empty() {
    bool ret = questinterfacePINVOKE.IntMobMap_empty(swigCPtr);
    return ret;
  }

  public void Clear() {
    questinterfacePINVOKE.IntMobMap_Clear(swigCPtr);
  }

  private Mob getitem(ushort key) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.IntMobMap_getitem(swigCPtr, key);
    Mob ret = (cPtr == global::System.IntPtr.Zero) ? null : new Mob(cPtr, false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(ushort key, Mob x) {
    questinterfacePINVOKE.IntMobMap_setitem(swigCPtr, key, Mob.getCPtr(x));
  }

  public bool ContainsKey(ushort key) {
    bool ret = questinterfacePINVOKE.IntMobMap_ContainsKey(swigCPtr, key);
    return ret;
  }

  public void Add(ushort key, Mob value) {
    questinterfacePINVOKE.IntMobMap_Add(swigCPtr, key, Mob.getCPtr(value));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Remove(ushort key) {
    bool ret = questinterfacePINVOKE.IntMobMap_Remove(swigCPtr, key);
    return ret;
  }

  private global::System.IntPtr create_iterator_begin() {
    global::System.IntPtr ret = questinterfacePINVOKE.IntMobMap_create_iterator_begin(swigCPtr);
    return ret;
  }

  private ushort get_next_key(global::System.IntPtr swigiterator) {
    ushort ret = questinterfacePINVOKE.IntMobMap_get_next_key(swigCPtr, swigiterator);
    return ret;
  }

  private void destroy_iterator(global::System.IntPtr swigiterator) {
    questinterfacePINVOKE.IntMobMap_destroy_iterator(swigCPtr, swigiterator);
  }

}

public class IntNpcMap2 : global::System.IDisposable 
    , global::System.Collections.Generic.IDictionary<ushort, NPC>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IntNpcMap2(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IntNpcMap2 obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(IntNpcMap2 obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~IntNpcMap2() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_IntNpcMap2(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }


  public NPC this[ushort key] {
    get {
      return getitem(key);
    }

    set {
      setitem(key, value);
    }
  }

  public bool TryGetValue(ushort key, out NPC value) {
    if (this.ContainsKey(key)) {
      value = this[key];
      return true;
    }
    value = default(NPC);
    return false;
  }

  public bool IsEmpty {
    get {
      return empty();
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public global::System.Collections.Generic.ICollection<ushort> Keys {
    get {
      global::System.Collections.Generic.ICollection<ushort> keys = new global::System.Collections.Generic.List<ushort>();
      int size = this.Count;
      if (size > 0) {
        global::System.IntPtr iter = create_iterator_begin();
        for (int i = 0; i < size; i++) {
          keys.Add(get_next_key(iter));
        }
        destroy_iterator(iter);
      }
      return keys;
    }
  }

  public global::System.Collections.Generic.ICollection<NPC> Values {
    get {
      global::System.Collections.Generic.ICollection<NPC> vals = new global::System.Collections.Generic.List<NPC>();
      foreach (global::System.Collections.Generic.KeyValuePair<ushort, NPC> pair in this) {
        vals.Add(pair.Value);
      }
      return vals;
    }
  }

  public void Add(global::System.Collections.Generic.KeyValuePair<ushort, NPC> item) {
    Add(item.Key, item.Value);
  }

  public bool Remove(global::System.Collections.Generic.KeyValuePair<ushort, NPC> item) {
    if (Contains(item)) {
      return Remove(item.Key);
    } else {
      return false;
    }
  }

  public bool Contains(global::System.Collections.Generic.KeyValuePair<ushort, NPC> item) {
    if (this[item.Key] == item.Value) {
      return true;
    } else {
      return false;
    }
  }

  public void CopyTo(global::System.Collections.Generic.KeyValuePair<ushort, NPC>[] array) {
    CopyTo(array, 0);
  }

  public void CopyTo(global::System.Collections.Generic.KeyValuePair<ushort, NPC>[] array, int arrayIndex) {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (arrayIndex+this.Count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");

    global::System.Collections.Generic.IList<ushort> keyList = new global::System.Collections.Generic.List<ushort>(this.Keys);
    for (int i = 0; i < keyList.Count; i++) {
      ushort currentKey = keyList[i];
      array.SetValue(new global::System.Collections.Generic.KeyValuePair<ushort, NPC>(currentKey, this[currentKey]), arrayIndex+i);
    }
  }

  global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<ushort, NPC>> global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<ushort, NPC>>.GetEnumerator() {
    return new IntNpcMap2Enumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new IntNpcMap2Enumerator(this);
  }

  public IntNpcMap2Enumerator GetEnumerator() {
    return new IntNpcMap2Enumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class IntNpcMap2Enumerator : global::System.Collections.IEnumerator,
      global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<ushort, NPC>>
  {
    private IntNpcMap2 collectionRef;
    private global::System.Collections.Generic.IList<ushort> keyCollection;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public IntNpcMap2Enumerator(IntNpcMap2 collection) {
      collectionRef = collection;
      keyCollection = new global::System.Collections.Generic.List<ushort>(collection.Keys);
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public global::System.Collections.Generic.KeyValuePair<ushort, NPC> Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (global::System.Collections.Generic.KeyValuePair<ushort, NPC>)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        ushort currentKey = keyCollection[currentIndex];
        currentObject = new global::System.Collections.Generic.KeyValuePair<ushort, NPC>(currentKey, collectionRef[currentKey]);
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
      currentIndex = -1;
      currentObject = null;
    }
  }


  public IntNpcMap2() : this(questinterfacePINVOKE.new_IntNpcMap2__SWIG_0(), true) {
  }

  public IntNpcMap2(IntNpcMap2 other) : this(questinterfacePINVOKE.new_IntNpcMap2__SWIG_1(IntNpcMap2.getCPtr(other)), true) {
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  private uint size() {
    uint ret = questinterfacePINVOKE.IntNpcMap2_size(swigCPtr);
    return ret;
  }

  private bool empty() {
    bool ret = questinterfacePINVOKE.IntNpcMap2_empty(swigCPtr);
    return ret;
  }

  public void Clear() {
    questinterfacePINVOKE.IntNpcMap2_Clear(swigCPtr);
  }

  private NPC getitem(ushort key) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.IntNpcMap2_getitem(swigCPtr, key);
    NPC ret = (cPtr == global::System.IntPtr.Zero) ? null : new NPC(cPtr, false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(ushort key, NPC x) {
    questinterfacePINVOKE.IntNpcMap2_setitem(swigCPtr, key, NPC.getCPtr(x));
  }

  public bool ContainsKey(ushort key) {
    bool ret = questinterfacePINVOKE.IntNpcMap2_ContainsKey(swigCPtr, key);
    return ret;
  }

  public void Add(ushort key, NPC value) {
    questinterfacePINVOKE.IntNpcMap2_Add(swigCPtr, key, NPC.getCPtr(value));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Remove(ushort key) {
    bool ret = questinterfacePINVOKE.IntNpcMap2_Remove(swigCPtr, key);
    return ret;
  }

  private global::System.IntPtr create_iterator_begin() {
    global::System.IntPtr ret = questinterfacePINVOKE.IntNpcMap2_create_iterator_begin(swigCPtr);
    return ret;
  }

  private ushort get_next_key(global::System.IntPtr swigiterator) {
    ushort ret = questinterfacePINVOKE.IntNpcMap2_get_next_key(swigCPtr, swigiterator);
    return ret;
  }

  private void destroy_iterator(global::System.IntPtr swigiterator) {
    questinterfacePINVOKE.IntNpcMap2_destroy_iterator(swigCPtr, swigiterator);
  }

}

public class IntMercMap : global::System.IDisposable 
    , global::System.Collections.Generic.IDictionary<ushort, SWIGTYPE_p_Merc>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IntMercMap(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IntMercMap obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(IntMercMap obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~IntMercMap() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_IntMercMap(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }


  public SWIGTYPE_p_Merc this[ushort key] {
    get {
      return getitem(key);
    }

    set {
      setitem(key, value);
    }
  }

  public bool TryGetValue(ushort key, out SWIGTYPE_p_Merc value) {
    if (this.ContainsKey(key)) {
      value = this[key];
      return true;
    }
    value = default(SWIGTYPE_p_Merc);
    return false;
  }

  public bool IsEmpty {
    get {
      return empty();
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public global::System.Collections.Generic.ICollection<ushort> Keys {
    get {
      global::System.Collections.Generic.ICollection<ushort> keys = new global::System.Collections.Generic.List<ushort>();
      int size = this.Count;
      if (size > 0) {
        global::System.IntPtr iter = create_iterator_begin();
        for (int i = 0; i < size; i++) {
          keys.Add(get_next_key(iter));
        }
        destroy_iterator(iter);
      }
      return keys;
    }
  }

  public global::System.Collections.Generic.ICollection<SWIGTYPE_p_Merc> Values {
    get {
      global::System.Collections.Generic.ICollection<SWIGTYPE_p_Merc> vals = new global::System.Collections.Generic.List<SWIGTYPE_p_Merc>();
      foreach (global::System.Collections.Generic.KeyValuePair<ushort, SWIGTYPE_p_Merc> pair in this) {
        vals.Add(pair.Value);
      }
      return vals;
    }
  }

  public void Add(global::System.Collections.Generic.KeyValuePair<ushort, SWIGTYPE_p_Merc> item) {
    Add(item.Key, item.Value);
  }

  public bool Remove(global::System.Collections.Generic.KeyValuePair<ushort, SWIGTYPE_p_Merc> item) {
    if (Contains(item)) {
      return Remove(item.Key);
    } else {
      return false;
    }
  }

  public bool Contains(global::System.Collections.Generic.KeyValuePair<ushort, SWIGTYPE_p_Merc> item) {
    if (this[item.Key] == item.Value) {
      return true;
    } else {
      return false;
    }
  }

  public void CopyTo(global::System.Collections.Generic.KeyValuePair<ushort, SWIGTYPE_p_Merc>[] array) {
    CopyTo(array, 0);
  }

  public void CopyTo(global::System.Collections.Generic.KeyValuePair<ushort, SWIGTYPE_p_Merc>[] array, int arrayIndex) {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (arrayIndex+this.Count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");

    global::System.Collections.Generic.IList<ushort> keyList = new global::System.Collections.Generic.List<ushort>(this.Keys);
    for (int i = 0; i < keyList.Count; i++) {
      ushort currentKey = keyList[i];
      array.SetValue(new global::System.Collections.Generic.KeyValuePair<ushort, SWIGTYPE_p_Merc>(currentKey, this[currentKey]), arrayIndex+i);
    }
  }

  global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<ushort, SWIGTYPE_p_Merc>> global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<ushort, SWIGTYPE_p_Merc>>.GetEnumerator() {
    return new IntMercMapEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new IntMercMapEnumerator(this);
  }

  public IntMercMapEnumerator GetEnumerator() {
    return new IntMercMapEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class IntMercMapEnumerator : global::System.Collections.IEnumerator,
      global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<ushort, SWIGTYPE_p_Merc>>
  {
    private IntMercMap collectionRef;
    private global::System.Collections.Generic.IList<ushort> keyCollection;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public IntMercMapEnumerator(IntMercMap collection) {
      collectionRef = collection;
      keyCollection = new global::System.Collections.Generic.List<ushort>(collection.Keys);
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public global::System.Collections.Generic.KeyValuePair<ushort, SWIGTYPE_p_Merc> Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (global::System.Collections.Generic.KeyValuePair<ushort, SWIGTYPE_p_Merc>)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        ushort currentKey = keyCollection[currentIndex];
        currentObject = new global::System.Collections.Generic.KeyValuePair<ushort, SWIGTYPE_p_Merc>(currentKey, collectionRef[currentKey]);
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
      currentIndex = -1;
      currentObject = null;
    }
  }


  public IntMercMap() : this(questinterfacePINVOKE.new_IntMercMap__SWIG_0(), true) {
  }

  public IntMercMap(IntMercMap other) : this(questinterfacePINVOKE.new_IntMercMap__SWIG_1(IntMercMap.getCPtr(other)), true) {
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  private uint size() {
    uint ret = questinterfacePINVOKE.IntMercMap_size(swigCPtr);
    return ret;
  }

  private bool empty() {
    bool ret = questinterfacePINVOKE.IntMercMap_empty(swigCPtr);
    return ret;
  }

  public void Clear() {
    questinterfacePINVOKE.IntMercMap_Clear(swigCPtr);
  }

  private SWIGTYPE_p_Merc getitem(ushort key) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.IntMercMap_getitem(swigCPtr, key);
    SWIGTYPE_p_Merc ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Merc(cPtr, false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(ushort key, SWIGTYPE_p_Merc x) {
    questinterfacePINVOKE.IntMercMap_setitem(swigCPtr, key, SWIGTYPE_p_Merc.getCPtr(x));
  }

  public bool ContainsKey(ushort key) {
    bool ret = questinterfacePINVOKE.IntMercMap_ContainsKey(swigCPtr, key);
    return ret;
  }

  public void Add(ushort key, SWIGTYPE_p_Merc value) {
    questinterfacePINVOKE.IntMercMap_Add(swigCPtr, key, SWIGTYPE_p_Merc.getCPtr(value));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Remove(ushort key) {
    bool ret = questinterfacePINVOKE.IntMercMap_Remove(swigCPtr, key);
    return ret;
  }

  private global::System.IntPtr create_iterator_begin() {
    global::System.IntPtr ret = questinterfacePINVOKE.IntMercMap_create_iterator_begin(swigCPtr);
    return ret;
  }

  private ushort get_next_key(global::System.IntPtr swigiterator) {
    ushort ret = questinterfacePINVOKE.IntMercMap_get_next_key(swigCPtr, swigiterator);
    return ret;
  }

  private void destroy_iterator(global::System.IntPtr swigiterator) {
    questinterfacePINVOKE.IntMercMap_destroy_iterator(swigCPtr, swigiterator);
  }

}

public class IntCorpseMap : global::System.IDisposable 
    , global::System.Collections.Generic.IDictionary<ushort, Corpse>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IntCorpseMap(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IntCorpseMap obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(IntCorpseMap obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~IntCorpseMap() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_IntCorpseMap(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }


  public Corpse this[ushort key] {
    get {
      return getitem(key);
    }

    set {
      setitem(key, value);
    }
  }

  public bool TryGetValue(ushort key, out Corpse value) {
    if (this.ContainsKey(key)) {
      value = this[key];
      return true;
    }
    value = default(Corpse);
    return false;
  }

  public bool IsEmpty {
    get {
      return empty();
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public global::System.Collections.Generic.ICollection<ushort> Keys {
    get {
      global::System.Collections.Generic.ICollection<ushort> keys = new global::System.Collections.Generic.List<ushort>();
      int size = this.Count;
      if (size > 0) {
        global::System.IntPtr iter = create_iterator_begin();
        for (int i = 0; i < size; i++) {
          keys.Add(get_next_key(iter));
        }
        destroy_iterator(iter);
      }
      return keys;
    }
  }

  public global::System.Collections.Generic.ICollection<Corpse> Values {
    get {
      global::System.Collections.Generic.ICollection<Corpse> vals = new global::System.Collections.Generic.List<Corpse>();
      foreach (global::System.Collections.Generic.KeyValuePair<ushort, Corpse> pair in this) {
        vals.Add(pair.Value);
      }
      return vals;
    }
  }

  public void Add(global::System.Collections.Generic.KeyValuePair<ushort, Corpse> item) {
    Add(item.Key, item.Value);
  }

  public bool Remove(global::System.Collections.Generic.KeyValuePair<ushort, Corpse> item) {
    if (Contains(item)) {
      return Remove(item.Key);
    } else {
      return false;
    }
  }

  public bool Contains(global::System.Collections.Generic.KeyValuePair<ushort, Corpse> item) {
    if (this[item.Key] == item.Value) {
      return true;
    } else {
      return false;
    }
  }

  public void CopyTo(global::System.Collections.Generic.KeyValuePair<ushort, Corpse>[] array) {
    CopyTo(array, 0);
  }

  public void CopyTo(global::System.Collections.Generic.KeyValuePair<ushort, Corpse>[] array, int arrayIndex) {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (arrayIndex+this.Count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");

    global::System.Collections.Generic.IList<ushort> keyList = new global::System.Collections.Generic.List<ushort>(this.Keys);
    for (int i = 0; i < keyList.Count; i++) {
      ushort currentKey = keyList[i];
      array.SetValue(new global::System.Collections.Generic.KeyValuePair<ushort, Corpse>(currentKey, this[currentKey]), arrayIndex+i);
    }
  }

  global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<ushort, Corpse>> global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<ushort, Corpse>>.GetEnumerator() {
    return new IntCorpseMapEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new IntCorpseMapEnumerator(this);
  }

  public IntCorpseMapEnumerator GetEnumerator() {
    return new IntCorpseMapEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class IntCorpseMapEnumerator : global::System.Collections.IEnumerator,
      global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<ushort, Corpse>>
  {
    private IntCorpseMap collectionRef;
    private global::System.Collections.Generic.IList<ushort> keyCollection;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public IntCorpseMapEnumerator(IntCorpseMap collection) {
      collectionRef = collection;
      keyCollection = new global::System.Collections.Generic.List<ushort>(collection.Keys);
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public global::System.Collections.Generic.KeyValuePair<ushort, Corpse> Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (global::System.Collections.Generic.KeyValuePair<ushort, Corpse>)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        ushort currentKey = keyCollection[currentIndex];
        currentObject = new global::System.Collections.Generic.KeyValuePair<ushort, Corpse>(currentKey, collectionRef[currentKey]);
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
      currentIndex = -1;
      currentObject = null;
    }
  }


  public IntCorpseMap() : this(questinterfacePINVOKE.new_IntCorpseMap__SWIG_0(), true) {
  }

  public IntCorpseMap(IntCorpseMap other) : this(questinterfacePINVOKE.new_IntCorpseMap__SWIG_1(IntCorpseMap.getCPtr(other)), true) {
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  private uint size() {
    uint ret = questinterfacePINVOKE.IntCorpseMap_size(swigCPtr);
    return ret;
  }

  private bool empty() {
    bool ret = questinterfacePINVOKE.IntCorpseMap_empty(swigCPtr);
    return ret;
  }

  public void Clear() {
    questinterfacePINVOKE.IntCorpseMap_Clear(swigCPtr);
  }

  private Corpse getitem(ushort key) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.IntCorpseMap_getitem(swigCPtr, key);
    Corpse ret = (cPtr == global::System.IntPtr.Zero) ? null : new Corpse(cPtr, false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(ushort key, Corpse x) {
    questinterfacePINVOKE.IntCorpseMap_setitem(swigCPtr, key, Corpse.getCPtr(x));
  }

  public bool ContainsKey(ushort key) {
    bool ret = questinterfacePINVOKE.IntCorpseMap_ContainsKey(swigCPtr, key);
    return ret;
  }

  public void Add(ushort key, Corpse value) {
    questinterfacePINVOKE.IntCorpseMap_Add(swigCPtr, key, Corpse.getCPtr(value));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Remove(ushort key) {
    bool ret = questinterfacePINVOKE.IntCorpseMap_Remove(swigCPtr, key);
    return ret;
  }

  private global::System.IntPtr create_iterator_begin() {
    global::System.IntPtr ret = questinterfacePINVOKE.IntCorpseMap_create_iterator_begin(swigCPtr);
    return ret;
  }

  private ushort get_next_key(global::System.IntPtr swigiterator) {
    ushort ret = questinterfacePINVOKE.IntCorpseMap_get_next_key(swigCPtr, swigiterator);
    return ret;
  }

  private void destroy_iterator(global::System.IntPtr swigiterator) {
    questinterfacePINVOKE.IntCorpseMap_destroy_iterator(swigCPtr, swigiterator);
  }

}

public class IntObjectMap : global::System.IDisposable 
    , global::System.Collections.Generic.IDictionary<ushort, Object>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IntObjectMap(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IntObjectMap obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(IntObjectMap obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~IntObjectMap() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_IntObjectMap(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }


  public Object this[ushort key] {
    get {
      return getitem(key);
    }

    set {
      setitem(key, value);
    }
  }

  public bool TryGetValue(ushort key, out Object value) {
    if (this.ContainsKey(key)) {
      value = this[key];
      return true;
    }
    value = default(Object);
    return false;
  }

  public bool IsEmpty {
    get {
      return empty();
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public global::System.Collections.Generic.ICollection<ushort> Keys {
    get {
      global::System.Collections.Generic.ICollection<ushort> keys = new global::System.Collections.Generic.List<ushort>();
      int size = this.Count;
      if (size > 0) {
        global::System.IntPtr iter = create_iterator_begin();
        for (int i = 0; i < size; i++) {
          keys.Add(get_next_key(iter));
        }
        destroy_iterator(iter);
      }
      return keys;
    }
  }

  public global::System.Collections.Generic.ICollection<Object> Values {
    get {
      global::System.Collections.Generic.ICollection<Object> vals = new global::System.Collections.Generic.List<Object>();
      foreach (global::System.Collections.Generic.KeyValuePair<ushort, Object> pair in this) {
        vals.Add(pair.Value);
      }
      return vals;
    }
  }

  public void Add(global::System.Collections.Generic.KeyValuePair<ushort, Object> item) {
    Add(item.Key, item.Value);
  }

  public bool Remove(global::System.Collections.Generic.KeyValuePair<ushort, Object> item) {
    if (Contains(item)) {
      return Remove(item.Key);
    } else {
      return false;
    }
  }

  public bool Contains(global::System.Collections.Generic.KeyValuePair<ushort, Object> item) {
    if (this[item.Key] == item.Value) {
      return true;
    } else {
      return false;
    }
  }

  public void CopyTo(global::System.Collections.Generic.KeyValuePair<ushort, Object>[] array) {
    CopyTo(array, 0);
  }

  public void CopyTo(global::System.Collections.Generic.KeyValuePair<ushort, Object>[] array, int arrayIndex) {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (arrayIndex+this.Count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");

    global::System.Collections.Generic.IList<ushort> keyList = new global::System.Collections.Generic.List<ushort>(this.Keys);
    for (int i = 0; i < keyList.Count; i++) {
      ushort currentKey = keyList[i];
      array.SetValue(new global::System.Collections.Generic.KeyValuePair<ushort, Object>(currentKey, this[currentKey]), arrayIndex+i);
    }
  }

  global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<ushort, Object>> global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<ushort, Object>>.GetEnumerator() {
    return new IntObjectMapEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new IntObjectMapEnumerator(this);
  }

  public IntObjectMapEnumerator GetEnumerator() {
    return new IntObjectMapEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class IntObjectMapEnumerator : global::System.Collections.IEnumerator,
      global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<ushort, Object>>
  {
    private IntObjectMap collectionRef;
    private global::System.Collections.Generic.IList<ushort> keyCollection;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public IntObjectMapEnumerator(IntObjectMap collection) {
      collectionRef = collection;
      keyCollection = new global::System.Collections.Generic.List<ushort>(collection.Keys);
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public global::System.Collections.Generic.KeyValuePair<ushort, Object> Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (global::System.Collections.Generic.KeyValuePair<ushort, Object>)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        ushort currentKey = keyCollection[currentIndex];
        currentObject = new global::System.Collections.Generic.KeyValuePair<ushort, Object>(currentKey, collectionRef[currentKey]);
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
      currentIndex = -1;
      currentObject = null;
    }
  }


  public IntObjectMap() : this(questinterfacePINVOKE.new_IntObjectMap__SWIG_0(), true) {
  }

  public IntObjectMap(IntObjectMap other) : this(questinterfacePINVOKE.new_IntObjectMap__SWIG_1(IntObjectMap.getCPtr(other)), true) {
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  private uint size() {
    uint ret = questinterfacePINVOKE.IntObjectMap_size(swigCPtr);
    return ret;
  }

  private bool empty() {
    bool ret = questinterfacePINVOKE.IntObjectMap_empty(swigCPtr);
    return ret;
  }

  public void Clear() {
    questinterfacePINVOKE.IntObjectMap_Clear(swigCPtr);
  }

  private Object getitem(ushort key) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.IntObjectMap_getitem(swigCPtr, key);
    Object ret = (cPtr == global::System.IntPtr.Zero) ? null : new Object(cPtr, false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(ushort key, Object x) {
    questinterfacePINVOKE.IntObjectMap_setitem(swigCPtr, key, Object.getCPtr(x));
  }

  public bool ContainsKey(ushort key) {
    bool ret = questinterfacePINVOKE.IntObjectMap_ContainsKey(swigCPtr, key);
    return ret;
  }

  public void Add(ushort key, Object value) {
    questinterfacePINVOKE.IntObjectMap_Add(swigCPtr, key, Object.getCPtr(value));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Remove(ushort key) {
    bool ret = questinterfacePINVOKE.IntObjectMap_Remove(swigCPtr, key);
    return ret;
  }

  private global::System.IntPtr create_iterator_begin() {
    global::System.IntPtr ret = questinterfacePINVOKE.IntObjectMap_create_iterator_begin(swigCPtr);
    return ret;
  }

  private ushort get_next_key(global::System.IntPtr swigiterator) {
    ushort ret = questinterfacePINVOKE.IntObjectMap_get_next_key(swigCPtr, swigiterator);
    return ret;
  }

  private void destroy_iterator(global::System.IntPtr swigiterator) {
    questinterfacePINVOKE.IntObjectMap_destroy_iterator(swigCPtr, swigiterator);
  }

}

public class IntDoorMap : global::System.IDisposable 
    , global::System.Collections.Generic.IDictionary<ushort, Doors>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IntDoorMap(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IntDoorMap obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(IntDoorMap obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~IntDoorMap() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_IntDoorMap(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }


  public Doors this[ushort key] {
    get {
      return getitem(key);
    }

    set {
      setitem(key, value);
    }
  }

  public bool TryGetValue(ushort key, out Doors value) {
    if (this.ContainsKey(key)) {
      value = this[key];
      return true;
    }
    value = default(Doors);
    return false;
  }

  public bool IsEmpty {
    get {
      return empty();
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public global::System.Collections.Generic.ICollection<ushort> Keys {
    get {
      global::System.Collections.Generic.ICollection<ushort> keys = new global::System.Collections.Generic.List<ushort>();
      int size = this.Count;
      if (size > 0) {
        global::System.IntPtr iter = create_iterator_begin();
        for (int i = 0; i < size; i++) {
          keys.Add(get_next_key(iter));
        }
        destroy_iterator(iter);
      }
      return keys;
    }
  }

  public global::System.Collections.Generic.ICollection<Doors> Values {
    get {
      global::System.Collections.Generic.ICollection<Doors> vals = new global::System.Collections.Generic.List<Doors>();
      foreach (global::System.Collections.Generic.KeyValuePair<ushort, Doors> pair in this) {
        vals.Add(pair.Value);
      }
      return vals;
    }
  }

  public void Add(global::System.Collections.Generic.KeyValuePair<ushort, Doors> item) {
    Add(item.Key, item.Value);
  }

  public bool Remove(global::System.Collections.Generic.KeyValuePair<ushort, Doors> item) {
    if (Contains(item)) {
      return Remove(item.Key);
    } else {
      return false;
    }
  }

  public bool Contains(global::System.Collections.Generic.KeyValuePair<ushort, Doors> item) {
    if (this[item.Key] == item.Value) {
      return true;
    } else {
      return false;
    }
  }

  public void CopyTo(global::System.Collections.Generic.KeyValuePair<ushort, Doors>[] array) {
    CopyTo(array, 0);
  }

  public void CopyTo(global::System.Collections.Generic.KeyValuePair<ushort, Doors>[] array, int arrayIndex) {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (arrayIndex+this.Count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");

    global::System.Collections.Generic.IList<ushort> keyList = new global::System.Collections.Generic.List<ushort>(this.Keys);
    for (int i = 0; i < keyList.Count; i++) {
      ushort currentKey = keyList[i];
      array.SetValue(new global::System.Collections.Generic.KeyValuePair<ushort, Doors>(currentKey, this[currentKey]), arrayIndex+i);
    }
  }

  global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<ushort, Doors>> global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<ushort, Doors>>.GetEnumerator() {
    return new IntDoorMapEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new IntDoorMapEnumerator(this);
  }

  public IntDoorMapEnumerator GetEnumerator() {
    return new IntDoorMapEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class IntDoorMapEnumerator : global::System.Collections.IEnumerator,
      global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<ushort, Doors>>
  {
    private IntDoorMap collectionRef;
    private global::System.Collections.Generic.IList<ushort> keyCollection;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public IntDoorMapEnumerator(IntDoorMap collection) {
      collectionRef = collection;
      keyCollection = new global::System.Collections.Generic.List<ushort>(collection.Keys);
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public global::System.Collections.Generic.KeyValuePair<ushort, Doors> Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (global::System.Collections.Generic.KeyValuePair<ushort, Doors>)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        ushort currentKey = keyCollection[currentIndex];
        currentObject = new global::System.Collections.Generic.KeyValuePair<ushort, Doors>(currentKey, collectionRef[currentKey]);
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
      currentIndex = -1;
      currentObject = null;
    }
  }


  public IntDoorMap() : this(questinterfacePINVOKE.new_IntDoorMap__SWIG_0(), true) {
  }

  public IntDoorMap(IntDoorMap other) : this(questinterfacePINVOKE.new_IntDoorMap__SWIG_1(IntDoorMap.getCPtr(other)), true) {
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  private uint size() {
    uint ret = questinterfacePINVOKE.IntDoorMap_size(swigCPtr);
    return ret;
  }

  private bool empty() {
    bool ret = questinterfacePINVOKE.IntDoorMap_empty(swigCPtr);
    return ret;
  }

  public void Clear() {
    questinterfacePINVOKE.IntDoorMap_Clear(swigCPtr);
  }

  private Doors getitem(ushort key) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.IntDoorMap_getitem(swigCPtr, key);
    Doors ret = (cPtr == global::System.IntPtr.Zero) ? null : new Doors(cPtr, false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(ushort key, Doors x) {
    questinterfacePINVOKE.IntDoorMap_setitem(swigCPtr, key, Doors.getCPtr(x));
  }

  public bool ContainsKey(ushort key) {
    bool ret = questinterfacePINVOKE.IntDoorMap_ContainsKey(swigCPtr, key);
    return ret;
  }

  public void Add(ushort key, Doors value) {
    questinterfacePINVOKE.IntDoorMap_Add(swigCPtr, key, Doors.getCPtr(value));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Remove(ushort key) {
    bool ret = questinterfacePINVOKE.IntDoorMap_Remove(swigCPtr, key);
    return ret;
  }

  private global::System.IntPtr create_iterator_begin() {
    global::System.IntPtr ret = questinterfacePINVOKE.IntDoorMap_create_iterator_begin(swigCPtr);
    return ret;
  }

  private ushort get_next_key(global::System.IntPtr swigiterator) {
    ushort ret = questinterfacePINVOKE.IntDoorMap_get_next_key(swigCPtr, swigiterator);
    return ret;
  }

  private void destroy_iterator(global::System.IntPtr swigiterator) {
    questinterfacePINVOKE.IntDoorMap_destroy_iterator(swigCPtr, swigiterator);
  }

}

public class IntTrapMap : global::System.IDisposable 
    , global::System.Collections.Generic.IDictionary<ushort, Trap>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IntTrapMap(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IntTrapMap obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(IntTrapMap obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~IntTrapMap() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_IntTrapMap(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }


  public Trap this[ushort key] {
    get {
      return getitem(key);
    }

    set {
      setitem(key, value);
    }
  }

  public bool TryGetValue(ushort key, out Trap value) {
    if (this.ContainsKey(key)) {
      value = this[key];
      return true;
    }
    value = default(Trap);
    return false;
  }

  public bool IsEmpty {
    get {
      return empty();
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public global::System.Collections.Generic.ICollection<ushort> Keys {
    get {
      global::System.Collections.Generic.ICollection<ushort> keys = new global::System.Collections.Generic.List<ushort>();
      int size = this.Count;
      if (size > 0) {
        global::System.IntPtr iter = create_iterator_begin();
        for (int i = 0; i < size; i++) {
          keys.Add(get_next_key(iter));
        }
        destroy_iterator(iter);
      }
      return keys;
    }
  }

  public global::System.Collections.Generic.ICollection<Trap> Values {
    get {
      global::System.Collections.Generic.ICollection<Trap> vals = new global::System.Collections.Generic.List<Trap>();
      foreach (global::System.Collections.Generic.KeyValuePair<ushort, Trap> pair in this) {
        vals.Add(pair.Value);
      }
      return vals;
    }
  }

  public void Add(global::System.Collections.Generic.KeyValuePair<ushort, Trap> item) {
    Add(item.Key, item.Value);
  }

  public bool Remove(global::System.Collections.Generic.KeyValuePair<ushort, Trap> item) {
    if (Contains(item)) {
      return Remove(item.Key);
    } else {
      return false;
    }
  }

  public bool Contains(global::System.Collections.Generic.KeyValuePair<ushort, Trap> item) {
    if (this[item.Key] == item.Value) {
      return true;
    } else {
      return false;
    }
  }

  public void CopyTo(global::System.Collections.Generic.KeyValuePair<ushort, Trap>[] array) {
    CopyTo(array, 0);
  }

  public void CopyTo(global::System.Collections.Generic.KeyValuePair<ushort, Trap>[] array, int arrayIndex) {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (arrayIndex+this.Count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");

    global::System.Collections.Generic.IList<ushort> keyList = new global::System.Collections.Generic.List<ushort>(this.Keys);
    for (int i = 0; i < keyList.Count; i++) {
      ushort currentKey = keyList[i];
      array.SetValue(new global::System.Collections.Generic.KeyValuePair<ushort, Trap>(currentKey, this[currentKey]), arrayIndex+i);
    }
  }

  global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<ushort, Trap>> global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<ushort, Trap>>.GetEnumerator() {
    return new IntTrapMapEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new IntTrapMapEnumerator(this);
  }

  public IntTrapMapEnumerator GetEnumerator() {
    return new IntTrapMapEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class IntTrapMapEnumerator : global::System.Collections.IEnumerator,
      global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<ushort, Trap>>
  {
    private IntTrapMap collectionRef;
    private global::System.Collections.Generic.IList<ushort> keyCollection;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public IntTrapMapEnumerator(IntTrapMap collection) {
      collectionRef = collection;
      keyCollection = new global::System.Collections.Generic.List<ushort>(collection.Keys);
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public global::System.Collections.Generic.KeyValuePair<ushort, Trap> Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (global::System.Collections.Generic.KeyValuePair<ushort, Trap>)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        ushort currentKey = keyCollection[currentIndex];
        currentObject = new global::System.Collections.Generic.KeyValuePair<ushort, Trap>(currentKey, collectionRef[currentKey]);
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
      currentIndex = -1;
      currentObject = null;
    }
  }


  public IntTrapMap() : this(questinterfacePINVOKE.new_IntTrapMap__SWIG_0(), true) {
  }

  public IntTrapMap(IntTrapMap other) : this(questinterfacePINVOKE.new_IntTrapMap__SWIG_1(IntTrapMap.getCPtr(other)), true) {
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  private uint size() {
    uint ret = questinterfacePINVOKE.IntTrapMap_size(swigCPtr);
    return ret;
  }

  private bool empty() {
    bool ret = questinterfacePINVOKE.IntTrapMap_empty(swigCPtr);
    return ret;
  }

  public void Clear() {
    questinterfacePINVOKE.IntTrapMap_Clear(swigCPtr);
  }

  private Trap getitem(ushort key) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.IntTrapMap_getitem(swigCPtr, key);
    Trap ret = (cPtr == global::System.IntPtr.Zero) ? null : new Trap(cPtr, false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(ushort key, Trap x) {
    questinterfacePINVOKE.IntTrapMap_setitem(swigCPtr, key, Trap.getCPtr(x));
  }

  public bool ContainsKey(ushort key) {
    bool ret = questinterfacePINVOKE.IntTrapMap_ContainsKey(swigCPtr, key);
    return ret;
  }

  public void Add(ushort key, Trap value) {
    questinterfacePINVOKE.IntTrapMap_Add(swigCPtr, key, Trap.getCPtr(value));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Remove(ushort key) {
    bool ret = questinterfacePINVOKE.IntTrapMap_Remove(swigCPtr, key);
    return ret;
  }

  private global::System.IntPtr create_iterator_begin() {
    global::System.IntPtr ret = questinterfacePINVOKE.IntTrapMap_create_iterator_begin(swigCPtr);
    return ret;
  }

  private ushort get_next_key(global::System.IntPtr swigiterator) {
    ushort ret = questinterfacePINVOKE.IntTrapMap_get_next_key(swigCPtr, swigiterator);
    return ret;
  }

  private void destroy_iterator(global::System.IntPtr swigiterator) {
    questinterfacePINVOKE.IntTrapMap_destroy_iterator(swigCPtr, swigiterator);
  }

}

public class IntBeaconMap : global::System.IDisposable 
    , global::System.Collections.Generic.IDictionary<ushort, Beacon>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IntBeaconMap(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IntBeaconMap obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(IntBeaconMap obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~IntBeaconMap() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_IntBeaconMap(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }


  public Beacon this[ushort key] {
    get {
      return getitem(key);
    }

    set {
      setitem(key, value);
    }
  }

  public bool TryGetValue(ushort key, out Beacon value) {
    if (this.ContainsKey(key)) {
      value = this[key];
      return true;
    }
    value = default(Beacon);
    return false;
  }

  public bool IsEmpty {
    get {
      return empty();
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public global::System.Collections.Generic.ICollection<ushort> Keys {
    get {
      global::System.Collections.Generic.ICollection<ushort> keys = new global::System.Collections.Generic.List<ushort>();
      int size = this.Count;
      if (size > 0) {
        global::System.IntPtr iter = create_iterator_begin();
        for (int i = 0; i < size; i++) {
          keys.Add(get_next_key(iter));
        }
        destroy_iterator(iter);
      }
      return keys;
    }
  }

  public global::System.Collections.Generic.ICollection<Beacon> Values {
    get {
      global::System.Collections.Generic.ICollection<Beacon> vals = new global::System.Collections.Generic.List<Beacon>();
      foreach (global::System.Collections.Generic.KeyValuePair<ushort, Beacon> pair in this) {
        vals.Add(pair.Value);
      }
      return vals;
    }
  }

  public void Add(global::System.Collections.Generic.KeyValuePair<ushort, Beacon> item) {
    Add(item.Key, item.Value);
  }

  public bool Remove(global::System.Collections.Generic.KeyValuePair<ushort, Beacon> item) {
    if (Contains(item)) {
      return Remove(item.Key);
    } else {
      return false;
    }
  }

  public bool Contains(global::System.Collections.Generic.KeyValuePair<ushort, Beacon> item) {
    if (this[item.Key] == item.Value) {
      return true;
    } else {
      return false;
    }
  }

  public void CopyTo(global::System.Collections.Generic.KeyValuePair<ushort, Beacon>[] array) {
    CopyTo(array, 0);
  }

  public void CopyTo(global::System.Collections.Generic.KeyValuePair<ushort, Beacon>[] array, int arrayIndex) {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (arrayIndex+this.Count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");

    global::System.Collections.Generic.IList<ushort> keyList = new global::System.Collections.Generic.List<ushort>(this.Keys);
    for (int i = 0; i < keyList.Count; i++) {
      ushort currentKey = keyList[i];
      array.SetValue(new global::System.Collections.Generic.KeyValuePair<ushort, Beacon>(currentKey, this[currentKey]), arrayIndex+i);
    }
  }

  global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<ushort, Beacon>> global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<ushort, Beacon>>.GetEnumerator() {
    return new IntBeaconMapEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new IntBeaconMapEnumerator(this);
  }

  public IntBeaconMapEnumerator GetEnumerator() {
    return new IntBeaconMapEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class IntBeaconMapEnumerator : global::System.Collections.IEnumerator,
      global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<ushort, Beacon>>
  {
    private IntBeaconMap collectionRef;
    private global::System.Collections.Generic.IList<ushort> keyCollection;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public IntBeaconMapEnumerator(IntBeaconMap collection) {
      collectionRef = collection;
      keyCollection = new global::System.Collections.Generic.List<ushort>(collection.Keys);
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public global::System.Collections.Generic.KeyValuePair<ushort, Beacon> Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (global::System.Collections.Generic.KeyValuePair<ushort, Beacon>)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        ushort currentKey = keyCollection[currentIndex];
        currentObject = new global::System.Collections.Generic.KeyValuePair<ushort, Beacon>(currentKey, collectionRef[currentKey]);
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
      currentIndex = -1;
      currentObject = null;
    }
  }


  public IntBeaconMap() : this(questinterfacePINVOKE.new_IntBeaconMap__SWIG_0(), true) {
  }

  public IntBeaconMap(IntBeaconMap other) : this(questinterfacePINVOKE.new_IntBeaconMap__SWIG_1(IntBeaconMap.getCPtr(other)), true) {
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  private uint size() {
    uint ret = questinterfacePINVOKE.IntBeaconMap_size(swigCPtr);
    return ret;
  }

  private bool empty() {
    bool ret = questinterfacePINVOKE.IntBeaconMap_empty(swigCPtr);
    return ret;
  }

  public void Clear() {
    questinterfacePINVOKE.IntBeaconMap_Clear(swigCPtr);
  }

  private Beacon getitem(ushort key) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.IntBeaconMap_getitem(swigCPtr, key);
    Beacon ret = (cPtr == global::System.IntPtr.Zero) ? null : new Beacon(cPtr, false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(ushort key, Beacon x) {
    questinterfacePINVOKE.IntBeaconMap_setitem(swigCPtr, key, Beacon.getCPtr(x));
  }

  public bool ContainsKey(ushort key) {
    bool ret = questinterfacePINVOKE.IntBeaconMap_ContainsKey(swigCPtr, key);
    return ret;
  }

  public void Add(ushort key, Beacon value) {
    questinterfacePINVOKE.IntBeaconMap_Add(swigCPtr, key, Beacon.getCPtr(value));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Remove(ushort key) {
    bool ret = questinterfacePINVOKE.IntBeaconMap_Remove(swigCPtr, key);
    return ret;
  }

  private global::System.IntPtr create_iterator_begin() {
    global::System.IntPtr ret = questinterfacePINVOKE.IntBeaconMap_create_iterator_begin(swigCPtr);
    return ret;
  }

  private ushort get_next_key(global::System.IntPtr swigiterator) {
    ushort ret = questinterfacePINVOKE.IntBeaconMap_get_next_key(swigCPtr, swigiterator);
    return ret;
  }

  private void destroy_iterator(global::System.IntPtr swigiterator) {
    questinterfacePINVOKE.IntBeaconMap_destroy_iterator(swigCPtr, swigiterator);
  }

}

public class IntEncounterMap : global::System.IDisposable 
    , global::System.Collections.Generic.IDictionary<ushort, Encounter>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IntEncounterMap(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IntEncounterMap obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(IntEncounterMap obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~IntEncounterMap() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_IntEncounterMap(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }


  public Encounter this[ushort key] {
    get {
      return getitem(key);
    }

    set {
      setitem(key, value);
    }
  }

  public bool TryGetValue(ushort key, out Encounter value) {
    if (this.ContainsKey(key)) {
      value = this[key];
      return true;
    }
    value = default(Encounter);
    return false;
  }

  public bool IsEmpty {
    get {
      return empty();
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public global::System.Collections.Generic.ICollection<ushort> Keys {
    get {
      global::System.Collections.Generic.ICollection<ushort> keys = new global::System.Collections.Generic.List<ushort>();
      int size = this.Count;
      if (size > 0) {
        global::System.IntPtr iter = create_iterator_begin();
        for (int i = 0; i < size; i++) {
          keys.Add(get_next_key(iter));
        }
        destroy_iterator(iter);
      }
      return keys;
    }
  }

  public global::System.Collections.Generic.ICollection<Encounter> Values {
    get {
      global::System.Collections.Generic.ICollection<Encounter> vals = new global::System.Collections.Generic.List<Encounter>();
      foreach (global::System.Collections.Generic.KeyValuePair<ushort, Encounter> pair in this) {
        vals.Add(pair.Value);
      }
      return vals;
    }
  }

  public void Add(global::System.Collections.Generic.KeyValuePair<ushort, Encounter> item) {
    Add(item.Key, item.Value);
  }

  public bool Remove(global::System.Collections.Generic.KeyValuePair<ushort, Encounter> item) {
    if (Contains(item)) {
      return Remove(item.Key);
    } else {
      return false;
    }
  }

  public bool Contains(global::System.Collections.Generic.KeyValuePair<ushort, Encounter> item) {
    if (this[item.Key] == item.Value) {
      return true;
    } else {
      return false;
    }
  }

  public void CopyTo(global::System.Collections.Generic.KeyValuePair<ushort, Encounter>[] array) {
    CopyTo(array, 0);
  }

  public void CopyTo(global::System.Collections.Generic.KeyValuePair<ushort, Encounter>[] array, int arrayIndex) {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (arrayIndex+this.Count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");

    global::System.Collections.Generic.IList<ushort> keyList = new global::System.Collections.Generic.List<ushort>(this.Keys);
    for (int i = 0; i < keyList.Count; i++) {
      ushort currentKey = keyList[i];
      array.SetValue(new global::System.Collections.Generic.KeyValuePair<ushort, Encounter>(currentKey, this[currentKey]), arrayIndex+i);
    }
  }

  global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<ushort, Encounter>> global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<ushort, Encounter>>.GetEnumerator() {
    return new IntEncounterMapEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new IntEncounterMapEnumerator(this);
  }

  public IntEncounterMapEnumerator GetEnumerator() {
    return new IntEncounterMapEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class IntEncounterMapEnumerator : global::System.Collections.IEnumerator,
      global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<ushort, Encounter>>
  {
    private IntEncounterMap collectionRef;
    private global::System.Collections.Generic.IList<ushort> keyCollection;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public IntEncounterMapEnumerator(IntEncounterMap collection) {
      collectionRef = collection;
      keyCollection = new global::System.Collections.Generic.List<ushort>(collection.Keys);
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public global::System.Collections.Generic.KeyValuePair<ushort, Encounter> Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (global::System.Collections.Generic.KeyValuePair<ushort, Encounter>)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        ushort currentKey = keyCollection[currentIndex];
        currentObject = new global::System.Collections.Generic.KeyValuePair<ushort, Encounter>(currentKey, collectionRef[currentKey]);
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
      currentIndex = -1;
      currentObject = null;
    }
  }


  public IntEncounterMap() : this(questinterfacePINVOKE.new_IntEncounterMap__SWIG_0(), true) {
  }

  public IntEncounterMap(IntEncounterMap other) : this(questinterfacePINVOKE.new_IntEncounterMap__SWIG_1(IntEncounterMap.getCPtr(other)), true) {
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  private uint size() {
    uint ret = questinterfacePINVOKE.IntEncounterMap_size(swigCPtr);
    return ret;
  }

  private bool empty() {
    bool ret = questinterfacePINVOKE.IntEncounterMap_empty(swigCPtr);
    return ret;
  }

  public void Clear() {
    questinterfacePINVOKE.IntEncounterMap_Clear(swigCPtr);
  }

  private Encounter getitem(ushort key) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.IntEncounterMap_getitem(swigCPtr, key);
    Encounter ret = (cPtr == global::System.IntPtr.Zero) ? null : new Encounter(cPtr, false);
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(ushort key, Encounter x) {
    questinterfacePINVOKE.IntEncounterMap_setitem(swigCPtr, key, Encounter.getCPtr(x));
  }

  public bool ContainsKey(ushort key) {
    bool ret = questinterfacePINVOKE.IntEncounterMap_ContainsKey(swigCPtr, key);
    return ret;
  }

  public void Add(ushort key, Encounter value) {
    questinterfacePINVOKE.IntEncounterMap_Add(swigCPtr, key, Encounter.getCPtr(value));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Remove(ushort key) {
    bool ret = questinterfacePINVOKE.IntEncounterMap_Remove(swigCPtr, key);
    return ret;
  }

  private global::System.IntPtr create_iterator_begin() {
    global::System.IntPtr ret = questinterfacePINVOKE.IntEncounterMap_create_iterator_begin(swigCPtr);
    return ret;
  }

  private ushort get_next_key(global::System.IntPtr swigiterator) {
    ushort ret = questinterfacePINVOKE.IntEncounterMap_get_next_key(swigCPtr, swigiterator);
    return ret;
  }

  private void destroy_iterator(global::System.IntPtr swigiterator) {
    questinterfacePINVOKE.IntEncounterMap_destroy_iterator(swigCPtr, swigiterator);
  }

}

public class ProximityList : global::System.IDisposable, global::System.Collections.IEnumerable, global::System.Collections.Generic.ICollection<NPC>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ProximityList(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ProximityList obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ProximityList obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ProximityList() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_ProximityList(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ProximityList(global::System.Collections.IEnumerable c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (NPC element in c) {
      this.AddLast(element);
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public ProximityListNode First {
    get {
      if (Count == 0)
        return null;
      return new ProximityListNode(getFirstIter(), this);
    }
  }

  public ProximityListNode Last {
    get {
      if (Count == 0)
        return null;
      return new ProximityListNode(getLastIter(), this);
    }
  }

  public ProximityListNode AddFirst(NPC value) {
    push_front(value);
    return new ProximityListNode(getFirstIter(), this);
  }

  public void AddFirst(ProximityListNode newNode) {
    ValidateNewNode(newNode);
    if (!newNode.inlist) {
      push_front(newNode.csharpvalue);
      newNode.iter = getFirstIter();
      newNode.inlist = true;
    } else {
      throw new global::System.InvalidOperationException("The " + newNode.GetType().Name + " node already belongs to a " + this.GetType().Name);
    }
  }

  public ProximityListNode AddLast(NPC value) {
    push_back(value);
    return new ProximityListNode(getLastIter(), this);
  }

  public void AddLast(ProximityListNode newNode) {
    ValidateNewNode(newNode);
    if (!newNode.inlist) {
      push_back(newNode.csharpvalue);
      newNode.iter = getLastIter();
      newNode.inlist = true;
    } else {
      throw new global::System.InvalidOperationException("The " + newNode.GetType().Name + " node already belongs to a " + this.GetType().Name);
    }
  }

  public ProximityListNode AddBefore(ProximityListNode node, NPC value) {
    return new ProximityListNode(insertNode(node.iter, value), this);
  }

  public void AddBefore(ProximityListNode node, ProximityListNode newNode) {
    ValidateNode(node);
    ValidateNewNode(newNode);
    if (!newNode.inlist) {
      newNode.iter = insertNode(node.iter, newNode.csharpvalue);
      newNode.inlist = true;
    } else {
      throw new global::System.InvalidOperationException("The " + newNode.GetType().Name + " node already belongs to a " + this.GetType().Name);
    }
  }

  public ProximityListNode AddAfter(ProximityListNode node, NPC value) {
    node = node.Next;
    return new ProximityListNode(insertNode(node.iter, value), this);
  }

  public void AddAfter(ProximityListNode node, ProximityListNode newNode) {
    ValidateNode(node);
    ValidateNewNode(newNode);
    if (!newNode.inlist) {
      if (node == this.Last)
        AddLast(newNode);
      else
      {
        node = node.Next;
        newNode.iter = insertNode(node.iter, newNode.csharpvalue);
        newNode.inlist = true;
      }
    } else {
      throw new global::System.InvalidOperationException("The " + newNode.GetType().Name + " node already belongs to a " + this.GetType().Name);
    }
  }

  public void Add(NPC value) {
    AddLast(value);
  }

  public void Remove(ProximityListNode node) {
    ValidateNode(node);
    eraseIter(node.iter);
  }

  public void CopyTo(NPC[] array, int index) {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (index < 0 || index > array.Length)
      throw new global::System.ArgumentOutOfRangeException("index", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    ProximityListNode node = this.First;
    if (node != null) {
      do {
        array[index++] = node.Value;
        node = node.Next;
      } while (node != null);
    }
  }

  internal void ValidateNode(ProximityListNode node) {
    if (node == null) {
      throw new System.ArgumentNullException("node");
    }
    if (!node.inlist || node.list != this) {
      throw new System.InvalidOperationException("node");
    }
  }

  internal void ValidateNewNode(ProximityListNode node) {
    if (node == null) {
      throw new System.ArgumentNullException("node");
    }
  }

  global::System.Collections.Generic.IEnumerator<NPC> global::System.Collections.Generic.IEnumerable<NPC>.GetEnumerator() {
    return new ProximityListEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new ProximityListEnumerator(this);
  }

  public ProximityListEnumerator GetEnumerator() {
    return new ProximityListEnumerator(this);
  }

  public sealed class ProximityListEnumerator : global::System.Collections.IEnumerator,
    global::System.Collections.Generic.IEnumerator<NPC>
  {
    private ProximityList collectionRef;
    private ProximityListNode currentNode;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public ProximityListEnumerator(ProximityList collection) {
      collectionRef = collection;
      currentNode = collection.First;
      currentIndex = 0;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public NPC Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (NPC)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      if (currentNode == null) {
        currentIndex = collectionRef.Count + 1;
        return false;
      }
      ++currentIndex;
      currentObject = currentNode.Value;
      currentNode = currentNode.Next;
      return true;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
      currentIndex = -1;
      currentObject = null;
    }
  }

  public sealed class ProximityListNode {
    internal ProximityList list;
    internal System.IntPtr iter;
    internal NPC csharpvalue;
    internal bool inlist;

    public ProximityListNode(NPC value) {
      csharpvalue = value;
      inlist = false;
    }

    internal ProximityListNode(System.IntPtr iter, ProximityList list) {
      this.list = list;
      this.iter = iter;
      inlist = true;
    }

    public ProximityList List {
      get {
        return this.list;
      }
    }

    public ProximityListNode Next {
      get {
        if (list.getNextIter(iter) == System.IntPtr.Zero)
          return null;
        return new ProximityListNode(list.getNextIter(iter), list);
      }
    }

    public ProximityListNode Previous {
      get {
        if (list.getPrevIter(iter) == System.IntPtr.Zero)
          return null;
        return new ProximityListNode(list.getPrevIter(iter), list);
      }
    }

    public NPC Value {
      get {
        return list.getItem(this.iter);
      }
      set {
        list.setItem(this.iter, value);
      }
    }

    public static bool operator==(ProximityListNode node1, ProximityListNode node2) {
      if (object.ReferenceEquals(node1, null) && object.ReferenceEquals(node2, null))
        return true;
      if (object.ReferenceEquals(node1, null) || object.ReferenceEquals(node2, null))
        return false;
      return node1.Equals(node2);
    }

    public static bool operator!=(ProximityListNode node1, ProximityListNode node2) {
      if (node1 == null && node2 == null)
        return false;
      if (node1 == null || node2 == null)
        return true;
      return !node1.Equals(node2);
    }

    public bool Equals(ProximityListNode node) {
      if (node == null)
        return false;
      if (!node.inlist || !this.inlist)
        return object.ReferenceEquals(this, node);
      return list.equals(this.iter, node.iter);
    }

    public override bool Equals(object node) {
      return Equals((ProximityListNode)node);
    }

    public override int GetHashCode() {
      int hash = 13;
      if (inlist) {
        hash = (hash * 7) + this.list.GetHashCode();
        hash = (hash * 7) + this.Value.GetHashCode();
        hash = (hash * 7) + this.list.getNextIter(this.iter).GetHashCode();
        hash = (hash * 7) + this.list.getPrevIter(this.iter).GetHashCode();
      } else {
        hash = (hash * 7) + this.csharpvalue.GetHashCode();
      }
      return hash;
    }

    public void Dispose() {
      list.deleteIter(this.iter);
    }
  }

  private void push_front(NPC x) {
    questinterfacePINVOKE.ProximityList_push_front(swigCPtr, NPC.getCPtr(x));
  }

  private void push_back(NPC x) {
    questinterfacePINVOKE.ProximityList_push_back(swigCPtr, NPC.getCPtr(x));
  }

  public void RemoveFirst() {
    questinterfacePINVOKE.ProximityList_RemoveFirst(swigCPtr);
  }

  public void RemoveLast() {
    questinterfacePINVOKE.ProximityList_RemoveLast(swigCPtr);
  }

  private uint size() {
    uint ret = questinterfacePINVOKE.ProximityList_size(swigCPtr);
    return ret;
  }

  public void Clear() {
    questinterfacePINVOKE.ProximityList_Clear(swigCPtr);
  }

  private NPC getItem(global::System.IntPtr iter) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.ProximityList_getItem(swigCPtr, iter);
    NPC ret = (cPtr == global::System.IntPtr.Zero) ? null : new NPC(cPtr, false);
    return ret;
  }

  private void setItem(global::System.IntPtr iter, NPC val) {
    questinterfacePINVOKE.ProximityList_setItem(swigCPtr, iter, NPC.getCPtr(val));
  }

  private global::System.IntPtr getFirstIter() {
    global::System.IntPtr ret = questinterfacePINVOKE.ProximityList_getFirstIter(swigCPtr);
    return ret;
  }

  private global::System.IntPtr getLastIter() {
    global::System.IntPtr ret = questinterfacePINVOKE.ProximityList_getLastIter(swigCPtr);
    return ret;
  }

  private global::System.IntPtr getNextIter(global::System.IntPtr iter) {
    global::System.IntPtr ret = questinterfacePINVOKE.ProximityList_getNextIter(swigCPtr, iter);
    return ret;
  }

  private global::System.IntPtr getPrevIter(global::System.IntPtr iter) {
    global::System.IntPtr ret = questinterfacePINVOKE.ProximityList_getPrevIter(swigCPtr, iter);
    return ret;
  }

  public global::System.IntPtr insertNode(global::System.IntPtr iter, NPC value) {
    global::System.IntPtr ret = questinterfacePINVOKE.ProximityList_insertNode(swigCPtr, iter, NPC.getCPtr(value));
    return ret;
  }

  public void eraseIter(global::System.IntPtr iter) {
    questinterfacePINVOKE.ProximityList_eraseIter(swigCPtr, iter);
  }

  private void deleteIter(global::System.IntPtr iter) {
    questinterfacePINVOKE.ProximityList_deleteIter(swigCPtr, iter);
  }

  public bool equals(global::System.IntPtr iter1, global::System.IntPtr iter2) {
    bool ret = questinterfacePINVOKE.ProximityList_equals(swigCPtr, iter1, iter2);
    return ret;
  }

  public bool Contains(NPC value) {
    bool ret = questinterfacePINVOKE.ProximityList_Contains(swigCPtr, NPC.getCPtr(value));
    return ret;
  }

  public bool Remove(NPC value) {
    bool ret = questinterfacePINVOKE.ProximityList_Remove(swigCPtr, NPC.getCPtr(value));
    return ret;
  }

  private global::System.IntPtr find(NPC value) {
    global::System.IntPtr ret = questinterfacePINVOKE.ProximityList_find(swigCPtr, NPC.getCPtr(value));
    return ret;
  }

  public ProximityListNode Find(NPC value) {
    System.IntPtr tmp = find(value);
    if (tmp != System.IntPtr.Zero) {
      return new ProximityListNode(tmp, this);
    }
    return null;
  }

  public ProximityList() : this(questinterfacePINVOKE.new_ProximityList(), true) {
  }

}

public class GroupList : global::System.IDisposable, global::System.Collections.IEnumerable, global::System.Collections.Generic.ICollection<Group>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal GroupList(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GroupList obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(GroupList obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~GroupList() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_GroupList(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public GroupList(global::System.Collections.IEnumerable c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (Group element in c) {
      this.AddLast(element);
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public GroupListNode First {
    get {
      if (Count == 0)
        return null;
      return new GroupListNode(getFirstIter(), this);
    }
  }

  public GroupListNode Last {
    get {
      if (Count == 0)
        return null;
      return new GroupListNode(getLastIter(), this);
    }
  }

  public GroupListNode AddFirst(Group value) {
    push_front(value);
    return new GroupListNode(getFirstIter(), this);
  }

  public void AddFirst(GroupListNode newNode) {
    ValidateNewNode(newNode);
    if (!newNode.inlist) {
      push_front(newNode.csharpvalue);
      newNode.iter = getFirstIter();
      newNode.inlist = true;
    } else {
      throw new global::System.InvalidOperationException("The " + newNode.GetType().Name + " node already belongs to a " + this.GetType().Name);
    }
  }

  public GroupListNode AddLast(Group value) {
    push_back(value);
    return new GroupListNode(getLastIter(), this);
  }

  public void AddLast(GroupListNode newNode) {
    ValidateNewNode(newNode);
    if (!newNode.inlist) {
      push_back(newNode.csharpvalue);
      newNode.iter = getLastIter();
      newNode.inlist = true;
    } else {
      throw new global::System.InvalidOperationException("The " + newNode.GetType().Name + " node already belongs to a " + this.GetType().Name);
    }
  }

  public GroupListNode AddBefore(GroupListNode node, Group value) {
    return new GroupListNode(insertNode(node.iter, value), this);
  }

  public void AddBefore(GroupListNode node, GroupListNode newNode) {
    ValidateNode(node);
    ValidateNewNode(newNode);
    if (!newNode.inlist) {
      newNode.iter = insertNode(node.iter, newNode.csharpvalue);
      newNode.inlist = true;
    } else {
      throw new global::System.InvalidOperationException("The " + newNode.GetType().Name + " node already belongs to a " + this.GetType().Name);
    }
  }

  public GroupListNode AddAfter(GroupListNode node, Group value) {
    node = node.Next;
    return new GroupListNode(insertNode(node.iter, value), this);
  }

  public void AddAfter(GroupListNode node, GroupListNode newNode) {
    ValidateNode(node);
    ValidateNewNode(newNode);
    if (!newNode.inlist) {
      if (node == this.Last)
        AddLast(newNode);
      else
      {
        node = node.Next;
        newNode.iter = insertNode(node.iter, newNode.csharpvalue);
        newNode.inlist = true;
      }
    } else {
      throw new global::System.InvalidOperationException("The " + newNode.GetType().Name + " node already belongs to a " + this.GetType().Name);
    }
  }

  public void Add(Group value) {
    AddLast(value);
  }

  public void Remove(GroupListNode node) {
    ValidateNode(node);
    eraseIter(node.iter);
  }

  public void CopyTo(Group[] array, int index) {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (index < 0 || index > array.Length)
      throw new global::System.ArgumentOutOfRangeException("index", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    GroupListNode node = this.First;
    if (node != null) {
      do {
        array[index++] = node.Value;
        node = node.Next;
      } while (node != null);
    }
  }

  internal void ValidateNode(GroupListNode node) {
    if (node == null) {
      throw new System.ArgumentNullException("node");
    }
    if (!node.inlist || node.list != this) {
      throw new System.InvalidOperationException("node");
    }
  }

  internal void ValidateNewNode(GroupListNode node) {
    if (node == null) {
      throw new System.ArgumentNullException("node");
    }
  }

  global::System.Collections.Generic.IEnumerator<Group> global::System.Collections.Generic.IEnumerable<Group>.GetEnumerator() {
    return new GroupListEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new GroupListEnumerator(this);
  }

  public GroupListEnumerator GetEnumerator() {
    return new GroupListEnumerator(this);
  }

  public sealed class GroupListEnumerator : global::System.Collections.IEnumerator,
    global::System.Collections.Generic.IEnumerator<Group>
  {
    private GroupList collectionRef;
    private GroupListNode currentNode;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public GroupListEnumerator(GroupList collection) {
      collectionRef = collection;
      currentNode = collection.First;
      currentIndex = 0;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public Group Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (Group)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      if (currentNode == null) {
        currentIndex = collectionRef.Count + 1;
        return false;
      }
      ++currentIndex;
      currentObject = currentNode.Value;
      currentNode = currentNode.Next;
      return true;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
      currentIndex = -1;
      currentObject = null;
    }
  }

  public sealed class GroupListNode {
    internal GroupList list;
    internal System.IntPtr iter;
    internal Group csharpvalue;
    internal bool inlist;

    public GroupListNode(Group value) {
      csharpvalue = value;
      inlist = false;
    }

    internal GroupListNode(System.IntPtr iter, GroupList list) {
      this.list = list;
      this.iter = iter;
      inlist = true;
    }

    public GroupList List {
      get {
        return this.list;
      }
    }

    public GroupListNode Next {
      get {
        if (list.getNextIter(iter) == System.IntPtr.Zero)
          return null;
        return new GroupListNode(list.getNextIter(iter), list);
      }
    }

    public GroupListNode Previous {
      get {
        if (list.getPrevIter(iter) == System.IntPtr.Zero)
          return null;
        return new GroupListNode(list.getPrevIter(iter), list);
      }
    }

    public Group Value {
      get {
        return list.getItem(this.iter);
      }
      set {
        list.setItem(this.iter, value);
      }
    }

    public static bool operator==(GroupListNode node1, GroupListNode node2) {
      if (object.ReferenceEquals(node1, null) && object.ReferenceEquals(node2, null))
        return true;
      if (object.ReferenceEquals(node1, null) || object.ReferenceEquals(node2, null))
        return false;
      return node1.Equals(node2);
    }

    public static bool operator!=(GroupListNode node1, GroupListNode node2) {
      if (node1 == null && node2 == null)
        return false;
      if (node1 == null || node2 == null)
        return true;
      return !node1.Equals(node2);
    }

    public bool Equals(GroupListNode node) {
      if (node == null)
        return false;
      if (!node.inlist || !this.inlist)
        return object.ReferenceEquals(this, node);
      return list.equals(this.iter, node.iter);
    }

    public override bool Equals(object node) {
      return Equals((GroupListNode)node);
    }

    public override int GetHashCode() {
      int hash = 13;
      if (inlist) {
        hash = (hash * 7) + this.list.GetHashCode();
        hash = (hash * 7) + this.Value.GetHashCode();
        hash = (hash * 7) + this.list.getNextIter(this.iter).GetHashCode();
        hash = (hash * 7) + this.list.getPrevIter(this.iter).GetHashCode();
      } else {
        hash = (hash * 7) + this.csharpvalue.GetHashCode();
      }
      return hash;
    }

    public void Dispose() {
      list.deleteIter(this.iter);
    }
  }

  private void push_front(Group x) {
    questinterfacePINVOKE.GroupList_push_front(swigCPtr, Group.getCPtr(x));
  }

  private void push_back(Group x) {
    questinterfacePINVOKE.GroupList_push_back(swigCPtr, Group.getCPtr(x));
  }

  public void RemoveFirst() {
    questinterfacePINVOKE.GroupList_RemoveFirst(swigCPtr);
  }

  public void RemoveLast() {
    questinterfacePINVOKE.GroupList_RemoveLast(swigCPtr);
  }

  private uint size() {
    uint ret = questinterfacePINVOKE.GroupList_size(swigCPtr);
    return ret;
  }

  public void Clear() {
    questinterfacePINVOKE.GroupList_Clear(swigCPtr);
  }

  private Group getItem(global::System.IntPtr iter) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.GroupList_getItem(swigCPtr, iter);
    Group ret = (cPtr == global::System.IntPtr.Zero) ? null : new Group(cPtr, false);
    return ret;
  }

  private void setItem(global::System.IntPtr iter, Group val) {
    questinterfacePINVOKE.GroupList_setItem(swigCPtr, iter, Group.getCPtr(val));
  }

  private global::System.IntPtr getFirstIter() {
    global::System.IntPtr ret = questinterfacePINVOKE.GroupList_getFirstIter(swigCPtr);
    return ret;
  }

  private global::System.IntPtr getLastIter() {
    global::System.IntPtr ret = questinterfacePINVOKE.GroupList_getLastIter(swigCPtr);
    return ret;
  }

  private global::System.IntPtr getNextIter(global::System.IntPtr iter) {
    global::System.IntPtr ret = questinterfacePINVOKE.GroupList_getNextIter(swigCPtr, iter);
    return ret;
  }

  private global::System.IntPtr getPrevIter(global::System.IntPtr iter) {
    global::System.IntPtr ret = questinterfacePINVOKE.GroupList_getPrevIter(swigCPtr, iter);
    return ret;
  }

  public global::System.IntPtr insertNode(global::System.IntPtr iter, Group value) {
    global::System.IntPtr ret = questinterfacePINVOKE.GroupList_insertNode(swigCPtr, iter, Group.getCPtr(value));
    return ret;
  }

  public void eraseIter(global::System.IntPtr iter) {
    questinterfacePINVOKE.GroupList_eraseIter(swigCPtr, iter);
  }

  private void deleteIter(global::System.IntPtr iter) {
    questinterfacePINVOKE.GroupList_deleteIter(swigCPtr, iter);
  }

  public bool equals(global::System.IntPtr iter1, global::System.IntPtr iter2) {
    bool ret = questinterfacePINVOKE.GroupList_equals(swigCPtr, iter1, iter2);
    return ret;
  }

  public bool Contains(Group value) {
    bool ret = questinterfacePINVOKE.GroupList_Contains(swigCPtr, Group.getCPtr(value));
    return ret;
  }

  public bool Remove(Group value) {
    bool ret = questinterfacePINVOKE.GroupList_Remove(swigCPtr, Group.getCPtr(value));
    return ret;
  }

  private global::System.IntPtr find(Group value) {
    global::System.IntPtr ret = questinterfacePINVOKE.GroupList_find(swigCPtr, Group.getCPtr(value));
    return ret;
  }

  public GroupListNode Find(Group value) {
    System.IntPtr tmp = find(value);
    if (tmp != System.IntPtr.Zero) {
      return new GroupListNode(tmp, this);
    }
    return null;
  }

  public GroupList() : this(questinterfacePINVOKE.new_GroupList(), true) {
  }

}

public class RaidList : global::System.IDisposable, global::System.Collections.IEnumerable, global::System.Collections.Generic.ICollection<Raid>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal RaidList(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(RaidList obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(RaidList obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~RaidList() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_RaidList(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public RaidList(global::System.Collections.IEnumerable c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (Raid element in c) {
      this.AddLast(element);
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public RaidListNode First {
    get {
      if (Count == 0)
        return null;
      return new RaidListNode(getFirstIter(), this);
    }
  }

  public RaidListNode Last {
    get {
      if (Count == 0)
        return null;
      return new RaidListNode(getLastIter(), this);
    }
  }

  public RaidListNode AddFirst(Raid value) {
    push_front(value);
    return new RaidListNode(getFirstIter(), this);
  }

  public void AddFirst(RaidListNode newNode) {
    ValidateNewNode(newNode);
    if (!newNode.inlist) {
      push_front(newNode.csharpvalue);
      newNode.iter = getFirstIter();
      newNode.inlist = true;
    } else {
      throw new global::System.InvalidOperationException("The " + newNode.GetType().Name + " node already belongs to a " + this.GetType().Name);
    }
  }

  public RaidListNode AddLast(Raid value) {
    push_back(value);
    return new RaidListNode(getLastIter(), this);
  }

  public void AddLast(RaidListNode newNode) {
    ValidateNewNode(newNode);
    if (!newNode.inlist) {
      push_back(newNode.csharpvalue);
      newNode.iter = getLastIter();
      newNode.inlist = true;
    } else {
      throw new global::System.InvalidOperationException("The " + newNode.GetType().Name + " node already belongs to a " + this.GetType().Name);
    }
  }

  public RaidListNode AddBefore(RaidListNode node, Raid value) {
    return new RaidListNode(insertNode(node.iter, value), this);
  }

  public void AddBefore(RaidListNode node, RaidListNode newNode) {
    ValidateNode(node);
    ValidateNewNode(newNode);
    if (!newNode.inlist) {
      newNode.iter = insertNode(node.iter, newNode.csharpvalue);
      newNode.inlist = true;
    } else {
      throw new global::System.InvalidOperationException("The " + newNode.GetType().Name + " node already belongs to a " + this.GetType().Name);
    }
  }

  public RaidListNode AddAfter(RaidListNode node, Raid value) {
    node = node.Next;
    return new RaidListNode(insertNode(node.iter, value), this);
  }

  public void AddAfter(RaidListNode node, RaidListNode newNode) {
    ValidateNode(node);
    ValidateNewNode(newNode);
    if (!newNode.inlist) {
      if (node == this.Last)
        AddLast(newNode);
      else
      {
        node = node.Next;
        newNode.iter = insertNode(node.iter, newNode.csharpvalue);
        newNode.inlist = true;
      }
    } else {
      throw new global::System.InvalidOperationException("The " + newNode.GetType().Name + " node already belongs to a " + this.GetType().Name);
    }
  }

  public void Add(Raid value) {
    AddLast(value);
  }

  public void Remove(RaidListNode node) {
    ValidateNode(node);
    eraseIter(node.iter);
  }

  public void CopyTo(Raid[] array, int index) {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (index < 0 || index > array.Length)
      throw new global::System.ArgumentOutOfRangeException("index", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    RaidListNode node = this.First;
    if (node != null) {
      do {
        array[index++] = node.Value;
        node = node.Next;
      } while (node != null);
    }
  }

  internal void ValidateNode(RaidListNode node) {
    if (node == null) {
      throw new System.ArgumentNullException("node");
    }
    if (!node.inlist || node.list != this) {
      throw new System.InvalidOperationException("node");
    }
  }

  internal void ValidateNewNode(RaidListNode node) {
    if (node == null) {
      throw new System.ArgumentNullException("node");
    }
  }

  global::System.Collections.Generic.IEnumerator<Raid> global::System.Collections.Generic.IEnumerable<Raid>.GetEnumerator() {
    return new RaidListEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new RaidListEnumerator(this);
  }

  public RaidListEnumerator GetEnumerator() {
    return new RaidListEnumerator(this);
  }

  public sealed class RaidListEnumerator : global::System.Collections.IEnumerator,
    global::System.Collections.Generic.IEnumerator<Raid>
  {
    private RaidList collectionRef;
    private RaidListNode currentNode;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public RaidListEnumerator(RaidList collection) {
      collectionRef = collection;
      currentNode = collection.First;
      currentIndex = 0;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public Raid Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (Raid)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      if (currentNode == null) {
        currentIndex = collectionRef.Count + 1;
        return false;
      }
      ++currentIndex;
      currentObject = currentNode.Value;
      currentNode = currentNode.Next;
      return true;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
      currentIndex = -1;
      currentObject = null;
    }
  }

  public sealed class RaidListNode {
    internal RaidList list;
    internal System.IntPtr iter;
    internal Raid csharpvalue;
    internal bool inlist;

    public RaidListNode(Raid value) {
      csharpvalue = value;
      inlist = false;
    }

    internal RaidListNode(System.IntPtr iter, RaidList list) {
      this.list = list;
      this.iter = iter;
      inlist = true;
    }

    public RaidList List {
      get {
        return this.list;
      }
    }

    public RaidListNode Next {
      get {
        if (list.getNextIter(iter) == System.IntPtr.Zero)
          return null;
        return new RaidListNode(list.getNextIter(iter), list);
      }
    }

    public RaidListNode Previous {
      get {
        if (list.getPrevIter(iter) == System.IntPtr.Zero)
          return null;
        return new RaidListNode(list.getPrevIter(iter), list);
      }
    }

    public Raid Value {
      get {
        return list.getItem(this.iter);
      }
      set {
        list.setItem(this.iter, value);
      }
    }

    public static bool operator==(RaidListNode node1, RaidListNode node2) {
      if (object.ReferenceEquals(node1, null) && object.ReferenceEquals(node2, null))
        return true;
      if (object.ReferenceEquals(node1, null) || object.ReferenceEquals(node2, null))
        return false;
      return node1.Equals(node2);
    }

    public static bool operator!=(RaidListNode node1, RaidListNode node2) {
      if (node1 == null && node2 == null)
        return false;
      if (node1 == null || node2 == null)
        return true;
      return !node1.Equals(node2);
    }

    public bool Equals(RaidListNode node) {
      if (node == null)
        return false;
      if (!node.inlist || !this.inlist)
        return object.ReferenceEquals(this, node);
      return list.equals(this.iter, node.iter);
    }

    public override bool Equals(object node) {
      return Equals((RaidListNode)node);
    }

    public override int GetHashCode() {
      int hash = 13;
      if (inlist) {
        hash = (hash * 7) + this.list.GetHashCode();
        hash = (hash * 7) + this.Value.GetHashCode();
        hash = (hash * 7) + this.list.getNextIter(this.iter).GetHashCode();
        hash = (hash * 7) + this.list.getPrevIter(this.iter).GetHashCode();
      } else {
        hash = (hash * 7) + this.csharpvalue.GetHashCode();
      }
      return hash;
    }

    public void Dispose() {
      list.deleteIter(this.iter);
    }
  }

  private void push_front(Raid x) {
    questinterfacePINVOKE.RaidList_push_front(swigCPtr, Raid.getCPtr(x));
  }

  private void push_back(Raid x) {
    questinterfacePINVOKE.RaidList_push_back(swigCPtr, Raid.getCPtr(x));
  }

  public void RemoveFirst() {
    questinterfacePINVOKE.RaidList_RemoveFirst(swigCPtr);
  }

  public void RemoveLast() {
    questinterfacePINVOKE.RaidList_RemoveLast(swigCPtr);
  }

  private uint size() {
    uint ret = questinterfacePINVOKE.RaidList_size(swigCPtr);
    return ret;
  }

  public void Clear() {
    questinterfacePINVOKE.RaidList_Clear(swigCPtr);
  }

  private Raid getItem(global::System.IntPtr iter) {
    global::System.IntPtr cPtr = questinterfacePINVOKE.RaidList_getItem(swigCPtr, iter);
    Raid ret = (cPtr == global::System.IntPtr.Zero) ? null : new Raid(cPtr, false);
    return ret;
  }

  private void setItem(global::System.IntPtr iter, Raid val) {
    questinterfacePINVOKE.RaidList_setItem(swigCPtr, iter, Raid.getCPtr(val));
  }

  private global::System.IntPtr getFirstIter() {
    global::System.IntPtr ret = questinterfacePINVOKE.RaidList_getFirstIter(swigCPtr);
    return ret;
  }

  private global::System.IntPtr getLastIter() {
    global::System.IntPtr ret = questinterfacePINVOKE.RaidList_getLastIter(swigCPtr);
    return ret;
  }

  private global::System.IntPtr getNextIter(global::System.IntPtr iter) {
    global::System.IntPtr ret = questinterfacePINVOKE.RaidList_getNextIter(swigCPtr, iter);
    return ret;
  }

  private global::System.IntPtr getPrevIter(global::System.IntPtr iter) {
    global::System.IntPtr ret = questinterfacePINVOKE.RaidList_getPrevIter(swigCPtr, iter);
    return ret;
  }

  public global::System.IntPtr insertNode(global::System.IntPtr iter, Raid value) {
    global::System.IntPtr ret = questinterfacePINVOKE.RaidList_insertNode(swigCPtr, iter, Raid.getCPtr(value));
    return ret;
  }

  public void eraseIter(global::System.IntPtr iter) {
    questinterfacePINVOKE.RaidList_eraseIter(swigCPtr, iter);
  }

  private void deleteIter(global::System.IntPtr iter) {
    questinterfacePINVOKE.RaidList_deleteIter(swigCPtr, iter);
  }

  public bool equals(global::System.IntPtr iter1, global::System.IntPtr iter2) {
    bool ret = questinterfacePINVOKE.RaidList_equals(swigCPtr, iter1, iter2);
    return ret;
  }

  public bool Contains(Raid value) {
    bool ret = questinterfacePINVOKE.RaidList_Contains(swigCPtr, Raid.getCPtr(value));
    return ret;
  }

  public bool Remove(Raid value) {
    bool ret = questinterfacePINVOKE.RaidList_Remove(swigCPtr, Raid.getCPtr(value));
    return ret;
  }

  private global::System.IntPtr find(Raid value) {
    global::System.IntPtr ret = questinterfacePINVOKE.RaidList_find(swigCPtr, Raid.getCPtr(value));
    return ret;
  }

  public RaidListNode Find(Raid value) {
    System.IntPtr tmp = find(value);
    if (tmp != System.IntPtr.Zero) {
      return new RaidListNode(tmp, this);
    }
    return null;
  }

  public RaidList() : this(questinterfacePINVOKE.new_RaidList(), true) {
  }

}

public class AreaList : global::System.IDisposable, global::System.Collections.IEnumerable, global::System.Collections.Generic.IEnumerable<Area>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal AreaList(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AreaList obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(AreaList obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~AreaList() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          questinterfacePINVOKE.delete_AreaList(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public AreaList(global::System.Collections.IEnumerable c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (Area element in c) {
      this.AddLast(element);
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public AreaListNode First {
    get {
      if (Count == 0)
        return null;
      return new AreaListNode(getFirstIter(), this);
    }
  }

  public AreaListNode Last {
    get {
      if (Count == 0)
        return null;
      return new AreaListNode(getLastIter(), this);
    }
  }

  public AreaListNode AddFirst(Area value) {
    push_front(value);
    return new AreaListNode(getFirstIter(), this);
  }

  public void AddFirst(AreaListNode newNode) {
    ValidateNewNode(newNode);
    if (!newNode.inlist) {
      push_front(newNode.csharpvalue);
      newNode.iter = getFirstIter();
      newNode.inlist = true;
    } else {
      throw new global::System.InvalidOperationException("The " + newNode.GetType().Name + " node already belongs to a " + this.GetType().Name);
    }
  }

  public AreaListNode AddLast(Area value) {
    push_back(value);
    return new AreaListNode(getLastIter(), this);
  }

  public void AddLast(AreaListNode newNode) {
    ValidateNewNode(newNode);
    if (!newNode.inlist) {
      push_back(newNode.csharpvalue);
      newNode.iter = getLastIter();
      newNode.inlist = true;
    } else {
      throw new global::System.InvalidOperationException("The " + newNode.GetType().Name + " node already belongs to a " + this.GetType().Name);
    }
  }

  public AreaListNode AddBefore(AreaListNode node, Area value) {
    return new AreaListNode(insertNode(node.iter, value), this);
  }

  public void AddBefore(AreaListNode node, AreaListNode newNode) {
    ValidateNode(node);
    ValidateNewNode(newNode);
    if (!newNode.inlist) {
      newNode.iter = insertNode(node.iter, newNode.csharpvalue);
      newNode.inlist = true;
    } else {
      throw new global::System.InvalidOperationException("The " + newNode.GetType().Name + " node already belongs to a " + this.GetType().Name);
    }
  }

  public AreaListNode AddAfter(AreaListNode node, Area value) {
    node = node.Next;
    return new AreaListNode(insertNode(node.iter, value), this);
  }

  public void AddAfter(AreaListNode node, AreaListNode newNode) {
    ValidateNode(node);
    ValidateNewNode(newNode);
    if (!newNode.inlist) {
      if (node == this.Last)
        AddLast(newNode);
      else
      {
        node = node.Next;
        newNode.iter = insertNode(node.iter, newNode.csharpvalue);
        newNode.inlist = true;
      }
    } else {
      throw new global::System.InvalidOperationException("The " + newNode.GetType().Name + " node already belongs to a " + this.GetType().Name);
    }
  }

  public void Add(Area value) {
    AddLast(value);
  }

  public void Remove(AreaListNode node) {
    ValidateNode(node);
    eraseIter(node.iter);
  }

  public void CopyTo(Area[] array, int index) {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (index < 0 || index > array.Length)
      throw new global::System.ArgumentOutOfRangeException("index", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    AreaListNode node = this.First;
    if (node != null) {
      do {
        array[index++] = node.Value;
        node = node.Next;
      } while (node != null);
    }
  }

  internal void ValidateNode(AreaListNode node) {
    if (node == null) {
      throw new System.ArgumentNullException("node");
    }
    if (!node.inlist || node.list != this) {
      throw new System.InvalidOperationException("node");
    }
  }

  internal void ValidateNewNode(AreaListNode node) {
    if (node == null) {
      throw new System.ArgumentNullException("node");
    }
  }

  global::System.Collections.Generic.IEnumerator<Area> global::System.Collections.Generic.IEnumerable<Area>.GetEnumerator() {
    return new AreaListEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new AreaListEnumerator(this);
  }

  public AreaListEnumerator GetEnumerator() {
    return new AreaListEnumerator(this);
  }

  public sealed class AreaListEnumerator : global::System.Collections.IEnumerator,
    global::System.Collections.Generic.IEnumerator<Area>
  {
    private AreaList collectionRef;
    private AreaListNode currentNode;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public AreaListEnumerator(AreaList collection) {
      collectionRef = collection;
      currentNode = collection.First;
      currentIndex = 0;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public Area Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (Area)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      if (currentNode == null) {
        currentIndex = collectionRef.Count + 1;
        return false;
      }
      ++currentIndex;
      currentObject = currentNode.Value;
      currentNode = currentNode.Next;
      return true;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
      currentIndex = -1;
      currentObject = null;
    }
  }

  public sealed class AreaListNode {
    internal AreaList list;
    internal System.IntPtr iter;
    internal Area csharpvalue;
    internal bool inlist;

    public AreaListNode(Area value) {
      csharpvalue = value;
      inlist = false;
    }

    internal AreaListNode(System.IntPtr iter, AreaList list) {
      this.list = list;
      this.iter = iter;
      inlist = true;
    }

    public AreaList List {
      get {
        return this.list;
      }
    }

    public AreaListNode Next {
      get {
        if (list.getNextIter(iter) == System.IntPtr.Zero)
          return null;
        return new AreaListNode(list.getNextIter(iter), list);
      }
    }

    public AreaListNode Previous {
      get {
        if (list.getPrevIter(iter) == System.IntPtr.Zero)
          return null;
        return new AreaListNode(list.getPrevIter(iter), list);
      }
    }

    public Area Value {
      get {
        return list.getItem(this.iter);
      }
      set {
        list.setItem(this.iter, value);
      }
    }

    public static bool operator==(AreaListNode node1, AreaListNode node2) {
      if (object.ReferenceEquals(node1, null) && object.ReferenceEquals(node2, null))
        return true;
      if (object.ReferenceEquals(node1, null) || object.ReferenceEquals(node2, null))
        return false;
      return node1.Equals(node2);
    }

    public static bool operator!=(AreaListNode node1, AreaListNode node2) {
      if (node1 == null && node2 == null)
        return false;
      if (node1 == null || node2 == null)
        return true;
      return !node1.Equals(node2);
    }

    public bool Equals(AreaListNode node) {
      if (node == null)
        return false;
      if (!node.inlist || !this.inlist)
        return object.ReferenceEquals(this, node);
      return list.equals(this.iter, node.iter);
    }

    public override bool Equals(object node) {
      return Equals((AreaListNode)node);
    }

    public override int GetHashCode() {
      int hash = 13;
      if (inlist) {
        hash = (hash * 7) + this.list.GetHashCode();
        hash = (hash * 7) + this.Value.GetHashCode();
        hash = (hash * 7) + this.list.getNextIter(this.iter).GetHashCode();
        hash = (hash * 7) + this.list.getPrevIter(this.iter).GetHashCode();
      } else {
        hash = (hash * 7) + this.csharpvalue.GetHashCode();
      }
      return hash;
    }

    public void Dispose() {
      list.deleteIter(this.iter);
    }
  }

  private void push_front(Area x) {
    questinterfacePINVOKE.AreaList_push_front(swigCPtr, Area.getCPtr(x));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  private void push_back(Area x) {
    questinterfacePINVOKE.AreaList_push_back(swigCPtr, Area.getCPtr(x));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveFirst() {
    questinterfacePINVOKE.AreaList_RemoveFirst(swigCPtr);
  }

  public void RemoveLast() {
    questinterfacePINVOKE.AreaList_RemoveLast(swigCPtr);
  }

  private uint size() {
    uint ret = questinterfacePINVOKE.AreaList_size(swigCPtr);
    return ret;
  }

  public void Clear() {
    questinterfacePINVOKE.AreaList_Clear(swigCPtr);
  }

  private Area getItem(global::System.IntPtr iter) {
    Area ret = new Area(questinterfacePINVOKE.AreaList_getItem(swigCPtr, iter), false);
    return ret;
  }

  private void setItem(global::System.IntPtr iter, Area val) {
    questinterfacePINVOKE.AreaList_setItem(swigCPtr, iter, Area.getCPtr(val));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
  }

  private global::System.IntPtr getFirstIter() {
    global::System.IntPtr ret = questinterfacePINVOKE.AreaList_getFirstIter(swigCPtr);
    return ret;
  }

  private global::System.IntPtr getLastIter() {
    global::System.IntPtr ret = questinterfacePINVOKE.AreaList_getLastIter(swigCPtr);
    return ret;
  }

  private global::System.IntPtr getNextIter(global::System.IntPtr iter) {
    global::System.IntPtr ret = questinterfacePINVOKE.AreaList_getNextIter(swigCPtr, iter);
    return ret;
  }

  private global::System.IntPtr getPrevIter(global::System.IntPtr iter) {
    global::System.IntPtr ret = questinterfacePINVOKE.AreaList_getPrevIter(swigCPtr, iter);
    return ret;
  }

  public global::System.IntPtr insertNode(global::System.IntPtr iter, Area value) {
    global::System.IntPtr ret = questinterfacePINVOKE.AreaList_insertNode(swigCPtr, iter, Area.getCPtr(value));
    if (questinterfacePINVOKE.SWIGPendingException.Pending) throw questinterfacePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void eraseIter(global::System.IntPtr iter) {
    questinterfacePINVOKE.AreaList_eraseIter(swigCPtr, iter);
  }

  private void deleteIter(global::System.IntPtr iter) {
    questinterfacePINVOKE.AreaList_deleteIter(swigCPtr, iter);
  }

  public bool equals(global::System.IntPtr iter1, global::System.IntPtr iter2) {
    bool ret = questinterfacePINVOKE.AreaList_equals(swigCPtr, iter1, iter2);
    return ret;
  }

  public AreaList() : this(questinterfacePINVOKE.new_AreaList(), true) {
  }

}

class questinterfacePINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="SWIGRegisterExceptionCallbacks_questinterface")]
    public static extern void SWIGRegisterExceptionCallbacks_questinterface(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_questinterface")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_questinterface(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new global::System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new global::System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new global::System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new global::System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new global::System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new global::System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new global::System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new global::System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new global::System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new global::System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new global::System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new global::System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_questinterface(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_questinterface(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [global::System.ThreadStatic]
    private static global::System.Exception pendingException = null;
    private static int numExceptionsPending = 0;
    private static global::System.Object exceptionsLock = null;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(global::System.Exception e) {
      if (pendingException != null)
        throw new global::System.ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(exceptionsLock) {
        numExceptionsPending++;
      }
    }

    public static global::System.Exception Retrieve() {
      global::System.Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(exceptionsLock) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }

    static SWIGPendingException() {
      exceptionsLock = new global::System.Object();
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="SWIGRegisterStringCallback_questinterface")]
    public static extern void SWIGRegisterStringCallback_questinterface(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_questinterface(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static questinterfacePINVOKE() {
  }


  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DZ_REPLAY_TIMER_NAME_get")]
  public static extern string DZ_REPLAY_TIMER_NAME_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_ExpeditionLockoutTimer__SWIG_0")]
  public static extern global::System.IntPtr new_ExpeditionLockoutTimer__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_ExpeditionLockoutTimer__SWIG_1")]
  public static extern global::System.IntPtr new_ExpeditionLockoutTimer__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, ulong jarg4, uint jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExpeditionLockoutTimer_CreateLockout__SWIG_0")]
  public static extern global::System.IntPtr ExpeditionLockoutTimer_CreateLockout__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExpeditionLockoutTimer_CreateLockout__SWIG_1")]
  public static extern global::System.IntPtr ExpeditionLockoutTimer_CreateLockout__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExpeditionLockoutTimer_DaysHoursMinutes_days_set")]
  public static extern void ExpeditionLockoutTimer_DaysHoursMinutes_days_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExpeditionLockoutTimer_DaysHoursMinutes_days_get")]
  public static extern global::System.IntPtr ExpeditionLockoutTimer_DaysHoursMinutes_days_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExpeditionLockoutTimer_DaysHoursMinutes_hours_set")]
  public static extern void ExpeditionLockoutTimer_DaysHoursMinutes_hours_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExpeditionLockoutTimer_DaysHoursMinutes_hours_get")]
  public static extern global::System.IntPtr ExpeditionLockoutTimer_DaysHoursMinutes_hours_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExpeditionLockoutTimer_DaysHoursMinutes_mins_set")]
  public static extern void ExpeditionLockoutTimer_DaysHoursMinutes_mins_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExpeditionLockoutTimer_DaysHoursMinutes_mins_get")]
  public static extern global::System.IntPtr ExpeditionLockoutTimer_DaysHoursMinutes_mins_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_ExpeditionLockoutTimer_DaysHoursMinutes")]
  public static extern global::System.IntPtr new_ExpeditionLockoutTimer_DaysHoursMinutes();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_ExpeditionLockoutTimer_DaysHoursMinutes")]
  public static extern void delete_ExpeditionLockoutTimer_DaysHoursMinutes(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExpeditionLockoutTimer_AddLockoutTime")]
  public static extern void ExpeditionLockoutTimer_AddLockoutTime(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExpeditionLockoutTimer_GetDuration")]
  public static extern uint ExpeditionLockoutTimer_GetDuration(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExpeditionLockoutTimer_GetExpireTime")]
  public static extern ulong ExpeditionLockoutTimer_GetExpireTime(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExpeditionLockoutTimer_GetStartTime")]
  public static extern ulong ExpeditionLockoutTimer_GetStartTime(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExpeditionLockoutTimer_GetSecondsRemaining")]
  public static extern uint ExpeditionLockoutTimer_GetSecondsRemaining(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExpeditionLockoutTimer_GetDaysHoursMinutesRemaining")]
  public static extern global::System.IntPtr ExpeditionLockoutTimer_GetDaysHoursMinutesRemaining(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExpeditionLockoutTimer_GetExpeditionName")]
  public static extern global::System.IntPtr ExpeditionLockoutTimer_GetExpeditionName(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExpeditionLockoutTimer_GetExpeditionUUID")]
  public static extern global::System.IntPtr ExpeditionLockoutTimer_GetExpeditionUUID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExpeditionLockoutTimer_GetEventName")]
  public static extern global::System.IntPtr ExpeditionLockoutTimer_GetEventName(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExpeditionLockoutTimer_IsExpired")]
  public static extern bool ExpeditionLockoutTimer_IsExpired(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExpeditionLockoutTimer_IsFromExpedition")]
  public static extern bool ExpeditionLockoutTimer_IsFromExpedition(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExpeditionLockoutTimer_IsReplayTimer")]
  public static extern bool ExpeditionLockoutTimer_IsReplayTimer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExpeditionLockoutTimer_IsSameLockout__SWIG_0")]
  public static extern bool ExpeditionLockoutTimer_IsSameLockout__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExpeditionLockoutTimer_IsSameLockout__SWIG_1")]
  public static extern bool ExpeditionLockoutTimer_IsSameLockout__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExpeditionLockoutTimer_Reset")]
  public static extern void ExpeditionLockoutTimer_Reset(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExpeditionLockoutTimer_SetDuration")]
  public static extern void ExpeditionLockoutTimer_SetDuration(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExpeditionLockoutTimer_SetExpireTime")]
  public static extern void ExpeditionLockoutTimer_SetExpireTime(global::System.Runtime.InteropServices.HandleRef jarg1, ulong jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExpeditionLockoutTimer_SetUUID")]
  public static extern void ExpeditionLockoutTimer_SetUUID(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_ExpeditionLockoutTimer")]
  public static extern void delete_ExpeditionLockoutTimer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_HIGHEST_RESIST_get")]
  public static extern int HIGHEST_RESIST_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MAX_SPELL_PROJECTILE_get")]
  public static extern int MAX_SPELL_PROJECTILE_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_HEAD_POSITION_get")]
  public static extern float HEAD_POSITION_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SEE_POSITION_get")]
  public static extern float SEE_POSITION_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ARCHETYPE_HYBRID_get")]
  public static extern int ARCHETYPE_HYBRID_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ARCHETYPE_CASTER_get")]
  public static extern int ARCHETYPE_CASTER_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ARCHETYPE_MELEE_get")]
  public static extern int ARCHETYPE_MELEE_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CON_GREEN_get")]
  public static extern int CON_GREEN_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CON_LIGHTBLUE_get")]
  public static extern int CON_LIGHTBLUE_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CON_BLUE_get")]
  public static extern int CON_BLUE_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CON_WHITE_get")]
  public static extern int CON_WHITE_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CON_WHITE_TITANIUM_get")]
  public static extern int CON_WHITE_TITANIUM_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CON_YELLOW_get")]
  public static extern int CON_YELLOW_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CON_RED_get")]
  public static extern int CON_RED_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CON_GRAY_get")]
  public static extern int CON_GRAY_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DMG_BLOCKED_get")]
  public static extern int DMG_BLOCKED_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DMG_PARRIED_get")]
  public static extern int DMG_PARRIED_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DMG_RIPOSTED_get")]
  public static extern int DMG_RIPOSTED_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DMG_DODGED_get")]
  public static extern int DMG_DODGED_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DMG_INVULNERABLE_get")]
  public static extern int DMG_INVULNERABLE_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DMG_RUNE_get")]
  public static extern int DMG_RUNE_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SPECIALIZE_FIZZLE_get")]
  public static extern int SPECIALIZE_FIZZLE_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZONEPOINT_NOZONE_RANGE_get")]
  public static extern float ZONEPOINT_NOZONE_RANGE_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZONEPOINT_ZONE_RANGE_get")]
  public static extern float ZONEPOINT_ZONE_RANGE_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_HEALTHREPORT_get")]
  public static extern int PET_HEALTHREPORT_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_LEADER_get")]
  public static extern int PET_LEADER_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_ATTACK_get")]
  public static extern int PET_ATTACK_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_QATTACK_get")]
  public static extern int PET_QATTACK_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_FOLLOWME_get")]
  public static extern int PET_FOLLOWME_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_GUARDHERE_get")]
  public static extern int PET_GUARDHERE_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_SIT_get")]
  public static extern int PET_SIT_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_SITDOWN_get")]
  public static extern int PET_SITDOWN_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_STANDUP_get")]
  public static extern int PET_STANDUP_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_STOP_get")]
  public static extern int PET_STOP_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_STOP_ON_get")]
  public static extern int PET_STOP_ON_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_STOP_OFF_get")]
  public static extern int PET_STOP_OFF_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_TAUNT_get")]
  public static extern int PET_TAUNT_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_TAUNT_ON_get")]
  public static extern int PET_TAUNT_ON_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_TAUNT_OFF_get")]
  public static extern int PET_TAUNT_OFF_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_HOLD_get")]
  public static extern int PET_HOLD_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_HOLD_ON_get")]
  public static extern int PET_HOLD_ON_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_HOLD_OFF_get")]
  public static extern int PET_HOLD_OFF_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_GHOLD_get")]
  public static extern int PET_GHOLD_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_GHOLD_ON_get")]
  public static extern int PET_GHOLD_ON_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_GHOLD_OFF_get")]
  public static extern int PET_GHOLD_OFF_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_SPELLHOLD_get")]
  public static extern int PET_SPELLHOLD_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_SPELLHOLD_ON_get")]
  public static extern int PET_SPELLHOLD_ON_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_SPELLHOLD_OFF_get")]
  public static extern int PET_SPELLHOLD_OFF_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_FOCUS_get")]
  public static extern int PET_FOCUS_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_FOCUS_ON_get")]
  public static extern int PET_FOCUS_ON_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_FOCUS_OFF_get")]
  public static extern int PET_FOCUS_OFF_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_FEIGN_get")]
  public static extern int PET_FEIGN_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_BACKOFF_get")]
  public static extern int PET_BACKOFF_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_GETLOST_get")]
  public static extern int PET_GETLOST_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_GUARDME_get")]
  public static extern int PET_GUARDME_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_REGROUP_get")]
  public static extern int PET_REGROUP_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_REGROUP_ON_get")]
  public static extern int PET_REGROUP_ON_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_REGROUP_OFF_get")]
  public static extern int PET_REGROUP_OFF_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_MAXCOMMANDS_get")]
  public static extern int PET_MAXCOMMANDS_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_BUTTON_SIT_get")]
  public static extern int PET_BUTTON_SIT_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_BUTTON_STOP_get")]
  public static extern int PET_BUTTON_STOP_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_BUTTON_REGROUP_get")]
  public static extern int PET_BUTTON_REGROUP_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_BUTTON_FOLLOW_get")]
  public static extern int PET_BUTTON_FOLLOW_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_BUTTON_GUARD_get")]
  public static extern int PET_BUTTON_GUARD_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_BUTTON_TAUNT_get")]
  public static extern int PET_BUTTON_TAUNT_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_BUTTON_HOLD_get")]
  public static extern int PET_BUTTON_HOLD_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_BUTTON_GHOLD_get")]
  public static extern int PET_BUTTON_GHOLD_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_BUTTON_FOCUS_get")]
  public static extern int PET_BUTTON_FOCUS_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_BUTTON_SPELLHOLD_get")]
  public static extern int PET_BUTTON_SPELLHOLD_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AURA_HARDCAP_get")]
  public static extern int AURA_HARDCAP_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_WEAPON_STANCE_TYPE_MAX_get")]
  public static extern int WEAPON_STANCE_TYPE_MAX_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SHIELD_ABILITY_RECAST_TIME_get")]
  public static extern int SHIELD_ABILITY_RECAST_TIME_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Options_speak_mode_set")]
  public static extern void Options_speak_mode_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Options_speak_mode_get")]
  public static extern int Options_speak_mode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Options_journal_mode_set")]
  public static extern void Options_journal_mode_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Options_journal_mode_get")]
  public static extern int Options_journal_mode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Options_language_set")]
  public static extern void Options_language_set(global::System.Runtime.InteropServices.HandleRef jarg1, sbyte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Options_language_get")]
  public static extern sbyte Options_language_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Options_message_type_set")]
  public static extern void Options_message_type_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Options_message_type_get")]
  public static extern uint Options_message_type_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Options_target_spawn_id_set")]
  public static extern void Options_target_spawn_id_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Options_target_spawn_id_get")]
  public static extern uint Options_target_spawn_id_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Options")]
  public static extern global::System.IntPtr new_Options();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_Options")]
  public static extern void delete_Options(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Buffs_Struct_spellid_set")]
  public static extern void Buffs_Struct_spellid_set(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Buffs_Struct_spellid_get")]
  public static extern ushort Buffs_Struct_spellid_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Buffs_Struct_casterlevel_set")]
  public static extern void Buffs_Struct_casterlevel_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Buffs_Struct_casterlevel_get")]
  public static extern byte Buffs_Struct_casterlevel_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Buffs_Struct_casterid_set")]
  public static extern void Buffs_Struct_casterid_set(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Buffs_Struct_casterid_get")]
  public static extern ushort Buffs_Struct_casterid_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Buffs_Struct_caster_name_set")]
  public static extern void Buffs_Struct_caster_name_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Buffs_Struct_caster_name_get")]
  public static extern string Buffs_Struct_caster_name_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Buffs_Struct_ticsremaining_set")]
  public static extern void Buffs_Struct_ticsremaining_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Buffs_Struct_ticsremaining_get")]
  public static extern int Buffs_Struct_ticsremaining_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Buffs_Struct_counters_set")]
  public static extern void Buffs_Struct_counters_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Buffs_Struct_counters_get")]
  public static extern uint Buffs_Struct_counters_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Buffs_Struct_hit_number_set")]
  public static extern void Buffs_Struct_hit_number_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Buffs_Struct_hit_number_get")]
  public static extern uint Buffs_Struct_hit_number_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Buffs_Struct_melee_rune_set")]
  public static extern void Buffs_Struct_melee_rune_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Buffs_Struct_melee_rune_get")]
  public static extern uint Buffs_Struct_melee_rune_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Buffs_Struct_magic_rune_set")]
  public static extern void Buffs_Struct_magic_rune_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Buffs_Struct_magic_rune_get")]
  public static extern uint Buffs_Struct_magic_rune_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Buffs_Struct_dot_rune_set")]
  public static extern void Buffs_Struct_dot_rune_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Buffs_Struct_dot_rune_get")]
  public static extern uint Buffs_Struct_dot_rune_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Buffs_Struct_caston_x_set")]
  public static extern void Buffs_Struct_caston_x_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Buffs_Struct_caston_x_get")]
  public static extern int Buffs_Struct_caston_x_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Buffs_Struct_caston_y_set")]
  public static extern void Buffs_Struct_caston_y_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Buffs_Struct_caston_y_get")]
  public static extern int Buffs_Struct_caston_y_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Buffs_Struct_caston_z_set")]
  public static extern void Buffs_Struct_caston_z_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Buffs_Struct_caston_z_get")]
  public static extern int Buffs_Struct_caston_z_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Buffs_Struct_ExtraDIChance_set")]
  public static extern void Buffs_Struct_ExtraDIChance_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Buffs_Struct_ExtraDIChance_get")]
  public static extern int Buffs_Struct_ExtraDIChance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Buffs_Struct_RootBreakChance_set")]
  public static extern void Buffs_Struct_RootBreakChance_set(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Buffs_Struct_RootBreakChance_get")]
  public static extern short Buffs_Struct_RootBreakChance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Buffs_Struct_instrument_mod_set")]
  public static extern void Buffs_Struct_instrument_mod_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Buffs_Struct_instrument_mod_get")]
  public static extern uint Buffs_Struct_instrument_mod_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Buffs_Struct_virus_spread_time_set")]
  public static extern void Buffs_Struct_virus_spread_time_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Buffs_Struct_virus_spread_time_get")]
  public static extern int Buffs_Struct_virus_spread_time_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Buffs_Struct_persistant_buff_set")]
  public static extern void Buffs_Struct_persistant_buff_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Buffs_Struct_persistant_buff_get")]
  public static extern bool Buffs_Struct_persistant_buff_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Buffs_Struct_client_set")]
  public static extern void Buffs_Struct_client_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Buffs_Struct_client_get")]
  public static extern bool Buffs_Struct_client_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Buffs_Struct_UpdateClient_set")]
  public static extern void Buffs_Struct_UpdateClient_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Buffs_Struct_UpdateClient_get")]
  public static extern bool Buffs_Struct_UpdateClient_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Buffs_Struct")]
  public static extern global::System.IntPtr new_Buffs_Struct();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_Buffs_Struct")]
  public static extern void delete_Buffs_Struct(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_AC_set")]
  public static extern void StatBonuses_AC_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_AC_get")]
  public static extern int StatBonuses_AC_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HP_set")]
  public static extern void StatBonuses_HP_set(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HP_get")]
  public static extern long StatBonuses_HP_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HPRegen_set")]
  public static extern void StatBonuses_HPRegen_set(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HPRegen_get")]
  public static extern long StatBonuses_HPRegen_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_MaxHP_set")]
  public static extern void StatBonuses_MaxHP_set(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_MaxHP_get")]
  public static extern long StatBonuses_MaxHP_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ManaRegen_set")]
  public static extern void StatBonuses_ManaRegen_set(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ManaRegen_get")]
  public static extern long StatBonuses_ManaRegen_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_EnduranceRegen_set")]
  public static extern void StatBonuses_EnduranceRegen_set(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_EnduranceRegen_get")]
  public static extern long StatBonuses_EnduranceRegen_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Mana_set")]
  public static extern void StatBonuses_Mana_set(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Mana_get")]
  public static extern long StatBonuses_Mana_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Endurance_set")]
  public static extern void StatBonuses_Endurance_set(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Endurance_get")]
  public static extern long StatBonuses_Endurance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ATK_set")]
  public static extern void StatBonuses_ATK_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ATK_get")]
  public static extern int StatBonuses_ATK_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_STR_set")]
  public static extern void StatBonuses_STR_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_STR_get")]
  public static extern int StatBonuses_STR_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_STRCapMod_set")]
  public static extern void StatBonuses_STRCapMod_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_STRCapMod_get")]
  public static extern int StatBonuses_STRCapMod_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HeroicSTR_set")]
  public static extern void StatBonuses_HeroicSTR_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HeroicSTR_get")]
  public static extern int StatBonuses_HeroicSTR_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_STA_set")]
  public static extern void StatBonuses_STA_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_STA_get")]
  public static extern int StatBonuses_STA_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_STACapMod_set")]
  public static extern void StatBonuses_STACapMod_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_STACapMod_get")]
  public static extern int StatBonuses_STACapMod_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HeroicSTA_set")]
  public static extern void StatBonuses_HeroicSTA_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HeroicSTA_get")]
  public static extern int StatBonuses_HeroicSTA_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DEX_set")]
  public static extern void StatBonuses_DEX_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DEX_get")]
  public static extern int StatBonuses_DEX_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DEXCapMod_set")]
  public static extern void StatBonuses_DEXCapMod_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DEXCapMod_get")]
  public static extern int StatBonuses_DEXCapMod_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HeroicDEX_set")]
  public static extern void StatBonuses_HeroicDEX_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HeroicDEX_get")]
  public static extern int StatBonuses_HeroicDEX_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_AGI_set")]
  public static extern void StatBonuses_AGI_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_AGI_get")]
  public static extern int StatBonuses_AGI_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_AGICapMod_set")]
  public static extern void StatBonuses_AGICapMod_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_AGICapMod_get")]
  public static extern int StatBonuses_AGICapMod_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HeroicAGI_set")]
  public static extern void StatBonuses_HeroicAGI_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HeroicAGI_get")]
  public static extern int StatBonuses_HeroicAGI_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_INT_set")]
  public static extern void StatBonuses_INT_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_INT_get")]
  public static extern int StatBonuses_INT_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_INTCapMod_set")]
  public static extern void StatBonuses_INTCapMod_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_INTCapMod_get")]
  public static extern int StatBonuses_INTCapMod_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HeroicINT_set")]
  public static extern void StatBonuses_HeroicINT_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HeroicINT_get")]
  public static extern int StatBonuses_HeroicINT_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_WIS_set")]
  public static extern void StatBonuses_WIS_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_WIS_get")]
  public static extern int StatBonuses_WIS_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_WISCapMod_set")]
  public static extern void StatBonuses_WISCapMod_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_WISCapMod_get")]
  public static extern int StatBonuses_WISCapMod_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HeroicWIS_set")]
  public static extern void StatBonuses_HeroicWIS_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HeroicWIS_get")]
  public static extern int StatBonuses_HeroicWIS_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_CHA_set")]
  public static extern void StatBonuses_CHA_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_CHA_get")]
  public static extern int StatBonuses_CHA_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_CHACapMod_set")]
  public static extern void StatBonuses_CHACapMod_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_CHACapMod_get")]
  public static extern int StatBonuses_CHACapMod_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HeroicCHA_set")]
  public static extern void StatBonuses_HeroicCHA_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HeroicCHA_get")]
  public static extern int StatBonuses_HeroicCHA_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_MR_set")]
  public static extern void StatBonuses_MR_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_MR_get")]
  public static extern int StatBonuses_MR_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_MRCapMod_set")]
  public static extern void StatBonuses_MRCapMod_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_MRCapMod_get")]
  public static extern int StatBonuses_MRCapMod_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HeroicMR_set")]
  public static extern void StatBonuses_HeroicMR_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HeroicMR_get")]
  public static extern int StatBonuses_HeroicMR_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_FR_set")]
  public static extern void StatBonuses_FR_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_FR_get")]
  public static extern int StatBonuses_FR_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_FRCapMod_set")]
  public static extern void StatBonuses_FRCapMod_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_FRCapMod_get")]
  public static extern int StatBonuses_FRCapMod_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HeroicFR_set")]
  public static extern void StatBonuses_HeroicFR_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HeroicFR_get")]
  public static extern int StatBonuses_HeroicFR_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_CR_set")]
  public static extern void StatBonuses_CR_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_CR_get")]
  public static extern int StatBonuses_CR_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_CRCapMod_set")]
  public static extern void StatBonuses_CRCapMod_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_CRCapMod_get")]
  public static extern int StatBonuses_CRCapMod_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HeroicCR_set")]
  public static extern void StatBonuses_HeroicCR_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HeroicCR_get")]
  public static extern int StatBonuses_HeroicCR_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_PR_set")]
  public static extern void StatBonuses_PR_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_PR_get")]
  public static extern int StatBonuses_PR_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_PRCapMod_set")]
  public static extern void StatBonuses_PRCapMod_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_PRCapMod_get")]
  public static extern int StatBonuses_PRCapMod_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HeroicPR_set")]
  public static extern void StatBonuses_HeroicPR_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HeroicPR_get")]
  public static extern int StatBonuses_HeroicPR_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DR_set")]
  public static extern void StatBonuses_DR_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DR_get")]
  public static extern int StatBonuses_DR_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DRCapMod_set")]
  public static extern void StatBonuses_DRCapMod_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DRCapMod_get")]
  public static extern int StatBonuses_DRCapMod_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HeroicDR_set")]
  public static extern void StatBonuses_HeroicDR_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HeroicDR_get")]
  public static extern int StatBonuses_HeroicDR_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Corrup_set")]
  public static extern void StatBonuses_Corrup_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Corrup_get")]
  public static extern int StatBonuses_Corrup_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_CorrupCapMod_set")]
  public static extern void StatBonuses_CorrupCapMod_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_CorrupCapMod_get")]
  public static extern int StatBonuses_CorrupCapMod_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HeroicCorrup_set")]
  public static extern void StatBonuses_HeroicCorrup_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HeroicCorrup_get")]
  public static extern int StatBonuses_HeroicCorrup_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DamageShieldSpellID_set")]
  public static extern void StatBonuses_DamageShieldSpellID_set(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DamageShieldSpellID_get")]
  public static extern ushort StatBonuses_DamageShieldSpellID_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DamageShield_set")]
  public static extern void StatBonuses_DamageShield_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DamageShield_get")]
  public static extern int StatBonuses_DamageShield_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DamageShieldType_set")]
  public static extern void StatBonuses_DamageShieldType_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DamageShieldType_get")]
  public static extern global::System.IntPtr StatBonuses_DamageShieldType_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SpellDamageShield_set")]
  public static extern void StatBonuses_SpellDamageShield_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SpellDamageShield_get")]
  public static extern int StatBonuses_SpellDamageShield_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SpellShield_set")]
  public static extern void StatBonuses_SpellShield_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SpellShield_get")]
  public static extern int StatBonuses_SpellShield_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ReverseDamageShield_set")]
  public static extern void StatBonuses_ReverseDamageShield_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ReverseDamageShield_get")]
  public static extern int StatBonuses_ReverseDamageShield_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ReverseDamageShieldSpellID_set")]
  public static extern void StatBonuses_ReverseDamageShieldSpellID_set(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ReverseDamageShieldSpellID_get")]
  public static extern ushort StatBonuses_ReverseDamageShieldSpellID_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ReverseDamageShieldType_set")]
  public static extern void StatBonuses_ReverseDamageShieldType_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ReverseDamageShieldType_get")]
  public static extern global::System.IntPtr StatBonuses_ReverseDamageShieldType_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_movementspeed_set")]
  public static extern void StatBonuses_movementspeed_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_movementspeed_get")]
  public static extern int StatBonuses_movementspeed_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_haste_set")]
  public static extern void StatBonuses_haste_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_haste_get")]
  public static extern int StatBonuses_haste_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_hastetype2_set")]
  public static extern void StatBonuses_hastetype2_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_hastetype2_get")]
  public static extern int StatBonuses_hastetype2_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_hastetype3_set")]
  public static extern void StatBonuses_hastetype3_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_hastetype3_get")]
  public static extern int StatBonuses_hastetype3_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_inhibitmelee_set")]
  public static extern void StatBonuses_inhibitmelee_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_inhibitmelee_get")]
  public static extern int StatBonuses_inhibitmelee_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_AggroRange_set")]
  public static extern void StatBonuses_AggroRange_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_AggroRange_get")]
  public static extern float StatBonuses_AggroRange_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_AssistRange_set")]
  public static extern void StatBonuses_AssistRange_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_AssistRange_get")]
  public static extern float StatBonuses_AssistRange_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_skillmod_set")]
  public static extern void StatBonuses_skillmod_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_skillmod_get")]
  public static extern global::System.IntPtr StatBonuses_skillmod_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_skillmodmax_set")]
  public static extern void StatBonuses_skillmodmax_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_skillmodmax_get")]
  public static extern global::System.IntPtr StatBonuses_skillmodmax_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_effective_casting_level_set")]
  public static extern void StatBonuses_effective_casting_level_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_effective_casting_level_get")]
  public static extern int StatBonuses_effective_casting_level_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_adjusted_casting_skill_set")]
  public static extern void StatBonuses_adjusted_casting_skill_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_adjusted_casting_skill_get")]
  public static extern int StatBonuses_adjusted_casting_skill_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_reflect_set")]
  public static extern void StatBonuses_reflect_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_reflect_get")]
  public static extern global::System.IntPtr StatBonuses_reflect_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_singingMod_set")]
  public static extern void StatBonuses_singingMod_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_singingMod_get")]
  public static extern uint StatBonuses_singingMod_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Amplification_set")]
  public static extern void StatBonuses_Amplification_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Amplification_get")]
  public static extern uint StatBonuses_Amplification_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_brassMod_set")]
  public static extern void StatBonuses_brassMod_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_brassMod_get")]
  public static extern uint StatBonuses_brassMod_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_percussionMod_set")]
  public static extern void StatBonuses_percussionMod_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_percussionMod_get")]
  public static extern uint StatBonuses_percussionMod_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_windMod_set")]
  public static extern void StatBonuses_windMod_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_windMod_get")]
  public static extern uint StatBonuses_windMod_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_stringedMod_set")]
  public static extern void StatBonuses_stringedMod_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_stringedMod_get")]
  public static extern uint StatBonuses_stringedMod_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_songModCap_set")]
  public static extern void StatBonuses_songModCap_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_songModCap_get")]
  public static extern uint StatBonuses_songModCap_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_hatemod_set")]
  public static extern void StatBonuses_hatemod_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_hatemod_get")]
  public static extern int StatBonuses_hatemod_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_EnduranceReduction_set")]
  public static extern void StatBonuses_EnduranceReduction_set(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_EnduranceReduction_get")]
  public static extern long StatBonuses_EnduranceReduction_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_StrikeThrough_set")]
  public static extern void StatBonuses_StrikeThrough_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_StrikeThrough_get")]
  public static extern int StatBonuses_StrikeThrough_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_MeleeMitigation_set")]
  public static extern void StatBonuses_MeleeMitigation_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_MeleeMitigation_get")]
  public static extern int StatBonuses_MeleeMitigation_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_MeleeMitigationEffect_set")]
  public static extern void StatBonuses_MeleeMitigationEffect_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_MeleeMitigationEffect_get")]
  public static extern int StatBonuses_MeleeMitigationEffect_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_CriticalHitChance_set")]
  public static extern void StatBonuses_CriticalHitChance_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_CriticalHitChance_get")]
  public static extern global::System.IntPtr StatBonuses_CriticalHitChance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_CriticalSpellChance_set")]
  public static extern void StatBonuses_CriticalSpellChance_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_CriticalSpellChance_get")]
  public static extern int StatBonuses_CriticalSpellChance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SpellCritDmgIncrease_set")]
  public static extern void StatBonuses_SpellCritDmgIncrease_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SpellCritDmgIncrease_get")]
  public static extern int StatBonuses_SpellCritDmgIncrease_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SpellCritDmgIncNoStack_set")]
  public static extern void StatBonuses_SpellCritDmgIncNoStack_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SpellCritDmgIncNoStack_get")]
  public static extern int StatBonuses_SpellCritDmgIncNoStack_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DotCritDmgIncrease_set")]
  public static extern void StatBonuses_DotCritDmgIncrease_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DotCritDmgIncrease_get")]
  public static extern int StatBonuses_DotCritDmgIncrease_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_CriticalHealChance_set")]
  public static extern void StatBonuses_CriticalHealChance_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_CriticalHealChance_get")]
  public static extern int StatBonuses_CriticalHealChance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_CriticalHealOverTime_set")]
  public static extern void StatBonuses_CriticalHealOverTime_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_CriticalHealOverTime_get")]
  public static extern int StatBonuses_CriticalHealOverTime_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_CriticalDoTChance_set")]
  public static extern void StatBonuses_CriticalDoTChance_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_CriticalDoTChance_get")]
  public static extern int StatBonuses_CriticalDoTChance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_CrippBlowChance_set")]
  public static extern void StatBonuses_CrippBlowChance_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_CrippBlowChance_get")]
  public static extern int StatBonuses_CrippBlowChance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_AvoidMeleeChance_set")]
  public static extern void StatBonuses_AvoidMeleeChance_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_AvoidMeleeChance_get")]
  public static extern int StatBonuses_AvoidMeleeChance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_AvoidMeleeChanceEffect_set")]
  public static extern void StatBonuses_AvoidMeleeChanceEffect_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_AvoidMeleeChanceEffect_get")]
  public static extern int StatBonuses_AvoidMeleeChanceEffect_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_RiposteChance_set")]
  public static extern void StatBonuses_RiposteChance_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_RiposteChance_get")]
  public static extern int StatBonuses_RiposteChance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DodgeChance_set")]
  public static extern void StatBonuses_DodgeChance_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DodgeChance_get")]
  public static extern int StatBonuses_DodgeChance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ParryChance_set")]
  public static extern void StatBonuses_ParryChance_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ParryChance_get")]
  public static extern int StatBonuses_ParryChance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DualWieldChance_set")]
  public static extern void StatBonuses_DualWieldChance_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DualWieldChance_get")]
  public static extern int StatBonuses_DualWieldChance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DoubleAttackChance_set")]
  public static extern void StatBonuses_DoubleAttackChance_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DoubleAttackChance_get")]
  public static extern int StatBonuses_DoubleAttackChance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_TripleAttackChance_set")]
  public static extern void StatBonuses_TripleAttackChance_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_TripleAttackChance_get")]
  public static extern int StatBonuses_TripleAttackChance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DoubleRangedAttack_set")]
  public static extern void StatBonuses_DoubleRangedAttack_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DoubleRangedAttack_get")]
  public static extern int StatBonuses_DoubleRangedAttack_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ResistSpellChance_set")]
  public static extern void StatBonuses_ResistSpellChance_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ResistSpellChance_get")]
  public static extern int StatBonuses_ResistSpellChance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ResistFearChance_set")]
  public static extern void StatBonuses_ResistFearChance_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ResistFearChance_get")]
  public static extern int StatBonuses_ResistFearChance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Fearless_set")]
  public static extern void StatBonuses_Fearless_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Fearless_get")]
  public static extern bool StatBonuses_Fearless_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_IsFeared_set")]
  public static extern void StatBonuses_IsFeared_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_IsFeared_get")]
  public static extern bool StatBonuses_IsFeared_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_IsBlind_set")]
  public static extern void StatBonuses_IsBlind_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_IsBlind_get")]
  public static extern bool StatBonuses_IsBlind_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_StunResist_set")]
  public static extern void StatBonuses_StunResist_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_StunResist_get")]
  public static extern int StatBonuses_StunResist_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_MeleeSkillCheck_set")]
  public static extern void StatBonuses_MeleeSkillCheck_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_MeleeSkillCheck_get")]
  public static extern int StatBonuses_MeleeSkillCheck_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_MeleeSkillCheckSkill_set")]
  public static extern void StatBonuses_MeleeSkillCheckSkill_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_MeleeSkillCheckSkill_get")]
  public static extern byte StatBonuses_MeleeSkillCheckSkill_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HitChance_set")]
  public static extern void StatBonuses_HitChance_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HitChance_get")]
  public static extern int StatBonuses_HitChance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HitChanceEffect_set")]
  public static extern void StatBonuses_HitChanceEffect_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HitChanceEffect_get")]
  public static extern global::System.IntPtr StatBonuses_HitChanceEffect_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DamageModifier_set")]
  public static extern void StatBonuses_DamageModifier_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DamageModifier_get")]
  public static extern global::System.IntPtr StatBonuses_DamageModifier_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DamageModifier2_set")]
  public static extern void StatBonuses_DamageModifier2_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DamageModifier2_get")]
  public static extern global::System.IntPtr StatBonuses_DamageModifier2_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DamageModifier3_set")]
  public static extern void StatBonuses_DamageModifier3_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DamageModifier3_get")]
  public static extern global::System.IntPtr StatBonuses_DamageModifier3_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_MinDamageModifier_set")]
  public static extern void StatBonuses_MinDamageModifier_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_MinDamageModifier_get")]
  public static extern global::System.IntPtr StatBonuses_MinDamageModifier_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ProcChance_set")]
  public static extern void StatBonuses_ProcChance_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ProcChance_get")]
  public static extern int StatBonuses_ProcChance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ProcChanceSPA_set")]
  public static extern void StatBonuses_ProcChanceSPA_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ProcChanceSPA_get")]
  public static extern int StatBonuses_ProcChanceSPA_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ExtraAttackChance_set")]
  public static extern void StatBonuses_ExtraAttackChance_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ExtraAttackChance_get")]
  public static extern global::System.IntPtr StatBonuses_ExtraAttackChance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ExtraAttackChancePrimary_set")]
  public static extern void StatBonuses_ExtraAttackChancePrimary_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ExtraAttackChancePrimary_get")]
  public static extern global::System.IntPtr StatBonuses_ExtraAttackChancePrimary_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ExtraAttackChanceSecondary_set")]
  public static extern void StatBonuses_ExtraAttackChanceSecondary_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ExtraAttackChanceSecondary_get")]
  public static extern global::System.IntPtr StatBonuses_ExtraAttackChanceSecondary_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DoubleMeleeRound_set")]
  public static extern void StatBonuses_DoubleMeleeRound_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DoubleMeleeRound_get")]
  public static extern global::System.IntPtr StatBonuses_DoubleMeleeRound_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DoTShielding_set")]
  public static extern void StatBonuses_DoTShielding_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DoTShielding_get")]
  public static extern int StatBonuses_DoTShielding_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DivineSaveChance_set")]
  public static extern void StatBonuses_DivineSaveChance_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DivineSaveChance_get")]
  public static extern global::System.IntPtr StatBonuses_DivineSaveChance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DeathSave_set")]
  public static extern void StatBonuses_DeathSave_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DeathSave_get")]
  public static extern global::System.IntPtr StatBonuses_DeathSave_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_FlurryChance_set")]
  public static extern void StatBonuses_FlurryChance_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_FlurryChance_get")]
  public static extern int StatBonuses_FlurryChance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Accuracy_set")]
  public static extern void StatBonuses_Accuracy_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Accuracy_get")]
  public static extern global::System.IntPtr StatBonuses_Accuracy_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HundredHands_set")]
  public static extern void StatBonuses_HundredHands_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HundredHands_get")]
  public static extern int StatBonuses_HundredHands_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_MeleeLifetap_set")]
  public static extern void StatBonuses_MeleeLifetap_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_MeleeLifetap_get")]
  public static extern int StatBonuses_MeleeLifetap_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Vampirism_set")]
  public static extern void StatBonuses_Vampirism_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Vampirism_get")]
  public static extern int StatBonuses_Vampirism_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HealRate_set")]
  public static extern void StatBonuses_HealRate_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HealRate_get")]
  public static extern int StatBonuses_HealRate_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_MaxHPChange_set")]
  public static extern void StatBonuses_MaxHPChange_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_MaxHPChange_get")]
  public static extern int StatBonuses_MaxHPChange_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SkillDmgTaken_set")]
  public static extern void StatBonuses_SkillDmgTaken_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SkillDmgTaken_get")]
  public static extern global::System.IntPtr StatBonuses_SkillDmgTaken_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HealAmt_set")]
  public static extern void StatBonuses_HealAmt_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HealAmt_get")]
  public static extern int StatBonuses_HealAmt_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SpellDmg_set")]
  public static extern void StatBonuses_SpellDmg_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SpellDmg_get")]
  public static extern int StatBonuses_SpellDmg_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Clairvoyance_set")]
  public static extern void StatBonuses_Clairvoyance_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Clairvoyance_get")]
  public static extern int StatBonuses_Clairvoyance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DSMitigation_set")]
  public static extern void StatBonuses_DSMitigation_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DSMitigation_get")]
  public static extern int StatBonuses_DSMitigation_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DSMitigationOffHand_set")]
  public static extern void StatBonuses_DSMitigationOffHand_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DSMitigationOffHand_get")]
  public static extern int StatBonuses_DSMitigationOffHand_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SpellTriggers_set")]
  public static extern void StatBonuses_SpellTriggers_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SpellTriggers_get")]
  public static extern global::System.IntPtr StatBonuses_SpellTriggers_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SpellOnKill_set")]
  public static extern void StatBonuses_SpellOnKill_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SpellOnKill_get")]
  public static extern global::System.IntPtr StatBonuses_SpellOnKill_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SpellOnDeath_set")]
  public static extern void StatBonuses_SpellOnDeath_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SpellOnDeath_get")]
  public static extern global::System.IntPtr StatBonuses_SpellOnDeath_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_CritDmgMod_set")]
  public static extern void StatBonuses_CritDmgMod_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_CritDmgMod_get")]
  public static extern global::System.IntPtr StatBonuses_CritDmgMod_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_CritDmgModNoStack_set")]
  public static extern void StatBonuses_CritDmgModNoStack_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_CritDmgModNoStack_get")]
  public static extern global::System.IntPtr StatBonuses_CritDmgModNoStack_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SkillReuseTime_set")]
  public static extern void StatBonuses_SkillReuseTime_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SkillReuseTime_get")]
  public static extern global::System.IntPtr StatBonuses_SkillReuseTime_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SkillDamageAmount_set")]
  public static extern void StatBonuses_SkillDamageAmount_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SkillDamageAmount_get")]
  public static extern global::System.IntPtr StatBonuses_SkillDamageAmount_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_TwoHandBluntBlock_set")]
  public static extern void StatBonuses_TwoHandBluntBlock_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_TwoHandBluntBlock_get")]
  public static extern int StatBonuses_TwoHandBluntBlock_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ItemManaRegenCap_set")]
  public static extern void StatBonuses_ItemManaRegenCap_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ItemManaRegenCap_get")]
  public static extern uint StatBonuses_ItemManaRegenCap_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_GravityEffect_set")]
  public static extern void StatBonuses_GravityEffect_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_GravityEffect_get")]
  public static extern int StatBonuses_GravityEffect_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_AntiGate_set")]
  public static extern void StatBonuses_AntiGate_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_AntiGate_get")]
  public static extern bool StatBonuses_AntiGate_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_MagicWeapon_set")]
  public static extern void StatBonuses_MagicWeapon_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_MagicWeapon_get")]
  public static extern bool StatBonuses_MagicWeapon_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_IncreaseBlockChance_set")]
  public static extern void StatBonuses_IncreaseBlockChance_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_IncreaseBlockChance_get")]
  public static extern int StatBonuses_IncreaseBlockChance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_PersistantCasting_set")]
  public static extern void StatBonuses_PersistantCasting_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_PersistantCasting_get")]
  public static extern uint StatBonuses_PersistantCasting_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_XPRateMod_set")]
  public static extern void StatBonuses_XPRateMod_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_XPRateMod_get")]
  public static extern int StatBonuses_XPRateMod_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HPPercCap_set")]
  public static extern void StatBonuses_HPPercCap_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HPPercCap_get")]
  public static extern global::System.IntPtr StatBonuses_HPPercCap_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ManaPercCap_set")]
  public static extern void StatBonuses_ManaPercCap_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ManaPercCap_get")]
  public static extern global::System.IntPtr StatBonuses_ManaPercCap_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_EndPercCap_set")]
  public static extern void StatBonuses_EndPercCap_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_EndPercCap_get")]
  public static extern global::System.IntPtr StatBonuses_EndPercCap_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ImmuneToFlee_set")]
  public static extern void StatBonuses_ImmuneToFlee_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ImmuneToFlee_get")]
  public static extern bool StatBonuses_ImmuneToFlee_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_VoiceGraft_set")]
  public static extern void StatBonuses_VoiceGraft_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_VoiceGraft_get")]
  public static extern uint StatBonuses_VoiceGraft_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SpellProcChance_set")]
  public static extern void StatBonuses_SpellProcChance_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SpellProcChance_get")]
  public static extern int StatBonuses_SpellProcChance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_CharmBreakChance_set")]
  public static extern void StatBonuses_CharmBreakChance_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_CharmBreakChance_get")]
  public static extern int StatBonuses_CharmBreakChance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SongRange_set")]
  public static extern void StatBonuses_SongRange_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SongRange_get")]
  public static extern int StatBonuses_SongRange_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HPToManaConvert_set")]
  public static extern void StatBonuses_HPToManaConvert_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HPToManaConvert_get")]
  public static extern uint StatBonuses_HPToManaConvert_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_FocusEffects_set")]
  public static extern void StatBonuses_FocusEffects_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_FocusEffects_get")]
  public static extern global::System.IntPtr StatBonuses_FocusEffects_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_FocusEffectsWorn_set")]
  public static extern void StatBonuses_FocusEffectsWorn_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_FocusEffectsWorn_get")]
  public static extern global::System.IntPtr StatBonuses_FocusEffectsWorn_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_NegateEffects_set")]
  public static extern void StatBonuses_NegateEffects_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_NegateEffects_get")]
  public static extern bool StatBonuses_NegateEffects_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SkillDamageAmount2_set")]
  public static extern void StatBonuses_SkillDamageAmount2_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SkillDamageAmount2_get")]
  public static extern global::System.IntPtr StatBonuses_SkillDamageAmount2_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_NegateAttacks_set")]
  public static extern void StatBonuses_NegateAttacks_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_NegateAttacks_get")]
  public static extern global::System.IntPtr StatBonuses_NegateAttacks_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_MitigateMeleeRune_set")]
  public static extern void StatBonuses_MitigateMeleeRune_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_MitigateMeleeRune_get")]
  public static extern global::System.IntPtr StatBonuses_MitigateMeleeRune_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_MeleeThresholdGuard_set")]
  public static extern void StatBonuses_MeleeThresholdGuard_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_MeleeThresholdGuard_get")]
  public static extern global::System.IntPtr StatBonuses_MeleeThresholdGuard_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SpellThresholdGuard_set")]
  public static extern void StatBonuses_SpellThresholdGuard_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SpellThresholdGuard_get")]
  public static extern global::System.IntPtr StatBonuses_SpellThresholdGuard_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_MitigateSpellRune_set")]
  public static extern void StatBonuses_MitigateSpellRune_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_MitigateSpellRune_get")]
  public static extern global::System.IntPtr StatBonuses_MitigateSpellRune_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_MitigateDotRune_set")]
  public static extern void StatBonuses_MitigateDotRune_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_MitigateDotRune_get")]
  public static extern global::System.IntPtr StatBonuses_MitigateDotRune_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_TriggerMeleeThreshold_set")]
  public static extern void StatBonuses_TriggerMeleeThreshold_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_TriggerMeleeThreshold_get")]
  public static extern bool StatBonuses_TriggerMeleeThreshold_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_TriggerSpellThreshold_set")]
  public static extern void StatBonuses_TriggerSpellThreshold_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_TriggerSpellThreshold_get")]
  public static extern bool StatBonuses_TriggerSpellThreshold_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ManaAbsorbPercentDamage_set")]
  public static extern void StatBonuses_ManaAbsorbPercentDamage_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ManaAbsorbPercentDamage_get")]
  public static extern uint StatBonuses_ManaAbsorbPercentDamage_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_EnduranceAbsorbPercentDamage_set")]
  public static extern void StatBonuses_EnduranceAbsorbPercentDamage_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_EnduranceAbsorbPercentDamage_get")]
  public static extern global::System.IntPtr StatBonuses_EnduranceAbsorbPercentDamage_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ShieldBlock_set")]
  public static extern void StatBonuses_ShieldBlock_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ShieldBlock_get")]
  public static extern int StatBonuses_ShieldBlock_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_BlockBehind_set")]
  public static extern void StatBonuses_BlockBehind_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_BlockBehind_get")]
  public static extern int StatBonuses_BlockBehind_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_CriticalRegenDecay_set")]
  public static extern void StatBonuses_CriticalRegenDecay_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_CriticalRegenDecay_get")]
  public static extern bool StatBonuses_CriticalRegenDecay_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_CriticalHealDecay_set")]
  public static extern void StatBonuses_CriticalHealDecay_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_CriticalHealDecay_get")]
  public static extern bool StatBonuses_CriticalHealDecay_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_CriticalDotDecay_set")]
  public static extern void StatBonuses_CriticalDotDecay_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_CriticalDotDecay_get")]
  public static extern bool StatBonuses_CriticalDotDecay_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DivineAura_set")]
  public static extern void StatBonuses_DivineAura_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DivineAura_get")]
  public static extern bool StatBonuses_DivineAura_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DistanceRemoval_set")]
  public static extern void StatBonuses_DistanceRemoval_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DistanceRemoval_get")]
  public static extern bool StatBonuses_DistanceRemoval_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ImprovedTaunt_set")]
  public static extern void StatBonuses_ImprovedTaunt_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ImprovedTaunt_get")]
  public static extern global::System.IntPtr StatBonuses_ImprovedTaunt_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Root_set")]
  public static extern void StatBonuses_Root_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Root_get")]
  public static extern global::System.IntPtr StatBonuses_Root_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_FrenziedDevastation_set")]
  public static extern void StatBonuses_FrenziedDevastation_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_FrenziedDevastation_get")]
  public static extern int StatBonuses_FrenziedDevastation_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_AbsorbMagicAtt_set")]
  public static extern void StatBonuses_AbsorbMagicAtt_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_AbsorbMagicAtt_get")]
  public static extern global::System.IntPtr StatBonuses_AbsorbMagicAtt_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_MeleeRune_set")]
  public static extern void StatBonuses_MeleeRune_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_MeleeRune_get")]
  public static extern global::System.IntPtr StatBonuses_MeleeRune_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_NegateIfCombat_set")]
  public static extern void StatBonuses_NegateIfCombat_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_NegateIfCombat_get")]
  public static extern bool StatBonuses_NegateIfCombat_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Screech_set")]
  public static extern void StatBonuses_Screech_set(global::System.Runtime.InteropServices.HandleRef jarg1, sbyte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Screech_get")]
  public static extern sbyte StatBonuses_Screech_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_AlterNPCLevel_set")]
  public static extern void StatBonuses_AlterNPCLevel_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_AlterNPCLevel_get")]
  public static extern int StatBonuses_AlterNPCLevel_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_AStacker_set")]
  public static extern void StatBonuses_AStacker_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_AStacker_get")]
  public static extern global::System.IntPtr StatBonuses_AStacker_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_BStacker_set")]
  public static extern void StatBonuses_BStacker_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_BStacker_get")]
  public static extern global::System.IntPtr StatBonuses_BStacker_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_CStacker_set")]
  public static extern void StatBonuses_CStacker_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_CStacker_get")]
  public static extern global::System.IntPtr StatBonuses_CStacker_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DStacker_set")]
  public static extern void StatBonuses_DStacker_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DStacker_get")]
  public static extern global::System.IntPtr StatBonuses_DStacker_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_BerserkSPA_set")]
  public static extern void StatBonuses_BerserkSPA_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_BerserkSPA_get")]
  public static extern bool StatBonuses_BerserkSPA_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Metabolism_set")]
  public static extern void StatBonuses_Metabolism_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Metabolism_get")]
  public static extern int StatBonuses_Metabolism_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Sanctuary_set")]
  public static extern void StatBonuses_Sanctuary_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Sanctuary_get")]
  public static extern bool StatBonuses_Sanctuary_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_FactionModPct_set")]
  public static extern void StatBonuses_FactionModPct_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_FactionModPct_get")]
  public static extern int StatBonuses_FactionModPct_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_LimitToSkill_set")]
  public static extern void StatBonuses_LimitToSkill_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_LimitToSkill_get")]
  public static extern global::System.IntPtr StatBonuses_LimitToSkill_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SkillProc_set")]
  public static extern void StatBonuses_SkillProc_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SkillProc_get")]
  public static extern global::System.IntPtr StatBonuses_SkillProc_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SkillProcSuccess_set")]
  public static extern void StatBonuses_SkillProcSuccess_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SkillProcSuccess_get")]
  public static extern global::System.IntPtr StatBonuses_SkillProcSuccess_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SpellProc_set")]
  public static extern void StatBonuses_SpellProc_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SpellProc_get")]
  public static extern global::System.IntPtr StatBonuses_SpellProc_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_RangedProc_set")]
  public static extern void StatBonuses_RangedProc_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_RangedProc_get")]
  public static extern global::System.IntPtr StatBonuses_RangedProc_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DefensiveProc_set")]
  public static extern void StatBonuses_DefensiveProc_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DefensiveProc_get")]
  public static extern global::System.IntPtr StatBonuses_DefensiveProc_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Proc_Timer_Modifier_set")]
  public static extern void StatBonuses_Proc_Timer_Modifier_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Proc_Timer_Modifier_get")]
  public static extern bool StatBonuses_Proc_Timer_Modifier_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_PC_Pet_Rampage_set")]
  public static extern void StatBonuses_PC_Pet_Rampage_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_PC_Pet_Rampage_get")]
  public static extern global::System.IntPtr StatBonuses_PC_Pet_Rampage_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_PC_Pet_AE_Rampage_set")]
  public static extern void StatBonuses_PC_Pet_AE_Rampage_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_PC_Pet_AE_Rampage_get")]
  public static extern global::System.IntPtr StatBonuses_PC_Pet_AE_Rampage_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_PC_Pet_Flurry_set")]
  public static extern void StatBonuses_PC_Pet_Flurry_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_PC_Pet_Flurry_get")]
  public static extern uint StatBonuses_PC_Pet_Flurry_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Attack_Accuracy_Max_Percent_set")]
  public static extern void StatBonuses_Attack_Accuracy_Max_Percent_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Attack_Accuracy_Max_Percent_get")]
  public static extern int StatBonuses_Attack_Accuracy_Max_Percent_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_AC_Mitigation_Max_Percent_set")]
  public static extern void StatBonuses_AC_Mitigation_Max_Percent_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_AC_Mitigation_Max_Percent_get")]
  public static extern int StatBonuses_AC_Mitigation_Max_Percent_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_AC_Avoidance_Max_Percent_set")]
  public static extern void StatBonuses_AC_Avoidance_Max_Percent_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_AC_Avoidance_Max_Percent_get")]
  public static extern int StatBonuses_AC_Avoidance_Max_Percent_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Damage_Taken_Position_Mod_set")]
  public static extern void StatBonuses_Damage_Taken_Position_Mod_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Damage_Taken_Position_Mod_get")]
  public static extern global::System.IntPtr StatBonuses_Damage_Taken_Position_Mod_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Melee_Damage_Position_Mod_set")]
  public static extern void StatBonuses_Melee_Damage_Position_Mod_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Melee_Damage_Position_Mod_get")]
  public static extern global::System.IntPtr StatBonuses_Melee_Damage_Position_Mod_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Damage_Taken_Position_Amt_set")]
  public static extern void StatBonuses_Damage_Taken_Position_Amt_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Damage_Taken_Position_Amt_get")]
  public static extern global::System.IntPtr StatBonuses_Damage_Taken_Position_Amt_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Melee_Damage_Position_Amt_set")]
  public static extern void StatBonuses_Melee_Damage_Position_Amt_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Melee_Damage_Position_Amt_get")]
  public static extern global::System.IntPtr StatBonuses_Melee_Damage_Position_Amt_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Double_Backstab_Front_set")]
  public static extern void StatBonuses_Double_Backstab_Front_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Double_Backstab_Front_get")]
  public static extern int StatBonuses_Double_Backstab_Front_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DS_Mitigation_Amount_set")]
  public static extern void StatBonuses_DS_Mitigation_Amount_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DS_Mitigation_Amount_get")]
  public static extern int StatBonuses_DS_Mitigation_Amount_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DS_Mitigation_Percentage_set")]
  public static extern void StatBonuses_DS_Mitigation_Percentage_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DS_Mitigation_Percentage_get")]
  public static extern int StatBonuses_DS_Mitigation_Percentage_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Pet_Crit_Melee_Damage_Pct_Owner_set")]
  public static extern void StatBonuses_Pet_Crit_Melee_Damage_Pct_Owner_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Pet_Crit_Melee_Damage_Pct_Owner_get")]
  public static extern int StatBonuses_Pet_Crit_Melee_Damage_Pct_Owner_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Pet_Add_Atk_set")]
  public static extern void StatBonuses_Pet_Add_Atk_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Pet_Add_Atk_get")]
  public static extern int StatBonuses_Pet_Add_Atk_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ItemEnduranceRegenCap_set")]
  public static extern void StatBonuses_ItemEnduranceRegenCap_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ItemEnduranceRegenCap_get")]
  public static extern int StatBonuses_ItemEnduranceRegenCap_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_WeaponStance_set")]
  public static extern void StatBonuses_WeaponStance_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_WeaponStance_get")]
  public static extern global::System.IntPtr StatBonuses_WeaponStance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ZoneSuspendMinion_set")]
  public static extern void StatBonuses_ZoneSuspendMinion_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ZoneSuspendMinion_get")]
  public static extern bool StatBonuses_ZoneSuspendMinion_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_CompleteHealBuffBlocker_set")]
  public static extern void StatBonuses_CompleteHealBuffBlocker_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_CompleteHealBuffBlocker_get")]
  public static extern bool StatBonuses_CompleteHealBuffBlocker_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Illusion_set")]
  public static extern void StatBonuses_Illusion_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Illusion_get")]
  public static extern int StatBonuses_Illusion_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_invisibility_set")]
  public static extern void StatBonuses_invisibility_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_invisibility_get")]
  public static extern byte StatBonuses_invisibility_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_invisibility_verse_undead_set")]
  public static extern void StatBonuses_invisibility_verse_undead_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_invisibility_verse_undead_get")]
  public static extern byte StatBonuses_invisibility_verse_undead_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_invisibility_verse_animal_set")]
  public static extern void StatBonuses_invisibility_verse_animal_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_invisibility_verse_animal_get")]
  public static extern byte StatBonuses_invisibility_verse_animal_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_TrapCircumvention_set")]
  public static extern void StatBonuses_TrapCircumvention_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_TrapCircumvention_get")]
  public static extern int StatBonuses_TrapCircumvention_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SecondaryForte_set")]
  public static extern void StatBonuses_SecondaryForte_set(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SecondaryForte_get")]
  public static extern ushort StatBonuses_SecondaryForte_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ShieldDuration_set")]
  public static extern void StatBonuses_ShieldDuration_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ShieldDuration_get")]
  public static extern int StatBonuses_ShieldDuration_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ExtendedShielding_set")]
  public static extern void StatBonuses_ExtendedShielding_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ExtendedShielding_get")]
  public static extern int StatBonuses_ExtendedShielding_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Packrat_set")]
  public static extern void StatBonuses_Packrat_set(global::System.Runtime.InteropServices.HandleRef jarg1, sbyte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Packrat_get")]
  public static extern sbyte StatBonuses_Packrat_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_BuffSlotIncrease_set")]
  public static extern void StatBonuses_BuffSlotIncrease_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_BuffSlotIncrease_get")]
  public static extern byte StatBonuses_BuffSlotIncrease_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DelayDeath_set")]
  public static extern void StatBonuses_DelayDeath_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DelayDeath_get")]
  public static extern uint StatBonuses_DelayDeath_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_BaseMovementSpeed_set")]
  public static extern void StatBonuses_BaseMovementSpeed_set(global::System.Runtime.InteropServices.HandleRef jarg1, sbyte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_BaseMovementSpeed_get")]
  public static extern sbyte StatBonuses_BaseMovementSpeed_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_IncreaseRunSpeedCap_set")]
  public static extern void StatBonuses_IncreaseRunSpeedCap_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_IncreaseRunSpeedCap_get")]
  public static extern byte StatBonuses_IncreaseRunSpeedCap_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DoubleSpecialAttack_set")]
  public static extern void StatBonuses_DoubleSpecialAttack_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DoubleSpecialAttack_get")]
  public static extern int StatBonuses_DoubleSpecialAttack_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SkillAttackProc_set")]
  public static extern void StatBonuses_SkillAttackProc_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SkillAttackProc_get")]
  public static extern global::System.IntPtr StatBonuses_SkillAttackProc_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HasSkillAttackProc_set")]
  public static extern void StatBonuses_HasSkillAttackProc_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HasSkillAttackProc_get")]
  public static extern global::System.IntPtr StatBonuses_HasSkillAttackProc_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_FrontalStunResist_set")]
  public static extern void StatBonuses_FrontalStunResist_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_FrontalStunResist_get")]
  public static extern byte StatBonuses_FrontalStunResist_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_BindWound_set")]
  public static extern void StatBonuses_BindWound_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_BindWound_get")]
  public static extern int StatBonuses_BindWound_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_MaxBindWound_set")]
  public static extern void StatBonuses_MaxBindWound_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_MaxBindWound_get")]
  public static extern int StatBonuses_MaxBindWound_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ChannelChanceSpells_set")]
  public static extern void StatBonuses_ChannelChanceSpells_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ChannelChanceSpells_get")]
  public static extern int StatBonuses_ChannelChanceSpells_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ChannelChanceItems_set")]
  public static extern void StatBonuses_ChannelChanceItems_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ChannelChanceItems_get")]
  public static extern int StatBonuses_ChannelChanceItems_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SeeInvis_set")]
  public static extern void StatBonuses_SeeInvis_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SeeInvis_get")]
  public static extern byte StatBonuses_SeeInvis_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_TripleBackstab_set")]
  public static extern void StatBonuses_TripleBackstab_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_TripleBackstab_get")]
  public static extern byte StatBonuses_TripleBackstab_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_FrontalBackstabMinDmg_set")]
  public static extern void StatBonuses_FrontalBackstabMinDmg_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_FrontalBackstabMinDmg_get")]
  public static extern bool StatBonuses_FrontalBackstabMinDmg_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_FrontalBackstabChance_set")]
  public static extern void StatBonuses_FrontalBackstabChance_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_FrontalBackstabChance_get")]
  public static extern byte StatBonuses_FrontalBackstabChance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ConsumeProjectile_set")]
  public static extern void StatBonuses_ConsumeProjectile_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ConsumeProjectile_get")]
  public static extern byte StatBonuses_ConsumeProjectile_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ForageAdditionalItems_set")]
  public static extern void StatBonuses_ForageAdditionalItems_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ForageAdditionalItems_get")]
  public static extern byte StatBonuses_ForageAdditionalItems_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SalvageChance_set")]
  public static extern void StatBonuses_SalvageChance_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SalvageChance_get")]
  public static extern byte StatBonuses_SalvageChance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ArcheryDamageModifier_set")]
  public static extern void StatBonuses_ArcheryDamageModifier_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ArcheryDamageModifier_get")]
  public static extern uint StatBonuses_ArcheryDamageModifier_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SecondaryDmgInc_set")]
  public static extern void StatBonuses_SecondaryDmgInc_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SecondaryDmgInc_get")]
  public static extern bool StatBonuses_SecondaryDmgInc_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_GiveDoubleAttack_set")]
  public static extern void StatBonuses_GiveDoubleAttack_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_GiveDoubleAttack_get")]
  public static extern uint StatBonuses_GiveDoubleAttack_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SlayUndead_set")]
  public static extern void StatBonuses_SlayUndead_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SlayUndead_get")]
  public static extern global::System.IntPtr StatBonuses_SlayUndead_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_PetCriticalHit_set")]
  public static extern void StatBonuses_PetCriticalHit_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_PetCriticalHit_get")]
  public static extern int StatBonuses_PetCriticalHit_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_PetAvoidance_set")]
  public static extern void StatBonuses_PetAvoidance_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_PetAvoidance_get")]
  public static extern int StatBonuses_PetAvoidance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_CombatStability_set")]
  public static extern void StatBonuses_CombatStability_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_CombatStability_get")]
  public static extern int StatBonuses_CombatStability_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DoubleRiposte_set")]
  public static extern void StatBonuses_DoubleRiposte_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_DoubleRiposte_get")]
  public static extern int StatBonuses_DoubleRiposte_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_GiveDoubleRiposte_set")]
  public static extern void StatBonuses_GiveDoubleRiposte_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_GiveDoubleRiposte_get")]
  public static extern global::System.IntPtr StatBonuses_GiveDoubleRiposte_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_RaiseSkillCap_set")]
  public static extern void StatBonuses_RaiseSkillCap_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_RaiseSkillCap_get")]
  public static extern global::System.IntPtr StatBonuses_RaiseSkillCap_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Ambidexterity_set")]
  public static extern void StatBonuses_Ambidexterity_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Ambidexterity_get")]
  public static extern int StatBonuses_Ambidexterity_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_PetMaxHP_set")]
  public static extern void StatBonuses_PetMaxHP_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_PetMaxHP_get")]
  public static extern int StatBonuses_PetMaxHP_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_PetFlurry_set")]
  public static extern void StatBonuses_PetFlurry_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_PetFlurry_get")]
  public static extern int StatBonuses_PetFlurry_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_MasteryofPast_set")]
  public static extern void StatBonuses_MasteryofPast_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_MasteryofPast_get")]
  public static extern byte StatBonuses_MasteryofPast_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_GivePetGroupTarget_set")]
  public static extern void StatBonuses_GivePetGroupTarget_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_GivePetGroupTarget_get")]
  public static extern bool StatBonuses_GivePetGroupTarget_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_RootBreakChance_set")]
  public static extern void StatBonuses_RootBreakChance_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_RootBreakChance_get")]
  public static extern int StatBonuses_RootBreakChance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_UnfailingDivinity_set")]
  public static extern void StatBonuses_UnfailingDivinity_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_UnfailingDivinity_get")]
  public static extern int StatBonuses_UnfailingDivinity_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ItemHPRegenCap_set")]
  public static extern void StatBonuses_ItemHPRegenCap_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ItemHPRegenCap_get")]
  public static extern int StatBonuses_ItemHPRegenCap_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SEResist_set")]
  public static extern void StatBonuses_SEResist_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_SEResist_get")]
  public static extern global::System.IntPtr StatBonuses_SEResist_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_OffhandRiposteFail_set")]
  public static extern void StatBonuses_OffhandRiposteFail_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_OffhandRiposteFail_get")]
  public static extern int StatBonuses_OffhandRiposteFail_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ItemATKCap_set")]
  public static extern void StatBonuses_ItemATKCap_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ItemATKCap_get")]
  public static extern int StatBonuses_ItemATKCap_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_FinishingBlow_set")]
  public static extern void StatBonuses_FinishingBlow_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_FinishingBlow_get")]
  public static extern global::System.IntPtr StatBonuses_FinishingBlow_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_FinishingBlowLvl_set")]
  public static extern void StatBonuses_FinishingBlowLvl_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_FinishingBlowLvl_get")]
  public static extern global::System.IntPtr StatBonuses_FinishingBlowLvl_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ShieldEquipDmgMod_set")]
  public static extern void StatBonuses_ShieldEquipDmgMod_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ShieldEquipDmgMod_get")]
  public static extern int StatBonuses_ShieldEquipDmgMod_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_TriggerOnCastRequirement_set")]
  public static extern void StatBonuses_TriggerOnCastRequirement_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_TriggerOnCastRequirement_get")]
  public static extern bool StatBonuses_TriggerOnCastRequirement_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_StunBashChance_set")]
  public static extern void StatBonuses_StunBashChance_set(global::System.Runtime.InteropServices.HandleRef jarg1, sbyte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_StunBashChance_get")]
  public static extern sbyte StatBonuses_StunBashChance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_IncreaseChanceMemwipe_set")]
  public static extern void StatBonuses_IncreaseChanceMemwipe_set(global::System.Runtime.InteropServices.HandleRef jarg1, sbyte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_IncreaseChanceMemwipe_get")]
  public static extern sbyte StatBonuses_IncreaseChanceMemwipe_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_CriticalMend_set")]
  public static extern void StatBonuses_CriticalMend_set(global::System.Runtime.InteropServices.HandleRef jarg1, sbyte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_CriticalMend_get")]
  public static extern sbyte StatBonuses_CriticalMend_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ImprovedReclaimEnergy_set")]
  public static extern void StatBonuses_ImprovedReclaimEnergy_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ImprovedReclaimEnergy_get")]
  public static extern int StatBonuses_ImprovedReclaimEnergy_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HeadShot_set")]
  public static extern void StatBonuses_HeadShot_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HeadShot_get")]
  public static extern global::System.IntPtr StatBonuses_HeadShot_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HSLevel_set")]
  public static extern void StatBonuses_HSLevel_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_HSLevel_get")]
  public static extern global::System.IntPtr StatBonuses_HSLevel_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Assassinate_set")]
  public static extern void StatBonuses_Assassinate_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_Assassinate_get")]
  public static extern global::System.IntPtr StatBonuses_Assassinate_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_AssassinateLevel_set")]
  public static extern void StatBonuses_AssassinateLevel_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_AssassinateLevel_get")]
  public static extern global::System.IntPtr StatBonuses_AssassinateLevel_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_PetMeleeMitigation_set")]
  public static extern void StatBonuses_PetMeleeMitigation_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_PetMeleeMitigation_get")]
  public static extern int StatBonuses_PetMeleeMitigation_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_IllusionPersistence_set")]
  public static extern void StatBonuses_IllusionPersistence_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_IllusionPersistence_get")]
  public static extern int StatBonuses_IllusionPersistence_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_extra_xtargets_set")]
  public static extern void StatBonuses_extra_xtargets_set(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_extra_xtargets_get")]
  public static extern ushort StatBonuses_extra_xtargets_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ShroudofStealth_set")]
  public static extern void StatBonuses_ShroudofStealth_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ShroudofStealth_get")]
  public static extern bool StatBonuses_ShroudofStealth_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ReduceFallDamage_set")]
  public static extern void StatBonuses_ReduceFallDamage_set(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ReduceFallDamage_get")]
  public static extern ushort StatBonuses_ReduceFallDamage_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ReduceTradeskillFail_set")]
  public static extern void StatBonuses_ReduceTradeskillFail_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_ReduceTradeskillFail_get")]
  public static extern global::System.IntPtr StatBonuses_ReduceTradeskillFail_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_TradeSkillMastery_set")]
  public static extern void StatBonuses_TradeSkillMastery_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_TradeSkillMastery_get")]
  public static extern byte StatBonuses_TradeSkillMastery_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_NoBreakAESneak_set")]
  public static extern void StatBonuses_NoBreakAESneak_set(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_NoBreakAESneak_get")]
  public static extern short StatBonuses_NoBreakAESneak_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_FeignedCastOnChance_set")]
  public static extern void StatBonuses_FeignedCastOnChance_set(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_FeignedCastOnChance_get")]
  public static extern short StatBonuses_FeignedCastOnChance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_PetCommands_set")]
  public static extern void StatBonuses_PetCommands_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_PetCommands_get")]
  public static extern global::System.IntPtr StatBonuses_PetCommands_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_FeignedMinionChance_set")]
  public static extern void StatBonuses_FeignedMinionChance_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_FeignedMinionChance_get")]
  public static extern int StatBonuses_FeignedMinionChance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_GrantForage_set")]
  public static extern void StatBonuses_GrantForage_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_GrantForage_get")]
  public static extern int StatBonuses_GrantForage_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_aura_slots_set")]
  public static extern void StatBonuses_aura_slots_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_aura_slots_get")]
  public static extern int StatBonuses_aura_slots_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_trap_slots_set")]
  public static extern void StatBonuses_trap_slots_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_trap_slots_get")]
  public static extern int StatBonuses_trap_slots_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_hunger_set")]
  public static extern void StatBonuses_hunger_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_hunger_get")]
  public static extern bool StatBonuses_hunger_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_heroic_max_hp_set")]
  public static extern void StatBonuses_heroic_max_hp_set(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_heroic_max_hp_get")]
  public static extern long StatBonuses_heroic_max_hp_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_heroic_max_mana_set")]
  public static extern void StatBonuses_heroic_max_mana_set(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_heroic_max_mana_get")]
  public static extern long StatBonuses_heroic_max_mana_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_heroic_max_end_set")]
  public static extern void StatBonuses_heroic_max_end_set(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_heroic_max_end_get")]
  public static extern long StatBonuses_heroic_max_end_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_heroic_hp_regen_set")]
  public static extern void StatBonuses_heroic_hp_regen_set(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_heroic_hp_regen_get")]
  public static extern long StatBonuses_heroic_hp_regen_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_heroic_mana_regen_set")]
  public static extern void StatBonuses_heroic_mana_regen_set(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_heroic_mana_regen_get")]
  public static extern long StatBonuses_heroic_mana_regen_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_heroic_end_regen_set")]
  public static extern void StatBonuses_heroic_end_regen_set(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_heroic_end_regen_get")]
  public static extern long StatBonuses_heroic_end_regen_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_heroic_str_shield_ac_set")]
  public static extern void StatBonuses_heroic_str_shield_ac_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_heroic_str_shield_ac_get")]
  public static extern int StatBonuses_heroic_str_shield_ac_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_heroic_str_melee_damage_set")]
  public static extern void StatBonuses_heroic_str_melee_damage_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_heroic_str_melee_damage_get")]
  public static extern int StatBonuses_heroic_str_melee_damage_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_heroic_agi_avoidance_set")]
  public static extern void StatBonuses_heroic_agi_avoidance_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_heroic_agi_avoidance_get")]
  public static extern int StatBonuses_heroic_agi_avoidance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_heroic_dex_ranged_damage_set")]
  public static extern void StatBonuses_heroic_dex_ranged_damage_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_StatBonuses_heroic_dex_ranged_damage_get")]
  public static extern int StatBonuses_heroic_dex_ranged_damage_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_StatBonuses")]
  public static extern global::System.IntPtr new_StatBonuses();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_StatBonuses")]
  public static extern void delete_StatBonuses(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_BUFFSTACKER_EXISTS_get")]
  public static extern ushort BUFFSTACKER_EXISTS_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_BUFFSTACKER_VALUE_get")]
  public static extern ushort BUFFSTACKER_VALUE_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EXTRA_ATTACK_CHANCE_get")]
  public static extern ushort EXTRA_ATTACK_CHANCE_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EXTRA_ATTACK_NUM_ATKS_get")]
  public static extern ushort EXTRA_ATTACK_NUM_ATKS_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DIVINE_SAVE_CHANCE_get")]
  public static extern ushort DIVINE_SAVE_CHANCE_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DIVINE_SAVE_SPELL_TRIGGER_ID_get")]
  public static extern ushort DIVINE_SAVE_SPELL_TRIGGER_ID_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DEATH_SAVE_TYPE_get")]
  public static extern ushort DEATH_SAVE_TYPE_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DEATH_SAVE_BUFFSLOT_get")]
  public static extern ushort DEATH_SAVE_BUFFSLOT_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DEATH_SAVE_MIN_LEVEL_FOR_HEAL_get")]
  public static extern ushort DEATH_SAVE_MIN_LEVEL_FOR_HEAL_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DEATH_SAVE_HEAL_AMT_get")]
  public static extern ushort DEATH_SAVE_HEAL_AMT_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RESOURCE_PERCENT_CAP_get")]
  public static extern ushort RESOURCE_PERCENT_CAP_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RESOURCE_AMOUNT_CAP_get")]
  public static extern ushort RESOURCE_AMOUNT_CAP_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NEGATE_ATK_EXISTS_get")]
  public static extern ushort NEGATE_ATK_EXISTS_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NEGATE_ATK_BUFFSLOT_get")]
  public static extern ushort NEGATE_ATK_BUFFSLOT_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NEGATE_ATK_MAX_DMG_ABSORB_PER_HIT_get")]
  public static extern ushort NEGATE_ATK_MAX_DMG_ABSORB_PER_HIT_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MITIGATION_RUNE_PERCENT_get")]
  public static extern ushort MITIGATION_RUNE_PERCENT_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MITIGATION_RUNE_BUFFSLOT_get")]
  public static extern ushort MITIGATION_RUNE_BUFFSLOT_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MITIGATION_RUNE_MAX_DMG_ABSORB_PER_HIT_get")]
  public static extern ushort MITIGATION_RUNE_MAX_DMG_ABSORB_PER_HIT_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MITIGATION_RUNE_MAX_HP_AMT_get")]
  public static extern ushort MITIGATION_RUNE_MAX_HP_AMT_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_THRESHOLDGUARD_MITIGATION_PERCENT_get")]
  public static extern ushort THRESHOLDGUARD_MITIGATION_PERCENT_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_THRESHOLDGUARD_BUFFSLOT_get")]
  public static extern ushort THRESHOLDGUARD_BUFFSLOT_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_THRESHOLDGUARD_MIN_DMG_TO_TRIGGER_get")]
  public static extern ushort THRESHOLDGUARD_MIN_DMG_TO_TRIGGER_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ENDURANCE_ABSORD_MITIGIATION_get")]
  public static extern ushort ENDURANCE_ABSORD_MITIGIATION_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ENDURANCE_ABSORD_DRAIN_PER_HP_get")]
  public static extern ushort ENDURANCE_ABSORD_DRAIN_PER_HP_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IMPROVED_TAUNT_MAX_LVL_get")]
  public static extern ushort IMPROVED_TAUNT_MAX_LVL_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IMPROVED_TAUNT_AGGRO_MOD_get")]
  public static extern ushort IMPROVED_TAUNT_AGGRO_MOD_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IMPROVED_TAUNT_BUFFSLOT_get")]
  public static extern ushort IMPROVED_TAUNT_BUFFSLOT_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ROOT_EXISTS_get")]
  public static extern ushort ROOT_EXISTS_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ROOT_BUFFSLOT_get")]
  public static extern ushort ROOT_BUFFSLOT_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RUNE_AMOUNT_get")]
  public static extern ushort RUNE_AMOUNT_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RUNE_BUFFSLOT_get")]
  public static extern ushort RUNE_BUFFSLOT_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_POSITION_BACK_get")]
  public static extern ushort POSITION_BACK_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_POSITION_FRONT_get")]
  public static extern ushort POSITION_FRONT_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_RAMPAGE_CHANCE_get")]
  public static extern ushort PET_RAMPAGE_CHANCE_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PET_RAMPAGE_DMG_MOD_get")]
  public static extern ushort PET_RAMPAGE_DMG_MOD_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SKILLATK_PROC_SPELL_ID_get")]
  public static extern ushort SKILLATK_PROC_SPELL_ID_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SKILLATK_PROC_CHANCE_get")]
  public static extern ushort SKILLATK_PROC_CHANCE_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SKILLATK_PROC_SKILL_get")]
  public static extern ushort SKILLATK_PROC_SKILL_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SLAYUNDEAD_RATE_MOD_get")]
  public static extern ushort SLAYUNDEAD_RATE_MOD_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SLAYUNDEAD_DMG_MOD_get")]
  public static extern ushort SLAYUNDEAD_DMG_MOD_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DOUBLE_RIPOSTE_CHANCE_get")]
  public static extern ushort DOUBLE_RIPOSTE_CHANCE_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DOUBLE_RIPOSTE_SKILL_ATK_CHANCE_get")]
  public static extern ushort DOUBLE_RIPOSTE_SKILL_ATK_CHANCE_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DOUBLE_RIPOSTE_SKILL_get")]
  public static extern ushort DOUBLE_RIPOSTE_SKILL_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_FINISHING_EFFECT_PROC_CHANCE_get")]
  public static extern ushort FINISHING_EFFECT_PROC_CHANCE_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_FINISHING_EFFECT_DMG_get")]
  public static extern ushort FINISHING_EFFECT_DMG_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_FINISHING_EFFECT_LEVEL_MAX_get")]
  public static extern ushort FINISHING_EFFECT_LEVEL_MAX_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_FINISHING_EFFECT_LEVEL_CHANCE_BONUS_get")]
  public static extern ushort FINISHING_EFFECT_LEVEL_CHANCE_BONUS_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_FINISHING_BLOW_LEVEL_HP_RATIO_get")]
  public static extern ushort FINISHING_BLOW_LEVEL_HP_RATIO_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DOUBLE_MELEE_ROUND_CHANCE_get")]
  public static extern ushort DOUBLE_MELEE_ROUND_CHANCE_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DOUBLE_MELEE_ROUND_DMG_BONUS_get")]
  public static extern ushort DOUBLE_MELEE_ROUND_DMG_BONUS_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_REFLECT_CHANCE_get")]
  public static extern ushort REFLECT_CHANCE_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_REFLECT_RESISTANCE_MOD_get")]
  public static extern ushort REFLECT_RESISTANCE_MOD_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_REFLECT_DMG_EFFECTIVENESS_get")]
  public static extern ushort REFLECT_DMG_EFFECTIVENESS_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_COMBAT_PROC_ORIGIN_ID_get")]
  public static extern ushort COMBAT_PROC_ORIGIN_ID_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_COMBAT_PROC_SPELL_ID_get")]
  public static extern ushort COMBAT_PROC_SPELL_ID_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_COMBAT_PROC_RATE_MOD_get")]
  public static extern ushort COMBAT_PROC_RATE_MOD_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_COMBAT_PROC_REUSE_TIMER_get")]
  public static extern ushort COMBAT_PROC_REUSE_TIMER_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_tProc_spellID_set")]
  public static extern void tProc_spellID_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_tProc_spellID_get")]
  public static extern int tProc_spellID_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_tProc_chance_set")]
  public static extern void tProc_chance_set(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_tProc_chance_get")]
  public static extern ushort tProc_chance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_tProc_base_spellID_set")]
  public static extern void tProc_base_spellID_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_tProc_base_spellID_get")]
  public static extern int tProc_base_spellID_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_tProc_level_override_set")]
  public static extern void tProc_level_override_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_tProc_level_override_get")]
  public static extern int tProc_level_override_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_tProc_proc_reuse_time_set")]
  public static extern void tProc_proc_reuse_time_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_tProc_proc_reuse_time_get")]
  public static extern uint tProc_proc_reuse_time_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_tProc")]
  public static extern global::System.IntPtr new_tProc();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_tProc")]
  public static extern void delete_tProc(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_WeaponStance_Struct_enabled_set")]
  public static extern void WeaponStance_Struct_enabled_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_WeaponStance_Struct_enabled_get")]
  public static extern bool WeaponStance_Struct_enabled_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_WeaponStance_Struct_spellbonus_enabled_set")]
  public static extern void WeaponStance_Struct_spellbonus_enabled_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_WeaponStance_Struct_spellbonus_enabled_get")]
  public static extern bool WeaponStance_Struct_spellbonus_enabled_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_WeaponStance_Struct_itembonus_enabled_set")]
  public static extern void WeaponStance_Struct_itembonus_enabled_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_WeaponStance_Struct_itembonus_enabled_get")]
  public static extern bool WeaponStance_Struct_itembonus_enabled_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_WeaponStance_Struct_aabonus_enabled_set")]
  public static extern void WeaponStance_Struct_aabonus_enabled_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_WeaponStance_Struct_aabonus_enabled_get")]
  public static extern bool WeaponStance_Struct_aabonus_enabled_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_WeaponStance_Struct_spellbonus_buff_spell_id_set")]
  public static extern void WeaponStance_Struct_spellbonus_buff_spell_id_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_WeaponStance_Struct_spellbonus_buff_spell_id_get")]
  public static extern int WeaponStance_Struct_spellbonus_buff_spell_id_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_WeaponStance_Struct_itembonus_buff_spell_id_set")]
  public static extern void WeaponStance_Struct_itembonus_buff_spell_id_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_WeaponStance_Struct_itembonus_buff_spell_id_get")]
  public static extern int WeaponStance_Struct_itembonus_buff_spell_id_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_WeaponStance_Struct_aabonus_buff_spell_id_set")]
  public static extern void WeaponStance_Struct_aabonus_buff_spell_id_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_WeaponStance_Struct_aabonus_buff_spell_id_get")]
  public static extern int WeaponStance_Struct_aabonus_buff_spell_id_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_WeaponStance_Struct")]
  public static extern global::System.IntPtr new_WeaponStance_Struct();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_WeaponStance_Struct")]
  public static extern void delete_WeaponStance_Struct(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_WEAPON_STANCE_TYPE_2H_get")]
  public static extern ushort WEAPON_STANCE_TYPE_2H_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_WEAPON_STANCE_TYPE_SHIELD_get")]
  public static extern ushort WEAPON_STANCE_TYPE_SHIELD_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_WEAPON_STANCE_TYPE_DUAL_WIELD_get")]
  public static extern ushort WEAPON_STANCE_TYPE_DUAL_WIELD_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_tProjatk_increment_set")]
  public static extern void tProjatk_increment_set(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_tProjatk_increment_get")]
  public static extern ushort tProjatk_increment_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_tProjatk_hit_increment_set")]
  public static extern void tProjatk_hit_increment_set(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_tProjatk_hit_increment_get")]
  public static extern ushort tProjatk_hit_increment_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_tProjatk_target_id_set")]
  public static extern void tProjatk_target_id_set(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_tProjatk_target_id_get")]
  public static extern ushort tProjatk_target_id_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_tProjatk_wpn_dmg_set")]
  public static extern void tProjatk_wpn_dmg_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_tProjatk_wpn_dmg_get")]
  public static extern int tProjatk_wpn_dmg_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_tProjatk_origin_x_set")]
  public static extern void tProjatk_origin_x_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_tProjatk_origin_x_get")]
  public static extern float tProjatk_origin_x_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_tProjatk_origin_y_set")]
  public static extern void tProjatk_origin_y_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_tProjatk_origin_y_get")]
  public static extern float tProjatk_origin_y_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_tProjatk_origin_z_set")]
  public static extern void tProjatk_origin_z_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_tProjatk_origin_z_get")]
  public static extern float tProjatk_origin_z_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_tProjatk_tlast_x_set")]
  public static extern void tProjatk_tlast_x_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_tProjatk_tlast_x_get")]
  public static extern float tProjatk_tlast_x_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_tProjatk_tlast_y_set")]
  public static extern void tProjatk_tlast_y_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_tProjatk_tlast_y_get")]
  public static extern float tProjatk_tlast_y_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_tProjatk_ranged_id_set")]
  public static extern void tProjatk_ranged_id_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_tProjatk_ranged_id_get")]
  public static extern uint tProjatk_ranged_id_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_tProjatk_ammo_id_set")]
  public static extern void tProjatk_ammo_id_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_tProjatk_ammo_id_get")]
  public static extern uint tProjatk_ammo_id_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_tProjatk_ammo_slot_set")]
  public static extern void tProjatk_ammo_slot_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_tProjatk_ammo_slot_get")]
  public static extern int tProjatk_ammo_slot_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_tProjatk_skill_set")]
  public static extern void tProjatk_skill_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_tProjatk_skill_get")]
  public static extern byte tProjatk_skill_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_tProjatk_speed_mod_set")]
  public static extern void tProjatk_speed_mod_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_tProjatk_speed_mod_get")]
  public static extern float tProjatk_speed_mod_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_tProjatk_disable_procs_set")]
  public static extern void tProjatk_disable_procs_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_tProjatk_disable_procs_get")]
  public static extern bool tProjatk_disable_procs_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_tProjatk")]
  public static extern global::System.IntPtr new_tProjatk();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_tProjatk")]
  public static extern void delete_tProjatk(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_animKick_get")]
  public static extern int animKick_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_anim1HPiercing_get")]
  public static extern int anim1HPiercing_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_anim2HSlashing_get")]
  public static extern int anim2HSlashing_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_anim2HWeapon_get")]
  public static extern int anim2HWeapon_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_anim1HWeapon_get")]
  public static extern int anim1HWeapon_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_animDualWield_get")]
  public static extern int animDualWield_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_animTailRake_get")]
  public static extern int animTailRake_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_animHand2Hand_get")]
  public static extern int animHand2Hand_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_animShootBow_get")]
  public static extern int animShootBow_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_animRoundKick_get")]
  public static extern int animRoundKick_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_animSwarmAttack_get")]
  public static extern int animSwarmAttack_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_animFlyingKick_get")]
  public static extern int animFlyingKick_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_animTigerClaw_get")]
  public static extern int animTigerClaw_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_animEagleStrike_get")]
  public static extern int animEagleStrike_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SKILLUP_UNKNOWN_get")]
  public static extern int SKILLUP_UNKNOWN_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SKILLUP_SUCCESS_get")]
  public static extern int SKILLUP_SUCCESS_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SKILLUP_FAILURE_get")]
  public static extern int SKILLUP_FAILURE_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_GridCircular_get")]
  public static extern int GridCircular_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_GridRandom10_get")]
  public static extern int GridRandom10_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_GridRandom_get")]
  public static extern int GridRandom_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_GridPatrol_get")]
  public static extern int GridPatrol_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_GridOneWayRepop_get")]
  public static extern int GridOneWayRepop_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_GridRand5LoS_get")]
  public static extern int GridRand5LoS_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_GridOneWayDepop_get")]
  public static extern int GridOneWayDepop_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_GridCenterPoint_get")]
  public static extern int GridCenterPoint_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_GridRandomCenterPoint_get")]
  public static extern int GridRandomCenterPoint_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_GridRandomPath_get")]
  public static extern int GridRandomPath_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercType_Type_set")]
  public static extern void MercType_Type_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercType_Type_get")]
  public static extern uint MercType_Type_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercType_ClientVersion_set")]
  public static extern void MercType_ClientVersion_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercType_ClientVersion_get")]
  public static extern uint MercType_ClientVersion_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_MercType")]
  public static extern global::System.IntPtr new_MercType();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_MercType")]
  public static extern void delete_MercType(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercData_MercTemplateID_set")]
  public static extern void MercData_MercTemplateID_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercData_MercTemplateID_get")]
  public static extern uint MercData_MercTemplateID_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercData_MercType_set")]
  public static extern void MercData_MercType_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercData_MercType_get")]
  public static extern uint MercData_MercType_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercData_MercSubType_set")]
  public static extern void MercData_MercSubType_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercData_MercSubType_get")]
  public static extern uint MercData_MercSubType_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercData_CostFormula_set")]
  public static extern void MercData_CostFormula_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercData_CostFormula_get")]
  public static extern uint MercData_CostFormula_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercData_ClientVersion_set")]
  public static extern void MercData_ClientVersion_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercData_ClientVersion_get")]
  public static extern uint MercData_ClientVersion_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercData_NPCID_set")]
  public static extern void MercData_NPCID_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercData_NPCID_get")]
  public static extern uint MercData_NPCID_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_MercData")]
  public static extern global::System.IntPtr new_MercData();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_MercData")]
  public static extern void delete_MercData(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Trade")]
  public static extern global::System.IntPtr new_Trade(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_Trade")]
  public static extern void delete_Trade(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trade_Reset")]
  public static extern void Trade_Reset(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trade_Start__SWIG_0")]
  public static extern void Trade_Start__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trade_Start__SWIG_1")]
  public static extern void Trade_Start__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trade_With")]
  public static extern global::System.IntPtr Trade_With(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trade_AddEntity")]
  public static extern void Trade_AddEntity(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trade_state_set")]
  public static extern void Trade_state_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trade_state_get")]
  public static extern int Trade_state_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trade_pp_set")]
  public static extern void Trade_pp_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trade_pp_get")]
  public static extern int Trade_pp_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trade_gp_set")]
  public static extern void Trade_gp_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trade_gp_get")]
  public static extern int Trade_gp_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trade_sp_set")]
  public static extern void Trade_sp_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trade_sp_get")]
  public static extern int Trade_sp_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trade_cp_set")]
  public static extern void Trade_cp_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trade_cp_get")]
  public static extern int Trade_cp_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trade_GetOwner")]
  public static extern global::System.IntPtr Trade_GetOwner(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_ExtraAttackOptions")]
  public static extern global::System.IntPtr new_ExtraAttackOptions();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExtraAttackOptions_damage_percent_set")]
  public static extern void ExtraAttackOptions_damage_percent_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExtraAttackOptions_damage_percent_get")]
  public static extern float ExtraAttackOptions_damage_percent_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExtraAttackOptions_damage_flat_set")]
  public static extern void ExtraAttackOptions_damage_flat_set(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExtraAttackOptions_damage_flat_get")]
  public static extern long ExtraAttackOptions_damage_flat_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExtraAttackOptions_armor_pen_percent_set")]
  public static extern void ExtraAttackOptions_armor_pen_percent_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExtraAttackOptions_armor_pen_percent_get")]
  public static extern float ExtraAttackOptions_armor_pen_percent_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExtraAttackOptions_armor_pen_flat_set")]
  public static extern void ExtraAttackOptions_armor_pen_flat_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExtraAttackOptions_armor_pen_flat_get")]
  public static extern int ExtraAttackOptions_armor_pen_flat_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExtraAttackOptions_crit_percent_set")]
  public static extern void ExtraAttackOptions_crit_percent_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExtraAttackOptions_crit_percent_get")]
  public static extern float ExtraAttackOptions_crit_percent_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExtraAttackOptions_crit_flat_set")]
  public static extern void ExtraAttackOptions_crit_flat_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExtraAttackOptions_crit_flat_get")]
  public static extern float ExtraAttackOptions_crit_flat_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExtraAttackOptions_hate_percent_set")]
  public static extern void ExtraAttackOptions_hate_percent_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExtraAttackOptions_hate_percent_get")]
  public static extern float ExtraAttackOptions_hate_percent_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExtraAttackOptions_hate_flat_set")]
  public static extern void ExtraAttackOptions_hate_flat_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExtraAttackOptions_hate_flat_get")]
  public static extern int ExtraAttackOptions_hate_flat_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExtraAttackOptions_hit_chance_set")]
  public static extern void ExtraAttackOptions_hit_chance_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExtraAttackOptions_hit_chance_get")]
  public static extern int ExtraAttackOptions_hit_chance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExtraAttackOptions_melee_damage_bonus_flat_set")]
  public static extern void ExtraAttackOptions_melee_damage_bonus_flat_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExtraAttackOptions_melee_damage_bonus_flat_get")]
  public static extern int ExtraAttackOptions_melee_damage_bonus_flat_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExtraAttackOptions_skilldmgtaken_bonus_flat_set")]
  public static extern void ExtraAttackOptions_skilldmgtaken_bonus_flat_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExtraAttackOptions_skilldmgtaken_bonus_flat_get")]
  public static extern int ExtraAttackOptions_skilldmgtaken_bonus_flat_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExtraAttackOptions_range_percent_set")]
  public static extern void ExtraAttackOptions_range_percent_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExtraAttackOptions_range_percent_get")]
  public static extern int ExtraAttackOptions_range_percent_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_ExtraAttackOptions")]
  public static extern void delete_ExtraAttackOptions(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DamageTable_max_extra_set")]
  public static extern void DamageTable_max_extra_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DamageTable_max_extra_get")]
  public static extern int DamageTable_max_extra_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DamageTable_chance_set")]
  public static extern void DamageTable_chance_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DamageTable_chance_get")]
  public static extern int DamageTable_chance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DamageTable_minusfactor_set")]
  public static extern void DamageTable_minusfactor_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DamageTable_minusfactor_get")]
  public static extern int DamageTable_minusfactor_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_DamageTable")]
  public static extern global::System.IntPtr new_DamageTable();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_DamageTable")]
  public static extern void delete_DamageTable(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DamageHitInfo_base_damage_set")]
  public static extern void DamageHitInfo_base_damage_set(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DamageHitInfo_base_damage_get")]
  public static extern long DamageHitInfo_base_damage_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DamageHitInfo_min_damage_set")]
  public static extern void DamageHitInfo_min_damage_set(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DamageHitInfo_min_damage_get")]
  public static extern long DamageHitInfo_min_damage_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DamageHitInfo_damage_done_set")]
  public static extern void DamageHitInfo_damage_done_set(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DamageHitInfo_damage_done_get")]
  public static extern long DamageHitInfo_damage_done_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DamageHitInfo_offense_set")]
  public static extern void DamageHitInfo_offense_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DamageHitInfo_offense_get")]
  public static extern int DamageHitInfo_offense_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DamageHitInfo_tohit_set")]
  public static extern void DamageHitInfo_tohit_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DamageHitInfo_tohit_get")]
  public static extern int DamageHitInfo_tohit_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DamageHitInfo_hand_set")]
  public static extern void DamageHitInfo_hand_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DamageHitInfo_hand_get")]
  public static extern int DamageHitInfo_hand_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DamageHitInfo_skill_set")]
  public static extern void DamageHitInfo_skill_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DamageHitInfo_skill_get")]
  public static extern global::System.IntPtr DamageHitInfo_skill_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_DamageHitInfo")]
  public static extern global::System.IntPtr new_DamageHitInfo();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_DamageHitInfo")]
  public static extern void delete_DamageHitInfo(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExpeditionInvite_expedition_id_set")]
  public static extern void ExpeditionInvite_expedition_id_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExpeditionInvite_expedition_id_get")]
  public static extern uint ExpeditionInvite_expedition_id_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExpeditionInvite_inviter_name_set")]
  public static extern void ExpeditionInvite_inviter_name_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExpeditionInvite_inviter_name_get")]
  public static extern global::System.IntPtr ExpeditionInvite_inviter_name_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExpeditionInvite_swap_remove_name_set")]
  public static extern void ExpeditionInvite_swap_remove_name_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ExpeditionInvite_swap_remove_name_get")]
  public static extern global::System.IntPtr ExpeditionInvite_swap_remove_name_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_ExpeditionInvite")]
  public static extern global::System.IntPtr new_ExpeditionInvite();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_ExpeditionInvite")]
  public static extern void delete_ExpeditionInvite(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DataBucketCache_bucket_id_set")]
  public static extern void DataBucketCache_bucket_id_set(global::System.Runtime.InteropServices.HandleRef jarg1, ulong jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DataBucketCache_bucket_id_get")]
  public static extern ulong DataBucketCache_bucket_id_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DataBucketCache_bucket_key_set")]
  public static extern void DataBucketCache_bucket_key_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DataBucketCache_bucket_key_get")]
  public static extern global::System.IntPtr DataBucketCache_bucket_key_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DataBucketCache_bucket_value_set")]
  public static extern void DataBucketCache_bucket_value_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DataBucketCache_bucket_value_get")]
  public static extern global::System.IntPtr DataBucketCache_bucket_value_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DataBucketCache_bucket_expires_set")]
  public static extern void DataBucketCache_bucket_expires_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DataBucketCache_bucket_expires_get")]
  public static extern uint DataBucketCache_bucket_expires_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_DataBucketCache")]
  public static extern global::System.IntPtr new_DataBucketCache();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_DataBucketCache")]
  public static extern void delete_DataBucketCache(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_entity_list_set")]
  public static extern void entity_list_set(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_entity_list_get")]
  public static extern global::System.IntPtr entity_list_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Entity")]
  public static extern global::System.IntPtr new_Entity();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_Entity")]
  public static extern void delete_Entity(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Entity_IsClient")]
  public static extern bool Entity_IsClient(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Entity_IsNPC")]
  public static extern bool Entity_IsNPC(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Entity_IsMob")]
  public static extern bool Entity_IsMob(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Entity_IsMerc")]
  public static extern bool Entity_IsMerc(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Entity_IsCorpse")]
  public static extern bool Entity_IsCorpse(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Entity_IsPlayerCorpse")]
  public static extern bool Entity_IsPlayerCorpse(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Entity_IsNPCCorpse")]
  public static extern bool Entity_IsNPCCorpse(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Entity_IsObject")]
  public static extern bool Entity_IsObject(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Entity_IsDoor")]
  public static extern bool Entity_IsDoor(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Entity_IsTrap")]
  public static extern bool Entity_IsTrap(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Entity_IsBeacon")]
  public static extern bool Entity_IsBeacon(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Entity_IsEncounter")]
  public static extern bool Entity_IsEncounter(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Entity_IsBot")]
  public static extern bool Entity_IsBot(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Entity_IsAura")]
  public static extern bool Entity_IsAura(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Entity_IsOfClientBot")]
  public static extern bool Entity_IsOfClientBot(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Entity_IsOfClientBotMerc")]
  public static extern bool Entity_IsOfClientBotMerc(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Entity_Process")]
  public static extern bool Entity_Process(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Entity_Save")]
  public static extern bool Entity_Save(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Entity_Depop__SWIG_0")]
  public static extern void Entity_Depop__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Entity_Depop__SWIG_1")]
  public static extern void Entity_Depop__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Entity_CastToClient__SWIG_0")]
  public static extern global::System.IntPtr Entity_CastToClient__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Entity_CastToNPC__SWIG_0")]
  public static extern global::System.IntPtr Entity_CastToNPC__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Entity_CastToMob__SWIG_0")]
  public static extern global::System.IntPtr Entity_CastToMob__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Entity_CastToMerc__SWIG_0")]
  public static extern global::System.IntPtr Entity_CastToMerc__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Entity_CastToCorpse__SWIG_0")]
  public static extern global::System.IntPtr Entity_CastToCorpse__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Entity_CastToObject__SWIG_0")]
  public static extern global::System.IntPtr Entity_CastToObject__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Entity_CastToDoors__SWIG_0")]
  public static extern global::System.IntPtr Entity_CastToDoors__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Entity_CastToTrap__SWIG_0")]
  public static extern global::System.IntPtr Entity_CastToTrap__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Entity_CastToBeacon__SWIG_0")]
  public static extern global::System.IntPtr Entity_CastToBeacon__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Entity_CastToEncounter__SWIG_0")]
  public static extern global::System.IntPtr Entity_CastToEncounter__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Entity_GetInitialId")]
  public static extern ushort Entity_GetInitialId(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Entity_GetID")]
  public static extern ushort Entity_GetID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Entity_GetSpawnTimeStamp")]
  public static extern global::System.IntPtr Entity_GetSpawnTimeStamp(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Entity_GetName")]
  public static extern string Entity_GetName(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Entity_CastToBot__SWIG_0")]
  public static extern global::System.IntPtr Entity_CastToBot__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Area_id_set")]
  public static extern void Area_id_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Area_id_get")]
  public static extern int Area_id_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Area_type_set")]
  public static extern void Area_type_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Area_type_get")]
  public static extern int Area_type_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Area_min_x_set")]
  public static extern void Area_min_x_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Area_min_x_get")]
  public static extern float Area_min_x_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Area_max_x_set")]
  public static extern void Area_max_x_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Area_max_x_get")]
  public static extern float Area_max_x_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Area_min_y_set")]
  public static extern void Area_min_y_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Area_min_y_get")]
  public static extern float Area_min_y_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Area_max_y_set")]
  public static extern void Area_max_y_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Area_max_y_get")]
  public static extern float Area_max_y_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Area_min_z_set")]
  public static extern void Area_min_z_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Area_min_z_get")]
  public static extern float Area_min_z_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Area_max_z_set")]
  public static extern void Area_max_z_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Area_max_z_get")]
  public static extern float Area_max_z_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Area")]
  public static extern global::System.IntPtr new_Area();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_Area")]
  public static extern void delete_Area(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_EntityList")]
  public static extern global::System.IntPtr new_EntityList();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_EntityList")]
  public static extern void delete_EntityList(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetID")]
  public static extern global::System.IntPtr EntityList_GetID(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetMob__SWIG_0")]
  public static extern global::System.IntPtr EntityList_GetMob__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetMobID")]
  public static extern global::System.IntPtr EntityList_GetMobID(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetMob__SWIG_1")]
  public static extern global::System.IntPtr EntityList_GetMob__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetMobByNpcTypeID")]
  public static extern global::System.IntPtr EntityList_GetMobByNpcTypeID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_IsMobSpawnedByNpcTypeID")]
  public static extern bool EntityList_IsMobSpawnedByNpcTypeID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_IsNPCSpawned")]
  public static extern bool EntityList_IsNPCSpawned(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_CountSpawnedNPCs")]
  public static extern uint EntityList_CountSpawnedNPCs(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetNPCByID")]
  public static extern global::System.IntPtr EntityList_GetNPCByID(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetNPCByNPCTypeID")]
  public static extern global::System.IntPtr EntityList_GetNPCByNPCTypeID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetNPCBySpawnID")]
  public static extern global::System.IntPtr EntityList_GetNPCBySpawnID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetMercByID")]
  public static extern global::System.IntPtr EntityList_GetMercByID(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetClientByName")]
  public static extern global::System.IntPtr EntityList_GetClientByName(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetClientByAccID")]
  public static extern global::System.IntPtr EntityList_GetClientByAccID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetClientByID")]
  public static extern global::System.IntPtr EntityList_GetClientByID(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetClientByCharID")]
  public static extern global::System.IntPtr EntityList_GetClientByCharID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetClientByWID")]
  public static extern global::System.IntPtr EntityList_GetClientByWID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetClientByLSID")]
  public static extern global::System.IntPtr EntityList_GetClientByLSID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetRandomBot__SWIG_0")]
  public static extern global::System.IntPtr EntityList_GetRandomBot__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, float jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetRandomBot__SWIG_1")]
  public static extern global::System.IntPtr EntityList_GetRandomBot__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, float jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetRandomBot__SWIG_2")]
  public static extern global::System.IntPtr EntityList_GetRandomBot__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetRandomBot__SWIG_3")]
  public static extern global::System.IntPtr EntityList_GetRandomBot__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetRandomClient__SWIG_0")]
  public static extern global::System.IntPtr EntityList_GetRandomClient__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, float jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetRandomClient__SWIG_1")]
  public static extern global::System.IntPtr EntityList_GetRandomClient__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, float jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetRandomClient__SWIG_2")]
  public static extern global::System.IntPtr EntityList_GetRandomClient__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetRandomClient__SWIG_3")]
  public static extern global::System.IntPtr EntityList_GetRandomClient__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetRandomNPC__SWIG_0")]
  public static extern global::System.IntPtr EntityList_GetRandomNPC__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, float jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetRandomNPC__SWIG_1")]
  public static extern global::System.IntPtr EntityList_GetRandomNPC__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, float jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetRandomNPC__SWIG_2")]
  public static extern global::System.IntPtr EntityList_GetRandomNPC__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetRandomNPC__SWIG_3")]
  public static extern global::System.IntPtr EntityList_GetRandomNPC__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetRandomMob__SWIG_0")]
  public static extern global::System.IntPtr EntityList_GetRandomMob__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, float jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetRandomMob__SWIG_1")]
  public static extern global::System.IntPtr EntityList_GetRandomMob__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, float jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetRandomMob__SWIG_2")]
  public static extern global::System.IntPtr EntityList_GetRandomMob__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetRandomMob__SWIG_3")]
  public static extern global::System.IntPtr EntityList_GetRandomMob__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetGroupByMob")]
  public static extern global::System.IntPtr EntityList_GetGroupByMob(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetGroupByMobName")]
  public static extern global::System.IntPtr EntityList_GetGroupByMobName(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_IsInSameGroupOrRaidGroup")]
  public static extern bool EntityList_IsInSameGroupOrRaidGroup(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetGroupByClient")]
  public static extern global::System.IntPtr EntityList_GetGroupByClient(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetGroupByID")]
  public static extern global::System.IntPtr EntityList_GetGroupByID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetGroupByLeaderName")]
  public static extern global::System.IntPtr EntityList_GetGroupByLeaderName(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetRaidByClient")]
  public static extern global::System.IntPtr EntityList_GetRaidByClient(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetRaidByID")]
  public static extern global::System.IntPtr EntityList_GetRaidByID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetRaidByBotName")]
  public static extern global::System.IntPtr EntityList_GetRaidByBotName(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetRaidByBot")]
  public static extern global::System.IntPtr EntityList_GetRaidByBot(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetRaidByName")]
  public static extern global::System.IntPtr EntityList_GetRaidByName(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetCorpseByOwner")]
  public static extern global::System.IntPtr EntityList_GetCorpseByOwner(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetCorpseByOwnerWithinRange")]
  public static extern global::System.IntPtr EntityList_GetCorpseByOwnerWithinRange(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetCorpseByID")]
  public static extern global::System.IntPtr EntityList_GetCorpseByID(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetCorpseByDBID")]
  public static extern global::System.IntPtr EntityList_GetCorpseByDBID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetCorpseByName")]
  public static extern global::System.IntPtr EntityList_GetCorpseByName(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetSpawnByID")]
  public static extern global::System.IntPtr EntityList_GetSpawnByID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_FindCorpseDragger")]
  public static extern global::System.IntPtr EntityList_FindCorpseDragger(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetObjectByID")]
  public static extern global::System.IntPtr EntityList_GetObjectByID(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetObjectByDBID")]
  public static extern global::System.IntPtr EntityList_GetObjectByDBID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetDoorsByID")]
  public static extern global::System.IntPtr EntityList_GetDoorsByID(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetDoorsByDoorID")]
  public static extern global::System.IntPtr EntityList_GetDoorsByDoorID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetDoorsByDBID")]
  public static extern global::System.IntPtr EntityList_GetDoorsByDBID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RemoveAllCorpsesByCharID")]
  public static extern void EntityList_RemoveAllCorpsesByCharID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RemoveCorpseByDBID")]
  public static extern void EntityList_RemoveCorpseByDBID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RezzAllCorpsesByCharID")]
  public static extern int EntityList_RezzAllCorpsesByCharID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_DespawnGridNodes")]
  public static extern void EntityList_DespawnGridNodes(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_IsMobInZone")]
  public static extern bool EntityList_IsMobInZone(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_ClearClientPetitionQueue")]
  public static extern void EntityList_ClearClientPetitionQueue(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_CanAddHateForMob")]
  public static extern bool EntityList_CanAddHateForMob(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_SendGuildMOTD")]
  public static extern void EntityList_SendGuildMOTD(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_SendGuildChannel")]
  public static extern void EntityList_SendGuildChannel(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_SendGuildURL")]
  public static extern void EntityList_SendGuildURL(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_SendGuildSpawnAppearance")]
  public static extern void EntityList_SendGuildSpawnAppearance(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_SendGuildMembers")]
  public static extern void EntityList_SendGuildMembers(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_SendGuildMembersList")]
  public static extern void EntityList_SendGuildMembersList(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_SendGuildMemberAdd")]
  public static extern void EntityList_SendGuildMemberAdd(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, uint jarg5, uint jarg6, uint jarg7, global::System.Runtime.InteropServices.HandleRef jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_SendGuildMemberRename")]
  public static extern void EntityList_SendGuildMemberRename(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_SendGuildMemberRemove")]
  public static extern void EntityList_SendGuildMemberRemove(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_SendGuildMemberLevel")]
  public static extern void EntityList_SendGuildMemberLevel(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_SendGuildMemberRankAltBanker")]
  public static extern void EntityList_SendGuildMemberRankAltBanker(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, bool jarg5, bool jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_SendGuildMemberPublicNote")]
  public static extern void EntityList_SendGuildMemberPublicNote(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_SendGuildMemberDetails")]
  public static extern void EntityList_SendGuildMemberDetails(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_SendGuildRenameGuild")]
  public static extern void EntityList_SendGuildRenameGuild(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RefreshAllGuildInfo")]
  public static extern void EntityList_RefreshAllGuildInfo(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_SendGuildList")]
  public static extern void EntityList_SendGuildList(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GuildSetPreRoFBankerFlag")]
  public static extern void EntityList_GuildSetPreRoFBankerFlag(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_CheckGroupList")]
  public static extern void EntityList_CheckGroupList(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GroupProcess")]
  public static extern void EntityList_GroupProcess(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RaidProcess")]
  public static extern void EntityList_RaidProcess(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_DoorProcess")]
  public static extern void EntityList_DoorProcess(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_ObjectProcess")]
  public static extern void EntityList_ObjectProcess(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_CorpseProcess")]
  public static extern void EntityList_CorpseProcess(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_MobProcess")]
  public static extern void EntityList_MobProcess(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_TrapProcess")]
  public static extern void EntityList_TrapProcess(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_BeaconProcess")]
  public static extern void EntityList_BeaconProcess(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_EncounterProcess")]
  public static extern void EntityList_EncounterProcess(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_ProcessMove__SWIG_0")]
  public static extern void EntityList_ProcessMove__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_ProcessMove__SWIG_1")]
  public static extern void EntityList_ProcessMove__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, float jarg3, float jarg4, float jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_AddArea")]
  public static extern void EntityList_AddArea(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RemoveArea")]
  public static extern void EntityList_RemoveArea(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_ClearAreas")]
  public static extern void EntityList_ClearAreas(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_ReloadMerchants")]
  public static extern void EntityList_ReloadMerchants(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_ProcessProximitySay__SWIG_0")]
  public static extern void EntityList_ProcessProximitySay__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, byte jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_ProcessProximitySay__SWIG_1")]
  public static extern void EntityList_ProcessProximitySay__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_FindDoor")]
  public static extern global::System.IntPtr EntityList_FindDoor(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_FindObject")]
  public static extern global::System.IntPtr EntityList_FindObject(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_FindNearbyObject")]
  public static extern global::System.IntPtr EntityList_FindNearbyObject(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, float jarg4, float jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_MakeDoorSpawnPacket")]
  public static extern bool EntityList_MakeDoorSpawnPacket(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_MakeTrackPacket")]
  public static extern bool EntityList_MakeTrackPacket(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_SendTraders")]
  public static extern void EntityList_SendTraders(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_AddClient")]
  public static extern void EntityList_AddClient(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_AddNPC__SWIG_0")]
  public static extern void EntityList_AddNPC__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_AddNPC__SWIG_1")]
  public static extern void EntityList_AddNPC__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_AddNPC__SWIG_2")]
  public static extern void EntityList_AddNPC__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_AddMerc__SWIG_0")]
  public static extern void EntityList_AddMerc__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_AddMerc__SWIG_1")]
  public static extern void EntityList_AddMerc__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_AddMerc__SWIG_2")]
  public static extern void EntityList_AddMerc__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_AddCorpse__SWIG_0")]
  public static extern void EntityList_AddCorpse__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_AddCorpse__SWIG_1")]
  public static extern void EntityList_AddCorpse__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_AddObject__SWIG_0")]
  public static extern void EntityList_AddObject__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_AddObject__SWIG_1")]
  public static extern void EntityList_AddObject__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_AddGroup__SWIG_0")]
  public static extern void EntityList_AddGroup__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_AddGroup__SWIG_1")]
  public static extern void EntityList_AddGroup__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_AddRaid__SWIG_0")]
  public static extern void EntityList_AddRaid__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_AddRaid__SWIG_1")]
  public static extern void EntityList_AddRaid__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_AddDoor")]
  public static extern void EntityList_AddDoor(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_AddTrap")]
  public static extern void EntityList_AddTrap(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_AddBeacon")]
  public static extern void EntityList_AddBeacon(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_AddEncounter")]
  public static extern void EntityList_AddEncounter(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_AddProximity")]
  public static extern void EntityList_AddProximity(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_Clear")]
  public static extern void EntityList_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RemoveMob")]
  public static extern bool EntityList_RemoveMob(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RemoveClient__SWIG_0")]
  public static extern bool EntityList_RemoveClient__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RemoveClient__SWIG_1")]
  public static extern bool EntityList_RemoveClient__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RemoveNPC")]
  public static extern bool EntityList_RemoveNPC(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RemoveMerc")]
  public static extern bool EntityList_RemoveMerc(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RemoveGroup")]
  public static extern bool EntityList_RemoveGroup(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RemoveCorpse")]
  public static extern bool EntityList_RemoveCorpse(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RemoveDoor")]
  public static extern bool EntityList_RemoveDoor(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RemoveTrap")]
  public static extern bool EntityList_RemoveTrap(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RemoveObject")]
  public static extern bool EntityList_RemoveObject(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RemoveProximity")]
  public static extern bool EntityList_RemoveProximity(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RemoveMobFromCloseLists")]
  public static extern bool EntityList_RemoveMobFromCloseLists(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RemoveAuraFromMobs")]
  public static extern void EntityList_RemoveAuraFromMobs(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RemoveAllMobs")]
  public static extern void EntityList_RemoveAllMobs(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RemoveAllClients")]
  public static extern void EntityList_RemoveAllClients(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RemoveAllNPCs")]
  public static extern void EntityList_RemoveAllNPCs(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RemoveAllBots")]
  public static extern void EntityList_RemoveAllBots(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RemoveAllMercs")]
  public static extern void EntityList_RemoveAllMercs(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RemoveAllGroups")]
  public static extern void EntityList_RemoveAllGroups(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RemoveAllCorpses")]
  public static extern void EntityList_RemoveAllCorpses(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RemoveAllDoors")]
  public static extern void EntityList_RemoveAllDoors(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_DespawnAllDoors")]
  public static extern void EntityList_DespawnAllDoors(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RespawnAllDoors")]
  public static extern void EntityList_RespawnAllDoors(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RemoveAllTraps")]
  public static extern void EntityList_RemoveAllTraps(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RemoveAllObjects")]
  public static extern void EntityList_RemoveAllObjects(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RemoveAllLocalities")]
  public static extern void EntityList_RemoveAllLocalities(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RemoveAllRaids")]
  public static extern void EntityList_RemoveAllRaids(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RemoveAllEncounters")]
  public static extern void EntityList_RemoveAllEncounters(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_DestroyTempPets")]
  public static extern void EntityList_DestroyTempPets(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_AddTempPetsToHateList__SWIG_0")]
  public static extern void EntityList_AddTempPetsToHateList__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_AddTempPetsToHateList__SWIG_1")]
  public static extern void EntityList_AddTempPetsToHateList__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_AddTempPetsToHateListOnOwnerDamage")]
  public static extern void EntityList_AddTempPetsToHateListOnOwnerDamage(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetEntityMob__SWIG_0")]
  public static extern global::System.IntPtr EntityList_GetEntityMob__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetEntityMerc")]
  public static extern global::System.IntPtr EntityList_GetEntityMerc(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetEntityDoor")]
  public static extern global::System.IntPtr EntityList_GetEntityDoor(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetEntityObject")]
  public static extern global::System.IntPtr EntityList_GetEntityObject(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetEntityCorpse__SWIG_0")]
  public static extern global::System.IntPtr EntityList_GetEntityCorpse__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetEntityTrap")]
  public static extern global::System.IntPtr EntityList_GetEntityTrap(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetEntityBeacon")]
  public static extern global::System.IntPtr EntityList_GetEntityBeacon(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetEntityEncounter")]
  public static extern global::System.IntPtr EntityList_GetEntityEncounter(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetEntityMob__SWIG_1")]
  public static extern global::System.IntPtr EntityList_GetEntityMob__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetEntityCorpse__SWIG_1")]
  public static extern global::System.IntPtr EntityList_GetEntityCorpse__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_StopMobAI")]
  public static extern void EntityList_StopMobAI(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_DescribeAggro")]
  public static extern void EntityList_DescribeAggro(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, float jarg4, bool jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetFilteredEntityList__SWIG_0")]
  public static extern global::System.IntPtr EntityList_GetFilteredEntityList__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetFilteredEntityList__SWIG_1")]
  public static extern global::System.IntPtr EntityList_GetFilteredEntityList__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetFilteredEntityList__SWIG_2")]
  public static extern global::System.IntPtr EntityList_GetFilteredEntityList__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_DamageArea__SWIG_0")]
  public static extern void EntityList_DamageArea__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, uint jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, bool jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_DamageArea__SWIG_1")]
  public static extern void EntityList_DamageArea__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, uint jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_DamageArea__SWIG_2")]
  public static extern void EntityList_DamageArea__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_DamageArea__SWIG_3")]
  public static extern void EntityList_DamageArea__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_Marquee__SWIG_0")]
  public static extern void EntityList_Marquee__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_Marquee__SWIG_1")]
  public static extern void EntityList_Marquee__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_Marquee__SWIG_2")]
  public static extern void EntityList_Marquee__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, uint jarg5, uint jarg6, global::System.Runtime.InteropServices.HandleRef jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_Message")]
  public static extern void EntityList_Message(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_MessageStatus")]
  public static extern void EntityList_MessageStatus(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, int jarg3, uint jarg4, string jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_MessageClose")]
  public static extern void EntityList_MessageClose(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, float jarg4, uint jarg5, string jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_FilteredMessageClose")]
  public static extern void EntityList_FilteredMessageClose(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, float jarg4, uint jarg5, global::System.Runtime.InteropServices.HandleRef jarg6, string jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_MessageString__SWIG_0")]
  public static extern void EntityList_MessageString__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, uint jarg4, uint jarg5, string jarg6, string jarg7, string jarg8, string jarg9, string jarg10, string jarg11, string jarg12, string jarg13, string jarg14);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_MessageString__SWIG_1")]
  public static extern void EntityList_MessageString__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, uint jarg4, uint jarg5, string jarg6, string jarg7, string jarg8, string jarg9, string jarg10, string jarg11, string jarg12, string jarg13);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_MessageString__SWIG_2")]
  public static extern void EntityList_MessageString__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, uint jarg4, uint jarg5, string jarg6, string jarg7, string jarg8, string jarg9, string jarg10, string jarg11, string jarg12);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_MessageString__SWIG_3")]
  public static extern void EntityList_MessageString__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, uint jarg4, uint jarg5, string jarg6, string jarg7, string jarg8, string jarg9, string jarg10, string jarg11);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_MessageString__SWIG_4")]
  public static extern void EntityList_MessageString__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, uint jarg4, uint jarg5, string jarg6, string jarg7, string jarg8, string jarg9, string jarg10);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_MessageString__SWIG_5")]
  public static extern void EntityList_MessageString__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, uint jarg4, uint jarg5, string jarg6, string jarg7, string jarg8, string jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_MessageString__SWIG_6")]
  public static extern void EntityList_MessageString__SWIG_6(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, uint jarg4, uint jarg5, string jarg6, string jarg7, string jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_MessageString__SWIG_7")]
  public static extern void EntityList_MessageString__SWIG_7(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, uint jarg4, uint jarg5, string jarg6, string jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_MessageString__SWIG_8")]
  public static extern void EntityList_MessageString__SWIG_8(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, uint jarg4, uint jarg5, string jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_MessageString__SWIG_9")]
  public static extern void EntityList_MessageString__SWIG_9(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, uint jarg4, uint jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_FilteredMessageString__SWIG_0")]
  public static extern void EntityList_FilteredMessageString__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, uint jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, uint jarg6, string jarg7, string jarg8, string jarg9, string jarg10, string jarg11, string jarg12, string jarg13, string jarg14, string jarg15);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_FilteredMessageString__SWIG_1")]
  public static extern void EntityList_FilteredMessageString__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, uint jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, uint jarg6, string jarg7, string jarg8, string jarg9, string jarg10, string jarg11, string jarg12, string jarg13, string jarg14);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_FilteredMessageString__SWIG_2")]
  public static extern void EntityList_FilteredMessageString__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, uint jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, uint jarg6, string jarg7, string jarg8, string jarg9, string jarg10, string jarg11, string jarg12, string jarg13);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_FilteredMessageString__SWIG_3")]
  public static extern void EntityList_FilteredMessageString__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, uint jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, uint jarg6, string jarg7, string jarg8, string jarg9, string jarg10, string jarg11, string jarg12);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_FilteredMessageString__SWIG_4")]
  public static extern void EntityList_FilteredMessageString__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, uint jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, uint jarg6, string jarg7, string jarg8, string jarg9, string jarg10, string jarg11);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_FilteredMessageString__SWIG_5")]
  public static extern void EntityList_FilteredMessageString__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, uint jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, uint jarg6, string jarg7, string jarg8, string jarg9, string jarg10);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_FilteredMessageString__SWIG_6")]
  public static extern void EntityList_FilteredMessageString__SWIG_6(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, uint jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, uint jarg6, string jarg7, string jarg8, string jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_FilteredMessageString__SWIG_7")]
  public static extern void EntityList_FilteredMessageString__SWIG_7(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, uint jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, uint jarg6, string jarg7, string jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_FilteredMessageString__SWIG_8")]
  public static extern void EntityList_FilteredMessageString__SWIG_8(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, uint jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, uint jarg6, string jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_FilteredMessageString__SWIG_9")]
  public static extern void EntityList_FilteredMessageString__SWIG_9(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, uint jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, uint jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_MessageCloseString__SWIG_0")]
  public static extern void EntityList_MessageCloseString__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, float jarg4, uint jarg5, uint jarg6, string jarg7, string jarg8, string jarg9, string jarg10, string jarg11, string jarg12, string jarg13, string jarg14, string jarg15);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_MessageCloseString__SWIG_1")]
  public static extern void EntityList_MessageCloseString__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, float jarg4, uint jarg5, uint jarg6, string jarg7, string jarg8, string jarg9, string jarg10, string jarg11, string jarg12, string jarg13, string jarg14);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_MessageCloseString__SWIG_2")]
  public static extern void EntityList_MessageCloseString__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, float jarg4, uint jarg5, uint jarg6, string jarg7, string jarg8, string jarg9, string jarg10, string jarg11, string jarg12, string jarg13);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_MessageCloseString__SWIG_3")]
  public static extern void EntityList_MessageCloseString__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, float jarg4, uint jarg5, uint jarg6, string jarg7, string jarg8, string jarg9, string jarg10, string jarg11, string jarg12);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_MessageCloseString__SWIG_4")]
  public static extern void EntityList_MessageCloseString__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, float jarg4, uint jarg5, uint jarg6, string jarg7, string jarg8, string jarg9, string jarg10, string jarg11);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_MessageCloseString__SWIG_5")]
  public static extern void EntityList_MessageCloseString__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, float jarg4, uint jarg5, uint jarg6, string jarg7, string jarg8, string jarg9, string jarg10);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_MessageCloseString__SWIG_6")]
  public static extern void EntityList_MessageCloseString__SWIG_6(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, float jarg4, uint jarg5, uint jarg6, string jarg7, string jarg8, string jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_MessageCloseString__SWIG_7")]
  public static extern void EntityList_MessageCloseString__SWIG_7(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, float jarg4, uint jarg5, uint jarg6, string jarg7, string jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_MessageCloseString__SWIG_8")]
  public static extern void EntityList_MessageCloseString__SWIG_8(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, float jarg4, uint jarg5, uint jarg6, string jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_MessageCloseString__SWIG_9")]
  public static extern void EntityList_MessageCloseString__SWIG_9(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, float jarg4, uint jarg5, uint jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_FilteredMessageCloseString__SWIG_0")]
  public static extern void EntityList_FilteredMessageCloseString__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, float jarg4, uint jarg5, global::System.Runtime.InteropServices.HandleRef jarg6, uint jarg7, global::System.Runtime.InteropServices.HandleRef jarg8, string jarg9, string jarg10, string jarg11, string jarg12, string jarg13, string jarg14, string jarg15, string jarg16, string jarg17);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_FilteredMessageCloseString__SWIG_1")]
  public static extern void EntityList_FilteredMessageCloseString__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, float jarg4, uint jarg5, global::System.Runtime.InteropServices.HandleRef jarg6, uint jarg7, global::System.Runtime.InteropServices.HandleRef jarg8, string jarg9, string jarg10, string jarg11, string jarg12, string jarg13, string jarg14, string jarg15, string jarg16);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_FilteredMessageCloseString__SWIG_2")]
  public static extern void EntityList_FilteredMessageCloseString__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, float jarg4, uint jarg5, global::System.Runtime.InteropServices.HandleRef jarg6, uint jarg7, global::System.Runtime.InteropServices.HandleRef jarg8, string jarg9, string jarg10, string jarg11, string jarg12, string jarg13, string jarg14, string jarg15);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_FilteredMessageCloseString__SWIG_3")]
  public static extern void EntityList_FilteredMessageCloseString__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, float jarg4, uint jarg5, global::System.Runtime.InteropServices.HandleRef jarg6, uint jarg7, global::System.Runtime.InteropServices.HandleRef jarg8, string jarg9, string jarg10, string jarg11, string jarg12, string jarg13, string jarg14);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_FilteredMessageCloseString__SWIG_4")]
  public static extern void EntityList_FilteredMessageCloseString__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, float jarg4, uint jarg5, global::System.Runtime.InteropServices.HandleRef jarg6, uint jarg7, global::System.Runtime.InteropServices.HandleRef jarg8, string jarg9, string jarg10, string jarg11, string jarg12, string jarg13);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_FilteredMessageCloseString__SWIG_5")]
  public static extern void EntityList_FilteredMessageCloseString__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, float jarg4, uint jarg5, global::System.Runtime.InteropServices.HandleRef jarg6, uint jarg7, global::System.Runtime.InteropServices.HandleRef jarg8, string jarg9, string jarg10, string jarg11, string jarg12);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_FilteredMessageCloseString__SWIG_6")]
  public static extern void EntityList_FilteredMessageCloseString__SWIG_6(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, float jarg4, uint jarg5, global::System.Runtime.InteropServices.HandleRef jarg6, uint jarg7, global::System.Runtime.InteropServices.HandleRef jarg8, string jarg9, string jarg10, string jarg11);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_FilteredMessageCloseString__SWIG_7")]
  public static extern void EntityList_FilteredMessageCloseString__SWIG_7(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, float jarg4, uint jarg5, global::System.Runtime.InteropServices.HandleRef jarg6, uint jarg7, global::System.Runtime.InteropServices.HandleRef jarg8, string jarg9, string jarg10);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_FilteredMessageCloseString__SWIG_8")]
  public static extern void EntityList_FilteredMessageCloseString__SWIG_8(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, float jarg4, uint jarg5, global::System.Runtime.InteropServices.HandleRef jarg6, uint jarg7, global::System.Runtime.InteropServices.HandleRef jarg8, string jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_FilteredMessageCloseString__SWIG_9")]
  public static extern void EntityList_FilteredMessageCloseString__SWIG_9(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, float jarg4, uint jarg5, global::System.Runtime.InteropServices.HandleRef jarg6, uint jarg7, global::System.Runtime.InteropServices.HandleRef jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_FilteredMessageCloseString__SWIG_10")]
  public static extern void EntityList_FilteredMessageCloseString__SWIG_10(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, float jarg4, uint jarg5, global::System.Runtime.InteropServices.HandleRef jarg6, uint jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_ChannelMessageFromWorld")]
  public static extern void EntityList_ChannelMessageFromWorld(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, byte jarg4, uint jarg5, byte jarg6, byte jarg7, string jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_ChannelMessage__SWIG_0")]
  public static extern void EntityList_ChannelMessage__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, byte jarg3, byte jarg4, string jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_ChannelMessage__SWIG_1")]
  public static extern void EntityList_ChannelMessage__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, byte jarg3, byte jarg4, byte jarg5, string jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_SendZoneSpawns")]
  public static extern void EntityList_SendZoneSpawns(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_SendZonePVPUpdates")]
  public static extern void EntityList_SendZonePVPUpdates(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_SendZoneSpawnsBulk")]
  public static extern void EntityList_SendZoneSpawnsBulk(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_Save")]
  public static extern void EntityList_Save(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_SendZoneCorpses")]
  public static extern void EntityList_SendZoneCorpses(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_SendZoneCorpsesBulk")]
  public static extern void EntityList_SendZoneCorpsesBulk(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_SendZoneObjects")]
  public static extern void EntityList_SendZoneObjects(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_SendZoneAppearance")]
  public static extern void EntityList_SendZoneAppearance(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_SendNimbusEffects")]
  public static extern void EntityList_SendNimbusEffects(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_SendUntargetable")]
  public static extern void EntityList_SendUntargetable(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_SendAppearanceEffects")]
  public static extern void EntityList_SendAppearanceEffects(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_SendIllusionWearChange")]
  public static extern void EntityList_SendIllusionWearChange(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_DuelMessage")]
  public static extern void EntityList_DuelMessage(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_QuestJournalledSayClose")]
  public static extern void EntityList_QuestJournalledSayClose(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, float jarg3, string jarg4, string jarg5, global::System.Runtime.InteropServices.HandleRef jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GroupMessage")]
  public static extern void EntityList_GroupMessage(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, string jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_ExpeditionWarning")]
  public static extern void EntityList_ExpeditionWarning(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_UpdateGuildTributes")]
  public static extern void EntityList_UpdateGuildTributes(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RemoveFromTargets__SWIG_0")]
  public static extern void EntityList_RemoveFromTargets__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RemoveFromTargets__SWIG_1")]
  public static extern void EntityList_RemoveFromTargets__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RemoveFromTargetsFadingMemories__SWIG_0")]
  public static extern void EntityList_RemoveFromTargetsFadingMemories__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RemoveFromTargetsFadingMemories__SWIG_1")]
  public static extern void EntityList_RemoveFromTargetsFadingMemories__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RemoveFromTargetsFadingMemories__SWIG_2")]
  public static extern void EntityList_RemoveFromTargetsFadingMemories__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RemoveFromXTargets")]
  public static extern void EntityList_RemoveFromXTargets(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RemoveFromAutoXTargets")]
  public static extern void EntityList_RemoveFromAutoXTargets(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_ReplaceWithTarget")]
  public static extern void EntityList_ReplaceWithTarget(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_QueueCloseClients__SWIG_0")]
  public static extern void EntityList_QueueCloseClients__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4, float jarg5, global::System.Runtime.InteropServices.HandleRef jarg6, bool jarg7, global::System.Runtime.InteropServices.HandleRef jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_QueueCloseClients__SWIG_1")]
  public static extern void EntityList_QueueCloseClients__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4, float jarg5, global::System.Runtime.InteropServices.HandleRef jarg6, bool jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_QueueCloseClients__SWIG_2")]
  public static extern void EntityList_QueueCloseClients__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4, float jarg5, global::System.Runtime.InteropServices.HandleRef jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_QueueCloseClients__SWIG_3")]
  public static extern void EntityList_QueueCloseClients__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4, float jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_QueueCloseClients__SWIG_4")]
  public static extern void EntityList_QueueCloseClients__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_QueueCloseClients__SWIG_5")]
  public static extern void EntityList_QueueCloseClients__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_QueueClients__SWIG_0")]
  public static extern void EntityList_QueueClients__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4, bool jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_QueueClients__SWIG_1")]
  public static extern void EntityList_QueueClients__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_QueueClients__SWIG_2")]
  public static extern void EntityList_QueueClients__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_QueueClientsStatus__SWIG_0")]
  public static extern void EntityList_QueueClientsStatus__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4, byte jarg5, byte jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_QueueClientsStatus__SWIG_1")]
  public static extern void EntityList_QueueClientsStatus__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4, byte jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_QueueClientsStatus__SWIG_2")]
  public static extern void EntityList_QueueClientsStatus__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_QueueClientsStatus__SWIG_3")]
  public static extern void EntityList_QueueClientsStatus__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_QueueClientsGuild__SWIG_0")]
  public static extern void EntityList_QueueClientsGuild__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_QueueClientsGuild__SWIG_1")]
  public static extern void EntityList_QueueClientsGuild__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_QueueClientsGuildBankItemUpdate")]
  public static extern void EntityList_QueueClientsGuildBankItemUpdate(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_QueueClientsByTarget__SWIG_0")]
  public static extern void EntityList_QueueClientsByTarget__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, bool jarg6, bool jarg7, uint jarg8, bool jarg9, bool jarg10);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_QueueClientsByTarget__SWIG_1")]
  public static extern void EntityList_QueueClientsByTarget__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, bool jarg6, bool jarg7, uint jarg8, bool jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_QueueClientsByTarget__SWIG_2")]
  public static extern void EntityList_QueueClientsByTarget__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, bool jarg6, bool jarg7, uint jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_QueueClientsByTarget__SWIG_3")]
  public static extern void EntityList_QueueClientsByTarget__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, bool jarg6, bool jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_QueueClientsByTarget__SWIG_4")]
  public static extern void EntityList_QueueClientsByTarget__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, bool jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_QueueClientsByTarget__SWIG_5")]
  public static extern void EntityList_QueueClientsByTarget__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_QueueClientsByTarget__SWIG_6")]
  public static extern void EntityList_QueueClientsByTarget__SWIG_6(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_QueueClientsByTarget__SWIG_7")]
  public static extern void EntityList_QueueClientsByTarget__SWIG_7(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_QueueClientsByXTarget__SWIG_0")]
  public static extern void EntityList_QueueClientsByXTarget__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_QueueClientsByXTarget__SWIG_1")]
  public static extern void EntityList_QueueClientsByXTarget__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_QueueClientsByXTarget__SWIG_2")]
  public static extern void EntityList_QueueClientsByXTarget__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_QueueToGroupsForNPCHealthAA")]
  public static extern void EntityList_QueueToGroupsForNPCHealthAA(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_AEAttack__SWIG_0")]
  public static extern void EntityList_AEAttack__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, float jarg3, int jarg4, int jarg5, bool jarg6, int jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_AEAttack__SWIG_1")]
  public static extern void EntityList_AEAttack__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, float jarg3, int jarg4, int jarg5, bool jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_AEAttack__SWIG_2")]
  public static extern void EntityList_AEAttack__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, float jarg3, int jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_AEAttack__SWIG_3")]
  public static extern void EntityList_AEAttack__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, float jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_AEAttack__SWIG_4")]
  public static extern void EntityList_AEAttack__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, float jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_AETaunt__SWIG_0")]
  public static extern void EntityList_AETaunt__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, float jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_AETaunt__SWIG_1")]
  public static extern void EntityList_AETaunt__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, float jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_AETaunt__SWIG_2")]
  public static extern void EntityList_AETaunt__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_AESpell__SWIG_0")]
  public static extern void EntityList_AESpell__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, ushort jarg4, bool jarg5, short jarg6, global::System.Runtime.InteropServices.HandleRef jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_AESpell__SWIG_1")]
  public static extern void EntityList_AESpell__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, ushort jarg4, bool jarg5, short jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_AESpell__SWIG_2")]
  public static extern void EntityList_AESpell__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, ushort jarg4, bool jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_AESpell__SWIG_3")]
  public static extern void EntityList_AESpell__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, ushort jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_MassGroupBuff__SWIG_0")]
  public static extern void EntityList_MassGroupBuff__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, ushort jarg4, bool jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_MassGroupBuff__SWIG_1")]
  public static extern void EntityList_MassGroupBuff__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, ushort jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetTrapTrigger")]
  public static extern global::System.IntPtr EntityList_GetTrapTrigger(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_SendAlarm")]
  public static extern void EntityList_SendAlarm(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, byte jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_FindNearbyTrap__SWIG_0")]
  public static extern global::System.IntPtr EntityList_FindNearbyTrap__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, float jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, bool jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_FindNearbyTrap__SWIG_1")]
  public static extern global::System.IntPtr EntityList_FindNearbyTrap__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, float jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_AddHealAggro")]
  public static extern void EntityList_AddHealAggro(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, ushort jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_OpenDoorsNear")]
  public static extern void EntityList_OpenDoorsNear(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_UpdateWho__SWIG_0")]
  public static extern void EntityList_UpdateWho__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_UpdateWho__SWIG_1")]
  public static extern void EntityList_UpdateWho__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_MakeNameUnique")]
  public static extern string EntityList_MakeNameUnique(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RemoveNumbers")]
  public static extern string EntityList_RemoveNumbers(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_SignalMobsByNPCID")]
  public static extern void EntityList_SignalMobsByNPCID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RemoveEntity")]
  public static extern void EntityList_RemoveEntity(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_SendPetitionToAdmins__SWIG_0")]
  public static extern void EntityList_SendPetitionToAdmins__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_SendPetitionToAdmins__SWIG_1")]
  public static extern void EntityList_SendPetitionToAdmins__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_AddLootToNPCS")]
  public static extern void EntityList_AddLootToNPCS(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_ListNPCCorpses")]
  public static extern void EntityList_ListNPCCorpses(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_ListPlayerCorpses")]
  public static extern void EntityList_ListPlayerCorpses(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_DeleteNPCCorpses")]
  public static extern uint EntityList_DeleteNPCCorpses(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_DeletePlayerCorpses")]
  public static extern uint EntityList_DeletePlayerCorpses(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_CorpseFix")]
  public static extern void EntityList_CorpseFix(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_HalveAggro")]
  public static extern void EntityList_HalveAggro(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_DoubleAggro")]
  public static extern void EntityList_DoubleAggro(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_UpdateHoTT")]
  public static extern void EntityList_UpdateHoTT(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_Process")]
  public static extern void EntityList_Process(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_ClearAggro__SWIG_0")]
  public static extern void EntityList_ClearAggro__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_ClearAggro__SWIG_1")]
  public static extern void EntityList_ClearAggro__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_ClearWaterAggro")]
  public static extern void EntityList_ClearWaterAggro(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_ClearFeignAggro")]
  public static extern void EntityList_ClearFeignAggro(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_ClearZoneFeignAggro")]
  public static extern void EntityList_ClearZoneFeignAggro(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_AggroZone__SWIG_0")]
  public static extern void EntityList_AggroZone__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_AggroZone__SWIG_1")]
  public static extern void EntityList_AggroZone__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_Fighting")]
  public static extern bool EntityList_Fighting(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RemoveFromHateLists__SWIG_0")]
  public static extern void EntityList_RemoveFromHateLists__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RemoveFromHateLists__SWIG_1")]
  public static extern void EntityList_RemoveFromHateLists__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RemoveDebuffs")]
  public static extern void EntityList_RemoveDebuffs(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_MessageGroup")]
  public static extern void EntityList_MessageGroup(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, uint jarg4, string jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_LimitAddNPC")]
  public static extern void EntityList_LimitAddNPC(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_LimitRemoveNPC")]
  public static extern void EntityList_LimitRemoveNPC(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_LimitCheckType")]
  public static extern bool EntityList_LimitCheckType(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_LimitCheckGroup")]
  public static extern bool EntityList_LimitCheckGroup(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_LimitCheckName")]
  public static extern bool EntityList_LimitCheckName(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetHatedCount")]
  public static extern int EntityList_GetHatedCount(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_Merc_AICheckCloseBeneficialSpells")]
  public static extern bool EntityList_Merc_AICheckCloseBeneficialSpells(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, byte jarg3, float jarg4, uint jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetTargetForMez")]
  public static extern global::System.IntPtr EntityList_GetTargetForMez(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_CheckNPCsClose")]
  public static extern uint EntityList_CheckNPCsClose(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetClosestCorpse")]
  public static extern global::System.IntPtr EntityList_GetClosestCorpse(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_TryWakeTheDead")]
  public static extern void EntityList_TryWakeTheDead(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4, uint jarg5, uint jarg6, uint jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetClosestBanker")]
  public static extern global::System.IntPtr EntityList_GetClosestBanker(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_CameraEffect")]
  public static extern void EntityList_CameraEffect(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, float jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetClosestMobByBodyType__SWIG_0")]
  public static extern global::System.IntPtr EntityList_GetClosestMobByBodyType__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetClosestMobByBodyType__SWIG_1")]
  public static extern global::System.IntPtr EntityList_GetClosestMobByBodyType__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_ForceGroupUpdate")]
  public static extern void EntityList_ForceGroupUpdate(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_SendGroupLeave")]
  public static extern void EntityList_SendGroupLeave(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_SendGroupJoin")]
  public static extern void EntityList_SendGroupJoin(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_SaveAllClientsTaskState")]
  public static extern void EntityList_SaveAllClientsTaskState(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_ReloadAllClientsTaskState__SWIG_0")]
  public static extern void EntityList_ReloadAllClientsTaskState__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_ReloadAllClientsTaskState__SWIG_1")]
  public static extern void EntityList_ReloadAllClientsTaskState__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_CreateGroundObject__SWIG_0")]
  public static extern ushort EntityList_CreateGroundObject__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_CreateGroundObject__SWIG_1")]
  public static extern ushort EntityList_CreateGroundObject__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_CreateGroundObjectFromModel__SWIG_0")]
  public static extern ushort EntityList_CreateGroundObjectFromModel__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, byte jarg4, uint jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_CreateGroundObjectFromModel__SWIG_1")]
  public static extern ushort EntityList_CreateGroundObjectFromModel__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, byte jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_CreateGroundObjectFromModel__SWIG_2")]
  public static extern ushort EntityList_CreateGroundObjectFromModel__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_CreateDoor__SWIG_0")]
  public static extern ushort EntityList_CreateDoor__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, byte jarg4, ushort jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_CreateDoor__SWIG_1")]
  public static extern ushort EntityList_CreateDoor__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, byte jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_CreateDoor__SWIG_2")]
  public static extern ushort EntityList_CreateDoor__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_ZoneWho")]
  public static extern void EntityList_ZoneWho(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_UnMarkNPC")]
  public static extern void EntityList_UnMarkNPC(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_SignalAllClients")]
  public static extern void EntityList_SignalAllClients(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_UpdateQGlobal")]
  public static extern void EntityList_UpdateQGlobal(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_DeleteQGlobal")]
  public static extern void EntityList_DeleteQGlobal(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4, uint jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_SendFindableNPCList")]
  public static extern void EntityList_SendFindableNPCList(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_UpdateFindableNPCState")]
  public static extern void EntityList_UpdateFindableNPCState(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_HideCorpses")]
  public static extern void EntityList_HideCorpses(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, byte jarg3, byte jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GateAllClientsToSafeReturn")]
  public static extern void EntityList_GateAllClientsToSafeReturn(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetMobList__SWIG_0")]
  public static extern void EntityList_GetMobList__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetNPCList__SWIG_0")]
  public static extern void EntityList_GetNPCList__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetClientList__SWIG_0")]
  public static extern void EntityList_GetClientList__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetCorpseList__SWIG_0")]
  public static extern void EntityList_GetCorpseList__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetObjectList__SWIG_0")]
  public static extern void EntityList_GetObjectList__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetDoorsList__SWIG_0")]
  public static extern void EntityList_GetDoorsList__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetSpawnList")]
  public static extern void EntityList_GetSpawnList(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetTargetsForConeArea")]
  public static extern void EntityList_GetTargetsForConeArea(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, float jarg3, float jarg4, float jarg5, int jarg6, global::System.Runtime.InteropServices.HandleRef jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetTargetsForVirusEffect")]
  public static extern global::System.IntPtr EntityList_GetTargetsForVirusEffect(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4, int jarg5, int jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetMobList__SWIG_1")]
  public static extern global::System.IntPtr EntityList_GetMobList__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetNPCList__SWIG_1")]
  public static extern global::System.IntPtr EntityList_GetNPCList__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetMercList")]
  public static extern global::System.IntPtr EntityList_GetMercList(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetClientList__SWIG_1")]
  public static extern global::System.IntPtr EntityList_GetClientList__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetBotList__SWIG_0")]
  public static extern global::System.IntPtr EntityList_GetBotList__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetBotListByCharacterID__SWIG_0")]
  public static extern global::System.IntPtr EntityList_GetBotListByCharacterID__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, byte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetBotListByCharacterID__SWIG_1")]
  public static extern global::System.IntPtr EntityList_GetBotListByCharacterID__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetBotListByClientName__SWIG_0")]
  public static extern global::System.IntPtr EntityList_GetBotListByClientName__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, byte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetBotListByClientName__SWIG_1")]
  public static extern global::System.IntPtr EntityList_GetBotListByClientName__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_SignalAllBotsByOwnerCharacterID")]
  public static extern void EntityList_SignalAllBotsByOwnerCharacterID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_SignalAllBotsByOwnerName")]
  public static extern void EntityList_SignalAllBotsByOwnerName(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_SignalBotByBotID")]
  public static extern void EntityList_SignalBotByBotID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_SignalBotByBotName")]
  public static extern void EntityList_SignalBotByBotName(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetCorpseList__SWIG_1")]
  public static extern global::System.IntPtr EntityList_GetCorpseList__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetObjectList__SWIG_1")]
  public static extern global::System.IntPtr EntityList_GetObjectList__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetDoorsList__SWIG_1")]
  public static extern global::System.IntPtr EntityList_GetDoorsList__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetCloseMobList__SWIG_0")]
  public static extern global::System.IntPtr EntityList_GetCloseMobList__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, float jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetCloseMobList__SWIG_1")]
  public static extern global::System.IntPtr EntityList_GetCloseMobList__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_DepopAll__SWIG_0")]
  public static extern void EntityList_DepopAll__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_DepopAll__SWIG_1")]
  public static extern void EntityList_DepopAll__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetFreeID")]
  public static extern ushort EntityList_GetFreeID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RefreshAutoXTargets")]
  public static extern void EntityList_RefreshAutoXTargets(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RefreshClientXTargets")]
  public static extern void EntityList_RefreshClientXTargets(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_SendAlternateAdvancementStats")]
  public static extern void EntityList_SendAlternateAdvancementStats(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_ScanCloseMobs__SWIG_0")]
  public static extern void EntityList_ScanCloseMobs__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_ScanCloseMobs__SWIG_1")]
  public static extern void EntityList_ScanCloseMobs__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetTrapInfo")]
  public static extern void EntityList_GetTrapInfo(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_IsTrapGroupSpawned")]
  public static extern bool EntityList_IsTrapGroupSpawned(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, byte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_UpdateAllTraps__SWIG_0")]
  public static extern void EntityList_UpdateAllTraps__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_UpdateAllTraps__SWIG_1")]
  public static extern void EntityList_UpdateAllTraps__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_ClearTrapPointers")]
  public static extern void EntityList_ClearTrapPointers(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_MovePlayerCorpsesToGraveyard__SWIG_0")]
  public static extern int EntityList_MovePlayerCorpsesToGraveyard__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_MovePlayerCorpsesToGraveyard__SWIG_1")]
  public static extern int EntityList_MovePlayerCorpsesToGraveyard__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_client_list_set")]
  public static extern void EntityList_client_list_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_client_list_get")]
  public static extern global::System.IntPtr EntityList_client_list_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_mob_list_set")]
  public static extern void EntityList_mob_list_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_mob_list_get")]
  public static extern global::System.IntPtr EntityList_mob_list_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_npc_list_set")]
  public static extern void EntityList_npc_list_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_npc_list_get")]
  public static extern global::System.IntPtr EntityList_npc_list_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_merc_list_set")]
  public static extern void EntityList_merc_list_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_merc_list_get")]
  public static extern global::System.IntPtr EntityList_merc_list_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_corpse_list_set")]
  public static extern void EntityList_corpse_list_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_corpse_list_get")]
  public static extern global::System.IntPtr EntityList_corpse_list_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_object_list_set")]
  public static extern void EntityList_object_list_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_object_list_get")]
  public static extern global::System.IntPtr EntityList_object_list_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_door_list_set")]
  public static extern void EntityList_door_list_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_door_list_get")]
  public static extern global::System.IntPtr EntityList_door_list_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_trap_list_set")]
  public static extern void EntityList_trap_list_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_trap_list_get")]
  public static extern global::System.IntPtr EntityList_trap_list_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_beacon_list_set")]
  public static extern void EntityList_beacon_list_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_beacon_list_get")]
  public static extern global::System.IntPtr EntityList_beacon_list_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_encounter_list_set")]
  public static extern void EntityList_encounter_list_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_encounter_list_get")]
  public static extern global::System.IntPtr EntityList_encounter_list_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_proximity_list_set")]
  public static extern void EntityList_proximity_list_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_proximity_list_get")]
  public static extern global::System.IntPtr EntityList_proximity_list_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_group_list_set")]
  public static extern void EntityList_group_list_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_group_list_get")]
  public static extern global::System.IntPtr EntityList_group_list_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_raid_list_set")]
  public static extern void EntityList_raid_list_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_raid_list_get")]
  public static extern global::System.IntPtr EntityList_raid_list_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_area_list_set")]
  public static extern void EntityList_area_list_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_area_list_get")]
  public static extern global::System.IntPtr EntityList_area_list_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_AddBot__SWIG_0")]
  public static extern void EntityList_AddBot__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_AddBot__SWIG_1")]
  public static extern void EntityList_AddBot__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_AddBot__SWIG_2")]
  public static extern void EntityList_AddBot__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_RemoveBot")]
  public static extern bool EntityList_RemoveBot(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetMobByBotID")]
  public static extern global::System.IntPtr EntityList_GetMobByBotID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetBotByBotID")]
  public static extern global::System.IntPtr EntityList_GetBotByBotID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetBotByBotName")]
  public static extern global::System.IntPtr EntityList_GetBotByBotName(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetBotOwnerByBotEntityID")]
  public static extern global::System.IntPtr EntityList_GetBotOwnerByBotEntityID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetBotOwnerByBotID")]
  public static extern global::System.IntPtr EntityList_GetBotOwnerByBotID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetBotsByBotOwnerCharacterID")]
  public static extern global::System.IntPtr EntityList_GetBotsByBotOwnerCharacterID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_Bot_AICheckCloseBeneficialSpells")]
  public static extern bool EntityList_Bot_AICheckCloseBeneficialSpells(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, byte jarg3, float jarg4, uint jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_ShowSpawnWindow")]
  public static extern void EntityList_ShowSpawnWindow(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_ScanCloseClientMobs")]
  public static extern void EntityList_ScanCloseClientMobs(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EntityList_GetBotList__SWIG_1")]
  public static extern void EntityList_GetBotList__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_BulkZoneSpawnPacket")]
  public static extern global::System.IntPtr new_BulkZoneSpawnPacket(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_BulkZoneSpawnPacket")]
  public static extern void delete_BulkZoneSpawnPacket(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_BulkZoneSpawnPacket_AddSpawn")]
  public static extern bool BulkZoneSpawnPacket_AddSpawn(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_BulkZoneSpawnPacket_SendBuffer")]
  public static extern void BulkZoneSpawnPacket_SendBuffer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_strn0cpy")]
  public static extern string strn0cpy(string jarg1, string jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MAX_SPECIAL_ATTACK_PARAMS_get")]
  public static extern int MAX_SPECIAL_ATTACK_PARAMS_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_COLLISION_BOX_SIZE_get")]
  public static extern int COLLISION_BOX_SIZE_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_HP300_get")]
  public static extern uint HP300_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_HP8000_get")]
  public static extern uint HP8000_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AppearanceStruct_aa_title_set")]
  public static extern void AppearanceStruct_aa_title_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AppearanceStruct_aa_title_get")]
  public static extern byte AppearanceStruct_aa_title_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AppearanceStruct_beard_set")]
  public static extern void AppearanceStruct_beard_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AppearanceStruct_beard_get")]
  public static extern byte AppearanceStruct_beard_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AppearanceStruct_beard_color_set")]
  public static extern void AppearanceStruct_beard_color_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AppearanceStruct_beard_color_get")]
  public static extern byte AppearanceStruct_beard_color_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AppearanceStruct_drakkin_details_set")]
  public static extern void AppearanceStruct_drakkin_details_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AppearanceStruct_drakkin_details_get")]
  public static extern uint AppearanceStruct_drakkin_details_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AppearanceStruct_drakkin_heritage_set")]
  public static extern void AppearanceStruct_drakkin_heritage_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AppearanceStruct_drakkin_heritage_get")]
  public static extern uint AppearanceStruct_drakkin_heritage_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AppearanceStruct_drakkin_tattoo_set")]
  public static extern void AppearanceStruct_drakkin_tattoo_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AppearanceStruct_drakkin_tattoo_get")]
  public static extern uint AppearanceStruct_drakkin_tattoo_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AppearanceStruct_eye_color_one_set")]
  public static extern void AppearanceStruct_eye_color_one_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AppearanceStruct_eye_color_one_get")]
  public static extern byte AppearanceStruct_eye_color_one_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AppearanceStruct_eye_color_two_set")]
  public static extern void AppearanceStruct_eye_color_two_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AppearanceStruct_eye_color_two_get")]
  public static extern byte AppearanceStruct_eye_color_two_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AppearanceStruct_face_set")]
  public static extern void AppearanceStruct_face_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AppearanceStruct_face_get")]
  public static extern byte AppearanceStruct_face_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AppearanceStruct_gender_id_set")]
  public static extern void AppearanceStruct_gender_id_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AppearanceStruct_gender_id_get")]
  public static extern byte AppearanceStruct_gender_id_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AppearanceStruct_hair_set")]
  public static extern void AppearanceStruct_hair_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AppearanceStruct_hair_get")]
  public static extern byte AppearanceStruct_hair_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AppearanceStruct_hair_color_set")]
  public static extern void AppearanceStruct_hair_color_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AppearanceStruct_hair_color_get")]
  public static extern byte AppearanceStruct_hair_color_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AppearanceStruct_helmet_texture_set")]
  public static extern void AppearanceStruct_helmet_texture_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AppearanceStruct_helmet_texture_get")]
  public static extern byte AppearanceStruct_helmet_texture_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AppearanceStruct_race_id_set")]
  public static extern void AppearanceStruct_race_id_set(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AppearanceStruct_race_id_get")]
  public static extern ushort AppearanceStruct_race_id_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AppearanceStruct_send_effects_set")]
  public static extern void AppearanceStruct_send_effects_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AppearanceStruct_send_effects_get")]
  public static extern bool AppearanceStruct_send_effects_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AppearanceStruct_size_set")]
  public static extern void AppearanceStruct_size_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AppearanceStruct_size_get")]
  public static extern float AppearanceStruct_size_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AppearanceStruct_target_set")]
  public static extern void AppearanceStruct_target_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AppearanceStruct_target_get")]
  public static extern global::System.IntPtr AppearanceStruct_target_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AppearanceStruct_texture_set")]
  public static extern void AppearanceStruct_texture_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AppearanceStruct_texture_get")]
  public static extern byte AppearanceStruct_texture_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_AppearanceStruct")]
  public static extern global::System.IntPtr new_AppearanceStruct();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_AppearanceStruct")]
  public static extern void delete_AppearanceStruct(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Mob_SpecialAbility")]
  public static extern global::System.IntPtr new_Mob_SpecialAbility();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_Mob_SpecialAbility")]
  public static extern void delete_Mob_SpecialAbility(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SpecialAbility_level_set")]
  public static extern void Mob_SpecialAbility_level_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SpecialAbility_level_get")]
  public static extern int Mob_SpecialAbility_level_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SpecialAbility_timer_set")]
  public static extern void Mob_SpecialAbility_timer_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SpecialAbility_timer_get")]
  public static extern global::System.IntPtr Mob_SpecialAbility_timer_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SpecialAbility_params__set")]
  public static extern void Mob_SpecialAbility_params__set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SpecialAbility_params__get")]
  public static extern global::System.IntPtr Mob_SpecialAbility_params__get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AuraInfo_name_set")]
  public static extern void Mob_AuraInfo_name_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AuraInfo_name_get")]
  public static extern string Mob_AuraInfo_name_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AuraInfo_spawn_id_set")]
  public static extern void Mob_AuraInfo_spawn_id_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AuraInfo_spawn_id_get")]
  public static extern int Mob_AuraInfo_spawn_id_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AuraInfo_icon_set")]
  public static extern void Mob_AuraInfo_icon_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AuraInfo_icon_get")]
  public static extern int Mob_AuraInfo_icon_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AuraInfo_aura_set")]
  public static extern void Mob_AuraInfo_aura_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AuraInfo_aura_get")]
  public static extern global::System.IntPtr Mob_AuraInfo_aura_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Mob_AuraInfo")]
  public static extern global::System.IntPtr new_Mob_AuraInfo();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_Mob_AuraInfo")]
  public static extern void delete_Mob_AuraInfo(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AuraMgr_count_set")]
  public static extern void Mob_AuraMgr_count_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AuraMgr_count_get")]
  public static extern int Mob_AuraMgr_count_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AuraMgr_auras_set")]
  public static extern void Mob_AuraMgr_auras_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AuraMgr_auras_get")]
  public static extern global::System.IntPtr Mob_AuraMgr_auras_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Mob_AuraMgr")]
  public static extern global::System.IntPtr new_Mob_AuraMgr();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_Mob_AuraMgr")]
  public static extern void delete_Mob_AuraMgr(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_Mob")]
  public static extern void delete_Mob(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsMob")]
  public static extern bool Mob_IsMob(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_InZone")]
  public static extern bool Mob_InZone(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DisplayInfo")]
  public static extern void Mob_DisplayInfo(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_close_mobs_set")]
  public static extern void Mob_close_mobs_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_close_mobs_get")]
  public static extern global::System.IntPtr Mob_close_mobs_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_mob_close_scan_timer_set")]
  public static extern void Mob_mob_close_scan_timer_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_mob_close_scan_timer_get")]
  public static extern global::System.IntPtr Mob_mob_close_scan_timer_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_mob_check_moving_timer_set")]
  public static extern void Mob_mob_check_moving_timer_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_mob_check_moving_timer_get")]
  public static extern global::System.IntPtr Mob_mob_check_moving_timer_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_RogueBackstab__SWIG_0")]
  public static extern void Mob_RogueBackstab__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_RogueBackstab__SWIG_1")]
  public static extern void Mob_RogueBackstab__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_RogueBackstab__SWIG_2")]
  public static extern void Mob_RogueBackstab__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_RogueAssassinate")]
  public static extern void Mob_RogueAssassinate(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_MobAngle__SWIG_0")]
  public static extern float Mob_MobAngle__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, float jarg3, float jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_MobAngle__SWIG_1")]
  public static extern float Mob_MobAngle__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, float jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_MobAngle__SWIG_2")]
  public static extern float Mob_MobAngle__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_MobAngle__SWIG_3")]
  public static extern float Mob_MobAngle__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_BehindMob__SWIG_0")]
  public static extern bool Mob_BehindMob__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, float jarg3, float jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_BehindMob__SWIG_1")]
  public static extern bool Mob_BehindMob__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, float jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_BehindMob__SWIG_2")]
  public static extern bool Mob_BehindMob__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_BehindMob__SWIG_3")]
  public static extern bool Mob_BehindMob__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_InFrontMob__SWIG_0")]
  public static extern bool Mob_InFrontMob__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, float jarg3, float jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_InFrontMob__SWIG_1")]
  public static extern bool Mob_InFrontMob__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, float jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_InFrontMob__SWIG_2")]
  public static extern bool Mob_InFrontMob__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_InFrontMob__SWIG_3")]
  public static extern bool Mob_InFrontMob__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsFacingMob")]
  public static extern bool Mob_IsFacingMob(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HeadingAngleToMob__SWIG_0")]
  public static extern float Mob_HeadingAngleToMob__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HeadingAngleToMob__SWIG_1")]
  public static extern float Mob_HeadingAngleToMob__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_RangedAttack")]
  public static extern void Mob_RangedAttack(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ThrowingAttack")]
  public static extern void Mob_ThrowingAttack(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Attack__SWIG_0")]
  public static extern bool Mob_Attack__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, bool jarg4, bool jarg5, bool jarg6, global::System.Runtime.InteropServices.HandleRef jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Attack__SWIG_1")]
  public static extern bool Mob_Attack__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, bool jarg4, bool jarg5, bool jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Attack__SWIG_2")]
  public static extern bool Mob_Attack__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, bool jarg4, bool jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Attack__SWIG_3")]
  public static extern bool Mob_Attack__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Attack__SWIG_4")]
  public static extern bool Mob_Attack__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Attack__SWIG_5")]
  public static extern bool Mob_Attack__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoAttack__SWIG_0")]
  public static extern void Mob_DoAttack__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, bool jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoAttack__SWIG_1")]
  public static extern void Mob_DoAttack__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoAttack__SWIG_2")]
  public static extern void Mob_DoAttack__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_MonkSpecialAttack")]
  public static extern int Mob_MonkSpecialAttack(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, byte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TryBackstab__SWIG_0")]
  public static extern void Mob_TryBackstab__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TryBackstab__SWIG_1")]
  public static extern void Mob_TryBackstab__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AvoidDamage")]
  public static extern bool Mob_AvoidDamage(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_compute_tohit")]
  public static extern int Mob_compute_tohit(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetTotalToHit")]
  public static extern int Mob_GetTotalToHit(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_compute_defense")]
  public static extern int Mob_compute_defense(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetTotalDefense")]
  public static extern int Mob_GetTotalDefense(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CheckHitChance")]
  public static extern bool Mob_CheckHitChance(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TryCriticalHit__SWIG_0")]
  public static extern void Mob_TryCriticalHit__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TryCriticalHit__SWIG_1")]
  public static extern void Mob_TryCriticalHit__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TryPetCriticalHit")]
  public static extern void Mob_TryPetCriticalHit(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TryFinishingBlow")]
  public static extern bool Mob_TryFinishingBlow(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TryHeadShot")]
  public static extern int Mob_TryHeadShot(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TryAssassinate")]
  public static extern int Mob_TryAssassinate(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoRiposte")]
  public static extern void Mob_DoRiposte(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ApplyMeleeDamageMods__SWIG_0")]
  public static extern void Mob_ApplyMeleeDamageMods__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ApplyMeleeDamageMods__SWIG_1")]
  public static extern void Mob_ApplyMeleeDamageMods__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ApplyMeleeDamageMods__SWIG_2")]
  public static extern void Mob_ApplyMeleeDamageMods__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ACSum__SWIG_0")]
  public static extern int Mob_ACSum__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ACSum__SWIG_1")]
  public static extern int Mob_ACSum__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetDisplayAC")]
  public static extern int Mob_GetDisplayAC(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_offense")]
  public static extern int Mob_offense(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetBestMeleeSkill")]
  public static extern int Mob_GetBestMeleeSkill(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CalcAC")]
  public static extern void Mob_CalcAC(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetACSoftcap")]
  public static extern int Mob_GetACSoftcap(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetSoftcapReturns")]
  public static extern double Mob_GetSoftcapReturns(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetClassRaceACBonus")]
  public static extern int Mob_GetClassRaceACBonus(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetMitigationAC")]
  public static extern int Mob_GetMitigationAC(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_MeleeMitigation__SWIG_0")]
  public static extern void Mob_MeleeMitigation__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_MeleeMitigation__SWIG_1")]
  public static extern void Mob_MeleeMitigation__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_RollD20")]
  public static extern double Mob_RollD20(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CombatRange__SWIG_0")]
  public static extern bool Mob_CombatRange__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, float jarg3, bool jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CombatRange__SWIG_1")]
  public static extern bool Mob_CombatRange__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, float jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CombatRange__SWIG_2")]
  public static extern bool Mob_CombatRange__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, float jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CombatRange__SWIG_3")]
  public static extern bool Mob_CombatRange__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsBerserk")]
  public static extern bool Mob_IsBerserk(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_RogueEvade")]
  public static extern void Mob_RogueEvade(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CommonOutgoingHitSuccess__SWIG_0")]
  public static extern void Mob_CommonOutgoingHitSuccess__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CommonOutgoingHitSuccess__SWIG_1")]
  public static extern void Mob_CommonOutgoingHitSuccess__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HasDied")]
  public static extern bool Mob_HasDied(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CheckDualWield")]
  public static extern bool Mob_CheckDualWield(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoMainHandAttackRounds__SWIG_0")]
  public static extern void Mob_DoMainHandAttackRounds__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoMainHandAttackRounds__SWIG_1")]
  public static extern void Mob_DoMainHandAttackRounds__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoMainHandAttackRounds__SWIG_2")]
  public static extern void Mob_DoMainHandAttackRounds__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoOffHandAttackRounds__SWIG_0")]
  public static extern void Mob_DoOffHandAttackRounds__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoOffHandAttackRounds__SWIG_1")]
  public static extern void Mob_DoOffHandAttackRounds__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoOffHandAttackRounds__SWIG_2")]
  public static extern void Mob_DoOffHandAttackRounds__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CheckDoubleAttack")]
  public static extern bool Mob_CheckDoubleAttack(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ProcessAttackRounds__SWIG_0")]
  public static extern void Mob_ProcessAttackRounds__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ProcessAttackRounds__SWIG_1")]
  public static extern void Mob_ProcessAttackRounds__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ProcessAttackRounds__SWIG_2")]
  public static extern void Mob_ProcessAttackRounds__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HasAnInvisibilityEffect")]
  public static extern bool Mob_HasAnInvisibilityEffect(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_BreakCharmPetIfConditionsMet")]
  public static extern void Mob_BreakCharmPetIfConditionsMet(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsInvisible__SWIG_0")]
  public static extern bool Mob_IsInvisible__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsInvisible__SWIG_1")]
  public static extern bool Mob_IsInvisible__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetInvisible__SWIG_0")]
  public static extern void Mob_SetInvisible__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetInvisible__SWIG_1")]
  public static extern void Mob_SetInvisible__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CalcSeeInvisibleLevel")]
  public static extern void Mob_CalcSeeInvisibleLevel(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CalcInvisibleLevel")]
  public static extern void Mob_CalcInvisibleLevel(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ZeroInvisibleVars")]
  public static extern void Mob_ZeroInvisibleVars(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_BreakInvisibleSpells")]
  public static extern void Mob_BreakInvisibleSpells(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CancelSneakHide")]
  public static extern void Mob_CancelSneakHide(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CommonBreakInvisible")]
  public static extern void Mob_CommonBreakInvisible(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CommonBreakInvisibleFromCombat")]
  public static extern void Mob_CommonBreakInvisibleFromCombat(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetInvisibleLevel")]
  public static extern byte Mob_GetInvisibleLevel(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetInvisibleUndeadLevel")]
  public static extern byte Mob_GetInvisibleUndeadLevel(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SeeHide")]
  public static extern bool Mob_SeeHide(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SeeImprovedHide")]
  public static extern bool Mob_SeeImprovedHide(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SeeInvisibleUndead")]
  public static extern byte Mob_SeeInvisibleUndead(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SeeInvisible")]
  public static extern byte Mob_SeeInvisible(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetInnateSeeInvisible")]
  public static extern void Mob_SetInnateSeeInvisible(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetSeeInvisibleUndead")]
  public static extern void Mob_SetSeeInvisibleUndead(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_tmHidden_set")]
  public static extern void Mob_tmHidden_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_tmHidden_get")]
  public static extern uint Mob_tmHidden_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_invisible_set")]
  public static extern void Mob_invisible_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_invisible_get")]
  public static extern byte Mob_invisible_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_nobuff_invisible_set")]
  public static extern void Mob_nobuff_invisible_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_nobuff_invisible_get")]
  public static extern byte Mob_nobuff_invisible_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_invisible_undead_set")]
  public static extern void Mob_invisible_undead_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_invisible_undead_get")]
  public static extern byte Mob_invisible_undead_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_invisible_animals_set")]
  public static extern void Mob_invisible_animals_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_invisible_animals_get")]
  public static extern byte Mob_invisible_animals_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_see_invis_set")]
  public static extern void Mob_see_invis_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_see_invis_get")]
  public static extern byte Mob_see_invis_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_innate_see_invis_set")]
  public static extern void Mob_innate_see_invis_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_innate_see_invis_get")]
  public static extern byte Mob_innate_see_invis_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_see_invis_undead_set")]
  public static extern void Mob_see_invis_undead_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_see_invis_undead_get")]
  public static extern byte Mob_see_invis_undead_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_sneaking_set")]
  public static extern void Mob_sneaking_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_sneaking_get")]
  public static extern bool Mob_sneaking_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_hidden_set")]
  public static extern void Mob_hidden_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_hidden_get")]
  public static extern bool Mob_hidden_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_improved_hidden_set")]
  public static extern void Mob_improved_hidden_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_improved_hidden_get")]
  public static extern bool Mob_improved_hidden_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_see_hide_set")]
  public static extern void Mob_see_hide_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_see_hide_get")]
  public static extern bool Mob_see_hide_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_see_improved_hide_set")]
  public static extern void Mob_see_improved_hide_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_see_improved_hide_get")]
  public static extern bool Mob_see_improved_hide_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_mob_texture_profile_set")]
  public static extern void Mob_mob_texture_profile_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_mob_texture_profile_get")]
  public static extern global::System.IntPtr Mob_mob_texture_profile_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AttackAnimation__SWIG_0")]
  public static extern global::System.IntPtr Mob_AttackAnimation__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AttackAnimation__SWIG_1")]
  public static extern global::System.IntPtr Mob_AttackAnimation__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetTextureProfileMaterial")]
  public static extern uint Mob_GetTextureProfileMaterial(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetTextureProfileColor")]
  public static extern uint Mob_GetTextureProfileColor(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetTextureProfileHeroForgeModel")]
  public static extern uint Mob_GetTextureProfileHeroForgeModel(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendArmorAppearance__SWIG_0")]
  public static extern void Mob_SendArmorAppearance__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendArmorAppearance__SWIG_1")]
  public static extern void Mob_SendArmorAppearance__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendTextureWC__SWIG_0")]
  public static extern void Mob_SendTextureWC__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, uint jarg3, uint jarg4, uint jarg5, uint jarg6, uint jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendTextureWC__SWIG_1")]
  public static extern void Mob_SendTextureWC__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, uint jarg3, uint jarg4, uint jarg5, uint jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendTextureWC__SWIG_2")]
  public static extern void Mob_SendTextureWC__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, uint jarg3, uint jarg4, uint jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendTextureWC__SWIG_3")]
  public static extern void Mob_SendTextureWC__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, uint jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendTextureWC__SWIG_4")]
  public static extern void Mob_SendTextureWC__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendWearChange__SWIG_0")]
  public static extern void Mob_SendWearChange__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendWearChange__SWIG_1")]
  public static extern void Mob_SendWearChange__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetSlotTint")]
  public static extern void Mob_SetSlotTint(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, byte jarg3, byte jarg4, byte jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_WearChange__SWIG_0")]
  public static extern void Mob_WearChange__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, uint jarg3, uint jarg4, uint jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_WearChange__SWIG_1")]
  public static extern void Mob_WearChange__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, uint jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_WearChange__SWIG_2")]
  public static extern void Mob_WearChange__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ChangeSize__SWIG_0")]
  public static extern void Mob_ChangeSize__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ChangeSize__SWIG_1")]
  public static extern void Mob_ChangeSize__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoAnim__SWIG_0")]
  public static extern void Mob_DoAnim__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, bool jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoAnim__SWIG_1")]
  public static extern void Mob_DoAnim__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoAnim__SWIG_2")]
  public static extern void Mob_DoAnim__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoAnim__SWIG_3")]
  public static extern void Mob_DoAnim__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ProjectileAnimation__SWIG_0")]
  public static extern void Mob_ProjectileAnimation__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, bool jarg4, float jarg5, float jarg6, float jarg7, float jarg8, string jarg9, global::System.Runtime.InteropServices.HandleRef jarg10);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ProjectileAnimation__SWIG_1")]
  public static extern void Mob_ProjectileAnimation__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, bool jarg4, float jarg5, float jarg6, float jarg7, float jarg8, string jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ProjectileAnimation__SWIG_2")]
  public static extern void Mob_ProjectileAnimation__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, bool jarg4, float jarg5, float jarg6, float jarg7, float jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ProjectileAnimation__SWIG_3")]
  public static extern void Mob_ProjectileAnimation__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, bool jarg4, float jarg5, float jarg6, float jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ProjectileAnimation__SWIG_4")]
  public static extern void Mob_ProjectileAnimation__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, bool jarg4, float jarg5, float jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ProjectileAnimation__SWIG_5")]
  public static extern void Mob_ProjectileAnimation__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, bool jarg4, float jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ProjectileAnimation__SWIG_6")]
  public static extern void Mob_ProjectileAnimation__SWIG_6(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ProjectileAnimation__SWIG_7")]
  public static extern void Mob_ProjectileAnimation__SWIG_7(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendAppearanceEffect__SWIG_0")]
  public static extern void Mob_SendAppearanceEffect__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, uint jarg5, uint jarg6, global::System.Runtime.InteropServices.HandleRef jarg7, uint jarg8, uint jarg9, uint jarg10, uint jarg11, uint jarg12, uint jarg13, uint jarg14, uint jarg15, uint jarg16, uint jarg17);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendAppearanceEffect__SWIG_1")]
  public static extern void Mob_SendAppearanceEffect__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, uint jarg5, uint jarg6, global::System.Runtime.InteropServices.HandleRef jarg7, uint jarg8, uint jarg9, uint jarg10, uint jarg11, uint jarg12, uint jarg13, uint jarg14, uint jarg15, uint jarg16);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendAppearanceEffect__SWIG_2")]
  public static extern void Mob_SendAppearanceEffect__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, uint jarg5, uint jarg6, global::System.Runtime.InteropServices.HandleRef jarg7, uint jarg8, uint jarg9, uint jarg10, uint jarg11, uint jarg12, uint jarg13, uint jarg14, uint jarg15);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendAppearanceEffect__SWIG_3")]
  public static extern void Mob_SendAppearanceEffect__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, uint jarg5, uint jarg6, global::System.Runtime.InteropServices.HandleRef jarg7, uint jarg8, uint jarg9, uint jarg10, uint jarg11, uint jarg12, uint jarg13, uint jarg14);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendAppearanceEffect__SWIG_4")]
  public static extern void Mob_SendAppearanceEffect__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, uint jarg5, uint jarg6, global::System.Runtime.InteropServices.HandleRef jarg7, uint jarg8, uint jarg9, uint jarg10, uint jarg11, uint jarg12, uint jarg13);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendAppearanceEffect__SWIG_5")]
  public static extern void Mob_SendAppearanceEffect__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, uint jarg5, uint jarg6, global::System.Runtime.InteropServices.HandleRef jarg7, uint jarg8, uint jarg9, uint jarg10, uint jarg11, uint jarg12);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendAppearanceEffect__SWIG_6")]
  public static extern void Mob_SendAppearanceEffect__SWIG_6(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, uint jarg5, uint jarg6, global::System.Runtime.InteropServices.HandleRef jarg7, uint jarg8, uint jarg9, uint jarg10, uint jarg11);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendAppearanceEffect__SWIG_7")]
  public static extern void Mob_SendAppearanceEffect__SWIG_7(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, uint jarg5, uint jarg6, global::System.Runtime.InteropServices.HandleRef jarg7, uint jarg8, uint jarg9, uint jarg10);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendAppearanceEffect__SWIG_8")]
  public static extern void Mob_SendAppearanceEffect__SWIG_8(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, uint jarg5, uint jarg6, global::System.Runtime.InteropServices.HandleRef jarg7, uint jarg8, uint jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendAppearanceEffect__SWIG_9")]
  public static extern void Mob_SendAppearanceEffect__SWIG_9(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, uint jarg5, uint jarg6, global::System.Runtime.InteropServices.HandleRef jarg7, uint jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendAppearanceEffect__SWIG_10")]
  public static extern void Mob_SendAppearanceEffect__SWIG_10(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, uint jarg5, uint jarg6, global::System.Runtime.InteropServices.HandleRef jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendAppearanceEffect__SWIG_11")]
  public static extern void Mob_SendAppearanceEffect__SWIG_11(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, uint jarg5, uint jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendLevelAppearance")]
  public static extern void Mob_SendLevelAppearance(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendTargetable__SWIG_0")]
  public static extern void Mob_SendTargetable__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendTargetable__SWIG_1")]
  public static extern void Mob_SendTargetable__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetMobTextureProfile__SWIG_0")]
  public static extern void Mob_SetMobTextureProfile__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, uint jarg3, uint jarg4, uint jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetMobTextureProfile__SWIG_1")]
  public static extern void Mob_SetMobTextureProfile__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, uint jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetMobTextureProfile__SWIG_2")]
  public static extern void Mob_SetMobTextureProfile__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendSpellEffect__SWIG_0")]
  public static extern void Mob_SendSpellEffect__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, bool jarg5, uint jarg6, bool jarg7, global::System.Runtime.InteropServices.HandleRef jarg8, uint jarg9, uint jarg10);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendSpellEffect__SWIG_1")]
  public static extern void Mob_SendSpellEffect__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, bool jarg5, uint jarg6, bool jarg7, global::System.Runtime.InteropServices.HandleRef jarg8, uint jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendSpellEffect__SWIG_2")]
  public static extern void Mob_SendSpellEffect__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, bool jarg5, uint jarg6, bool jarg7, global::System.Runtime.InteropServices.HandleRef jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendSpellEffect__SWIG_3")]
  public static extern void Mob_SendSpellEffect__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, bool jarg5, uint jarg6, bool jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendSpellEffect__SWIG_4")]
  public static extern void Mob_SendSpellEffect__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, bool jarg5, uint jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsBeneficialAllowed")]
  public static extern bool Mob_IsBeneficialAllowed(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetCasterLevel")]
  public static extern int Mob_GetCasterLevel(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ApplySpellsBonuses__SWIG_0")]
  public static extern void Mob_ApplySpellsBonuses__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, byte jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, ushort jarg5, byte jarg6, int jarg7, int jarg8, int jarg9, bool jarg10, ushort jarg11, int jarg12, int jarg13, int jarg14);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ApplySpellsBonuses__SWIG_1")]
  public static extern void Mob_ApplySpellsBonuses__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, byte jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, ushort jarg5, byte jarg6, int jarg7, int jarg8, int jarg9, bool jarg10, ushort jarg11, int jarg12, int jarg13);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ApplySpellsBonuses__SWIG_2")]
  public static extern void Mob_ApplySpellsBonuses__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, byte jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, ushort jarg5, byte jarg6, int jarg7, int jarg8, int jarg9, bool jarg10, ushort jarg11, int jarg12);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ApplySpellsBonuses__SWIG_3")]
  public static extern void Mob_ApplySpellsBonuses__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, byte jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, ushort jarg5, byte jarg6, int jarg7, int jarg8, int jarg9, bool jarg10, ushort jarg11);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ApplySpellsBonuses__SWIG_4")]
  public static extern void Mob_ApplySpellsBonuses__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, byte jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, ushort jarg5, byte jarg6, int jarg7, int jarg8, int jarg9, bool jarg10);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ApplySpellsBonuses__SWIG_5")]
  public static extern void Mob_ApplySpellsBonuses__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, byte jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, ushort jarg5, byte jarg6, int jarg7, int jarg8, int jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ApplySpellsBonuses__SWIG_6")]
  public static extern void Mob_ApplySpellsBonuses__SWIG_6(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, byte jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, ushort jarg5, byte jarg6, int jarg7, int jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ApplySpellsBonuses__SWIG_7")]
  public static extern void Mob_ApplySpellsBonuses__SWIG_7(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, byte jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, ushort jarg5, byte jarg6, int jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ApplySpellsBonuses__SWIG_8")]
  public static extern void Mob_ApplySpellsBonuses__SWIG_8(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, byte jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, ushort jarg5, byte jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ApplySpellsBonuses__SWIG_9")]
  public static extern void Mob_ApplySpellsBonuses__SWIG_9(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, byte jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, ushort jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ApplySpellsBonuses__SWIG_10")]
  public static extern void Mob_ApplySpellsBonuses__SWIG_10(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, byte jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_NegateSpellEffectBonuses")]
  public static extern void Mob_NegateSpellEffectBonuses(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_NegateSpellEffect")]
  public static extern bool Mob_NegateSpellEffect(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetActSpellRange")]
  public static extern float Mob_GetActSpellRange(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, float jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetActSpellDamage__SWIG_0")]
  public static extern long Mob_GetActSpellDamage__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, long jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetActSpellDamage__SWIG_1")]
  public static extern long Mob_GetActSpellDamage__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, long jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetActDoTDamage__SWIG_0")]
  public static extern long Mob_GetActDoTDamage__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, long jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, bool jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetActDoTDamage__SWIG_1")]
  public static extern long Mob_GetActDoTDamage__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, long jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetActSpellHealing__SWIG_0")]
  public static extern long Mob_GetActSpellHealing__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, long jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, bool jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetActSpellHealing__SWIG_1")]
  public static extern long Mob_GetActSpellHealing__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, long jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetActSpellHealing__SWIG_2")]
  public static extern long Mob_GetActSpellHealing__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, long jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetActSpellCost")]
  public static extern int Mob_GetActSpellCost(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetActSpellDuration")]
  public static extern int Mob_GetActSpellDuration(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetActSpellCasttime")]
  public static extern int Mob_GetActSpellCasttime(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetActReflectedSpellDamage")]
  public static extern long Mob_GetActReflectedSpellDamage(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, long jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ResistSpell__SWIG_0")]
  public static extern float Mob_ResistSpell__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, ushort jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, bool jarg5, int jarg6, bool jarg7, bool jarg8, bool jarg9, int jarg10);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ResistSpell__SWIG_1")]
  public static extern float Mob_ResistSpell__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, ushort jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, bool jarg5, int jarg6, bool jarg7, bool jarg8, bool jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ResistSpell__SWIG_2")]
  public static extern float Mob_ResistSpell__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, ushort jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, bool jarg5, int jarg6, bool jarg7, bool jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ResistSpell__SWIG_3")]
  public static extern float Mob_ResistSpell__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, ushort jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, bool jarg5, int jarg6, bool jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ResistSpell__SWIG_4")]
  public static extern float Mob_ResistSpell__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, ushort jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, bool jarg5, int jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ResistSpell__SWIG_5")]
  public static extern float Mob_ResistSpell__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, ushort jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, bool jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ResistSpell__SWIG_6")]
  public static extern float Mob_ResistSpell__SWIG_6(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, ushort jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetResist")]
  public static extern int Mob_GetResist(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ResistPhysical")]
  public static extern int Mob_ResistPhysical(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, byte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ResistElementalWeaponDmg")]
  public static extern int Mob_ResistElementalWeaponDmg(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CheckBaneDamage")]
  public static extern int Mob_CheckBaneDamage(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetSpecializeSkillValue")]
  public static extern ushort Mob_GetSpecializeSkillValue(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendSpellBarDisable")]
  public static extern void Mob_SendSpellBarDisable(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendSpellBarEnable")]
  public static extern void Mob_SendSpellBarEnable(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ZeroCastingVars")]
  public static extern void Mob_ZeroCastingVars(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SpellProcess")]
  public static extern void Mob_SpellProcess(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CastSpell__SWIG_0")]
  public static extern bool Mob_CastSpell__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, ushort jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, int jarg6, global::System.Runtime.InteropServices.HandleRef jarg7, uint jarg8, uint jarg9, uint jarg10, global::System.Runtime.InteropServices.HandleRef jarg11, uint jarg12);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CastSpell__SWIG_1")]
  public static extern bool Mob_CastSpell__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, ushort jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, int jarg6, global::System.Runtime.InteropServices.HandleRef jarg7, uint jarg8, uint jarg9, uint jarg10, global::System.Runtime.InteropServices.HandleRef jarg11);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CastSpell__SWIG_2")]
  public static extern bool Mob_CastSpell__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, ushort jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, int jarg6, global::System.Runtime.InteropServices.HandleRef jarg7, uint jarg8, uint jarg9, uint jarg10);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CastSpell__SWIG_3")]
  public static extern bool Mob_CastSpell__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, ushort jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, int jarg6, global::System.Runtime.InteropServices.HandleRef jarg7, uint jarg8, uint jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CastSpell__SWIG_4")]
  public static extern bool Mob_CastSpell__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, ushort jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, int jarg6, global::System.Runtime.InteropServices.HandleRef jarg7, uint jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CastSpell__SWIG_5")]
  public static extern bool Mob_CastSpell__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, ushort jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, int jarg6, global::System.Runtime.InteropServices.HandleRef jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CastSpell__SWIG_6")]
  public static extern bool Mob_CastSpell__SWIG_6(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, ushort jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, int jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CastSpell__SWIG_7")]
  public static extern bool Mob_CastSpell__SWIG_7(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, ushort jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CastSpell__SWIG_8")]
  public static extern bool Mob_CastSpell__SWIG_8(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, ushort jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CastSpell__SWIG_9")]
  public static extern bool Mob_CastSpell__SWIG_9(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, ushort jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoCastSpell__SWIG_0")]
  public static extern bool Mob_DoCastSpell__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, ushort jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, int jarg6, global::System.Runtime.InteropServices.HandleRef jarg7, uint jarg8, uint jarg9, uint jarg10, short jarg11, uint jarg12);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoCastSpell__SWIG_1")]
  public static extern bool Mob_DoCastSpell__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, ushort jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, int jarg6, global::System.Runtime.InteropServices.HandleRef jarg7, uint jarg8, uint jarg9, uint jarg10, short jarg11);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoCastSpell__SWIG_2")]
  public static extern bool Mob_DoCastSpell__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, ushort jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, int jarg6, global::System.Runtime.InteropServices.HandleRef jarg7, uint jarg8, uint jarg9, uint jarg10);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoCastSpell__SWIG_3")]
  public static extern bool Mob_DoCastSpell__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, ushort jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, int jarg6, global::System.Runtime.InteropServices.HandleRef jarg7, uint jarg8, uint jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoCastSpell__SWIG_4")]
  public static extern bool Mob_DoCastSpell__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, ushort jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, int jarg6, global::System.Runtime.InteropServices.HandleRef jarg7, uint jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoCastSpell__SWIG_5")]
  public static extern bool Mob_DoCastSpell__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, ushort jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, int jarg6, global::System.Runtime.InteropServices.HandleRef jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoCastSpell__SWIG_6")]
  public static extern bool Mob_DoCastSpell__SWIG_6(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, ushort jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, int jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoCastSpell__SWIG_7")]
  public static extern bool Mob_DoCastSpell__SWIG_7(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, ushort jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoCastSpell__SWIG_8")]
  public static extern bool Mob_DoCastSpell__SWIG_8(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, ushort jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoCastSpell__SWIG_9")]
  public static extern bool Mob_DoCastSpell__SWIG_9(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, ushort jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CastedSpellFinished__SWIG_0")]
  public static extern void Mob_CastedSpellFinished__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, uint jarg6, short jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CastedSpellFinished__SWIG_1")]
  public static extern void Mob_CastedSpellFinished__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, uint jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CastedSpellFinished__SWIG_2")]
  public static extern void Mob_CastedSpellFinished__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SpellFinished__SWIG_0")]
  public static extern bool Mob_SpellFinished__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, uint jarg6, short jarg7, bool jarg8, int jarg9, uint jarg10, uint jarg11, bool jarg12, uint jarg13);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SpellFinished__SWIG_1")]
  public static extern bool Mob_SpellFinished__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, uint jarg6, short jarg7, bool jarg8, int jarg9, uint jarg10, uint jarg11, bool jarg12);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SpellFinished__SWIG_2")]
  public static extern bool Mob_SpellFinished__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, uint jarg6, short jarg7, bool jarg8, int jarg9, uint jarg10, uint jarg11);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SpellFinished__SWIG_3")]
  public static extern bool Mob_SpellFinished__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, uint jarg6, short jarg7, bool jarg8, int jarg9, uint jarg10);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SpellFinished__SWIG_4")]
  public static extern bool Mob_SpellFinished__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, uint jarg6, short jarg7, bool jarg8, int jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SpellFinished__SWIG_5")]
  public static extern bool Mob_SpellFinished__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, uint jarg6, short jarg7, bool jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SpellFinished__SWIG_6")]
  public static extern bool Mob_SpellFinished__SWIG_6(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, uint jarg6, short jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SpellFinished__SWIG_7")]
  public static extern bool Mob_SpellFinished__SWIG_7(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, uint jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SpellFinished__SWIG_8")]
  public static extern bool Mob_SpellFinished__SWIG_8(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SpellFinished__SWIG_9")]
  public static extern bool Mob_SpellFinished__SWIG_9(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SpellFinished__SWIG_10")]
  public static extern bool Mob_SpellFinished__SWIG_10(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendBeginCast")]
  public static extern void Mob_SendBeginCast(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SpellOnTarget__SWIG_0")]
  public static extern bool Mob_SpellOnTarget__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4, bool jarg5, short jarg6, bool jarg7, int jarg8, int jarg9, bool jarg10);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SpellOnTarget__SWIG_1")]
  public static extern bool Mob_SpellOnTarget__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4, bool jarg5, short jarg6, bool jarg7, int jarg8, int jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SpellOnTarget__SWIG_2")]
  public static extern bool Mob_SpellOnTarget__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4, bool jarg5, short jarg6, bool jarg7, int jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SpellOnTarget__SWIG_3")]
  public static extern bool Mob_SpellOnTarget__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4, bool jarg5, short jarg6, bool jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SpellOnTarget__SWIG_4")]
  public static extern bool Mob_SpellOnTarget__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4, bool jarg5, short jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SpellOnTarget__SWIG_5")]
  public static extern bool Mob_SpellOnTarget__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4, bool jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SpellOnTarget__SWIG_6")]
  public static extern bool Mob_SpellOnTarget__SWIG_6(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SpellOnTarget__SWIG_7")]
  public static extern bool Mob_SpellOnTarget__SWIG_7(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SpellEffect__SWIG_0")]
  public static extern bool Mob_SpellEffect__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, ushort jarg3, float jarg4, int jarg5, int jarg6, int jarg7, bool jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SpellEffect__SWIG_1")]
  public static extern bool Mob_SpellEffect__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, ushort jarg3, float jarg4, int jarg5, int jarg6, int jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SpellEffect__SWIG_2")]
  public static extern bool Mob_SpellEffect__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, ushort jarg3, float jarg4, int jarg5, int jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SpellEffect__SWIG_3")]
  public static extern bool Mob_SpellEffect__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, ushort jarg3, float jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SpellEffect__SWIG_4")]
  public static extern bool Mob_SpellEffect__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, ushort jarg3, float jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SpellEffect__SWIG_5")]
  public static extern bool Mob_SpellEffect__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, ushort jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DetermineSpellTargets__SWIG_0")]
  public static extern bool Mob_DetermineSpellTargets__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, global::System.Runtime.InteropServices.HandleRef jarg6, bool jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DetermineSpellTargets__SWIG_1")]
  public static extern bool Mob_DetermineSpellTargets__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, global::System.Runtime.InteropServices.HandleRef jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoCastingChecksOnCaster")]
  public static extern bool Mob_DoCastingChecksOnCaster(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoCastingChecksZoneRestrictions")]
  public static extern bool Mob_DoCastingChecksZoneRestrictions(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoCastingChecksOnTarget")]
  public static extern bool Mob_DoCastingChecksOnTarget(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2, int jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CheckFizzle")]
  public static extern bool Mob_CheckFizzle(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CheckSpellLevelRestriction")]
  public static extern bool Mob_CheckSpellLevelRestriction(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, ushort jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsImmuneToSpell")]
  public static extern bool Mob_IsImmuneToSpell(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetAOERange")]
  public static extern float Mob_GetAOERange(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_InterruptSpell__SWIG_0")]
  public static extern void Mob_InterruptSpell__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_InterruptSpell__SWIG_1")]
  public static extern void Mob_InterruptSpell__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_InterruptSpell__SWIG_2")]
  public static extern void Mob_InterruptSpell__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, ushort jarg3, ushort jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_InterruptSpell__SWIG_3")]
  public static extern void Mob_InterruptSpell__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, ushort jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_StopCasting")]
  public static extern void Mob_StopCasting(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_StopCastSpell")]
  public static extern void Mob_StopCastSpell(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsCasting")]
  public static extern bool Mob_IsCasting(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CastingSpellID")]
  public static extern ushort Mob_CastingSpellID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TryDispel")]
  public static extern bool Mob_TryDispel(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, byte jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TrySpellProjectile__SWIG_0")]
  public static extern bool Mob_TrySpellProjectile__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, ushort jarg3, float jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TrySpellProjectile__SWIG_1")]
  public static extern bool Mob_TrySpellProjectile__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, ushort jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ResourceTap")]
  public static extern void Mob_ResourceTap(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2, ushort jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TryTriggerThreshHold")]
  public static extern void Mob_TryTriggerThreshHold(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2, int jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CalcDestFromHeading")]
  public static extern void Mob_CalcDestFromHeading(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, global::System.Runtime.InteropServices.HandleRef jarg7, global::System.Runtime.InteropServices.HandleRef jarg8, global::System.Runtime.InteropServices.HandleRef jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_BeamDirectional")]
  public static extern void Mob_BeamDirectional(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, short jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ConeDirectional")]
  public static extern void Mob_ConeDirectional(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, short jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ApplyHealthTransferDamage")]
  public static extern void Mob_ApplyHealthTransferDamage(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, ushort jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ApplySpellEffectIllusion")]
  public static extern void Mob_ApplySpellEffectIllusion(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4, int jarg5, int jarg6, int jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ApplyIllusionToCorpse")]
  public static extern void Mob_ApplyIllusionToCorpse(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendIllusionWearChange")]
  public static extern void Mob_SendIllusionWearChange(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetItemSlotToConsumeCharge")]
  public static extern short Mob_GetItemSlotToConsumeCharge(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CheckItemRaceClassDietyRestrictionsOnCast")]
  public static extern bool Mob_CheckItemRaceClassDietyRestrictionsOnCast(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsFromTriggeredSpell__SWIG_0")]
  public static extern bool Mob_IsFromTriggeredSpell__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsFromTriggeredSpell__SWIG_1")]
  public static extern bool Mob_IsFromTriggeredSpell__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ApplyBardPulse")]
  public static extern bool Mob_ApplyBardPulse(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsActiveBardSong")]
  public static extern bool Mob_IsActiveBardSong(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HasActiveSong")]
  public static extern bool Mob_HasActiveSong(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ZeroBardPulseVars")]
  public static extern void Mob_ZeroBardPulseVars(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoBardCastingFromItemClick")]
  public static extern void Mob_DoBardCastingFromItemClick(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2, uint jarg3, int jarg4, ushort jarg5, global::System.Runtime.InteropServices.HandleRef jarg6, uint jarg7, uint jarg8, uint jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_UseBardSpellLogic__SWIG_0")]
  public static extern bool Mob_UseBardSpellLogic__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_UseBardSpellLogic__SWIG_1")]
  public static extern bool Mob_UseBardSpellLogic__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_UseBardSpellLogic__SWIG_2")]
  public static extern bool Mob_UseBardSpellLogic__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_BuffProcess")]
  public static extern void Mob_BuffProcess(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoBuffTic__SWIG_0")]
  public static extern void Mob_DoBuffTic__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoBuffTic__SWIG_1")]
  public static extern void Mob_DoBuffTic__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_BuffFadeBySpellID")]
  public static extern void Mob_BuffFadeBySpellID(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_BuffFadeBySpellIDAndCaster")]
  public static extern void Mob_BuffFadeBySpellIDAndCaster(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, ushort jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_BuffFadeByEffect__SWIG_0")]
  public static extern void Mob_BuffFadeByEffect__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_BuffFadeByEffect__SWIG_1")]
  public static extern void Mob_BuffFadeByEffect__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_BuffFadeAll")]
  public static extern void Mob_BuffFadeAll(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_BuffFadeBeneficial")]
  public static extern void Mob_BuffFadeBeneficial(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_BuffFadeNonPersistDeath")]
  public static extern void Mob_BuffFadeNonPersistDeath(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_BuffFadeDetrimental")]
  public static extern void Mob_BuffFadeDetrimental(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_BuffFadeBySlot__SWIG_0")]
  public static extern void Mob_BuffFadeBySlot__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_BuffFadeBySlot__SWIG_1")]
  public static extern void Mob_BuffFadeBySlot__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_BuffFadeDetrimentalByCaster")]
  public static extern void Mob_BuffFadeDetrimentalByCaster(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_BuffFadeBySitModifier")]
  public static extern void Mob_BuffFadeBySitModifier(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_BuffDetachCaster")]
  public static extern void Mob_BuffDetachCaster(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsAffectedByBuffByGlobalGroup")]
  public static extern bool Mob_IsAffectedByBuffByGlobalGroup(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_BuffModifyDurationBySpellID")]
  public static extern void Mob_BuffModifyDurationBySpellID(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AddBuff__SWIG_0")]
  public static extern int Mob_AddBuff__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, ushort jarg3, int jarg4, int jarg5, bool jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AddBuff__SWIG_1")]
  public static extern int Mob_AddBuff__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, ushort jarg3, int jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AddBuff__SWIG_2")]
  public static extern int Mob_AddBuff__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, ushort jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AddBuff__SWIG_3")]
  public static extern int Mob_AddBuff__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, ushort jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CanBuffStack__SWIG_0")]
  public static extern int Mob_CanBuffStack__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, byte jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CanBuffStack__SWIG_1")]
  public static extern int Mob_CanBuffStack__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, byte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CalcBuffDuration__SWIG_0")]
  public static extern int Mob_CalcBuffDuration__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, ushort jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CalcBuffDuration__SWIG_1")]
  public static extern int Mob_CalcBuffDuration__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, ushort jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendPetBuffsToClient")]
  public static extern void Mob_SendPetBuffsToClient(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetCurrentBuffSlots")]
  public static extern int Mob_GetCurrentBuffSlots(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetCurrentSongSlots")]
  public static extern int Mob_GetCurrentSongSlots(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetCurrentDiscSlots")]
  public static extern int Mob_GetCurrentDiscSlots(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetMaxBuffSlots")]
  public static extern int Mob_GetMaxBuffSlots(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetMaxSongSlots")]
  public static extern int Mob_GetMaxSongSlots(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetMaxDiscSlots")]
  public static extern int Mob_GetMaxDiscSlots(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetMaxTotalSlots")]
  public static extern int Mob_GetMaxTotalSlots(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HasDiscBuff")]
  public static extern bool Mob_HasDiscBuff(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetFirstBuffSlot")]
  public static extern uint Mob_GetFirstBuffSlot(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetLastBuffSlot")]
  public static extern uint Mob_GetLastBuffSlot(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_InitializeBuffSlots")]
  public static extern void Mob_InitializeBuffSlots(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_UninitializeBuffSlots")]
  public static extern void Mob_UninitializeBuffSlots(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_MakeBuffsPacket__SWIG_0")]
  public static extern global::System.IntPtr Mob_MakeBuffsPacket__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_MakeBuffsPacket__SWIG_1")]
  public static extern global::System.IntPtr Mob_MakeBuffsPacket__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_MakeBuffsPacket__SWIG_2")]
  public static extern global::System.IntPtr Mob_MakeBuffsPacket__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendBuffsToClient")]
  public static extern void Mob_SendBuffsToClient(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetBuffs")]
  public static extern global::System.IntPtr Mob_GetBuffs(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoGravityEffect")]
  public static extern void Mob_DoGravityEffect(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DamageShield__SWIG_0")]
  public static extern void Mob_DamageShield__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DamageShield__SWIG_1")]
  public static extern void Mob_DamageShield__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_RuneAbsorb")]
  public static extern int Mob_RuneAbsorb(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2, ushort jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetBuffSpellIDs")]
  public static extern global::System.IntPtr Mob_GetBuffSpellIDs(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_FindBuff__SWIG_0")]
  public static extern bool Mob_FindBuff__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, ushort jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_FindBuff__SWIG_1")]
  public static extern bool Mob_FindBuff__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_FindBuffBySlot")]
  public static extern ushort Mob_FindBuffBySlot(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_BuffCount__SWIG_0")]
  public static extern uint Mob_BuffCount__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_BuffCount__SWIG_1")]
  public static extern uint Mob_BuffCount__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_BuffCount__SWIG_2")]
  public static extern uint Mob_BuffCount__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_FindType__SWIG_0")]
  public static extern bool Mob_FindType__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, bool jarg3, ushort jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_FindType__SWIG_1")]
  public static extern bool Mob_FindType__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_FindType__SWIG_2")]
  public static extern bool Mob_FindType__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetBuffSlotFromType")]
  public static extern short Mob_GetBuffSlotFromType(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetSpellIDFromSlot")]
  public static extern ushort Mob_GetSpellIDFromSlot(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CountDispellableBuffs")]
  public static extern int Mob_CountDispellableBuffs(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CheckNumHitsRemaining__SWIG_0")]
  public static extern void Mob_CheckNumHitsRemaining__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, ushort jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CheckNumHitsRemaining__SWIG_1")]
  public static extern void Mob_CheckNumHitsRemaining__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CheckNumHitsRemaining__SWIG_2")]
  public static extern void Mob_CheckNumHitsRemaining__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HasNumhits")]
  public static extern bool Mob_HasNumhits(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Numhits")]
  public static extern void Mob_Numhits(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HasMGB")]
  public static extern bool Mob_HasMGB(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetMGB")]
  public static extern void Mob_SetMGB(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HasProjectIllusion")]
  public static extern bool Mob_HasProjectIllusion(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetProjectIllusion")]
  public static extern void Mob_SetProjectIllusion(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsNimbusEffectActive")]
  public static extern bool Mob_IsNimbusEffectActive(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetNimbusEffect")]
  public static extern void Mob_SetNimbusEffect(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetNimbusEffect1")]
  public static extern uint Mob_GetNimbusEffect1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetNimbusEffect2")]
  public static extern uint Mob_GetNimbusEffect2(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetNimbusEffect3")]
  public static extern uint Mob_GetNimbusEffect3(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AddNimbusEffect")]
  public static extern void Mob_AddNimbusEffect(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_RemoveNimbusEffect")]
  public static extern void Mob_RemoveNimbusEffect(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_RemoveAllNimbusEffects")]
  public static extern void Mob_RemoveAllNimbusEffects(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetTargetRingLocation")]
  public static extern global::System.IntPtr Mob_GetTargetRingLocation(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetTargetRingX")]
  public static extern float Mob_GetTargetRingX(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetTargetRingY")]
  public static extern float Mob_GetTargetRingY(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetTargetRingZ")]
  public static extern float Mob_GetTargetRingZ(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HasEndurUpkeep")]
  public static extern bool Mob_HasEndurUpkeep(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetEndurUpkeep")]
  public static extern void Mob_SetEndurUpkeep(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HasBuffWithSpellGroup")]
  public static extern bool Mob_HasBuffWithSpellGroup(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetAppearanceEffects")]
  public static extern void Mob_SetAppearanceEffects(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ListAppearanceEffects")]
  public static extern void Mob_ListAppearanceEffects(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ClearAppearanceEffects")]
  public static extern void Mob_ClearAppearanceEffects(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendSavedAppearanceEffects")]
  public static extern void Mob_SendSavedAppearanceEffects(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetBuffDuration__SWIG_0")]
  public static extern void Mob_SetBuffDuration__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetBuffDuration__SWIG_1")]
  public static extern void Mob_SetBuffDuration__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetBuffDuration__SWIG_2")]
  public static extern void Mob_SetBuffDuration__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ApplySpellBuff__SWIG_0")]
  public static extern void Mob_ApplySpellBuff__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ApplySpellBuff__SWIG_1")]
  public static extern void Mob_ApplySpellBuff__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ApplySpellBuff__SWIG_2")]
  public static extern void Mob_ApplySpellBuff__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetBuffStatValueBySpell")]
  public static extern int Mob_GetBuffStatValueBySpell(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetBuffStatValueBySlot")]
  public static extern int Mob_GetBuffStatValueBySlot(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetLevel__SWIG_0")]
  public static extern void Mob_SetLevel__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetLevel__SWIG_1")]
  public static extern void Mob_SetLevel__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TempName__SWIG_0")]
  public static extern void Mob_TempName__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TempName__SWIG_1")]
  public static extern void Mob_TempName__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetTargetable")]
  public static extern void Mob_SetTargetable(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsTargetable")]
  public static extern bool Mob_IsTargetable(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HasShieldEquipped")]
  public static extern bool Mob_HasShieldEquipped(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetShieldEquipped")]
  public static extern void Mob_SetShieldEquipped(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HasTwoHandBluntEquipped")]
  public static extern bool Mob_HasTwoHandBluntEquipped(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetTwoHandBluntEquipped")]
  public static extern void Mob_SetTwoHandBluntEquipped(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HasTwoHanderEquipped")]
  public static extern bool Mob_HasTwoHanderEquipped(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetTwoHanderEquipped")]
  public static extern void Mob_SetTwoHanderEquipped(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HasDualWeaponsEquipped")]
  public static extern bool Mob_HasDualWeaponsEquipped(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HasBowEquipped")]
  public static extern bool Mob_HasBowEquipped(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetBowEquipped")]
  public static extern void Mob_SetBowEquipped(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HasArrowEquipped")]
  public static extern bool Mob_HasArrowEquipped(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetArrowEquipped")]
  public static extern void Mob_SetArrowEquipped(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HasBowAndArrowEquipped")]
  public static extern bool Mob_HasBowAndArrowEquipped(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetDualWeaponsEquipped")]
  public static extern void Mob_SetDualWeaponsEquipped(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CanFacestab")]
  public static extern bool Mob_CanFacestab(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetFacestab")]
  public static extern void Mob_SetFacestab(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ConvertItemTypeToSkillID")]
  public static extern byte Mob_ConvertItemTypeToSkillID(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetSkill")]
  public static extern ushort Mob_GetSkill(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetEquippedItemFromTextureSlot")]
  public static extern uint Mob_GetEquippedItemFromTextureSlot(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetEquipmentMaterial")]
  public static extern uint Mob_GetEquipmentMaterial(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetEquipmentType")]
  public static extern byte Mob_GetEquipmentType(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHerosForgeModel")]
  public static extern uint Mob_GetHerosForgeModel(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetEquipmentColor")]
  public static extern uint Mob_GetEquipmentColor(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsEliteMaterialItem")]
  public static extern uint Mob_IsEliteMaterialItem(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CanClassEquipItem")]
  public static extern bool Mob_CanClassEquipItem(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CanRaceEquipItem")]
  public static extern bool Mob_CanRaceEquipItem(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AffectedBySpellExcludingSlot")]
  public static extern bool Mob_AffectedBySpellExcludingSlot(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Death__SWIG_0")]
  public static extern bool Mob_Death__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, int jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Death__SWIG_1")]
  public static extern bool Mob_Death__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Damage__SWIG_0")]
  public static extern void Mob_Damage__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, bool jarg6, sbyte jarg7, bool jarg8, int jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Damage__SWIG_1")]
  public static extern void Mob_Damage__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, bool jarg6, sbyte jarg7, bool jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Damage__SWIG_2")]
  public static extern void Mob_Damage__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, bool jarg6, sbyte jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Damage__SWIG_3")]
  public static extern void Mob_Damage__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, bool jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Damage__SWIG_4")]
  public static extern void Mob_Damage__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetHP")]
  public static extern void Mob_SetHP(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetOOCRegen")]
  public static extern void Mob_SetOOCRegen(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Heal")]
  public static extern void Mob_Heal(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HealDamage__SWIG_0")]
  public static extern void Mob_HealDamage__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ulong jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, ushort jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HealDamage__SWIG_1")]
  public static extern void Mob_HealDamage__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ulong jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HealDamage__SWIG_2")]
  public static extern void Mob_HealDamage__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, ulong jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetMaxHP")]
  public static extern void Mob_SetMaxHP(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetBaseRace")]
  public static extern ushort Mob_GetBaseRace(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetBaseGender")]
  public static extern byte Mob_GetBaseGender(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetFactionRace")]
  public static extern ushort Mob_GetFactionRace(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetDeity")]
  public static extern ushort Mob_GetDeity(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetDeityBit")]
  public static extern global::System.IntPtr Mob_GetDeityBit(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetRace")]
  public static extern ushort Mob_GetRace(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetModel")]
  public static extern ushort Mob_GetModel(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetGender")]
  public static extern byte Mob_GetGender(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetTexture")]
  public static extern byte Mob_GetTexture(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHelmTexture")]
  public static extern byte Mob_GetHelmTexture(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHairColor")]
  public static extern byte Mob_GetHairColor(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetBeardColor")]
  public static extern byte Mob_GetBeardColor(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetEyeColor1")]
  public static extern byte Mob_GetEyeColor1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetEyeColor2")]
  public static extern byte Mob_GetEyeColor2(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHairStyle")]
  public static extern byte Mob_GetHairStyle(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetLuclinFace")]
  public static extern byte Mob_GetLuclinFace(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetBeard")]
  public static extern byte Mob_GetBeard(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetDrakkinHeritage")]
  public static extern byte Mob_GetDrakkinHeritage(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetDrakkinTattoo")]
  public static extern byte Mob_GetDrakkinTattoo(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetDrakkinDetails")]
  public static extern byte Mob_GetDrakkinDetails(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ChangeRace")]
  public static extern void Mob_ChangeRace(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ChangeGender")]
  public static extern void Mob_ChangeGender(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ChangeTexture")]
  public static extern void Mob_ChangeTexture(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ChangeHelmTexture")]
  public static extern void Mob_ChangeHelmTexture(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ChangeHairColor")]
  public static extern void Mob_ChangeHairColor(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ChangeBeardColor")]
  public static extern void Mob_ChangeBeardColor(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ChangeEyeColor1")]
  public static extern void Mob_ChangeEyeColor1(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ChangeEyeColor2")]
  public static extern void Mob_ChangeEyeColor2(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ChangeHairStyle")]
  public static extern void Mob_ChangeHairStyle(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ChangeLuclinFace")]
  public static extern void Mob_ChangeLuclinFace(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ChangeBeard")]
  public static extern void Mob_ChangeBeard(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ChangeDrakkinHeritage")]
  public static extern void Mob_ChangeDrakkinHeritage(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ChangeDrakkinTattoo")]
  public static extern void Mob_ChangeDrakkinTattoo(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ChangeDrakkinDetails")]
  public static extern void Mob_ChangeDrakkinDetails(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetArmorTint")]
  public static extern uint Mob_GetArmorTint(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetClass")]
  public static extern byte Mob_GetClass(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetLevel")]
  public static extern byte Mob_GetLevel(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetOrigLevel")]
  public static extern byte Mob_GetOrigLevel(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetName")]
  public static extern string Mob_GetName(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetOrigName")]
  public static extern string Mob_GetOrigName(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetLastName")]
  public static extern string Mob_GetLastName(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetCleanName")]
  public static extern string Mob_GetCleanName(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetName__SWIG_0")]
  public static extern void Mob_SetName__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetName__SWIG_1")]
  public static extern void Mob_SetName__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetTarget")]
  public static extern global::System.IntPtr Mob_GetTarget(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetTargetDescription__SWIG_0")]
  public static extern global::System.IntPtr Mob_GetTargetDescription__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, byte jarg3, ushort jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetTargetDescription__SWIG_1")]
  public static extern global::System.IntPtr Mob_GetTargetDescription__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, byte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetTargetDescription__SWIG_2")]
  public static extern global::System.IntPtr Mob_GetTargetDescription__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetTarget")]
  public static extern void Mob_SetTarget(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HasTargetReflection")]
  public static extern bool Mob_HasTargetReflection(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHPRatio")]
  public static extern float Mob_GetHPRatio(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetIntHPRatio")]
  public static extern int Mob_GetIntHPRatio(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetAC")]
  public static extern int Mob_GetAC(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetATK")]
  public static extern int Mob_GetATK(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetATKBonus")]
  public static extern int Mob_GetATKBonus(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetSTR")]
  public static extern int Mob_GetSTR(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetSTA")]
  public static extern int Mob_GetSTA(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetDEX")]
  public static extern int Mob_GetDEX(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetAGI")]
  public static extern int Mob_GetAGI(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetINT")]
  public static extern int Mob_GetINT(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetWIS")]
  public static extern int Mob_GetWIS(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetCHA")]
  public static extern int Mob_GetCHA(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHeroicMR")]
  public static extern int Mob_GetHeroicMR(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHeroicFR")]
  public static extern int Mob_GetHeroicFR(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHeroicDR")]
  public static extern int Mob_GetHeroicDR(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHeroicPR")]
  public static extern int Mob_GetHeroicPR(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHeroicCR")]
  public static extern int Mob_GetHeroicCR(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetMR")]
  public static extern int Mob_GetMR(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetFR")]
  public static extern int Mob_GetFR(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetDR")]
  public static extern int Mob_GetDR(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetPR")]
  public static extern int Mob_GetPR(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetCR")]
  public static extern int Mob_GetCR(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetCorrup")]
  public static extern int Mob_GetCorrup(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetPhR")]
  public static extern int Mob_GetPhR(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetItemBonuses")]
  public static extern global::System.IntPtr Mob_GetItemBonuses(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetSpellBonuses")]
  public static extern global::System.IntPtr Mob_GetSpellBonuses(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetAABonuses")]
  public static extern global::System.IntPtr Mob_GetAABonuses(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetItemBonusesPtr")]
  public static extern global::System.IntPtr Mob_GetItemBonusesPtr(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetSpellBonusesPtr")]
  public static extern global::System.IntPtr Mob_GetSpellBonusesPtr(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetAABonusesPtr")]
  public static extern global::System.IntPtr Mob_GetAABonusesPtr(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHeroicSTR")]
  public static extern int Mob_GetHeroicSTR(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHeroicSTA")]
  public static extern int Mob_GetHeroicSTA(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHeroicDEX")]
  public static extern int Mob_GetHeroicDEX(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHeroicAGI")]
  public static extern int Mob_GetHeroicAGI(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHeroicINT")]
  public static extern int Mob_GetHeroicINT(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHeroicWIS")]
  public static extern int Mob_GetHeroicWIS(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHeroicCHA")]
  public static extern int Mob_GetHeroicCHA(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetMaxSTR")]
  public static extern int Mob_GetMaxSTR(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetMaxSTA")]
  public static extern int Mob_GetMaxSTA(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetMaxDEX")]
  public static extern int Mob_GetMaxDEX(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetMaxAGI")]
  public static extern int Mob_GetMaxAGI(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetMaxINT")]
  public static extern int Mob_GetMaxINT(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetMaxWIS")]
  public static extern int Mob_GetMaxWIS(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetMaxCHA")]
  public static extern int Mob_GetMaxCHA(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetMaxMR")]
  public static extern int Mob_GetMaxMR(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetMaxPR")]
  public static extern int Mob_GetMaxPR(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetMaxDR")]
  public static extern int Mob_GetMaxDR(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetMaxCR")]
  public static extern int Mob_GetMaxCR(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetMaxFR")]
  public static extern int Mob_GetMaxFR(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetDelayDeath")]
  public static extern int Mob_GetDelayDeath(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHP")]
  public static extern long Mob_GetHP(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetMaxHP")]
  public static extern long Mob_GetMaxHP(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CalcMaxHP")]
  public static extern long Mob_CalcMaxHP(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CalcHPRegenCap")]
  public static extern long Mob_CalcHPRegenCap(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetMaxMana")]
  public static extern long Mob_GetMaxMana(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CalcManaRegenCap")]
  public static extern long Mob_CalcManaRegenCap(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetMana")]
  public static extern long Mob_GetMana(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetEndurance")]
  public static extern long Mob_GetEndurance(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetMaxEndurance")]
  public static extern long Mob_GetMaxEndurance(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CalcEnduranceRegenCap")]
  public static extern long Mob_CalcEnduranceRegenCap(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetEndurance")]
  public static extern void Mob_SetEndurance(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetItemHPBonuses")]
  public static extern long Mob_GetItemHPBonuses(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetSpellHPBonuses")]
  public static extern long Mob_GetSpellHPBonuses(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetMana")]
  public static extern long Mob_SetMana(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetManaRatio")]
  public static extern float Mob_GetManaRatio(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CalcMaxMana")]
  public static extern long Mob_CalcMaxMana(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetNPCTypeID")]
  public static extern uint Mob_GetNPCTypeID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetNPCTypeID")]
  public static extern void Mob_SetNPCTypeID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetPosition")]
  public static extern global::System.IntPtr Mob_GetPosition(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetPosition")]
  public static extern void Mob_SetPosition(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, float jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetX")]
  public static extern float Mob_GetX(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetY")]
  public static extern float Mob_GetY(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetZ")]
  public static extern float Mob_GetZ(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHeading")]
  public static extern float Mob_GetHeading(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetRelativePosition")]
  public static extern global::System.IntPtr Mob_GetRelativePosition(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetRelativePosition")]
  public static extern void Mob_SetRelativePosition(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, float jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetRelativeX")]
  public static extern float Mob_GetRelativeX(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetRelativeY")]
  public static extern float Mob_GetRelativeY(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetRelativeZ")]
  public static extern float Mob_GetRelativeZ(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetRelativeHeading")]
  public static extern float Mob_GetRelativeHeading(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetSize")]
  public static extern float Mob_GetSize(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetBaseSize")]
  public static extern float Mob_GetBaseSize(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetFlyMode")]
  public static extern int Mob_GetFlyMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsBoat")]
  public static extern bool Mob_IsBoat(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetIsBoat")]
  public static extern bool Mob_GetIsBoat(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetIsBoat")]
  public static extern void Mob_SetIsBoat(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsControllableBoat")]
  public static extern bool Mob_IsControllableBoat(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AlwaysAggro")]
  public static extern bool Mob_AlwaysAggro(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHeroicStrikethrough")]
  public static extern int Mob_GetHeroicStrikethrough(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetKeepsSoldItems")]
  public static extern bool Mob_GetKeepsSoldItems(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetKeepsSoldItems")]
  public static extern void Mob_SetKeepsSoldItems(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHealAmt")]
  public static extern int Mob_GetHealAmt(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetSpellDmg")]
  public static extern int Mob_GetSpellDmg(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ProcessItemCaps")]
  public static extern void Mob_ProcessItemCaps(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CalcItemATKCap")]
  public static extern int Mob_CalcItemATKCap(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsSitting")]
  public static extern bool Mob_IsSitting(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CopyHateList")]
  public static extern void Mob_CopyHateList(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HasRaid")]
  public static extern bool Mob_HasRaid(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HasGroup")]
  public static extern bool Mob_HasGroup(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetRaid")]
  public static extern global::System.IntPtr Mob_GetRaid(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetGroup")]
  public static extern global::System.IntPtr Mob_GetGroup(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetPrimaryFaction")]
  public static extern int Mob_GetPrimaryFaction(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsMoving")]
  public static extern bool Mob_IsMoving(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetMoving")]
  public static extern void Mob_SetMoving(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GoToBind__SWIG_0")]
  public static extern void Mob_GoToBind__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GoToBind__SWIG_1")]
  public static extern void Mob_GoToBind__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Gate__SWIG_0")]
  public static extern void Mob_Gate__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Gate__SWIG_1")]
  public static extern void Mob_Gate__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetWalkspeed")]
  public static extern int Mob_GetWalkspeed(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetRunspeed")]
  public static extern int Mob_GetRunspeed(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetBaseRunspeed")]
  public static extern int Mob_GetBaseRunspeed(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetBaseWalkspeed")]
  public static extern int Mob_GetBaseWalkspeed(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetBaseFearSpeed")]
  public static extern int Mob_GetBaseFearSpeed(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetMovespeed")]
  public static extern float Mob_GetMovespeed(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsRunning")]
  public static extern bool Mob_IsRunning(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetRunning")]
  public static extern void Mob_SetRunning(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GMMove__SWIG_0")]
  public static extern void Mob_GMMove__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, float jarg4, float jarg5, bool jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GMMove__SWIG_1")]
  public static extern void Mob_GMMove__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, float jarg4, float jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GMMove__SWIG_2")]
  public static extern void Mob_GMMove__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, float jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GMMove__SWIG_3")]
  public static extern void Mob_GMMove__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GMMove__SWIG_4")]
  public static extern void Mob_GMMove__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetDelta")]
  public static extern void Mob_SetDelta(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_MakeSpawnUpdate")]
  public static extern void Mob_MakeSpawnUpdate(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SentPositionPacket__SWIG_0")]
  public static extern void Mob_SentPositionPacket__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, float jarg4, float jarg5, int jarg6, bool jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SentPositionPacket__SWIG_1")]
  public static extern void Mob_SentPositionPacket__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, float jarg4, float jarg5, int jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_StopMoving__SWIG_0")]
  public static extern void Mob_StopMoving__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_StopMoving__SWIG_1")]
  public static extern void Mob_StopMoving__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetSpawned")]
  public static extern void Mob_SetSpawned(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Spawned")]
  public static extern bool Mob_Spawned(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ShouldISpawnFor")]
  public static extern bool Mob_ShouldISpawnFor(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetFlyMode")]
  public static extern void Mob_SetFlyMode(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Teleport__SWIG_0")]
  public static extern void Mob_Teleport__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Teleport__SWIG_1")]
  public static extern void Mob_Teleport__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TryMoveAlong__SWIG_0")]
  public static extern void Mob_TryMoveAlong__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TryMoveAlong__SWIG_1")]
  public static extern void Mob_TryMoveAlong__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TryMoveAlong__SWIG_2")]
  public static extern global::System.IntPtr Mob_TryMoveAlong__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, float jarg3, float jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ProcessForcedMovement")]
  public static extern void Mob_ProcessForcedMovement(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IncDeltaX")]
  public static extern void Mob_IncDeltaX(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IncDeltaY")]
  public static extern void Mob_IncDeltaY(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IncDeltaZ")]
  public static extern void Mob_IncDeltaZ(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetForcedMovement")]
  public static extern void Mob_SetForcedMovement(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetHeading")]
  public static extern void Mob_SetHeading(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetLevelCon__SWIG_0")]
  public static extern uint Mob_GetLevelCon__SWIG_0(byte jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetLevelCon__SWIG_1")]
  public static extern uint Mob_GetLevelCon__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AddToHateList__SWIG_0")]
  public static extern void Mob_AddToHateList__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, long jarg4, bool jarg5, bool jarg6, bool jarg7, ushort jarg8, bool jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AddToHateList__SWIG_1")]
  public static extern void Mob_AddToHateList__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, long jarg4, bool jarg5, bool jarg6, bool jarg7, ushort jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AddToHateList__SWIG_2")]
  public static extern void Mob_AddToHateList__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, long jarg4, bool jarg5, bool jarg6, bool jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AddToHateList__SWIG_3")]
  public static extern void Mob_AddToHateList__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, long jarg4, bool jarg5, bool jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AddToHateList__SWIG_4")]
  public static extern void Mob_AddToHateList__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, long jarg4, bool jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AddToHateList__SWIG_5")]
  public static extern void Mob_AddToHateList__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, long jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AddToHateList__SWIG_6")]
  public static extern void Mob_AddToHateList__SWIG_6(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AddToHateList__SWIG_7")]
  public static extern void Mob_AddToHateList__SWIG_7(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_RemoveFromHateList")]
  public static extern bool Mob_RemoveFromHateList(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetHateAmountOnEnt__SWIG_0")]
  public static extern void Mob_SetHateAmountOnEnt__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, long jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetHateAmountOnEnt__SWIG_1")]
  public static extern void Mob_SetHateAmountOnEnt__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetHateAmountOnEnt__SWIG_2")]
  public static extern void Mob_SetHateAmountOnEnt__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HalveAggro")]
  public static extern void Mob_HalveAggro(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoubleAggro")]
  public static extern void Mob_DoubleAggro(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHateAmount__SWIG_0")]
  public static extern long Mob_GetHateAmount__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHateAmount__SWIG_1")]
  public static extern long Mob_GetHateAmount__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetDamageAmount")]
  public static extern long Mob_GetDamageAmount(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHateRatio")]
  public static extern int Mob_GetHateRatio(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHateTop")]
  public static extern global::System.IntPtr Mob_GetHateTop(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHateTopBot")]
  public static extern global::System.IntPtr Mob_GetHateTopBot(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHateTopClient")]
  public static extern global::System.IntPtr Mob_GetHateTopClient(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHateTopNPC")]
  public static extern global::System.IntPtr Mob_GetHateTopNPC(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetSecondaryHate")]
  public static extern global::System.IntPtr Mob_GetSecondaryHate(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHateDamageTop")]
  public static extern global::System.IntPtr Mob_GetHateDamageTop(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHateRandom")]
  public static extern global::System.IntPtr Mob_GetHateRandom(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHateRandomBot")]
  public static extern global::System.IntPtr Mob_GetHateRandomBot(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHateRandomClient")]
  public static extern global::System.IntPtr Mob_GetHateRandomClient(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHateRandomNPC")]
  public static extern global::System.IntPtr Mob_GetHateRandomNPC(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHateMost")]
  public static extern global::System.IntPtr Mob_GetHateMost(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHateClosest__SWIG_0")]
  public static extern global::System.IntPtr Mob_GetHateClosest__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHateClosest__SWIG_1")]
  public static extern global::System.IntPtr Mob_GetHateClosest__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHateClosestBot__SWIG_0")]
  public static extern global::System.IntPtr Mob_GetHateClosestBot__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHateClosestBot__SWIG_1")]
  public static extern global::System.IntPtr Mob_GetHateClosestBot__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHateClosestClient__SWIG_0")]
  public static extern global::System.IntPtr Mob_GetHateClosestClient__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHateClosestClient__SWIG_1")]
  public static extern global::System.IntPtr Mob_GetHateClosestClient__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHateClosestNPC__SWIG_0")]
  public static extern global::System.IntPtr Mob_GetHateClosestNPC__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHateClosestNPC__SWIG_1")]
  public static extern global::System.IntPtr Mob_GetHateClosestNPC__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsEngaged")]
  public static extern bool Mob_IsEngaged(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHateListCount__SWIG_0")]
  public static extern uint Mob_GetHateListCount__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHateListCount__SWIG_1")]
  public static extern uint Mob_GetHateListCount__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HasPrimaryAggro")]
  public static extern bool Mob_HasPrimaryAggro(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HasAssistAggro")]
  public static extern bool Mob_HasAssistAggro(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetPrimaryAggro")]
  public static extern void Mob_SetPrimaryAggro(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetAssistAggro")]
  public static extern void Mob_SetAssistAggro(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HateSummon")]
  public static extern bool Mob_HateSummon(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_FaceTarget__SWIG_0")]
  public static extern void Mob_FaceTarget__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_FaceTarget__SWIG_1")]
  public static extern void Mob_FaceTarget__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_WipeHateList__SWIG_0")]
  public static extern void Mob_WipeHateList__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_WipeHateList__SWIG_1")]
  public static extern void Mob_WipeHateList__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AddFeignMemory")]
  public static extern void Mob_AddFeignMemory(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_RemoveFromFeignMemory")]
  public static extern void Mob_RemoveFromFeignMemory(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ClearFeignMemory")]
  public static extern void Mob_ClearFeignMemory(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsOnFeignMemory")]
  public static extern bool Mob_IsOnFeignMemory(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_PrintHateListToClient")]
  public static extern void Mob_PrintHateListToClient(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHateList")]
  public static extern global::System.IntPtr Mob_GetHateList(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CheckLosFN__SWIG_0")]
  public static extern bool Mob_CheckLosFN__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CheckLosFN__SWIG_1")]
  public static extern bool Mob_CheckLosFN__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, float jarg4, float jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CheckLosFN__SWIG_2")]
  public static extern bool Mob_CheckLosFN__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, float jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CheckWaterLoS")]
  public static extern bool Mob_CheckWaterLoS(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetLastLosState")]
  public static extern void Mob_SetLastLosState(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CheckLastLosState")]
  public static extern bool Mob_CheckLastLosState(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetMobDescription")]
  public static extern global::System.IntPtr Mob_GetMobDescription(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetFilteredHateList__SWIG_0")]
  public static extern global::System.IntPtr Mob_GetFilteredHateList__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetFilteredHateList__SWIG_1")]
  public static extern global::System.IntPtr Mob_GetFilteredHateList__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetFilteredHateList__SWIG_2")]
  public static extern global::System.IntPtr Mob_GetFilteredHateList__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DamageHateList__SWIG_0")]
  public static extern void Mob_DamageHateList__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, bool jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DamageHateList__SWIG_1")]
  public static extern void Mob_DamageHateList__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DamageHateList__SWIG_2")]
  public static extern void Mob_DamageHateList__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DamageHateList__SWIG_3")]
  public static extern void Mob_DamageHateList__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DamageArea__SWIG_0")]
  public static extern void Mob_DamageArea__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, bool jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DamageArea__SWIG_1")]
  public static extern void Mob_DamageArea__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DamageArea__SWIG_2")]
  public static extern void Mob_DamageArea__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DamageArea__SWIG_3")]
  public static extern void Mob_DamageArea__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CameraEffect__SWIG_0")]
  public static extern void Mob_CameraEffect__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, float jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, bool jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CameraEffect__SWIG_1")]
  public static extern void Mob_CameraEffect__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, float jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CameraEffect__SWIG_2")]
  public static extern void Mob_CameraEffect__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, float jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetQglobal")]
  public static extern bool Mob_GetQglobal(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CreateDespawnPacket")]
  public static extern void Mob_CreateDespawnPacket(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CreateHorseSpawnPacket__SWIG_0")]
  public static extern void Mob_CreateHorseSpawnPacket__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CreateHorseSpawnPacket__SWIG_1")]
  public static extern void Mob_CreateHorseSpawnPacket__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CreateSpawnPacket__SWIG_0")]
  public static extern void Mob_CreateSpawnPacket__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CreateSpawnPacket__SWIG_1")]
  public static extern void Mob_CreateSpawnPacket__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CreateSpawnPacket__SWIG_2")]
  public static extern void Mob_CreateSpawnPacket__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_FillSpawnStruct")]
  public static extern void Mob_FillSpawnStruct(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CreateHPPacket")]
  public static extern void Mob_CreateHPPacket(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendHPUpdate__SWIG_0")]
  public static extern void Mob_SendHPUpdate__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendHPUpdate__SWIG_1")]
  public static extern void Mob_SendHPUpdate__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ResetHPUpdateTimer")]
  public static extern void Mob_ResetHPUpdateTimer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetSpawnLastNameByClass")]
  public static extern void Mob_SetSpawnLastNameByClass(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_RandomTimer")]
  public static extern uint Mob_RandomTimer(int jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetDefaultGender__SWIG_0")]
  public static extern byte Mob_GetDefaultGender__SWIG_0(ushort jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetDefaultGender__SWIG_1")]
  public static extern byte Mob_GetDefaultGender__SWIG_1(ushort jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetSkillByItemType")]
  public static extern global::System.IntPtr Mob_GetSkillByItemType(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetItemTypeBySkill")]
  public static extern byte Mob_GetItemTypeBySkill(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_MakePet__SWIG_0")]
  public static extern void Mob_MakePet__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, string jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_MakePet__SWIG_1")]
  public static extern void Mob_MakePet__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_MakePoweredPet__SWIG_0")]
  public static extern void Mob_MakePoweredPet__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, string jarg3, short jarg4, string jarg5, float jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_MakePoweredPet__SWIG_1")]
  public static extern void Mob_MakePoweredPet__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, string jarg3, short jarg4, string jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_MakePoweredPet__SWIG_2")]
  public static extern void Mob_MakePoweredPet__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, string jarg3, short jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsWarriorClass")]
  public static extern bool Mob_IsWarriorClass(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetCasterClass")]
  public static extern char Mob_GetCasterClass(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetArchetype")]
  public static extern byte Mob_GetArchetype(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetZone")]
  public static extern void Mob_SetZone(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendStatsWindow")]
  public static extern void Mob_SendStatsWindow(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ShowStats")]
  public static extern void Mob_ShowStats(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ShowBuffs")]
  public static extern void Mob_ShowBuffs(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_PlotPositionAroundTarget__SWIG_0")]
  public static extern bool Mob_PlotPositionAroundTarget__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, bool jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_PlotPositionAroundTarget__SWIG_1")]
  public static extern bool Mob_PlotPositionAroundTarget__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetKillExpMod")]
  public static extern int Mob_GetKillExpMod(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_MakeAura")]
  public static extern void Mob_MakeAura(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetAuraSlots")]
  public static extern int Mob_GetAuraSlots(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetTrapSlots")]
  public static extern int Mob_GetTrapSlots(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HasFreeAuraSlots")]
  public static extern bool Mob_HasFreeAuraSlots(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HasFreeTrapSlots")]
  public static extern bool Mob_HasFreeTrapSlots(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AddAura")]
  public static extern void Mob_AddAura(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AddTrap")]
  public static extern void Mob_AddTrap(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CanSpawnAura")]
  public static extern bool Mob_CanSpawnAura(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_RemoveAura__SWIG_0")]
  public static extern void Mob_RemoveAura__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, bool jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_RemoveAura__SWIG_1")]
  public static extern void Mob_RemoveAura__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_RemoveAura__SWIG_2")]
  public static extern void Mob_RemoveAura__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_RemoveAllAuras")]
  public static extern void Mob_RemoveAllAuras(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetAuraMgr")]
  public static extern global::System.IntPtr Mob_GetAuraMgr(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TriggerDefensiveProcs__SWIG_0")]
  public static extern void Mob_TriggerDefensiveProcs__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, ushort jarg3, bool jarg4, long jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TriggerDefensiveProcs__SWIG_1")]
  public static extern void Mob_TriggerDefensiveProcs__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, ushort jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TriggerDefensiveProcs__SWIG_2")]
  public static extern void Mob_TriggerDefensiveProcs__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, ushort jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TriggerDefensiveProcs__SWIG_3")]
  public static extern void Mob_TriggerDefensiveProcs__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AddRangedProc__SWIG_0")]
  public static extern bool Mob_AddRangedProc__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, ushort jarg3, ushort jarg4, uint jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AddRangedProc__SWIG_1")]
  public static extern bool Mob_AddRangedProc__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, ushort jarg3, ushort jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AddRangedProc__SWIG_2")]
  public static extern bool Mob_AddRangedProc__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, ushort jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AddRangedProc__SWIG_3")]
  public static extern bool Mob_AddRangedProc__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_RemoveRangedProc__SWIG_0")]
  public static extern bool Mob_RemoveRangedProc__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_RemoveRangedProc__SWIG_1")]
  public static extern bool Mob_RemoveRangedProc__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HasRangedProcs")]
  public static extern bool Mob_HasRangedProcs(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AddDefensiveProc__SWIG_0")]
  public static extern bool Mob_AddDefensiveProc__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, ushort jarg3, ushort jarg4, uint jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AddDefensiveProc__SWIG_1")]
  public static extern bool Mob_AddDefensiveProc__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, ushort jarg3, ushort jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AddDefensiveProc__SWIG_2")]
  public static extern bool Mob_AddDefensiveProc__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, ushort jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AddDefensiveProc__SWIG_3")]
  public static extern bool Mob_AddDefensiveProc__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_RemoveDefensiveProc__SWIG_0")]
  public static extern bool Mob_RemoveDefensiveProc__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_RemoveDefensiveProc__SWIG_1")]
  public static extern bool Mob_RemoveDefensiveProc__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HasDefensiveProcs")]
  public static extern bool Mob_HasDefensiveProcs(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HasSkillProcs")]
  public static extern bool Mob_HasSkillProcs(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HasSkillProcSuccess")]
  public static extern bool Mob_HasSkillProcSuccess(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AddProcToWeapon__SWIG_0")]
  public static extern bool Mob_AddProcToWeapon__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, bool jarg3, ushort jarg4, ushort jarg5, int jarg6, uint jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AddProcToWeapon__SWIG_1")]
  public static extern bool Mob_AddProcToWeapon__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, bool jarg3, ushort jarg4, ushort jarg5, int jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AddProcToWeapon__SWIG_2")]
  public static extern bool Mob_AddProcToWeapon__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, bool jarg3, ushort jarg4, ushort jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AddProcToWeapon__SWIG_3")]
  public static extern bool Mob_AddProcToWeapon__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, bool jarg3, ushort jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AddProcToWeapon__SWIG_4")]
  public static extern bool Mob_AddProcToWeapon__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AddProcToWeapon__SWIG_5")]
  public static extern bool Mob_AddProcToWeapon__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_RemoveProcFromWeapon__SWIG_0")]
  public static extern bool Mob_RemoveProcFromWeapon__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_RemoveProcFromWeapon__SWIG_1")]
  public static extern bool Mob_RemoveProcFromWeapon__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HasProcs")]
  public static extern bool Mob_HasProcs(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsCombatProc")]
  public static extern bool Mob_IsCombatProc(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsRaidTarget")]
  public static extern bool Mob_IsRaidTarget(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsAttackAllowed__SWIG_0")]
  public static extern bool Mob_IsAttackAllowed__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsAttackAllowed__SWIG_1")]
  public static extern bool Mob_IsAttackAllowed__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsTargeted__SWIG_0")]
  public static extern bool Mob_IsTargeted__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsTargeted__SWIG_1")]
  public static extern void Mob_IsTargeted__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetFollowID")]
  public static extern void Mob_SetFollowID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetFollowDistance")]
  public static extern void Mob_SetFollowDistance(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetFollowCanRun")]
  public static extern void Mob_SetFollowCanRun(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetFollowID")]
  public static extern uint Mob_GetFollowID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetFollowDistance")]
  public static extern uint Mob_GetFollowDistance(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetFollowCanRun")]
  public static extern bool Mob_GetFollowCanRun(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsRareSpawn")]
  public static extern bool Mob_IsRareSpawn(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetRareSpawn")]
  public static extern void Mob_SetRareSpawn(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Message")]
  public static extern void Mob_Message(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_MessageString__SWIG_0")]
  public static extern void Mob_MessageString__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_MessageString__SWIG_1")]
  public static extern void Mob_MessageString__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_MessageString__SWIG_2")]
  public static extern void Mob_MessageString__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, string jarg4, string jarg5, string jarg6, string jarg7, string jarg8, string jarg9, string jarg10, string jarg11, string jarg12, uint jarg13);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_MessageString__SWIG_3")]
  public static extern void Mob_MessageString__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, string jarg4, string jarg5, string jarg6, string jarg7, string jarg8, string jarg9, string jarg10, string jarg11, string jarg12);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_MessageString__SWIG_4")]
  public static extern void Mob_MessageString__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, string jarg4, string jarg5, string jarg6, string jarg7, string jarg8, string jarg9, string jarg10, string jarg11);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_MessageString__SWIG_5")]
  public static extern void Mob_MessageString__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, string jarg4, string jarg5, string jarg6, string jarg7, string jarg8, string jarg9, string jarg10);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_MessageString__SWIG_6")]
  public static extern void Mob_MessageString__SWIG_6(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, string jarg4, string jarg5, string jarg6, string jarg7, string jarg8, string jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_MessageString__SWIG_7")]
  public static extern void Mob_MessageString__SWIG_7(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, string jarg4, string jarg5, string jarg6, string jarg7, string jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_MessageString__SWIG_8")]
  public static extern void Mob_MessageString__SWIG_8(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, string jarg4, string jarg5, string jarg6, string jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_MessageString__SWIG_9")]
  public static extern void Mob_MessageString__SWIG_9(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, string jarg4, string jarg5, string jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_MessageString__SWIG_10")]
  public static extern void Mob_MessageString__SWIG_10(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, string jarg4, string jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_MessageString__SWIG_11")]
  public static extern void Mob_MessageString__SWIG_11(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_FilteredMessageString__SWIG_0")]
  public static extern void Mob_FilteredMessageString__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, uint jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_FilteredMessageString__SWIG_1")]
  public static extern void Mob_FilteredMessageString__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, uint jarg5, string jarg6, string jarg7, string jarg8, string jarg9, string jarg10, string jarg11, string jarg12, string jarg13, string jarg14);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_FilteredMessageString__SWIG_2")]
  public static extern void Mob_FilteredMessageString__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, uint jarg5, string jarg6, string jarg7, string jarg8, string jarg9, string jarg10, string jarg11, string jarg12, string jarg13);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_FilteredMessageString__SWIG_3")]
  public static extern void Mob_FilteredMessageString__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, uint jarg5, string jarg6, string jarg7, string jarg8, string jarg9, string jarg10, string jarg11, string jarg12);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_FilteredMessageString__SWIG_4")]
  public static extern void Mob_FilteredMessageString__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, uint jarg5, string jarg6, string jarg7, string jarg8, string jarg9, string jarg10, string jarg11);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_FilteredMessageString__SWIG_5")]
  public static extern void Mob_FilteredMessageString__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, uint jarg5, string jarg6, string jarg7, string jarg8, string jarg9, string jarg10);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_FilteredMessageString__SWIG_6")]
  public static extern void Mob_FilteredMessageString__SWIG_6(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, uint jarg5, string jarg6, string jarg7, string jarg8, string jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_FilteredMessageString__SWIG_7")]
  public static extern void Mob_FilteredMessageString__SWIG_7(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, uint jarg5, string jarg6, string jarg7, string jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_FilteredMessageString__SWIG_8")]
  public static extern void Mob_FilteredMessageString__SWIG_8(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, uint jarg5, string jarg6, string jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_FilteredMessageString__SWIG_9")]
  public static extern void Mob_FilteredMessageString__SWIG_9(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, uint jarg5, string jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Say")]
  public static extern void Mob_Say(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SayString__SWIG_0")]
  public static extern void Mob_SayString__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, string jarg3, string jarg4, string jarg5, string jarg6, string jarg7, string jarg8, string jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SayString__SWIG_1")]
  public static extern void Mob_SayString__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, string jarg3, string jarg4, string jarg5, string jarg6, string jarg7, string jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SayString__SWIG_2")]
  public static extern void Mob_SayString__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, string jarg3, string jarg4, string jarg5, string jarg6, string jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SayString__SWIG_3")]
  public static extern void Mob_SayString__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, string jarg3, string jarg4, string jarg5, string jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SayString__SWIG_4")]
  public static extern void Mob_SayString__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, string jarg3, string jarg4, string jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SayString__SWIG_5")]
  public static extern void Mob_SayString__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, string jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SayString__SWIG_6")]
  public static extern void Mob_SayString__SWIG_6(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SayString__SWIG_7")]
  public static extern void Mob_SayString__SWIG_7(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SayString__SWIG_8")]
  public static extern void Mob_SayString__SWIG_8(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, string jarg4, string jarg5, string jarg6, string jarg7, string jarg8, string jarg9, string jarg10);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SayString__SWIG_9")]
  public static extern void Mob_SayString__SWIG_9(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, string jarg4, string jarg5, string jarg6, string jarg7, string jarg8, string jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SayString__SWIG_10")]
  public static extern void Mob_SayString__SWIG_10(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, string jarg4, string jarg5, string jarg6, string jarg7, string jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SayString__SWIG_11")]
  public static extern void Mob_SayString__SWIG_11(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, string jarg4, string jarg5, string jarg6, string jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SayString__SWIG_12")]
  public static extern void Mob_SayString__SWIG_12(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, string jarg4, string jarg5, string jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SayString__SWIG_13")]
  public static extern void Mob_SayString__SWIG_13(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, string jarg4, string jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SayString__SWIG_14")]
  public static extern void Mob_SayString__SWIG_14(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SayString__SWIG_15")]
  public static extern void Mob_SayString__SWIG_15(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SayString__SWIG_16")]
  public static extern void Mob_SayString__SWIG_16(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, string jarg4, string jarg5, string jarg6, string jarg7, string jarg8, string jarg9, string jarg10);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SayString__SWIG_17")]
  public static extern void Mob_SayString__SWIG_17(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, string jarg4, string jarg5, string jarg6, string jarg7, string jarg8, string jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SayString__SWIG_18")]
  public static extern void Mob_SayString__SWIG_18(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, string jarg4, string jarg5, string jarg6, string jarg7, string jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SayString__SWIG_19")]
  public static extern void Mob_SayString__SWIG_19(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, string jarg4, string jarg5, string jarg6, string jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SayString__SWIG_20")]
  public static extern void Mob_SayString__SWIG_20(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, string jarg4, string jarg5, string jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SayString__SWIG_21")]
  public static extern void Mob_SayString__SWIG_21(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, string jarg4, string jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SayString__SWIG_22")]
  public static extern void Mob_SayString__SWIG_22(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SayString__SWIG_23")]
  public static extern void Mob_SayString__SWIG_23(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SayString__SWIG_24")]
  public static extern void Mob_SayString__SWIG_24(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4, string jarg5, string jarg6, string jarg7, string jarg8, string jarg9, string jarg10, string jarg11);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SayString__SWIG_25")]
  public static extern void Mob_SayString__SWIG_25(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4, string jarg5, string jarg6, string jarg7, string jarg8, string jarg9, string jarg10);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SayString__SWIG_26")]
  public static extern void Mob_SayString__SWIG_26(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4, string jarg5, string jarg6, string jarg7, string jarg8, string jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SayString__SWIG_27")]
  public static extern void Mob_SayString__SWIG_27(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4, string jarg5, string jarg6, string jarg7, string jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SayString__SWIG_28")]
  public static extern void Mob_SayString__SWIG_28(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4, string jarg5, string jarg6, string jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SayString__SWIG_29")]
  public static extern void Mob_SayString__SWIG_29(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4, string jarg5, string jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SayString__SWIG_30")]
  public static extern void Mob_SayString__SWIG_30(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4, string jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SayString__SWIG_31")]
  public static extern void Mob_SayString__SWIG_31(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Shout")]
  public static extern void Mob_Shout(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Emote")]
  public static extern void Mob_Emote(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_QuestJournalledSay")]
  public static extern void Mob_QuestJournalledSay(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, string jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetItemStat")]
  public static extern int Mob_GetItemStat(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CalcFocusEffect__SWIG_0")]
  public static extern long Mob_CalcFocusEffect__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, ushort jarg3, ushort jarg4, bool jarg5, ushort jarg6, global::System.Runtime.InteropServices.HandleRef jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CalcFocusEffect__SWIG_1")]
  public static extern long Mob_CalcFocusEffect__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, ushort jarg3, ushort jarg4, bool jarg5, ushort jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CalcFocusEffect__SWIG_2")]
  public static extern long Mob_CalcFocusEffect__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, ushort jarg3, ushort jarg4, bool jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CalcFocusEffect__SWIG_3")]
  public static extern long Mob_CalcFocusEffect__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, ushort jarg3, ushort jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsFocusEffect__SWIG_0")]
  public static extern byte Mob_IsFocusEffect__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, int jarg3, bool jarg4, uint jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsFocusEffect__SWIG_1")]
  public static extern byte Mob_IsFocusEffect__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, int jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsFocusEffect__SWIG_2")]
  public static extern byte Mob_IsFocusEffect__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendIllusionPacket")]
  public static extern void Mob_SendIllusionPacket(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CloneAppearance__SWIG_0")]
  public static extern void Mob_CloneAppearance__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CloneAppearance__SWIG_1")]
  public static extern void Mob_CloneAppearance__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetFaceAppearance__SWIG_0")]
  public static extern void Mob_SetFaceAppearance__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetFaceAppearance__SWIG_1")]
  public static extern void Mob_SetFaceAppearance__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_RandomizeFeatures__SWIG_0")]
  public static extern bool Mob_RandomizeFeatures__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_RandomizeFeatures__SWIG_1")]
  public static extern bool Mob_RandomizeFeatures__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_RandomizeFeatures__SWIG_2")]
  public static extern bool Mob_RandomizeFeatures__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Stun")]
  public static extern void Mob_Stun(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_UnStun")]
  public static extern void Mob_UnStun(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Silence")]
  public static extern void Mob_Silence(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Amnesia")]
  public static extern void Mob_Amnesia(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TemporaryPets__SWIG_0")]
  public static extern void Mob_TemporaryPets__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, string jarg4, uint jarg5, bool jarg6, bool jarg7, global::System.Runtime.InteropServices.HandleRef jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TemporaryPets__SWIG_1")]
  public static extern void Mob_TemporaryPets__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, string jarg4, uint jarg5, bool jarg6, bool jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TemporaryPets__SWIG_2")]
  public static extern void Mob_TemporaryPets__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, string jarg4, uint jarg5, bool jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TemporaryPets__SWIG_3")]
  public static extern void Mob_TemporaryPets__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, string jarg4, uint jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TemporaryPets__SWIG_4")]
  public static extern void Mob_TemporaryPets__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TemporaryPets__SWIG_5")]
  public static extern void Mob_TemporaryPets__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TypesTemporaryPets__SWIG_0")]
  public static extern void Mob_TypesTemporaryPets__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, string jarg4, uint jarg5, bool jarg6, bool jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TypesTemporaryPets__SWIG_1")]
  public static extern void Mob_TypesTemporaryPets__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, string jarg4, uint jarg5, bool jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TypesTemporaryPets__SWIG_2")]
  public static extern void Mob_TypesTemporaryPets__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, string jarg4, uint jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TypesTemporaryPets__SWIG_3")]
  public static extern void Mob_TypesTemporaryPets__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TypesTemporaryPets__SWIG_4")]
  public static extern void Mob_TypesTemporaryPets__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_WakeTheDead")]
  public static extern void Mob_WakeTheDead(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, uint jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Spin")]
  public static extern void Mob_Spin(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Kill")]
  public static extern void Mob_Kill(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_PassCharismaCheck")]
  public static extern bool Mob_PassCharismaCheck(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, ushort jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TryDeathSave")]
  public static extern bool Mob_TryDeathSave(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TryDivineSave")]
  public static extern bool Mob_TryDivineSave(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TryTriggerOnCastFocusEffect")]
  public static extern void Mob_TryTriggerOnCastFocusEffect(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, ushort jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TryTriggerOnCastProc")]
  public static extern bool Mob_TryTriggerOnCastProc(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, ushort jarg3, ushort jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TrySpellTrigger")]
  public static extern bool Mob_TrySpellTrigger(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TryTriggerOnCastRequirement")]
  public static extern void Mob_TryTriggerOnCastRequirement(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TryTwincast")]
  public static extern void Mob_TryTwincast(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TrySympatheticProc")]
  public static extern void Mob_TrySympatheticProc(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetSympatheticFocusEffect")]
  public static extern ushort Mob_GetSympatheticFocusEffect(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, ushort jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TryFadeEffect")]
  public static extern bool Mob_TryFadeEffect(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DispelMagic")]
  public static extern void Mob_DispelMagic(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, ushort jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetSpellEffectResistChance")]
  public static extern ushort Mob_GetSpellEffectResistChance(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetVulnerability__SWIG_0")]
  public static extern int Mob_GetVulnerability__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4, bool jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetVulnerability__SWIG_1")]
  public static extern int Mob_GetVulnerability__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetFcDamageAmtIncoming__SWIG_0")]
  public static extern long Mob_GetFcDamageAmtIncoming__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetFcDamageAmtIncoming__SWIG_1")]
  public static extern long Mob_GetFcDamageAmtIncoming__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetFocusIncoming")]
  public static extern long Mob_GetFocusIncoming(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, uint jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetSkillDmgTaken__SWIG_0")]
  public static extern int Mob_GetSkillDmgTaken__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetSkillDmgTaken__SWIG_1")]
  public static extern int Mob_GetSkillDmgTaken__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetPositionalDmgTaken")]
  public static extern int Mob_GetPositionalDmgTaken(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetPositionalDmgTakenAmt")]
  public static extern int Mob_GetPositionalDmgTakenAmt(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoKnockback")]
  public static extern void Mob_DoKnockback(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CalcResistChanceBonus")]
  public static extern short Mob_CalcResistChanceBonus(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CalcFearResistChance")]
  public static extern short Mob_CalcFearResistChance(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TrySpellOnKill")]
  public static extern void Mob_TrySpellOnKill(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, ushort jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TrySpellOnDeath")]
  public static extern bool Mob_TrySpellOnDeath(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CastOnCurer")]
  public static extern void Mob_CastOnCurer(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CastOnCure")]
  public static extern void Mob_CastOnCure(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CastOnNumHitFade")]
  public static extern void Mob_CastOnNumHitFade(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SlowMitigation")]
  public static extern void Mob_SlowMitigation(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetCritDmgMod__SWIG_0")]
  public static extern short Mob_GetCritDmgMod__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetCritDmgMod__SWIG_1")]
  public static extern short Mob_GetCritDmgMod__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetMeleeDamageMod_SE")]
  public static extern short Mob_GetMeleeDamageMod_SE(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetMeleeMinDamageMod_SE")]
  public static extern short Mob_GetMeleeMinDamageMod_SE(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetCrippBlowChance")]
  public static extern short Mob_GetCrippBlowChance(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetMeleeDmgPositionMod")]
  public static extern short Mob_GetMeleeDmgPositionMod(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetSkillReuseTime")]
  public static extern short Mob_GetSkillReuseTime(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetCriticalChanceBonus")]
  public static extern int Mob_GetCriticalChanceBonus(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetSkillDmgAmt")]
  public static extern int Mob_GetSkillDmgAmt(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetPositionalDmgAmt")]
  public static extern short Mob_GetPositionalDmgAmt(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CanBlockSpell")]
  public static extern bool Mob_CanBlockSpell(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoHPToManaCovert__SWIG_0")]
  public static extern bool Mob_DoHPToManaCovert__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoHPToManaCovert__SWIG_1")]
  public static extern bool Mob_DoHPToManaCovert__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetDecayEffectValue")]
  public static extern sbyte Mob_GetDecayEffectValue(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, ushort jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetExtraSpellAmt")]
  public static extern long Mob_GetExtraSpellAmt(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, long jarg3, long jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_MeleeLifeTap")]
  public static extern void Mob_MeleeLifeTap(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_PassCastRestriction")]
  public static extern bool Mob_PassCastRestriction(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendCastRestrictionMessage__SWIG_0")]
  public static extern void Mob_SendCastRestrictionMessage__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, bool jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendCastRestrictionMessage__SWIG_1")]
  public static extern void Mob_SendCastRestrictionMessage__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendCastRestrictionMessage__SWIG_2")]
  public static extern void Mob_SendCastRestrictionMessage__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ImprovedTaunt")]
  public static extern bool Mob_ImprovedTaunt(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TryRootFadeByDamage")]
  public static extern bool Mob_TryRootFadeByDamage(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetSlowMitigation")]
  public static extern float Mob_GetSlowMitigation(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CalcSpellPowerDistanceMod__SWIG_0")]
  public static extern void Mob_CalcSpellPowerDistanceMod__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, float jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CalcSpellPowerDistanceMod__SWIG_1")]
  public static extern void Mob_CalcSpellPowerDistanceMod__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, float jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetSpellPowerDistanceMod")]
  public static extern short Mob_GetSpellPowerDistanceMod(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetSpellPowerDistanceMod")]
  public static extern void Mob_SetSpellPowerDistanceMod(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetSpellStat__SWIG_0")]
  public static extern int Mob_GetSpellStat__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, string jarg3, byte jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetSpellStat__SWIG_1")]
  public static extern int Mob_GetSpellStat__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HarmonySpellLevelCheck__SWIG_0")]
  public static extern bool Mob_HarmonySpellLevelCheck__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HarmonySpellLevelCheck__SWIG_1")]
  public static extern bool Mob_HarmonySpellLevelCheck__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_PassCharmTargetRestriction")]
  public static extern bool Mob_PassCharmTargetRestriction(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CanFocusUseRandomEffectivenessByType")]
  public static extern bool Mob_CanFocusUseRandomEffectivenessByType(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetFocusRandomEffectivenessValue__SWIG_0")]
  public static extern int Mob_GetFocusRandomEffectivenessValue__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetFocusRandomEffectivenessValue__SWIG_1")]
  public static extern int Mob_GetFocusRandomEffectivenessValue__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHealRate")]
  public static extern int Mob_GetHealRate(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetMemoryBlurChance")]
  public static extern int Mob_GetMemoryBlurChance(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HasBaseEffectFocus")]
  public static extern bool Mob_HasBaseEffectFocus(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetDualWieldingSameDelayWeapons")]
  public static extern int Mob_GetDualWieldingSameDelayWeapons(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetDualWieldingSameDelayWeapons")]
  public static extern void Mob_SetDualWieldingSameDelayWeapons(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsTargetedFocusEffect")]
  public static extern bool Mob_IsTargetedFocusEffect(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HasPersistDeathIllusion")]
  public static extern bool Mob_HasPersistDeathIllusion(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TryDoubleMeleeRoundEffect")]
  public static extern bool Mob_TryDoubleMeleeRoundEffect(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetUseDoubleMeleeRoundDmgBonus")]
  public static extern bool Mob_GetUseDoubleMeleeRoundDmgBonus(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetUseDoubleMeleeRoundDmgBonus")]
  public static extern void Mob_SetUseDoubleMeleeRoundDmgBonus(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CastSpellOnLand")]
  public static extern void Mob_CastSpellOnLand(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsFocusProcLimitTimerActive")]
  public static extern bool Mob_IsFocusProcLimitTimerActive(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetFocusProcLimitTimer")]
  public static extern void Mob_SetFocusProcLimitTimer(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsProcLimitTimerActive")]
  public static extern bool Mob_IsProcLimitTimerActive(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, uint jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetProcLimitTimer")]
  public static extern void Mob_SetProcLimitTimer(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, uint jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_VirusEffectProcess")]
  public static extern void Mob_VirusEffectProcess(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SpreadVirusEffect")]
  public static extern void Mob_SpreadVirusEffect(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, uint jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ModSkillDmgTaken")]
  public static extern void Mob_ModSkillDmgTaken(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetModSkillDmgTaken")]
  public static extern short Mob_GetModSkillDmgTaken(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ModVulnerability")]
  public static extern void Mob_ModVulnerability(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, short jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetModVulnerability")]
  public static extern short Mob_GetModVulnerability(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetAllowBeneficial")]
  public static extern void Mob_SetAllowBeneficial(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetAllowBeneficial")]
  public static extern bool Mob_GetAllowBeneficial(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetDisableMelee")]
  public static extern void Mob_SetDisableMelee(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsMeleeDisabled")]
  public static extern bool Mob_IsMeleeDisabled(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsOffHandAtk")]
  public static extern bool Mob_IsOffHandAtk(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_OffHandAtk")]
  public static extern void Mob_OffHandAtk(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetFlurryChance")]
  public static extern void Mob_SetFlurryChance(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetFlurryChance")]
  public static extern byte Mob_GetFlurryChance(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetAppearanceValue")]
  public static extern uint Mob_GetAppearanceValue(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendAppearancePacket__SWIG_0")]
  public static extern void Mob_SendAppearancePacket__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, bool jarg4, bool jarg5, global::System.Runtime.InteropServices.HandleRef jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendAppearancePacket__SWIG_1")]
  public static extern void Mob_SendAppearancePacket__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, bool jarg4, bool jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendAppearancePacket__SWIG_2")]
  public static extern void Mob_SendAppearancePacket__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendAppearancePacket__SWIG_3")]
  public static extern void Mob_SendAppearancePacket__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetAppearance__SWIG_0")]
  public static extern void Mob_SetAppearance__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetAppearance__SWIG_1")]
  public static extern void Mob_SetAppearance__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetAppearance")]
  public static extern global::System.IntPtr Mob_GetAppearance(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetAnimation")]
  public static extern int Mob_GetAnimation(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetAnimation")]
  public static extern void Mob_SetAnimation(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetRunAnimSpeed")]
  public static extern byte Mob_GetRunAnimSpeed(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetRunAnimSpeed")]
  public static extern void Mob_SetRunAnimSpeed(global::System.Runtime.InteropServices.HandleRef jarg1, sbyte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsDestructibleObject")]
  public static extern bool Mob_IsDestructibleObject(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetDestructibleObject")]
  public static extern void Mob_SetDestructibleObject(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetInnateLightType")]
  public static extern byte Mob_GetInnateLightType(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetEquipmentLightType")]
  public static extern byte Mob_GetEquipmentLightType(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetSpellLightType")]
  public static extern byte Mob_GetSpellLightType(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_UpdateEquipmentLight")]
  public static extern void Mob_UpdateEquipmentLight(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetSpellLightType")]
  public static extern void Mob_SetSpellLightType(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendWearChangeAndLighting")]
  public static extern void Mob_SendWearChangeAndLighting(global::System.Runtime.InteropServices.HandleRef jarg1, sbyte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetActiveLightType")]
  public static extern byte Mob_GetActiveLightType(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_UpdateActiveLight")]
  public static extern bool Mob_UpdateActiveLight(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetLightProfile")]
  public static extern global::System.IntPtr Mob_GetLightProfile(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetPet")]
  public static extern global::System.IntPtr Mob_GetPet(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetPet")]
  public static extern void Mob_SetPet(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetOwner")]
  public static extern global::System.IntPtr Mob_GetOwner(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetOwnerOrSelf")]
  public static extern global::System.IntPtr Mob_GetOwnerOrSelf(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetUltimateOwner")]
  public static extern global::System.IntPtr Mob_GetUltimateOwner(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetPetID")]
  public static extern void Mob_SetPetID(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetPetID")]
  public static extern ushort Mob_GetPetID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetPetType")]
  public static extern int Mob_GetPetType(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetPetType")]
  public static extern void Mob_SetPetType(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetPetPower")]
  public static extern short Mob_GetPetPower(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetPetPower")]
  public static extern void Mob_SetPetPower(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsFamiliar")]
  public static extern bool Mob_IsFamiliar(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsAnimation")]
  public static extern bool Mob_IsAnimation(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsCharmed")]
  public static extern bool Mob_IsCharmed(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsTargetLockPet")]
  public static extern bool Mob_IsTargetLockPet(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetPetTargetLockID")]
  public static extern uint Mob_GetPetTargetLockID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetPetTargetLockID")]
  public static extern void Mob_SetPetTargetLockID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetOwnerID")]
  public static extern void Mob_SetOwnerID(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetOwnerID")]
  public static extern ushort Mob_GetOwnerID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HasOwner")]
  public static extern bool Mob_HasOwner(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsPet")]
  public static extern bool Mob_IsPet(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HasPet")]
  public static extern bool Mob_HasPet(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HasTempPetsActive")]
  public static extern bool Mob_HasTempPetsActive(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetTempPetsActive")]
  public static extern void Mob_SetTempPetsActive(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetTempPetCount")]
  public static extern short Mob_GetTempPetCount(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetTempPetCount")]
  public static extern void Mob_SetTempPetCount(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HasPetAffinity")]
  public static extern bool Mob_HasPetAffinity(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsPetOwnerBot")]
  public static extern bool Mob_IsPetOwnerBot(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetPetOwnerBot")]
  public static extern void Mob_SetPetOwnerBot(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsPetOwnerClient")]
  public static extern bool Mob_IsPetOwnerClient(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetPetOwnerClient")]
  public static extern void Mob_SetPetOwnerClient(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsPetOwnerNPC")]
  public static extern bool Mob_IsPetOwnerNPC(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetPetOwnerNPC")]
  public static extern void Mob_SetPetOwnerNPC(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsTempPet")]
  public static extern bool Mob_IsTempPet(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetTempPet")]
  public static extern void Mob_SetTempPet(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsHorse")]
  public static extern bool Mob_IsHorse(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetPetAvoidanceBonusFromOwner")]
  public static extern int Mob_GetPetAvoidanceBonusFromOwner(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetPetACBonusFromOwner")]
  public static extern int Mob_GetPetACBonusFromOwner(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetPetATKBonusFromOwner")]
  public static extern int Mob_GetPetATKBonusFromOwner(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetBodyType")]
  public static extern global::System.IntPtr Mob_GetBodyType(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetOrigBodyType")]
  public static extern global::System.IntPtr Mob_GetOrigBodyType(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetBodyType")]
  public static extern void Mob_SetBodyType(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_invulnerable_set")]
  public static extern void Mob_invulnerable_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_invulnerable_get")]
  public static extern bool Mob_invulnerable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_qglobal_set")]
  public static extern void Mob_qglobal_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_qglobal_get")]
  public static extern bool Mob_qglobal_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetAttackTimer")]
  public static extern void Mob_SetAttackTimer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetInvul")]
  public static extern void Mob_SetInvul(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetInvul")]
  public static extern bool Mob_GetInvul(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetExtraHaste")]
  public static extern void Mob_SetExtraHaste(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHaste")]
  public static extern int Mob_GetHaste(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetMeleeMitigation")]
  public static extern int Mob_GetMeleeMitigation(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetWeaponDamageBonus__SWIG_0")]
  public static extern byte Mob_GetWeaponDamageBonus__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetWeaponDamageBonus__SWIG_1")]
  public static extern byte Mob_GetWeaponDamageBonus__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetDamageTable")]
  public static extern global::System.IntPtr Mob_GetDamageTable(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ApplyDamageTable")]
  public static extern void Mob_ApplyDamageTable(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHandToHandDamage")]
  public static extern int Mob_GetHandToHandDamage(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CanThisClassDoubleAttack")]
  public static extern bool Mob_CanThisClassDoubleAttack(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CanThisClassTripleAttack")]
  public static extern bool Mob_CanThisClassTripleAttack(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CanThisClassDualWield")]
  public static extern bool Mob_CanThisClassDualWield(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CanThisClassRiposte")]
  public static extern bool Mob_CanThisClassRiposte(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CanThisClassDodge")]
  public static extern bool Mob_CanThisClassDodge(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CanThisClassParry")]
  public static extern bool Mob_CanThisClassParry(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CanThisClassBlock")]
  public static extern bool Mob_CanThisClassBlock(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHandToHandDelay")]
  public static extern int Mob_GetHandToHandDelay(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetClassLevelFactor")]
  public static extern uint Mob_GetClassLevelFactor(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Mesmerize")]
  public static extern void Mob_Mesmerize(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsMezzed")]
  public static extern bool Mob_IsMezzed(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsStunned")]
  public static extern bool Mob_IsStunned(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsSilenced")]
  public static extern bool Mob_IsSilenced(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsAmnesiad")]
  public static extern bool Mob_IsAmnesiad(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ReduceDamage")]
  public static extern long Mob_ReduceDamage(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AffectMagicalDamage")]
  public static extern long Mob_AffectMagicalDamage(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2, ushort jarg3, bool jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ReduceAllDamage")]
  public static extern long Mob_ReduceAllDamage(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoSpecialAttackDamage__SWIG_0")]
  public static extern void Mob_DoSpecialAttackDamage__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4, int jarg5, int jarg6, int jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoSpecialAttackDamage__SWIG_1")]
  public static extern void Mob_DoSpecialAttackDamage__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4, int jarg5, int jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoSpecialAttackDamage__SWIG_2")]
  public static extern void Mob_DoSpecialAttackDamage__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoSpecialAttackDamage__SWIG_3")]
  public static extern void Mob_DoSpecialAttackDamage__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoThrowingAttackDmg__SWIG_0")]
  public static extern void Mob_DoThrowingAttackDmg__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, short jarg6, short jarg7, int jarg8, uint jarg9, int jarg10, float jarg11, bool jarg12);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoThrowingAttackDmg__SWIG_1")]
  public static extern void Mob_DoThrowingAttackDmg__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, short jarg6, short jarg7, int jarg8, uint jarg9, int jarg10, float jarg11);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoThrowingAttackDmg__SWIG_2")]
  public static extern void Mob_DoThrowingAttackDmg__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, short jarg6, short jarg7, int jarg8, uint jarg9, int jarg10);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoThrowingAttackDmg__SWIG_3")]
  public static extern void Mob_DoThrowingAttackDmg__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, short jarg6, short jarg7, int jarg8, uint jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoThrowingAttackDmg__SWIG_4")]
  public static extern void Mob_DoThrowingAttackDmg__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, short jarg6, short jarg7, int jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoThrowingAttackDmg__SWIG_5")]
  public static extern void Mob_DoThrowingAttackDmg__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, short jarg6, short jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoThrowingAttackDmg__SWIG_6")]
  public static extern void Mob_DoThrowingAttackDmg__SWIG_6(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, short jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoThrowingAttackDmg__SWIG_7")]
  public static extern void Mob_DoThrowingAttackDmg__SWIG_7(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoThrowingAttackDmg__SWIG_8")]
  public static extern void Mob_DoThrowingAttackDmg__SWIG_8(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoThrowingAttackDmg__SWIG_9")]
  public static extern void Mob_DoThrowingAttackDmg__SWIG_9(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoThrowingAttackDmg__SWIG_10")]
  public static extern void Mob_DoThrowingAttackDmg__SWIG_10(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoMeleeSkillAttackDmg__SWIG_0")]
  public static extern void Mob_DoMeleeSkillAttackDmg__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, short jarg5, short jarg6, bool jarg7, int jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoMeleeSkillAttackDmg__SWIG_1")]
  public static extern void Mob_DoMeleeSkillAttackDmg__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, short jarg5, short jarg6, bool jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoMeleeSkillAttackDmg__SWIG_2")]
  public static extern void Mob_DoMeleeSkillAttackDmg__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, short jarg5, short jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoMeleeSkillAttackDmg__SWIG_3")]
  public static extern void Mob_DoMeleeSkillAttackDmg__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, short jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoMeleeSkillAttackDmg__SWIG_4")]
  public static extern void Mob_DoMeleeSkillAttackDmg__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoArcheryAttackDmg__SWIG_0")]
  public static extern void Mob_DoArcheryAttackDmg__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, short jarg6, short jarg7, int jarg8, uint jarg9, uint jarg10, global::System.Runtime.InteropServices.HandleRef jarg11, int jarg12, float jarg13, bool jarg14);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoArcheryAttackDmg__SWIG_1")]
  public static extern void Mob_DoArcheryAttackDmg__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, short jarg6, short jarg7, int jarg8, uint jarg9, uint jarg10, global::System.Runtime.InteropServices.HandleRef jarg11, int jarg12, float jarg13);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoArcheryAttackDmg__SWIG_2")]
  public static extern void Mob_DoArcheryAttackDmg__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, short jarg6, short jarg7, int jarg8, uint jarg9, uint jarg10, global::System.Runtime.InteropServices.HandleRef jarg11, int jarg12);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoArcheryAttackDmg__SWIG_3")]
  public static extern void Mob_DoArcheryAttackDmg__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, short jarg6, short jarg7, int jarg8, uint jarg9, uint jarg10, global::System.Runtime.InteropServices.HandleRef jarg11);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoArcheryAttackDmg__SWIG_4")]
  public static extern void Mob_DoArcheryAttackDmg__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, short jarg6, short jarg7, int jarg8, uint jarg9, uint jarg10);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoArcheryAttackDmg__SWIG_5")]
  public static extern void Mob_DoArcheryAttackDmg__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, short jarg6, short jarg7, int jarg8, uint jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoArcheryAttackDmg__SWIG_6")]
  public static extern void Mob_DoArcheryAttackDmg__SWIG_6(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, short jarg6, short jarg7, int jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoArcheryAttackDmg__SWIG_7")]
  public static extern void Mob_DoArcheryAttackDmg__SWIG_7(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, short jarg6, short jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoArcheryAttackDmg__SWIG_8")]
  public static extern void Mob_DoArcheryAttackDmg__SWIG_8(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5, short jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoArcheryAttackDmg__SWIG_9")]
  public static extern void Mob_DoArcheryAttackDmg__SWIG_9(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoArcheryAttackDmg__SWIG_10")]
  public static extern void Mob_DoArcheryAttackDmg__SWIG_10(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoArcheryAttackDmg__SWIG_11")]
  public static extern void Mob_DoArcheryAttackDmg__SWIG_11(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoArcheryAttackDmg__SWIG_12")]
  public static extern void Mob_DoArcheryAttackDmg__SWIG_12(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TryProjectileAttack__SWIG_0")]
  public static extern bool Mob_TryProjectileAttack__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, ulong jarg5, global::System.Runtime.InteropServices.HandleRef jarg6, global::System.Runtime.InteropServices.HandleRef jarg7, int jarg8, float jarg9, bool jarg10);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TryProjectileAttack__SWIG_1")]
  public static extern bool Mob_TryProjectileAttack__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, ulong jarg5, global::System.Runtime.InteropServices.HandleRef jarg6, global::System.Runtime.InteropServices.HandleRef jarg7, int jarg8, float jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ProjectileAttack")]
  public static extern void Mob_ProjectileAttack(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HasProjectileAttack")]
  public static extern bool Mob_HasProjectileAttack(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetProjectileAttack")]
  public static extern void Mob_SetProjectileAttack(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetRangeDistTargetSizeMod")]
  public static extern float Mob_GetRangeDistTargetSizeMod(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CanDoSpecialAttack")]
  public static extern bool Mob_CanDoSpecialAttack(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Flurry")]
  public static extern bool Mob_Flurry(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Rampage")]
  public static extern bool Mob_Rampage(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AddRampage")]
  public static extern bool Mob_AddRampage(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ClearRampage")]
  public static extern void Mob_ClearRampage(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_RemoveFromRampageList__SWIG_0")]
  public static extern void Mob_RemoveFromRampageList__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_RemoveFromRampageList__SWIG_1")]
  public static extern void Mob_RemoveFromRampageList__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetBottomRampageList")]
  public static extern void Mob_SetBottomRampageList(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetTopRampageList")]
  public static extern void Mob_SetTopRampageList(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AreaRampage")]
  public static extern void Mob_AreaRampage(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsSpecialAttack")]
  public static extern bool Mob_IsSpecialAttack(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_StartEnrage")]
  public static extern void Mob_StartEnrage(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ProcessEnrage")]
  public static extern void Mob_ProcessEnrage(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsEnraged")]
  public static extern bool Mob_IsEnraged(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Taunt__SWIG_0")]
  public static extern void Mob_Taunt__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, int jarg4, bool jarg5, int jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Taunt__SWIG_1")]
  public static extern void Mob_Taunt__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, int jarg4, bool jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Taunt__SWIG_2")]
  public static extern void Mob_Taunt__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Taunt__SWIG_3")]
  public static extern void Mob_Taunt__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AI_Init")]
  public static extern void Mob_AI_Init(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AI_Start__SWIG_0")]
  public static extern void Mob_AI_Start__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AI_Start__SWIG_1")]
  public static extern void Mob_AI_Start__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AI_Stop")]
  public static extern void Mob_AI_Stop(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AI_ShutDown")]
  public static extern void Mob_AI_ShutDown(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AI_Process")]
  public static extern void Mob_AI_Process(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ClearEntityVariables")]
  public static extern bool Mob_ClearEntityVariables(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DeleteEntityVariable")]
  public static extern bool Mob_DeleteEntityVariable(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetEntityVariable")]
  public static extern global::System.IntPtr Mob_GetEntityVariable(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetEntityVariables")]
  public static extern global::System.IntPtr Mob_GetEntityVariables(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetEntityVariable")]
  public static extern void Mob_SetEntityVariable(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_EntityVariableExists")]
  public static extern bool Mob_EntityVariableExists(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AI_Event_Engaged__SWIG_0")]
  public static extern void Mob_AI_Event_Engaged__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AI_Event_Engaged__SWIG_1")]
  public static extern void Mob_AI_Event_Engaged__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AI_Event_NoLongerEngaged")]
  public static extern void Mob_AI_Event_NoLongerEngaged(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetSpecialFactionCon")]
  public static extern global::System.IntPtr Mob_GetSpecialFactionCon(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsAIControlled")]
  public static extern bool Mob_IsAIControlled(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetAggroRange")]
  public static extern float Mob_GetAggroRange(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetAssistRange")]
  public static extern float Mob_GetAssistRange(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetPetOrder")]
  public static extern void Mob_SetPetOrder(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetPetOrder")]
  public static extern int Mob_GetPetOrder(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetHeld")]
  public static extern void Mob_SetHeld(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsHeld")]
  public static extern bool Mob_IsHeld(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetGHeld")]
  public static extern void Mob_SetGHeld(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsGHeld")]
  public static extern bool Mob_IsGHeld(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetNoCast")]
  public static extern void Mob_SetNoCast(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsNoCast")]
  public static extern bool Mob_IsNoCast(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetFocused")]
  public static extern void Mob_SetFocused(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsFocused")]
  public static extern bool Mob_IsFocused(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetPetStop")]
  public static extern void Mob_SetPetStop(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsPetStop")]
  public static extern bool Mob_IsPetStop(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetPetRegroup")]
  public static extern void Mob_SetPetRegroup(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsPetRegroup")]
  public static extern bool Mob_IsPetRegroup(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsRoamer")]
  public static extern bool Mob_IsRoamer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetWanderType")]
  public static extern int Mob_GetWanderType(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsRooted")]
  public static extern bool Mob_IsRooted(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsPermaRooted")]
  public static extern bool Mob_IsPermaRooted(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetSnaredAmount")]
  public static extern int Mob_GetSnaredAmount(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsPseudoRooted")]
  public static extern bool Mob_IsPseudoRooted(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetPseudoRoot")]
  public static extern void Mob_SetPseudoRoot(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetCurWp")]
  public static extern int Mob_GetCurWp(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetFearSpeed")]
  public static extern int Mob_GetFearSpeed(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsFeared")]
  public static extern bool Mob_IsFeared(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_StartFleeing")]
  public static extern void Mob_StartFleeing(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ProcessFlee")]
  public static extern void Mob_ProcessFlee(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CheckFlee")]
  public static extern void Mob_CheckFlee(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsBlind")]
  public static extern bool Mob_IsBlind(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CheckAggro")]
  public static extern bool Mob_CheckAggro(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CalculateHeadingToTarget")]
  public static extern float Mob_CalculateHeadingToTarget(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_WalkTo")]
  public static extern void Mob_WalkTo(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, float jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_RunTo")]
  public static extern void Mob_RunTo(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, float jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_NavigateTo")]
  public static extern void Mob_NavigateTo(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, float jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_RotateTo")]
  public static extern void Mob_RotateTo(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_RotateToWalking")]
  public static extern void Mob_RotateToWalking(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_RotateToRunning")]
  public static extern void Mob_RotateToRunning(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_StopNavigation")]
  public static extern void Mob_StopNavigation(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CalculateDistance__SWIG_0")]
  public static extern float Mob_CalculateDistance__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, float jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CalculateDistance__SWIG_1")]
  public static extern float Mob_CalculateDistance__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetGroundZ__SWIG_0")]
  public static extern float Mob_GetGroundZ__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, float jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetGroundZ__SWIG_1")]
  public static extern float Mob_GetGroundZ__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendTo")]
  public static extern void Mob_SendTo(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, float jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendToFixZ")]
  public static extern void Mob_SendToFixZ(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, float jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetZOffset")]
  public static extern float Mob_GetZOffset(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetDefaultRaceSize__SWIG_0")]
  public static extern float Mob_GetDefaultRaceSize__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetDefaultRaceSize__SWIG_1")]
  public static extern float Mob_GetDefaultRaceSize__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetDefaultRaceSize__SWIG_2")]
  public static extern float Mob_GetDefaultRaceSize__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_FixZ__SWIG_0")]
  public static extern void Mob_FixZ__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_FixZ__SWIG_1")]
  public static extern void Mob_FixZ__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_FixZ__SWIG_2")]
  public static extern void Mob_FixZ__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetFixedZ__SWIG_0")]
  public static extern float Mob_GetFixedZ__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetFixedZ__SWIG_1")]
  public static extern float Mob_GetFixedZ__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetStuckBehavior")]
  public static extern int Mob_GetStuckBehavior(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_NPCSpecialAttacks__SWIG_0")]
  public static extern void Mob_NPCSpecialAttacks__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, int jarg3, bool jarg4, bool jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_NPCSpecialAttacks__SWIG_1")]
  public static extern void Mob_NPCSpecialAttacks__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, int jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_NPCSpecialAttacks__SWIG_2")]
  public static extern void Mob_NPCSpecialAttacks__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DontHealMeBefore")]
  public static extern uint Mob_DontHealMeBefore(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DontBuffMeBefore")]
  public static extern uint Mob_DontBuffMeBefore(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DontDotMeBefore")]
  public static extern uint Mob_DontDotMeBefore(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DontRootMeBefore")]
  public static extern uint Mob_DontRootMeBefore(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DontSnareMeBefore")]
  public static extern uint Mob_DontSnareMeBefore(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DontCureMeBefore")]
  public static extern uint Mob_DontCureMeBefore(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetDontRootMeBefore")]
  public static extern void Mob_SetDontRootMeBefore(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetDontHealMeBefore")]
  public static extern void Mob_SetDontHealMeBefore(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetDontBuffMeBefore")]
  public static extern void Mob_SetDontBuffMeBefore(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetDontDotMeBefore")]
  public static extern void Mob_SetDontDotMeBefore(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetDontSnareMeBefore")]
  public static extern void Mob_SetDontSnareMeBefore(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetDontCureMeBefore")]
  public static extern void Mob_SetDontCureMeBefore(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SaveSpellLoc")]
  public static extern void Mob_SaveSpellLoc(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetSpellX")]
  public static extern float Mob_GetSpellX(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetSpellY")]
  public static extern float Mob_GetSpellY(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetSpellZ")]
  public static extern float Mob_GetSpellZ(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsGrouped")]
  public static extern bool Mob_IsGrouped(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetGrouped")]
  public static extern void Mob_SetGrouped(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsRaidGrouped")]
  public static extern bool Mob_IsRaidGrouped(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetRaidGrouped")]
  public static extern void Mob_SetRaidGrouped(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsLooting")]
  public static extern ushort Mob_IsLooting(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetLooting")]
  public static extern void Mob_SetLooting(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CheckWillAggro")]
  public static extern bool Mob_CheckWillAggro(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_InstillDoubt")]
  public static extern void Mob_InstillDoubt(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Charmed")]
  public static extern bool Mob_Charmed(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetLevelHP")]
  public static extern uint Mob_GetLevelHP(byte jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetZoneID")]
  public static extern uint Mob_GetZoneID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetInstanceVersion")]
  public static extern ushort Mob_GetInstanceVersion(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CheckAggroAmount__SWIG_0")]
  public static extern int Mob_CheckAggroAmount__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CheckAggroAmount__SWIG_1")]
  public static extern int Mob_CheckAggroAmount__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CheckHealAggroAmount__SWIG_0")]
  public static extern int Mob_CheckHealAggroAmount__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CheckHealAggroAmount__SWIG_1")]
  public static extern int Mob_CheckHealAggroAmount__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetInstrumentMod")]
  public static extern uint Mob_GetInstrumentMod(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CalcSpellEffectValue__SWIG_0")]
  public static extern long Mob_CalcSpellEffectValue__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, int jarg3, int jarg4, uint jarg5, global::System.Runtime.InteropServices.HandleRef jarg6, int jarg7, ushort jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CalcSpellEffectValue__SWIG_1")]
  public static extern long Mob_CalcSpellEffectValue__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, int jarg3, int jarg4, uint jarg5, global::System.Runtime.InteropServices.HandleRef jarg6, int jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CalcSpellEffectValue__SWIG_2")]
  public static extern long Mob_CalcSpellEffectValue__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, int jarg3, int jarg4, uint jarg5, global::System.Runtime.InteropServices.HandleRef jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CalcSpellEffectValue__SWIG_3")]
  public static extern long Mob_CalcSpellEffectValue__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, int jarg3, int jarg4, uint jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CalcSpellEffectValue__SWIG_4")]
  public static extern long Mob_CalcSpellEffectValue__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CalcSpellEffectValue__SWIG_5")]
  public static extern long Mob_CalcSpellEffectValue__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CalcSpellEffectValue_formula__SWIG_0")]
  public static extern long Mob_CalcSpellEffectValue_formula__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, long jarg3, long jarg4, int jarg5, ushort jarg6, int jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CalcSpellEffectValue_formula__SWIG_1")]
  public static extern long Mob_CalcSpellEffectValue_formula__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, long jarg3, long jarg4, int jarg5, ushort jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CheckStackConflict__SWIG_0")]
  public static extern int Mob_CheckStackConflict__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, int jarg3, ushort jarg4, int jarg5, global::System.Runtime.InteropServices.HandleRef jarg6, global::System.Runtime.InteropServices.HandleRef jarg7, int jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CheckStackConflict__SWIG_1")]
  public static extern int Mob_CheckStackConflict__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, int jarg3, ushort jarg4, int jarg5, global::System.Runtime.InteropServices.HandleRef jarg6, global::System.Runtime.InteropServices.HandleRef jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CheckStackConflict__SWIG_2")]
  public static extern int Mob_CheckStackConflict__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, int jarg3, ushort jarg4, int jarg5, global::System.Runtime.InteropServices.HandleRef jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CheckStackConflict__SWIG_3")]
  public static extern int Mob_CheckStackConflict__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, int jarg3, ushort jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetCastedSpellInvSlot")]
  public static extern uint Mob_GetCastedSpellInvSlot(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetNextHPEvent")]
  public static extern int Mob_GetNextHPEvent(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetNextHPEvent")]
  public static extern void Mob_SetNextHPEvent(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendItemAnimation__SWIG_0")]
  public static extern void Mob_SendItemAnimation__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, float jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SendItemAnimation__SWIG_1")]
  public static extern void Mob_SendItemAnimation__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetNextIncHPEvent")]
  public static extern global::System.IntPtr Mob_GetNextIncHPEvent(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetNextIncHPEvent")]
  public static extern void Mob_SetNextIncHPEvent(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DivineAura")]
  public static extern bool Mob_DivineAura(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Sanctuary")]
  public static extern bool Mob_Sanctuary(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HasNPCSpecialAtk")]
  public static extern bool Mob_HasNPCSpecialAtk(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HasSpecialAbilities")]
  public static extern bool Mob_HasSpecialAbilities(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetSpecialAbility")]
  public static extern int Mob_GetSpecialAbility(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetSpecialAbilityParam")]
  public static extern int Mob_GetSpecialAbilityParam(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetSpecialAbility")]
  public static extern void Mob_SetSpecialAbility(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetSpecialAbilityParam")]
  public static extern void Mob_SetSpecialAbilityParam(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_StartSpecialAbilityTimer")]
  public static extern void Mob_StartSpecialAbilityTimer(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_StopSpecialAbilityTimer")]
  public static extern void Mob_StopSpecialAbilityTimer(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetSpecialAbilityTimer")]
  public static extern global::System.IntPtr Mob_GetSpecialAbilityTimer(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ClearSpecialAbilities")]
  public static extern void Mob_ClearSpecialAbilities(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ProcessSpecialAbilities")]
  public static extern void Mob_ProcessSpecialAbilities(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsMoved")]
  public static extern bool Mob_IsMoved(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetMoved")]
  public static extern void Mob_SetMoved(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_trade_set")]
  public static extern void Mob_trade_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_trade_get")]
  public static extern global::System.IntPtr Mob_trade_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ShieldAbility__SWIG_0")]
  public static extern bool Mob_ShieldAbility__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, int jarg3, int jarg4, int jarg5, int jarg6, bool jarg7, bool jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ShieldAbility__SWIG_1")]
  public static extern bool Mob_ShieldAbility__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, int jarg3, int jarg4, int jarg5, int jarg6, bool jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ShieldAbility__SWIG_2")]
  public static extern bool Mob_ShieldAbility__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, int jarg3, int jarg4, int jarg5, int jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ShieldAbility__SWIG_3")]
  public static extern bool Mob_ShieldAbility__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, int jarg3, int jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ShieldAbility__SWIG_4")]
  public static extern bool Mob_ShieldAbility__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ShieldAbility__SWIG_5")]
  public static extern bool Mob_ShieldAbility__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ShieldAbility__SWIG_6")]
  public static extern bool Mob_ShieldAbility__SWIG_6(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoShieldDamageOnShielder")]
  public static extern void Mob_DoShieldDamageOnShielder(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ShieldAbilityFinish")]
  public static extern void Mob_ShieldAbilityFinish(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ShieldAbilityClearVariables")]
  public static extern void Mob_ShieldAbilityClearVariables(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetShielderID")]
  public static extern uint Mob_GetShielderID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetShielderID")]
  public static extern void Mob_SetShielderID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetShieldTargetID")]
  public static extern uint Mob_GetShieldTargetID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetShieldTargetID")]
  public static extern void Mob_SetShieldTargetID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetShieldTargetMitigation")]
  public static extern int Mob_GetShieldTargetMitigation(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetShieldTargetMitigation")]
  public static extern void Mob_SetShieldTargetMitigation(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetShielderMitigation")]
  public static extern int Mob_GetShielderMitigation(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetShielderMitigation")]
  public static extern void Mob_SetShielderMitigation(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetMaxShielderDistance")]
  public static extern int Mob_GetMaxShielderDistance(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetShielderMaxDistance")]
  public static extern void Mob_SetShielderMaxDistance(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_weaponstance_set")]
  public static extern void Mob_weaponstance_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_weaponstance_get")]
  public static extern global::System.IntPtr Mob_weaponstance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsWeaponStanceEnabled")]
  public static extern bool Mob_IsWeaponStanceEnabled(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetWeaponStanceEnabled")]
  public static extern void Mob_SetWeaponStanceEnabled(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetCurrentWayPoint")]
  public static extern global::System.IntPtr Mob_GetCurrentWayPoint(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetCWPP")]
  public static extern float Mob_GetCWPP(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetCWP")]
  public static extern int Mob_GetCWP(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetCurrentWP")]
  public static extern void Mob_SetCurrentWP(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetReverseFactionCon")]
  public static extern global::System.IntPtr Mob_GetReverseFactionCon(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsUnderwaterOnly")]
  public static extern bool Mob_IsUnderwaterOnly(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsTrackable")]
  public static extern bool Mob_IsTrackable(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetAIThinkTimer")]
  public static extern global::System.IntPtr Mob_GetAIThinkTimer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetAIMovementTimer")]
  public static extern global::System.IntPtr Mob_GetAIMovementTimer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetAttackTimer")]
  public static extern global::System.IntPtr Mob_GetAttackTimer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetAttackDWTimer")]
  public static extern global::System.IntPtr Mob_GetAttackDWTimer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsFindable")]
  public static extern bool Mob_IsFindable(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetManaPercent")]
  public static extern byte Mob_GetManaPercent(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetEndurancePercent")]
  public static extern byte Mob_GetEndurancePercent(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsBlockedBuff")]
  public static extern bool Mob_IsBlockedBuff(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsBlockedPetBuff")]
  public static extern bool Mob_IsBlockedPetBuff(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetGlobal")]
  public static extern global::System.IntPtr Mob_GetGlobal(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetGlobal__SWIG_0")]
  public static extern void Mob_SetGlobal__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, int jarg4, string jarg5, global::System.Runtime.InteropServices.HandleRef jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetGlobal__SWIG_1")]
  public static extern void Mob_SetGlobal__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, int jarg4, string jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TarGlobal")]
  public static extern void Mob_TarGlobal(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, string jarg4, int jarg5, int jarg6, int jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DelGlobal")]
  public static extern void Mob_DelGlobal(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetEmoteID")]
  public static extern void Mob_SetEmoteID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetEmoteID")]
  public static extern uint Mob_GetEmoteID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HasSpellEffect")]
  public static extern bool Mob_HasSpellEffect(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetRacePlural")]
  public static extern global::System.IntPtr Mob_GetRacePlural(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetClassPlural")]
  public static extern global::System.IntPtr Mob_GetClassPlural(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneGetStats")]
  public static extern void Mob_TuneGetStats(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneGetACByPctMitigation__SWIG_0")]
  public static extern void Mob_TuneGetACByPctMitigation__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, float jarg4, int jarg5, int jarg6, int jarg7, int jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneGetACByPctMitigation__SWIG_1")]
  public static extern void Mob_TuneGetACByPctMitigation__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, float jarg4, int jarg5, int jarg6, int jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneGetACByPctMitigation__SWIG_2")]
  public static extern void Mob_TuneGetACByPctMitigation__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, float jarg4, int jarg5, int jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneGetACByPctMitigation__SWIG_3")]
  public static extern void Mob_TuneGetACByPctMitigation__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, float jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneGetACByPctMitigation__SWIG_4")]
  public static extern void Mob_TuneGetACByPctMitigation__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, float jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneGetATKByPctMitigation__SWIG_0")]
  public static extern void Mob_TuneGetATKByPctMitigation__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, float jarg4, int jarg5, int jarg6, int jarg7, int jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneGetATKByPctMitigation__SWIG_1")]
  public static extern void Mob_TuneGetATKByPctMitigation__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, float jarg4, int jarg5, int jarg6, int jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneGetATKByPctMitigation__SWIG_2")]
  public static extern void Mob_TuneGetATKByPctMitigation__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, float jarg4, int jarg5, int jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneGetATKByPctMitigation__SWIG_3")]
  public static extern void Mob_TuneGetATKByPctMitigation__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, float jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneGetATKByPctMitigation__SWIG_4")]
  public static extern void Mob_TuneGetATKByPctMitigation__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, float jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneGetAvoidanceByHitChance")]
  public static extern void Mob_TuneGetAvoidanceByHitChance(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, float jarg4, int jarg5, int jarg6, int jarg7, int jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneGetAccuracyByHitChance")]
  public static extern void Mob_TuneGetAccuracyByHitChance(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, float jarg4, int jarg5, int jarg6, int jarg7, int jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneClientGetMeanDamage__SWIG_0")]
  public static extern long Mob_TuneClientGetMeanDamage__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, int jarg4, int jarg5, int jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneClientGetMeanDamage__SWIG_1")]
  public static extern long Mob_TuneClientGetMeanDamage__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, int jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneClientGetMeanDamage__SWIG_2")]
  public static extern long Mob_TuneClientGetMeanDamage__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneClientGetMeanDamage__SWIG_3")]
  public static extern long Mob_TuneClientGetMeanDamage__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneClientGetMeanDamage__SWIG_4")]
  public static extern long Mob_TuneClientGetMeanDamage__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneClientGetMaxDamage")]
  public static extern long Mob_TuneClientGetMaxDamage(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneClientGetMinDamage")]
  public static extern long Mob_TuneClientGetMinDamage(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneGetACMitigationPct")]
  public static extern float Mob_TuneGetACMitigationPct(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneGetOffense__SWIG_0")]
  public static extern long Mob_TuneGetOffense__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneGetOffense__SWIG_1")]
  public static extern long Mob_TuneGetOffense__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneGetAccuracy__SWIG_0")]
  public static extern long Mob_TuneGetAccuracy__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneGetAccuracy__SWIG_1")]
  public static extern long Mob_TuneGetAccuracy__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneGetAccuracy__SWIG_2")]
  public static extern long Mob_TuneGetAccuracy__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneGetAvoidance__SWIG_0")]
  public static extern long Mob_TuneGetAvoidance__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneGetAvoidance__SWIG_1")]
  public static extern long Mob_TuneGetAvoidance__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneGetAvoidance__SWIG_2")]
  public static extern long Mob_TuneGetAvoidance__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneGetHitChance__SWIG_0")]
  public static extern float Mob_TuneGetHitChance__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4, int jarg5, int jarg6, int jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneGetHitChance__SWIG_1")]
  public static extern float Mob_TuneGetHitChance__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4, int jarg5, int jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneGetHitChance__SWIG_2")]
  public static extern float Mob_TuneGetHitChance__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneGetHitChance__SWIG_3")]
  public static extern float Mob_TuneGetHitChance__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneGetHitChance__SWIG_4")]
  public static extern float Mob_TuneGetHitChance__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneGetAvoidMeleeChance")]
  public static extern float Mob_TuneGetAvoidMeleeChance(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneCalcEvasionBonus")]
  public static extern long Mob_TuneCalcEvasionBonus(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneNPCAttack__SWIG_0")]
  public static extern long Mob_TuneNPCAttack__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, bool jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9, bool jarg10, bool jarg11, int jarg12, int jarg13, int jarg14, int jarg15);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneNPCAttack__SWIG_1")]
  public static extern long Mob_TuneNPCAttack__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, bool jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9, bool jarg10, bool jarg11, int jarg12, int jarg13, int jarg14);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneNPCAttack__SWIG_2")]
  public static extern long Mob_TuneNPCAttack__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, bool jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9, bool jarg10, bool jarg11, int jarg12, int jarg13);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneNPCAttack__SWIG_3")]
  public static extern long Mob_TuneNPCAttack__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, bool jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9, bool jarg10, bool jarg11, int jarg12);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneNPCAttack__SWIG_4")]
  public static extern long Mob_TuneNPCAttack__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, bool jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9, bool jarg10, bool jarg11);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneNPCAttack__SWIG_5")]
  public static extern long Mob_TuneNPCAttack__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, bool jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9, bool jarg10);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneNPCAttack__SWIG_6")]
  public static extern long Mob_TuneNPCAttack__SWIG_6(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, bool jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneNPCAttack__SWIG_7")]
  public static extern long Mob_TuneNPCAttack__SWIG_7(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, bool jarg4, int jarg5, int jarg6, int jarg7, int jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneNPCAttack__SWIG_8")]
  public static extern long Mob_TuneNPCAttack__SWIG_8(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, bool jarg4, int jarg5, int jarg6, int jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneNPCAttack__SWIG_9")]
  public static extern long Mob_TuneNPCAttack__SWIG_9(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, bool jarg4, int jarg5, int jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneNPCAttack__SWIG_10")]
  public static extern long Mob_TuneNPCAttack__SWIG_10(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, bool jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneNPCAttack__SWIG_11")]
  public static extern long Mob_TuneNPCAttack__SWIG_11(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneNPCAttack__SWIG_12")]
  public static extern long Mob_TuneNPCAttack__SWIG_12(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneNPCAttack__SWIG_13")]
  public static extern long Mob_TuneNPCAttack__SWIG_13(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneClientAttack__SWIG_0")]
  public static extern long Mob_TuneClientAttack__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, bool jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9, bool jarg10, bool jarg11, int jarg12, int jarg13, int jarg14, int jarg15);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneClientAttack__SWIG_1")]
  public static extern long Mob_TuneClientAttack__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, bool jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9, bool jarg10, bool jarg11, int jarg12, int jarg13, int jarg14);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneClientAttack__SWIG_2")]
  public static extern long Mob_TuneClientAttack__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, bool jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9, bool jarg10, bool jarg11, int jarg12, int jarg13);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneClientAttack__SWIG_3")]
  public static extern long Mob_TuneClientAttack__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, bool jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9, bool jarg10, bool jarg11, int jarg12);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneClientAttack__SWIG_4")]
  public static extern long Mob_TuneClientAttack__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, bool jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9, bool jarg10, bool jarg11);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneClientAttack__SWIG_5")]
  public static extern long Mob_TuneClientAttack__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, bool jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9, bool jarg10);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneClientAttack__SWIG_6")]
  public static extern long Mob_TuneClientAttack__SWIG_6(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, bool jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneClientAttack__SWIG_7")]
  public static extern long Mob_TuneClientAttack__SWIG_7(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, bool jarg4, int jarg5, int jarg6, int jarg7, int jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneClientAttack__SWIG_8")]
  public static extern long Mob_TuneClientAttack__SWIG_8(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, bool jarg4, int jarg5, int jarg6, int jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneClientAttack__SWIG_9")]
  public static extern long Mob_TuneClientAttack__SWIG_9(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, bool jarg4, int jarg5, int jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneClientAttack__SWIG_10")]
  public static extern long Mob_TuneClientAttack__SWIG_10(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, bool jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneClientAttack__SWIG_11")]
  public static extern long Mob_TuneClientAttack__SWIG_11(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneClientAttack__SWIG_12")]
  public static extern long Mob_TuneClientAttack__SWIG_12(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneClientAttack__SWIG_13")]
  public static extern long Mob_TuneClientAttack__SWIG_13(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneDoAttack__SWIG_0")]
  public static extern void Mob_TuneDoAttack__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, bool jarg5, bool jarg6, int jarg7, int jarg8, int jarg9, int jarg10, int jarg11, int jarg12);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneDoAttack__SWIG_1")]
  public static extern void Mob_TuneDoAttack__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, bool jarg5, bool jarg6, int jarg7, int jarg8, int jarg9, int jarg10, int jarg11);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneDoAttack__SWIG_2")]
  public static extern void Mob_TuneDoAttack__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, bool jarg5, bool jarg6, int jarg7, int jarg8, int jarg9, int jarg10);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneDoAttack__SWIG_3")]
  public static extern void Mob_TuneDoAttack__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, bool jarg5, bool jarg6, int jarg7, int jarg8, int jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneDoAttack__SWIG_4")]
  public static extern void Mob_TuneDoAttack__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, bool jarg5, bool jarg6, int jarg7, int jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneDoAttack__SWIG_5")]
  public static extern void Mob_TuneDoAttack__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, bool jarg5, bool jarg6, int jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneDoAttack__SWIG_6")]
  public static extern void Mob_TuneDoAttack__SWIG_6(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, bool jarg5, bool jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneDoAttack__SWIG_7")]
  public static extern void Mob_TuneDoAttack__SWIG_7(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, bool jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneDoAttack__SWIG_8")]
  public static extern void Mob_TuneDoAttack__SWIG_8(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneDoAttack__SWIG_9")]
  public static extern void Mob_TuneDoAttack__SWIG_9(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneMeleeMitigation")]
  public static extern void Mob_TuneMeleeMitigation(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Tuneoffense__SWIG_0")]
  public static extern long Mob_Tuneoffense__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Tuneoffense__SWIG_1")]
  public static extern long Mob_Tuneoffense__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Tuneoffense__SWIG_2")]
  public static extern long Mob_Tuneoffense__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneACSum__SWIG_0")]
  public static extern long Mob_TuneACSum__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneACSum__SWIG_1")]
  public static extern long Mob_TuneACSum__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneACSum__SWIG_2")]
  public static extern long Mob_TuneACSum__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneACSum__SWIG_3")]
  public static extern long Mob_TuneACSum__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneGetTotalToHit__SWIG_0")]
  public static extern long Mob_TuneGetTotalToHit__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, int jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneGetTotalToHit__SWIG_1")]
  public static extern long Mob_TuneGetTotalToHit__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneGetTotalToHit__SWIG_2")]
  public static extern long Mob_TuneGetTotalToHit__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Tunecompute_tohit__SWIG_0")]
  public static extern long Mob_Tunecompute_tohit__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Tunecompute_tohit__SWIG_1")]
  public static extern long Mob_Tunecompute_tohit__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Tunecompute_tohit__SWIG_2")]
  public static extern long Mob_Tunecompute_tohit__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneGetTotalDefense__SWIG_0")]
  public static extern long Mob_TuneGetTotalDefense__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneGetTotalDefense__SWIG_1")]
  public static extern long Mob_TuneGetTotalDefense__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneGetTotalDefense__SWIG_2")]
  public static extern long Mob_TuneGetTotalDefense__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Tunecompute_defense__SWIG_0")]
  public static extern long Mob_Tunecompute_defense__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Tunecompute_defense__SWIG_1")]
  public static extern long Mob_Tunecompute_defense__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_Tunecompute_defense__SWIG_2")]
  public static extern long Mob_Tunecompute_defense__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneCheckHitChance__SWIG_0")]
  public static extern bool Mob_TuneCheckHitChance__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneCheckHitChance__SWIG_1")]
  public static extern bool Mob_TuneCheckHitChance__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneCheckHitChance__SWIG_2")]
  public static extern bool Mob_TuneCheckHitChance__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneAttackAnimation__SWIG_0")]
  public static extern global::System.IntPtr Mob_TuneAttackAnimation__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneAttackAnimation__SWIG_1")]
  public static extern global::System.IntPtr Mob_TuneAttackAnimation__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneCommonOutgoingHitSuccess__SWIG_0")]
  public static extern void Mob_TuneCommonOutgoingHitSuccess__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TuneCommonOutgoingHitSuccess__SWIG_1")]
  public static extern void Mob_TuneCommonOutgoingHitSuccess__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetAA__SWIG_0")]
  public static extern uint Mob_GetAA__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetAA__SWIG_1")]
  public static extern uint Mob_GetAA__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetAAByAAID__SWIG_0")]
  public static extern uint Mob_GetAAByAAID__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetAAByAAID__SWIG_1")]
  public static extern uint Mob_GetAAByAAID__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetAA__SWIG_0")]
  public static extern bool Mob_SetAA__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetAA__SWIG_1")]
  public static extern bool Mob_SetAA__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ClearAAs")]
  public static extern void Mob_ClearAAs(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CanUseAlternateAdvancementRank")]
  public static extern bool Mob_CanUseAlternateAdvancementRank(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CanPurchaseAlternateAdvancementRank")]
  public static extern bool Mob_CanPurchaseAlternateAdvancementRank(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetAlternateAdvancementCooldownReduction")]
  public static extern int Mob_GetAlternateAdvancementCooldownReduction(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ExpendAlternateAdvancementCharge")]
  public static extern void Mob_ExpendAlternateAdvancementCharge(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CalcAABonuses")]
  public static extern void Mob_CalcAABonuses(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CalcAAFocus")]
  public static extern long Mob_CalcAAFocus(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, ushort jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ApplyAABonuses")]
  public static extern void Mob_ApplyAABonuses(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CheckAATimer")]
  public static extern bool Mob_CheckAATimer(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CalcItemBonuses")]
  public static extern void Mob_CalcItemBonuses(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AddItemBonuses__SWIG_0")]
  public static extern void Mob_AddItemBonuses__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4, bool jarg5, int jarg6, bool jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AddItemBonuses__SWIG_1")]
  public static extern void Mob_AddItemBonuses__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4, bool jarg5, int jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AddItemBonuses__SWIG_2")]
  public static extern void Mob_AddItemBonuses__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4, bool jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AddItemBonuses__SWIG_3")]
  public static extern void Mob_AddItemBonuses__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AddItemBonuses__SWIG_4")]
  public static extern void Mob_AddItemBonuses__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AdditiveWornBonuses__SWIG_0")]
  public static extern void Mob_AdditiveWornBonuses__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AdditiveWornBonuses__SWIG_1")]
  public static extern void Mob_AdditiveWornBonuses__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CalcRecommendedLevelBonus")]
  public static extern int Mob_CalcRecommendedLevelBonus(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, byte jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_NPCAssistCap")]
  public static extern int Mob_NPCAssistCap(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_AddAssistCap")]
  public static extern void Mob_AddAssistCap(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DelAssistCap")]
  public static extern void Mob_DelAssistCap(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_ResetAssistCap")]
  public static extern void Mob_ResetAssistCap(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetWeaponDamage__SWIG_0")]
  public static extern long Mob_GetWeaponDamage__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetWeaponDamage__SWIG_1")]
  public static extern long Mob_GetWeaponDamage__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetWeaponDamage__SWIG_2")]
  public static extern long Mob_GetWeaponDamage__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DoDamageCaps")]
  public static extern long Mob_DoDamageCaps(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHPRegen")]
  public static extern long Mob_GetHPRegen(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetHPRegenPerSecond")]
  public static extern long Mob_GetHPRegenPerSecond(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetManaRegen")]
  public static extern long Mob_GetManaRegen(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetEnduranceRegen")]
  public static extern long Mob_GetEnduranceRegen(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CanOpenDoors")]
  public static extern bool Mob_CanOpenDoors(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetCanOpenDoors")]
  public static extern void Mob_SetCanOpenDoors(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetFeigned")]
  public static extern void Mob_SetFeigned(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetFeigned")]
  public static extern bool Mob_GetFeigned(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DeleteBucket")]
  public static extern void Mob_DeleteBucket(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetBucket")]
  public static extern global::System.IntPtr Mob_GetBucket(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetBucketExpires")]
  public static extern global::System.IntPtr Mob_GetBucketExpires(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetBucketRemaining")]
  public static extern global::System.IntPtr Mob_GetBucketRemaining(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetBucket__SWIG_0")]
  public static extern void Mob_SetBucket__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetBucket__SWIG_1")]
  public static extern void Mob_SetBucket__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetMobTypeIdentifier")]
  public static extern uint Mob_GetMobTypeIdentifier(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CheckHeroicBonusesDataBuckets")]
  public static extern float Mob_CheckHeroicBonusesDataBuckets(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DispatchZoneControllerEvent")]
  public static extern int Mob_DispatchZoneControllerEvent(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, uint jarg5, global::System.Runtime.InteropServices.HandleRef jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_IsHealRotationTarget")]
  public static extern bool Mob_IsHealRotationTarget(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_JoinHealRotationTargetPool")]
  public static extern bool Mob_JoinHealRotationTargetPool(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_LeaveHealRotationTargetPool")]
  public static extern bool Mob_LeaveHealRotationTargetPool(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HealRotationHealCount")]
  public static extern uint Mob_HealRotationHealCount(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HealRotationExtendedHealCount")]
  public static extern uint Mob_HealRotationExtendedHealCount(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HealRotationHealFrequency")]
  public static extern float Mob_HealRotationHealFrequency(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_HealRotationExtendedHealFrequency")]
  public static extern float Mob_HealRotationExtendedHealFrequency(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_TargetOfHealRotation")]
  public static extern global::System.IntPtr Mob_TargetOfHealRotation(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetManualFollow")]
  public static extern void Mob_SetManualFollow(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetManualFollow")]
  public static extern bool Mob_GetManualFollow(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_DrawDebugCoordinateNode")]
  public static extern void Mob_DrawDebugCoordinateNode(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_CalcHeroicBonuses")]
  public static extern void Mob_CalcHeroicBonuses(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetScopedBucketKeys")]
  public static extern global::System.IntPtr Mob_GetScopedBucketKeys(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetCombatRecord")]
  public static extern global::System.IntPtr Mob_GetCombatRecord(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_GetWasSpawnedInWater")]
  public static extern bool Mob_GetWasSpawnedInWater(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SetSpawnedInWater")]
  public static extern void Mob_SetSpawnedInWater(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_turning_set")]
  public static extern void Mob_turning_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_turning_get")]
  public static extern bool Mob_turning_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPCProximity_min_x_set")]
  public static extern void NPCProximity_min_x_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPCProximity_min_x_get")]
  public static extern float NPCProximity_min_x_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPCProximity_max_x_set")]
  public static extern void NPCProximity_max_x_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPCProximity_max_x_get")]
  public static extern float NPCProximity_max_x_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPCProximity_min_y_set")]
  public static extern void NPCProximity_min_y_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPCProximity_min_y_get")]
  public static extern float NPCProximity_min_y_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPCProximity_max_y_set")]
  public static extern void NPCProximity_max_y_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPCProximity_max_y_get")]
  public static extern float NPCProximity_max_y_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPCProximity_min_z_set")]
  public static extern void NPCProximity_min_z_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPCProximity_min_z_get")]
  public static extern float NPCProximity_min_z_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPCProximity_max_z_set")]
  public static extern void NPCProximity_max_z_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPCProximity_max_z_get")]
  public static extern float NPCProximity_max_z_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPCProximity_say_set")]
  public static extern void NPCProximity_say_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPCProximity_say_get")]
  public static extern bool NPCProximity_say_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPCProximity_proximity_set_set")]
  public static extern void NPCProximity_proximity_set_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPCProximity_proximity_set_get")]
  public static extern bool NPCProximity_proximity_set_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_NPCProximity")]
  public static extern global::System.IntPtr new_NPCProximity();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_NPCProximity")]
  public static extern void delete_NPCProximity(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpells_Struct_type_set")]
  public static extern void AISpells_Struct_type_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpells_Struct_type_get")]
  public static extern uint AISpells_Struct_type_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpells_Struct_spellid_set")]
  public static extern void AISpells_Struct_spellid_set(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpells_Struct_spellid_get")]
  public static extern ushort AISpells_Struct_spellid_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpells_Struct_manacost_set")]
  public static extern void AISpells_Struct_manacost_set(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpells_Struct_manacost_get")]
  public static extern short AISpells_Struct_manacost_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpells_Struct_time_cancast_set")]
  public static extern void AISpells_Struct_time_cancast_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpells_Struct_time_cancast_get")]
  public static extern uint AISpells_Struct_time_cancast_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpells_Struct_recast_delay_set")]
  public static extern void AISpells_Struct_recast_delay_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpells_Struct_recast_delay_get")]
  public static extern int AISpells_Struct_recast_delay_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpells_Struct_priority_set")]
  public static extern void AISpells_Struct_priority_set(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpells_Struct_priority_get")]
  public static extern short AISpells_Struct_priority_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpells_Struct_resist_adjust_set")]
  public static extern void AISpells_Struct_resist_adjust_set(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpells_Struct_resist_adjust_get")]
  public static extern short AISpells_Struct_resist_adjust_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpells_Struct_min_hp_set")]
  public static extern void AISpells_Struct_min_hp_set(global::System.Runtime.InteropServices.HandleRef jarg1, sbyte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpells_Struct_min_hp_get")]
  public static extern sbyte AISpells_Struct_min_hp_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpells_Struct_max_hp_set")]
  public static extern void AISpells_Struct_max_hp_set(global::System.Runtime.InteropServices.HandleRef jarg1, sbyte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpells_Struct_max_hp_get")]
  public static extern sbyte AISpells_Struct_max_hp_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_AISpells_Struct")]
  public static extern global::System.IntPtr new_AISpells_Struct();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_AISpells_Struct")]
  public static extern void delete_AISpells_Struct(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpellsEffects_Struct_spelleffectid_set")]
  public static extern void AISpellsEffects_Struct_spelleffectid_set(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpellsEffects_Struct_spelleffectid_get")]
  public static extern ushort AISpellsEffects_Struct_spelleffectid_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpellsEffects_Struct_base_value_set")]
  public static extern void AISpellsEffects_Struct_base_value_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpellsEffects_Struct_base_value_get")]
  public static extern int AISpellsEffects_Struct_base_value_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpellsEffects_Struct_limit_set")]
  public static extern void AISpellsEffects_Struct_limit_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpellsEffects_Struct_limit_get")]
  public static extern int AISpellsEffects_Struct_limit_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpellsEffects_Struct_max_value_set")]
  public static extern void AISpellsEffects_Struct_max_value_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpellsEffects_Struct_max_value_get")]
  public static extern int AISpellsEffects_Struct_max_value_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_AISpellsEffects_Struct")]
  public static extern global::System.IntPtr new_AISpellsEffects_Struct();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_AISpellsEffects_Struct")]
  public static extern void delete_AISpellsEffects_Struct(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpellsVar_Struct_fail_recast_set")]
  public static extern void AISpellsVar_Struct_fail_recast_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpellsVar_Struct_fail_recast_get")]
  public static extern uint AISpellsVar_Struct_fail_recast_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpellsVar_Struct_engaged_no_sp_recast_min_set")]
  public static extern void AISpellsVar_Struct_engaged_no_sp_recast_min_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpellsVar_Struct_engaged_no_sp_recast_min_get")]
  public static extern uint AISpellsVar_Struct_engaged_no_sp_recast_min_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpellsVar_Struct_engaged_no_sp_recast_max_set")]
  public static extern void AISpellsVar_Struct_engaged_no_sp_recast_max_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpellsVar_Struct_engaged_no_sp_recast_max_get")]
  public static extern uint AISpellsVar_Struct_engaged_no_sp_recast_max_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpellsVar_Struct_engaged_beneficial_self_chance_set")]
  public static extern void AISpellsVar_Struct_engaged_beneficial_self_chance_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpellsVar_Struct_engaged_beneficial_self_chance_get")]
  public static extern byte AISpellsVar_Struct_engaged_beneficial_self_chance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpellsVar_Struct_engaged_beneficial_other_chance_set")]
  public static extern void AISpellsVar_Struct_engaged_beneficial_other_chance_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpellsVar_Struct_engaged_beneficial_other_chance_get")]
  public static extern byte AISpellsVar_Struct_engaged_beneficial_other_chance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpellsVar_Struct_engaged_detrimental_chance_set")]
  public static extern void AISpellsVar_Struct_engaged_detrimental_chance_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpellsVar_Struct_engaged_detrimental_chance_get")]
  public static extern byte AISpellsVar_Struct_engaged_detrimental_chance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpellsVar_Struct_pursue_no_sp_recast_min_set")]
  public static extern void AISpellsVar_Struct_pursue_no_sp_recast_min_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpellsVar_Struct_pursue_no_sp_recast_min_get")]
  public static extern uint AISpellsVar_Struct_pursue_no_sp_recast_min_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpellsVar_Struct_pursue_no_sp_recast_max_set")]
  public static extern void AISpellsVar_Struct_pursue_no_sp_recast_max_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpellsVar_Struct_pursue_no_sp_recast_max_get")]
  public static extern uint AISpellsVar_Struct_pursue_no_sp_recast_max_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpellsVar_Struct_pursue_detrimental_chance_set")]
  public static extern void AISpellsVar_Struct_pursue_detrimental_chance_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpellsVar_Struct_pursue_detrimental_chance_get")]
  public static extern byte AISpellsVar_Struct_pursue_detrimental_chance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpellsVar_Struct_idle_no_sp_recast_min_set")]
  public static extern void AISpellsVar_Struct_idle_no_sp_recast_min_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpellsVar_Struct_idle_no_sp_recast_min_get")]
  public static extern uint AISpellsVar_Struct_idle_no_sp_recast_min_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpellsVar_Struct_idle_no_sp_recast_max_set")]
  public static extern void AISpellsVar_Struct_idle_no_sp_recast_max_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpellsVar_Struct_idle_no_sp_recast_max_get")]
  public static extern uint AISpellsVar_Struct_idle_no_sp_recast_max_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpellsVar_Struct_idle_beneficial_chance_set")]
  public static extern void AISpellsVar_Struct_idle_beneficial_chance_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AISpellsVar_Struct_idle_beneficial_chance_get")]
  public static extern byte AISpellsVar_Struct_idle_beneficial_chance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_AISpellsVar_Struct")]
  public static extern global::System.IntPtr new_AISpellsVar_Struct();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_AISpellsVar_Struct")]
  public static extern void delete_AISpellsVar_Struct(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Roambox_max_x_set")]
  public static extern void Roambox_max_x_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Roambox_max_x_get")]
  public static extern float Roambox_max_x_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Roambox_max_y_set")]
  public static extern void Roambox_max_y_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Roambox_max_y_get")]
  public static extern float Roambox_max_y_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Roambox_min_x_set")]
  public static extern void Roambox_min_x_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Roambox_min_x_get")]
  public static extern float Roambox_min_x_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Roambox_min_y_set")]
  public static extern void Roambox_min_y_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Roambox_min_y_get")]
  public static extern float Roambox_min_y_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Roambox_distance_set")]
  public static extern void Roambox_distance_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Roambox_distance_get")]
  public static extern float Roambox_distance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Roambox_dest_x_set")]
  public static extern void Roambox_dest_x_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Roambox_dest_x_get")]
  public static extern float Roambox_dest_x_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Roambox_dest_y_set")]
  public static extern void Roambox_dest_y_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Roambox_dest_y_get")]
  public static extern float Roambox_dest_y_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Roambox_dest_z_set")]
  public static extern void Roambox_dest_z_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Roambox_dest_z_get")]
  public static extern float Roambox_dest_z_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Roambox_delay_set")]
  public static extern void Roambox_delay_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Roambox_delay_get")]
  public static extern uint Roambox_delay_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Roambox_min_delay_set")]
  public static extern void Roambox_min_delay_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Roambox_min_delay_get")]
  public static extern uint Roambox_min_delay_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Roambox")]
  public static extern global::System.IntPtr new_Roambox();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_Roambox")]
  public static extern void delete_Roambox(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SpawnNPC__SWIG_0")]
  public static extern global::System.IntPtr NPC_SpawnNPC__SWIG_0(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SpawnNPC__SWIG_1")]
  public static extern global::System.IntPtr NPC_SpawnNPC__SWIG_1(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SpawnZoneController")]
  public static extern bool NPC_SpawnZoneController();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_IsRecordLootStats")]
  public static extern bool NPC_IsRecordLootStats(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SetRecordLootStats")]
  public static extern void NPC_SetRecordLootStats(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetRolledItems")]
  public static extern global::System.IntPtr NPC_GetRolledItems(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetRolledItemCount")]
  public static extern int NPC_GetRolledItemCount(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_NPC__SWIG_0")]
  public static extern global::System.IntPtr new_NPC__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4, bool jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_NPC__SWIG_1")]
  public static extern global::System.IntPtr new_NPC__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_NPC")]
  public static extern void delete_NPC(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SpawnNodeNPC")]
  public static extern global::System.IntPtr NPC_SpawnNodeNPC(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SpawnGridNodeNPC")]
  public static extern void NPC_SpawnGridNodeNPC(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SpawnZonePointNodeNPC")]
  public static extern global::System.IntPtr NPC_SpawnZonePointNodeNPC(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_Death__SWIG_0")]
  public static extern bool NPC_Death__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, int jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_Death__SWIG_1")]
  public static extern bool NPC_Death__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_Damage__SWIG_0")]
  public static extern void NPC_Damage__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, bool jarg6, sbyte jarg7, bool jarg8, int jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_Damage__SWIG_1")]
  public static extern void NPC_Damage__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, bool jarg6, sbyte jarg7, bool jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_Damage__SWIG_2")]
  public static extern void NPC_Damage__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, bool jarg6, sbyte jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_Damage__SWIG_3")]
  public static extern void NPC_Damage__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, bool jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_Damage__SWIG_4")]
  public static extern void NPC_Damage__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_Attack__SWIG_0")]
  public static extern bool NPC_Attack__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, bool jarg4, bool jarg5, bool jarg6, global::System.Runtime.InteropServices.HandleRef jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_Attack__SWIG_1")]
  public static extern bool NPC_Attack__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, bool jarg4, bool jarg5, bool jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_Attack__SWIG_2")]
  public static extern bool NPC_Attack__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, bool jarg4, bool jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_Attack__SWIG_3")]
  public static extern bool NPC_Attack__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_Attack__SWIG_4")]
  public static extern bool NPC_Attack__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_Attack__SWIG_5")]
  public static extern bool NPC_Attack__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_HasRaid")]
  public static extern bool NPC_HasRaid(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_HasGroup")]
  public static extern bool NPC_HasGroup(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetRaid")]
  public static extern global::System.IntPtr NPC_GetRaid(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetGroup")]
  public static extern global::System.IntPtr NPC_GetGroup(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_IsNPC")]
  public static extern bool NPC_IsNPC(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_Process")]
  public static extern bool NPC_Process(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AI_Init")]
  public static extern void NPC_AI_Init(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AI_Start__SWIG_0")]
  public static extern void NPC_AI_Start__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AI_Start__SWIG_1")]
  public static extern void NPC_AI_Start__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AI_Stop")]
  public static extern void NPC_AI_Stop(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AI_DoMovement")]
  public static extern void NPC_AI_DoMovement(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AI_SetupNextWaypoint")]
  public static extern void NPC_AI_SetupNextWaypoint(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AI_AddNPCSpells")]
  public static extern bool NPC_AI_AddNPCSpells(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AI_AddNPCSpellsEffects")]
  public static extern bool NPC_AI_AddNPCSpellsEffects(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AI_EngagedCastCheck")]
  public static extern bool NPC_AI_EngagedCastCheck(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AI_HasSpells")]
  public static extern bool NPC_AI_HasSpells(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AI_HasSpellsEffects")]
  public static extern bool NPC_AI_HasSpellsEffects(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_ApplyAISpellEffects")]
  public static extern void NPC_ApplyAISpellEffects(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AI_PursueCastCheck")]
  public static extern bool NPC_AI_PursueCastCheck(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AI_IdleCastCheck")]
  public static extern bool NPC_AI_IdleCastCheck(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AI_Event_SpellCastFinished")]
  public static extern void NPC_AI_Event_SpellCastFinished(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2, ushort jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AICheckCloseBeneficialSpells")]
  public static extern bool NPC_AICheckCloseBeneficialSpells(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, byte jarg3, float jarg4, uint jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AIYellForHelp")]
  public static extern void NPC_AIYellForHelp(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_LevelScale")]
  public static extern void NPC_LevelScale(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SetTarget")]
  public static extern void NPC_SetTarget(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetSkill")]
  public static extern ushort NPC_GetSkill(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_CalcBonuses")]
  public static extern void NPC_CalcBonuses(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetCurrentBuffSlots")]
  public static extern int NPC_GetCurrentBuffSlots(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetCurrentSongSlots")]
  public static extern int NPC_GetCurrentSongSlots(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetCurrentDiscSlots")]
  public static extern int NPC_GetCurrentDiscSlots(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetMaxBuffSlots")]
  public static extern int NPC_GetMaxBuffSlots(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetMaxSongSlots")]
  public static extern int NPC_GetMaxSongSlots(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetMaxDiscSlots")]
  public static extern int NPC_GetMaxDiscSlots(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetMaxTotalSlots")]
  public static extern int NPC_GetMaxTotalSlots(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetPetMaxTotalSlots")]
  public static extern int NPC_GetPetMaxTotalSlots(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_InitializeBuffSlots")]
  public static extern void NPC_InitializeBuffSlots(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_UninitializeBuffSlots")]
  public static extern void NPC_UninitializeBuffSlots(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SetAttackTimer")]
  public static extern void NPC_SetAttackTimer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_RangedAttack")]
  public static extern void NPC_RangedAttack(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_ThrowingAttack")]
  public static extern void NPC_ThrowingAttack(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetNumberOfAttacks")]
  public static extern int NPC_GetNumberOfAttacks(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_DoRangedAttackDmg__SWIG_0")]
  public static extern void NPC_DoRangedAttackDmg__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, short jarg4, short jarg5, global::System.Runtime.InteropServices.HandleRef jarg6, float jarg7, string jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_DoRangedAttackDmg__SWIG_1")]
  public static extern void NPC_DoRangedAttackDmg__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, short jarg4, short jarg5, global::System.Runtime.InteropServices.HandleRef jarg6, float jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_DoRangedAttackDmg__SWIG_2")]
  public static extern void NPC_DoRangedAttackDmg__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, short jarg4, short jarg5, global::System.Runtime.InteropServices.HandleRef jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_DoRangedAttackDmg__SWIG_3")]
  public static extern void NPC_DoRangedAttackDmg__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, short jarg4, short jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_DoRangedAttackDmg__SWIG_4")]
  public static extern void NPC_DoRangedAttackDmg__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, short jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_DoRangedAttackDmg__SWIG_5")]
  public static extern void NPC_DoRangedAttackDmg__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_DoRangedAttackDmg__SWIG_6")]
  public static extern void NPC_DoRangedAttackDmg__SWIG_6(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_IsFactionListAlly")]
  public static extern bool NPC_IsFactionListAlly(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_IsGuard")]
  public static extern bool NPC_IsGuard(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_CheckNPCFactionAlly")]
  public static extern global::System.IntPtr NPC_CheckNPCFactionAlly(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetReverseFactionCon")]
  public static extern global::System.IntPtr NPC_GetReverseFactionCon(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GoToBind__SWIG_0")]
  public static extern void NPC_GoToBind__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GoToBind__SWIG_1")]
  public static extern void NPC_GoToBind__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_Gate__SWIG_0")]
  public static extern void NPC_Gate__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_Gate__SWIG_1")]
  public static extern void NPC_Gate__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetPetState")]
  public static extern void NPC_GetPetState(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SetPetState")]
  public static extern void NPC_SetPetState(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SpellProcess")]
  public static extern void NPC_SpellProcess(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_FillSpawnStruct")]
  public static extern void NPC_FillSpawnStruct(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AddItem__SWIG_0")]
  public static extern void NPC_AddItem__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, ushort jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AddItem__SWIG_1")]
  public static extern void NPC_AddItem__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, ushort jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AddItem__SWIG_2")]
  public static extern void NPC_AddItem__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, ushort jarg3, bool jarg4, uint jarg5, uint jarg6, uint jarg7, uint jarg8, uint jarg9, uint jarg10);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AddItem__SWIG_3")]
  public static extern void NPC_AddItem__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, ushort jarg3, bool jarg4, uint jarg5, uint jarg6, uint jarg7, uint jarg8, uint jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AddItem__SWIG_4")]
  public static extern void NPC_AddItem__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, ushort jarg3, bool jarg4, uint jarg5, uint jarg6, uint jarg7, uint jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AddItem__SWIG_5")]
  public static extern void NPC_AddItem__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, ushort jarg3, bool jarg4, uint jarg5, uint jarg6, uint jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AddItem__SWIG_6")]
  public static extern void NPC_AddItem__SWIG_6(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, ushort jarg3, bool jarg4, uint jarg5, uint jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AddItem__SWIG_7")]
  public static extern void NPC_AddItem__SWIG_7(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, ushort jarg3, bool jarg4, uint jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AddItem__SWIG_8")]
  public static extern void NPC_AddItem__SWIG_8(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, ushort jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AddItem__SWIG_9")]
  public static extern void NPC_AddItem__SWIG_9(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, ushort jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AddLootTable__SWIG_0")]
  public static extern void NPC_AddLootTable__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AddLootTable__SWIG_1")]
  public static extern void NPC_AddLootTable__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AddLootTable__SWIG_2")]
  public static extern void NPC_AddLootTable__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AddLootDropTable")]
  public static extern void NPC_AddLootDropTable(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, byte jarg3, byte jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_CheckGlobalLootTables")]
  public static extern void NPC_CheckGlobalLootTables(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_RemoveItem__SWIG_0")]
  public static extern void NPC_RemoveItem__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, ushort jarg3, ushort jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_RemoveItem__SWIG_1")]
  public static extern void NPC_RemoveItem__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, ushort jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_RemoveItem__SWIG_2")]
  public static extern void NPC_RemoveItem__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_CheckTrivialMinMaxLevelDrop")]
  public static extern void NPC_CheckTrivialMinMaxLevelDrop(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_ClearLootItems")]
  public static extern void NPC_ClearLootItems(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetLootItems")]
  public static extern global::System.IntPtr NPC_GetLootItems(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetItem")]
  public static extern global::System.IntPtr NPC_GetItem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AddLootCash")]
  public static extern void NPC_AddLootCash(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, uint jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_RemoveLootCash")]
  public static extern void NPC_RemoveLootCash(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_QueryLoot__SWIG_0")]
  public static extern void NPC_QueryLoot__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_QueryLoot__SWIG_1")]
  public static extern void NPC_QueryLoot__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_HasItem")]
  public static extern bool NPC_HasItem(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_CountItem")]
  public static extern ushort NPC_CountItem(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetLootItemIDBySlot")]
  public static extern uint NPC_GetLootItemIDBySlot(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetFirstLootSlotByItemID")]
  public static extern ushort NPC_GetFirstLootSlotByItemID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetLootList")]
  public static extern global::System.IntPtr NPC_GetLootList(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_CountLoot")]
  public static extern uint NPC_CountLoot(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetLoottableID")]
  public static extern uint NPC_GetLoottableID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_DropsGlobalLoot")]
  public static extern bool NPC_DropsGlobalLoot(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetCopper")]
  public static extern uint NPC_GetCopper(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetSilver")]
  public static extern uint NPC_GetSilver(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetGold")]
  public static extern uint NPC_GetGold(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetPlatinum")]
  public static extern uint NPC_GetPlatinum(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SetCopper")]
  public static extern void NPC_SetCopper(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SetSilver")]
  public static extern void NPC_SetSilver(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SetGold")]
  public static extern void NPC_SetGold(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SetPlatinum")]
  public static extern void NPC_SetPlatinum(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_DescribeAggro")]
  public static extern void NPC_DescribeAggro(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_UpdateEquipmentLight")]
  public static extern void NPC_UpdateEquipmentLight(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_CalcMaxMana")]
  public static extern long NPC_CalcMaxMana(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SetGrid")]
  public static extern void NPC_SetGrid(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SetSpawnGroupId")]
  public static extern void NPC_SetSpawnGroupId(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SetWaypointMax")]
  public static extern void NPC_SetWaypointMax(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SetSaveWaypoint")]
  public static extern void NPC_SetSaveWaypoint(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetWaypointMax")]
  public static extern ushort NPC_GetWaypointMax(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetGrid")]
  public static extern int NPC_GetGrid(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetSpawnGroupId")]
  public static extern uint NPC_GetSpawnGroupId(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetSpawnPointID")]
  public static extern uint NPC_GetSpawnPointID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetSpawnPoint")]
  public static extern global::System.IntPtr NPC_GetSpawnPoint(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetGuardPoint")]
  public static extern global::System.IntPtr NPC_GetGuardPoint(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetGuardPointAnim")]
  public static extern global::System.IntPtr NPC_GetGuardPointAnim(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SaveGuardPointAnim")]
  public static extern void NPC_SaveGuardPointAnim(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetPrimSkill")]
  public static extern byte NPC_GetPrimSkill(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetSecSkill")]
  public static extern byte NPC_GetSecSkill(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetRangedSkill")]
  public static extern byte NPC_GetRangedSkill(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SetPrimSkill")]
  public static extern void NPC_SetPrimSkill(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SetSecSkill")]
  public static extern void NPC_SetSecSkill(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SetRangedSkill")]
  public static extern void NPC_SetRangedSkill(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_MerchantType_set")]
  public static extern void NPC_MerchantType_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_MerchantType_get")]
  public static extern uint NPC_MerchantType_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_merchant_open_set")]
  public static extern void NPC_merchant_open_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_merchant_open_get")]
  public static extern bool NPC_merchant_open_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_MerchantOpenShop")]
  public static extern void NPC_MerchantOpenShop(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_MerchantCloseShop")]
  public static extern void NPC_MerchantCloseShop(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_IsMerchantOpen")]
  public static extern bool NPC_IsMerchantOpen(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_Depop__SWIG_0")]
  public static extern void NPC_Depop__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_Depop__SWIG_1")]
  public static extern void NPC_Depop__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_Stun")]
  public static extern void NPC_Stun(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_UnStun")]
  public static extern void NPC_UnStun(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetSwarmOwner")]
  public static extern uint NPC_GetSwarmOwner(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetSwarmTarget")]
  public static extern uint NPC_GetSwarmTarget(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SetSwarmTarget__SWIG_0")]
  public static extern void NPC_SetSwarmTarget__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SetSwarmTarget__SWIG_1")]
  public static extern void NPC_SetSwarmTarget__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_DepopSwarmPets")]
  public static extern void NPC_DepopSwarmPets(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_TryDepopTargetLockedPets")]
  public static extern void NPC_TryDepopTargetLockedPets(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_PetOnSpawn")]
  public static extern void NPC_PetOnSpawn(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SignalNPC")]
  public static extern void NPC_SignalNPC(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SendPayload__SWIG_0")]
  public static extern void NPC_SendPayload__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SendPayload__SWIG_1")]
  public static extern void NPC_SendPayload__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetNPCFactionID")]
  public static extern int NPC_GetNPCFactionID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetPrimaryFaction")]
  public static extern int NPC_GetPrimaryFaction(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetFactionAmount")]
  public static extern int NPC_GetFactionAmount(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetNPCHate")]
  public static extern long NPC_GetNPCHate(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_IsOnHatelist")]
  public static extern bool NPC_IsOnHatelist(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SetNPCFactionID")]
  public static extern void NPC_SetNPCFactionID(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_m_SpawnPoint_set")]
  public static extern void NPC_m_SpawnPoint_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_m_SpawnPoint_get")]
  public static extern global::System.IntPtr NPC_m_SpawnPoint_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetMaxDMG")]
  public static extern uint NPC_GetMaxDMG(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetMinDMG")]
  public static extern uint NPC_GetMinDMG(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetBaseDamage")]
  public static extern int NPC_GetBaseDamage(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetMinDamage")]
  public static extern int NPC_GetMinDamage(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetSlowMitigation")]
  public static extern float NPC_GetSlowMitigation(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetAttackSpeed")]
  public static extern float NPC_GetAttackSpeed(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetAttackDelay")]
  public static extern int NPC_GetAttackDelay(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_IsAnimal")]
  public static extern bool NPC_IsAnimal(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetPetSpellID")]
  public static extern ushort NPC_GetPetSpellID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SetPetSpellID")]
  public static extern void NPC_SetPetSpellID(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetMaxDamage")]
  public static extern uint NPC_GetMaxDamage(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SetTaunting")]
  public static extern void NPC_SetTaunting(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_IsTaunting")]
  public static extern bool NPC_IsTaunting(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_PickPocket")]
  public static extern void NPC_PickPocket(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_Disarm")]
  public static extern void NPC_Disarm(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_StartSwarmTimer")]
  public static extern void NPC_StartSwarmTimer(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_DisableSwarmTimer")]
  public static extern void NPC_DisableSwarmTimer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AddLootDrop__SWIG_0")]
  public static extern void NPC_AddLootDrop__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4, uint jarg5, uint jarg6, uint jarg7, uint jarg8, uint jarg9, uint jarg10);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AddLootDrop__SWIG_1")]
  public static extern void NPC_AddLootDrop__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4, uint jarg5, uint jarg6, uint jarg7, uint jarg8, uint jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AddLootDrop__SWIG_2")]
  public static extern void NPC_AddLootDrop__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4, uint jarg5, uint jarg6, uint jarg7, uint jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AddLootDrop__SWIG_3")]
  public static extern void NPC_AddLootDrop__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4, uint jarg5, uint jarg6, uint jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AddLootDrop__SWIG_4")]
  public static extern void NPC_AddLootDrop__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4, uint jarg5, uint jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AddLootDrop__SWIG_5")]
  public static extern void NPC_AddLootDrop__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4, uint jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AddLootDrop__SWIG_6")]
  public static extern void NPC_AddLootDrop__SWIG_6(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AddLootDrop__SWIG_7")]
  public static extern void NPC_AddLootDrop__SWIG_7(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_MeetsLootDropLevelRequirements__SWIG_0")]
  public static extern bool NPC_MeetsLootDropLevelRequirements__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_MeetsLootDropLevelRequirements__SWIG_1")]
  public static extern bool NPC_MeetsLootDropLevelRequirements__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_CheckSignal")]
  public static extern void NPC_CheckSignal(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_DoClassAttacks")]
  public static extern void NPC_DoClassAttacks(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_IsNotTargetableWithHotkey")]
  public static extern bool NPC_IsNotTargetableWithHotkey(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetNPCHPRegen")]
  public static extern long NPC_GetNPCHPRegen(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetAmmoIDfile")]
  public static extern string NPC_GetAmmoIDfile(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_ModifyStatsOnCharm")]
  public static extern void NPC_ModifyStatsOnCharm(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetMaxWp")]
  public static extern int NPC_GetMaxWp(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_DisplayWaypointInfo")]
  public static extern void NPC_DisplayWaypointInfo(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_CalculateNewWaypoint")]
  public static extern void NPC_CalculateNewWaypoint(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AssignWaypoints__SWIG_0")]
  public static extern void NPC_AssignWaypoints__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AssignWaypoints__SWIG_1")]
  public static extern void NPC_AssignWaypoints__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SetWaypointPause")]
  public static extern void NPC_SetWaypointPause(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_UpdateWaypoint")]
  public static extern void NPC_UpdateWaypoint(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_StopWandering")]
  public static extern void NPC_StopWandering(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_ResumeWandering")]
  public static extern void NPC_ResumeWandering(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_PauseWandering")]
  public static extern void NPC_PauseWandering(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_MoveTo")]
  public static extern void NPC_MoveTo(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetClosestWaypoints")]
  public static extern void NPC_GetClosestWaypoints(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetClosestWaypoint")]
  public static extern int NPC_GetClosestWaypoint(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetEquippedItemFromTextureSlot")]
  public static extern uint NPC_GetEquippedItemFromTextureSlot(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetEquipmentMaterial")]
  public static extern uint NPC_GetEquipmentMaterial(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_NextGuardPosition")]
  public static extern void NPC_NextGuardPosition(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SaveGuardSpot__SWIG_0")]
  public static extern void NPC_SaveGuardSpot__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SaveGuardSpot__SWIG_1")]
  public static extern void NPC_SaveGuardSpot__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SaveGuardSpot__SWIG_2")]
  public static extern void NPC_SaveGuardSpot__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_IsGuarding")]
  public static extern bool NPC_IsGuarding(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SaveGuardSpotCharm")]
  public static extern void NPC_SaveGuardSpotCharm(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_DescribeSpecialAbilities")]
  public static extern void NPC_DescribeSpecialAbilities(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetMeleeTexture1")]
  public static extern ushort NPC_GetMeleeTexture1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetMeleeTexture2")]
  public static extern ushort NPC_GetMeleeTexture2(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_RestoreGuardSpotCharm")]
  public static extern void NPC_RestoreGuardSpotCharm(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AI_SetRoambox__SWIG_0")]
  public static extern void NPC_AI_SetRoambox__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, uint jarg4, uint jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AI_SetRoambox__SWIG_1")]
  public static extern void NPC_AI_SetRoambox__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AI_SetRoambox__SWIG_2")]
  public static extern void NPC_AI_SetRoambox__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AI_SetRoambox__SWIG_3")]
  public static extern void NPC_AI_SetRoambox__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, uint jarg7, uint jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AI_SetRoambox__SWIG_4")]
  public static extern void NPC_AI_SetRoambox__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, uint jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AI_SetRoambox__SWIG_5")]
  public static extern void NPC_AI_SetRoambox__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_LoadMercenaryTypes")]
  public static extern void NPC_LoadMercenaryTypes(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_LoadMercenaries")]
  public static extern void NPC_LoadMercenaries(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetMercenaryTypesList__SWIG_0")]
  public static extern global::System.IntPtr NPC_GetMercenaryTypesList__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetMercenaryTypesList__SWIG_1")]
  public static extern global::System.IntPtr NPC_GetMercenaryTypesList__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetMercenariesList__SWIG_0")]
  public static extern global::System.IntPtr NPC_GetMercenariesList__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetMercenariesList__SWIG_1")]
  public static extern global::System.IntPtr NPC_GetMercenariesList__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetNumMercenaryTypes__SWIG_0")]
  public static extern int NPC_GetNumMercenaryTypes__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetNumMercenaryTypes__SWIG_1")]
  public static extern int NPC_GetNumMercenaryTypes__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetNumberOfMercenaries__SWIG_0")]
  public static extern int NPC_GetNumberOfMercenaries__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetNumberOfMercenaries__SWIG_1")]
  public static extern int NPC_GetNumberOfMercenaries__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetNPCAggro__SWIG_0")]
  public static extern bool NPC_GetNPCAggro__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SetNPCAggro")]
  public static extern void NPC_SetNPCAggro(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GiveNPCTypeData")]
  public static extern void NPC_GiveNPCTypeData(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetNPCSpellsID")]
  public static extern uint NPC_GetNPCSpellsID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetNPCSpellsEffectsID")]
  public static extern uint NPC_GetNPCSpellsEffectsID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetProximityMinX")]
  public static extern float NPC_GetProximityMinX(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetProximityMaxX")]
  public static extern float NPC_GetProximityMaxX(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetProximityMinY")]
  public static extern float NPC_GetProximityMinY(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetProximityMaxY")]
  public static extern float NPC_GetProximityMaxY(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetProximityMinZ")]
  public static extern float NPC_GetProximityMinZ(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetProximityMaxZ")]
  public static extern float NPC_GetProximityMaxZ(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_IsProximitySet")]
  public static extern bool NPC_IsProximitySet(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_proximity_set")]
  public static extern void NPC_proximity_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_proximity_get")]
  public static extern global::System.IntPtr NPC_proximity_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_respawn2_set")]
  public static extern void NPC_respawn2_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_respawn2_get")]
  public static extern global::System.IntPtr NPC_respawn2_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetQGlobals")]
  public static extern global::System.IntPtr NPC_GetQGlobals(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_CreateQGlobals")]
  public static extern global::System.IntPtr NPC_CreateQGlobals(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetSwarmInfo")]
  public static extern global::System.IntPtr NPC_GetSwarmInfo(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SetSwarmInfo")]
  public static extern void NPC_SetSwarmInfo(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetAccuracyRating")]
  public static extern int NPC_GetAccuracyRating(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SetAccuracyRating")]
  public static extern void NPC_SetAccuracyRating(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetAvoidanceRating")]
  public static extern int NPC_GetAvoidanceRating(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SetAvoidanceRating")]
  public static extern void NPC_SetAvoidanceRating(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetRawAC")]
  public static extern int NPC_GetRawAC(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetNPCStat")]
  public static extern float NPC_GetNPCStat(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_ModifyNPCStat")]
  public static extern void NPC_ModifyNPCStat(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SetLevel__SWIG_0")]
  public static extern void NPC_SetLevel__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SetLevel__SWIG_1")]
  public static extern void NPC_SetLevel__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_IsLDoNTrapped")]
  public static extern bool NPC_IsLDoNTrapped(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SetLDoNTrapped")]
  public static extern void NPC_SetLDoNTrapped(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetLDoNTrapType")]
  public static extern byte NPC_GetLDoNTrapType(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SetLDoNTrapType")]
  public static extern void NPC_SetLDoNTrapType(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetLDoNTrapSpellID")]
  public static extern ushort NPC_GetLDoNTrapSpellID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SetLDoNTrapSpellID")]
  public static extern void NPC_SetLDoNTrapSpellID(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_IsLDoNLocked")]
  public static extern bool NPC_IsLDoNLocked(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SetLDoNLocked")]
  public static extern void NPC_SetLDoNLocked(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetLDoNLockedSkill")]
  public static extern ushort NPC_GetLDoNLockedSkill(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SetLDoNLockedSkill")]
  public static extern void NPC_SetLDoNLockedSkill(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_IsLDoNTrapDetected")]
  public static extern bool NPC_IsLDoNTrapDetected(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SetLDoNTrapDetected")]
  public static extern void NPC_SetLDoNTrapDetected(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetCombatEvent")]
  public static extern bool NPC_GetCombatEvent(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SetCombatEvent")]
  public static extern void NPC_SetCombatEvent(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_HasPrivateCorpse")]
  public static extern bool NPC_HasPrivateCorpse(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_IsUnderwaterOnly")]
  public static extern bool NPC_IsUnderwaterOnly(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_IsQuestNPC")]
  public static extern bool NPC_IsQuestNPC(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetRawNPCTypeName")]
  public static extern string NPC_GetRawNPCTypeName(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetKillExpMod")]
  public static extern int NPC_GetKillExpMod(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_ChangeLastName")]
  public static extern void NPC_ChangeLastName(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_ClearLastName")]
  public static extern void NPC_ClearLastName(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetDepop")]
  public static extern bool NPC_GetDepop(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_NPCSlotTexture")]
  public static extern void NPC_NPCSlotTexture(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetAdventureTemplate")]
  public static extern uint NPC_GetAdventureTemplate(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AddSpellToNPCList")]
  public static extern void NPC_AddSpellToNPCList(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2, ushort jarg3, uint jarg4, short jarg5, int jarg6, short jarg7, sbyte jarg8, sbyte jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AddSpellEffectToNPCList__SWIG_0")]
  public static extern void NPC_AddSpellEffectToNPCList__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, int jarg3, int jarg4, int jarg5, bool jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AddSpellEffectToNPCList__SWIG_1")]
  public static extern void NPC_AddSpellEffectToNPCList__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, int jarg3, int jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_RemoveSpellFromNPCList")]
  public static extern void NPC_RemoveSpellFromNPCList(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_RemoveSpellEffectFromNPCList__SWIG_0")]
  public static extern void NPC_RemoveSpellEffectFromNPCList__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_RemoveSpellEffectFromNPCList__SWIG_1")]
  public static extern void NPC_RemoveSpellEffectFromNPCList__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_HasAISpellEffect")]
  public static extern bool NPC_HasAISpellEffect(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetRefaceTimer")]
  public static extern global::System.IntPtr NPC_GetRefaceTimer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetAltCurrencyType")]
  public static extern uint NPC_GetAltCurrencyType(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetNPCEmote")]
  public static extern global::System.IntPtr NPC_GetNPCEmote(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, byte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_DoNPCEmote__SWIG_0")]
  public static extern void NPC_DoNPCEmote__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_DoNPCEmote__SWIG_1")]
  public static extern void NPC_DoNPCEmote__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_CanTalk")]
  public static extern bool NPC_CanTalk(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_DoQuestPause")]
  public static extern void NPC_DoQuestPause(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SetSpellScale")]
  public static extern void NPC_SetSpellScale(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetSpellScale")]
  public static extern float NPC_GetSpellScale(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SetHealScale")]
  public static extern void NPC_SetHealScale(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetHealScale")]
  public static extern float NPC_GetHealScale(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SetSpellFocusDMG")]
  public static extern void NPC_SetSpellFocusDMG(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetSpellFocusDMG")]
  public static extern int NPC_GetSpellFocusDMG(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SetSpellFocusHeal")]
  public static extern void NPC_SetSpellFocusHeal(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetSpellFocusHeal")]
  public static extern int NPC_GetSpellFocusHeal(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetSpawnKillCount")]
  public static extern uint NPC_GetSpawnKillCount(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetScore")]
  public static extern int NPC_GetScore(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_AISpellsList")]
  public static extern void NPC_AISpellsList(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetInnateProcSpellID")]
  public static extern ushort NPC_GetInnateProcSpellID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetHeroForgeModel")]
  public static extern uint NPC_GetHeroForgeModel(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SetHeroForgeModel")]
  public static extern void NPC_SetHeroForgeModel(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_IsRaidTarget")]
  public static extern bool NPC_IsRaidTarget(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_IsRareSpawn")]
  public static extern bool NPC_IsRareSpawn(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_ResetHPUpdateTimer")]
  public static extern void NPC_ResetHPUpdateTimer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_IgnoreDespawn")]
  public static extern bool NPC_IgnoreDespawn(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SetSimpleRoamBox__SWIG_0")]
  public static extern void NPC_SetSimpleRoamBox__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SetSimpleRoamBox__SWIG_1")]
  public static extern void NPC_SetSimpleRoamBox__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SetSimpleRoamBox__SWIG_2")]
  public static extern void NPC_SetSimpleRoamBox__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetRoamboxMaxX")]
  public static extern float NPC_GetRoamboxMaxX(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetRoamboxMaxY")]
  public static extern float NPC_GetRoamboxMaxY(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetRoamboxMinX")]
  public static extern float NPC_GetRoamboxMinX(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetRoamboxMinY")]
  public static extern float NPC_GetRoamboxMinY(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetRoamboxDistance")]
  public static extern float NPC_GetRoamboxDistance(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetRoamboxDestinationX")]
  public static extern float NPC_GetRoamboxDestinationX(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetRoamboxDestinationY")]
  public static extern float NPC_GetRoamboxDestinationY(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetRoamboxDestinationZ")]
  public static extern float NPC_GetRoamboxDestinationZ(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetRoamboxDelay")]
  public static extern uint NPC_GetRoamboxDelay(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetRoamboxMinDelay")]
  public static extern uint NPC_GetRoamboxMinDelay(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetArmTexture")]
  public static extern byte NPC_GetArmTexture(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetBracerTexture")]
  public static extern byte NPC_GetBracerTexture(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetHandTexture")]
  public static extern byte NPC_GetHandTexture(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetFeetTexture")]
  public static extern byte NPC_GetFeetTexture(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetLegTexture")]
  public static extern byte NPC_GetLegTexture(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetCharmedAccuracy")]
  public static extern int NPC_GetCharmedAccuracy(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetCharmedArmorClass")]
  public static extern int NPC_GetCharmedArmorClass(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetCharmedAttack")]
  public static extern int NPC_GetCharmedAttack(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetCharmedAttackDelay")]
  public static extern int NPC_GetCharmedAttackDelay(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetCharmedAvoidance")]
  public static extern int NPC_GetCharmedAvoidance(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetCharmedMaxDamage")]
  public static extern int NPC_GetCharmedMaxDamage(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetCharmedMinDamage")]
  public static extern int NPC_GetCharmedMinDamage(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetAlwaysAggro")]
  public static extern bool NPC_GetAlwaysAggro(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetIgnoreDespawn")]
  public static extern bool NPC_GetIgnoreDespawn(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetSkipGlobalLoot")]
  public static extern bool NPC_GetSkipGlobalLoot(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_GetStuckBehavior")]
  public static extern int NPC_GetStuckBehavior(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_IsSkipAutoScale")]
  public static extern bool NPC_IsSkipAutoScale(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_ScaleNPC__SWIG_0")]
  public static extern void NPC_ScaleNPC__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, bool jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_ScaleNPC__SWIG_1")]
  public static extern void NPC_ScaleNPC__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_ScaleNPC__SWIG_2")]
  public static extern void NPC_ScaleNPC__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_RecalculateSkills")]
  public static extern void NPC_RecalculateSkills(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_ReloadSpells")]
  public static extern void NPC_ReloadSpells(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SendPositionToClients")]
  public static extern void NPC_SendPositionToClients(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_CanPathTo")]
  public static extern bool NPC_CanPathTo(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, float jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Encounter")]
  public static extern global::System.IntPtr new_Encounter(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_Encounter")]
  public static extern void delete_Encounter(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Encounter_Death__SWIG_0")]
  public static extern bool Encounter_Death__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, int jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Encounter_Death__SWIG_1")]
  public static extern bool Encounter_Death__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Encounter_Damage__SWIG_0")]
  public static extern void Encounter_Damage__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, bool jarg6, sbyte jarg7, bool jarg8, int jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Encounter_Damage__SWIG_1")]
  public static extern void Encounter_Damage__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, bool jarg6, sbyte jarg7, bool jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Encounter_Damage__SWIG_2")]
  public static extern void Encounter_Damage__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, bool jarg6, sbyte jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Encounter_Damage__SWIG_3")]
  public static extern void Encounter_Damage__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, bool jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Encounter_Damage__SWIG_4")]
  public static extern void Encounter_Damage__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Encounter_Attack__SWIG_0")]
  public static extern bool Encounter_Attack__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, bool jarg4, bool jarg5, bool jarg6, global::System.Runtime.InteropServices.HandleRef jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Encounter_Attack__SWIG_1")]
  public static extern bool Encounter_Attack__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, bool jarg4, bool jarg5, bool jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Encounter_Attack__SWIG_2")]
  public static extern bool Encounter_Attack__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, bool jarg4, bool jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Encounter_Attack__SWIG_3")]
  public static extern bool Encounter_Attack__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Encounter_Attack__SWIG_4")]
  public static extern bool Encounter_Attack__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Encounter_Attack__SWIG_5")]
  public static extern bool Encounter_Attack__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Encounter_HasRaid")]
  public static extern bool Encounter_HasRaid(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Encounter_HasGroup")]
  public static extern bool Encounter_HasGroup(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Encounter_GetRaid")]
  public static extern global::System.IntPtr Encounter_GetRaid(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Encounter_GetGroup")]
  public static extern global::System.IntPtr Encounter_GetGroup(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Encounter_IsEncounter")]
  public static extern bool Encounter_IsEncounter(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Encounter_GetEncounterName")]
  public static extern string Encounter_GetEncounterName(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Encounter_Process")]
  public static extern bool Encounter_Process(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Encounter_Depop__SWIG_0")]
  public static extern void Encounter_Depop__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Encounter_Depop__SWIG_1")]
  public static extern void Encounter_Depop__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Beacon")]
  public static extern global::System.IntPtr new_Beacon(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_Beacon")]
  public static extern void delete_Beacon(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Beacon_Death__SWIG_0")]
  public static extern bool Beacon_Death__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, int jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Beacon_Death__SWIG_1")]
  public static extern bool Beacon_Death__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Beacon_Damage__SWIG_0")]
  public static extern void Beacon_Damage__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, bool jarg6, sbyte jarg7, bool jarg8, int jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Beacon_Damage__SWIG_1")]
  public static extern void Beacon_Damage__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, bool jarg6, sbyte jarg7, bool jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Beacon_Damage__SWIG_2")]
  public static extern void Beacon_Damage__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, bool jarg6, sbyte jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Beacon_Damage__SWIG_3")]
  public static extern void Beacon_Damage__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, bool jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Beacon_Damage__SWIG_4")]
  public static extern void Beacon_Damage__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Beacon_HasRaid")]
  public static extern bool Beacon_HasRaid(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Beacon_HasGroup")]
  public static extern bool Beacon_HasGroup(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Beacon_GetRaid")]
  public static extern global::System.IntPtr Beacon_GetRaid(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Beacon_GetGroup")]
  public static extern global::System.IntPtr Beacon_GetGroup(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Beacon_Attack__SWIG_0")]
  public static extern bool Beacon_Attack__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, bool jarg4, bool jarg5, bool jarg6, global::System.Runtime.InteropServices.HandleRef jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Beacon_Attack__SWIG_1")]
  public static extern bool Beacon_Attack__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, bool jarg4, bool jarg5, bool jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Beacon_Attack__SWIG_2")]
  public static extern bool Beacon_Attack__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, bool jarg4, bool jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Beacon_Attack__SWIG_3")]
  public static extern bool Beacon_Attack__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Beacon_Attack__SWIG_4")]
  public static extern bool Beacon_Attack__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Beacon_Attack__SWIG_5")]
  public static extern bool Beacon_Attack__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Beacon_IsBeacon")]
  public static extern bool Beacon_IsBeacon(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Beacon_Process")]
  public static extern bool Beacon_Process(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Beacon_Depop__SWIG_0")]
  public static extern void Beacon_Depop__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Beacon_Depop__SWIG_1")]
  public static extern void Beacon_Depop__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Beacon_AELocationSpell")]
  public static extern void Beacon_AELocationSpell(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, ushort jarg3, short jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CLIENT_LD_TIMEOUT_get")]
  public static extern int CLIENT_LD_TIMEOUT_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_TARGETING_RANGE_get")]
  public static extern int TARGETING_RANGE_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_XTARGET_HARDCAP_get")]
  public static extern int XTARGET_HARDCAP_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MAX_SPECIALIZED_SKILL_get")]
  public static extern int MAX_SPECIALIZED_SKILL_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_zone_set")]
  public static extern void zone_set(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_zone_get")]
  public static extern global::System.IntPtr zone_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_task_manager_set")]
  public static extern void task_manager_set(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_task_manager_get")]
  public static extern global::System.IntPtr task_manager_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_CLIENTPACKET")]
  public static extern global::System.IntPtr new_CLIENTPACKET();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_CLIENTPACKET")]
  public static extern void delete_CLIENTPACKET(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CLIENTPACKET_app_set")]
  public static extern void CLIENTPACKET_app_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CLIENTPACKET_app_get")]
  public static extern global::System.IntPtr CLIENTPACKET_app_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CLIENTPACKET_ack_req_set")]
  public static extern void CLIENTPACKET_ack_req_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CLIENTPACKET_ack_req_get")]
  public static extern bool CLIENTPACKET_ack_req_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SPELLBAR_UNLOCK_get")]
  public static extern int SPELLBAR_UNLOCK_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_memSpellUnknown_get")]
  public static extern int memSpellUnknown_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_memSpellScribing_get")]
  public static extern int memSpellScribing_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_memSpellMemorize_get")]
  public static extern int memSpellMemorize_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_memSpellForget_get")]
  public static extern int memSpellForget_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_memSpellSpellbar_get")]
  public static extern int memSpellSpellbar_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_GetZoneModeString")]
  public static extern global::System.IntPtr GetZoneModeString(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_HideCorpseNone_get")]
  public static extern int HideCorpseNone_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_HideCorpseAll_get")]
  public static extern int HideCorpseAll_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_HideCorpseAllButGroup_get")]
  public static extern int HideCorpseAllButGroup_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_HideCorpseLooted_get")]
  public static extern int HideCorpseLooted_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_HideCorpseNPC_get")]
  public static extern int HideCorpseNPC_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_XTarget_Struct_Type_set")]
  public static extern void XTarget_Struct_Type_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_XTarget_Struct_Type_get")]
  public static extern int XTarget_Struct_Type_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_XTarget_Struct_dirty_set")]
  public static extern void XTarget_Struct_dirty_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_XTarget_Struct_dirty_get")]
  public static extern bool XTarget_Struct_dirty_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_XTarget_Struct_ID_set")]
  public static extern void XTarget_Struct_ID_set(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_XTarget_Struct_ID_get")]
  public static extern ushort XTarget_Struct_ID_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_XTarget_Struct_Name_set")]
  public static extern void XTarget_Struct_Name_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_XTarget_Struct_Name_get")]
  public static extern string XTarget_Struct_Name_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_XTarget_Struct")]
  public static extern global::System.IntPtr new_XTarget_Struct();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_XTarget_Struct")]
  public static extern void delete_XTarget_Struct(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RespawnOption_name_set")]
  public static extern void RespawnOption_name_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RespawnOption_name_get")]
  public static extern global::System.IntPtr RespawnOption_name_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RespawnOption_zone_id_set")]
  public static extern void RespawnOption_zone_id_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RespawnOption_zone_id_get")]
  public static extern uint RespawnOption_zone_id_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RespawnOption_instance_id_set")]
  public static extern void RespawnOption_instance_id_set(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RespawnOption_instance_id_get")]
  public static extern ushort RespawnOption_instance_id_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RespawnOption_x_set")]
  public static extern void RespawnOption_x_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RespawnOption_x_get")]
  public static extern float RespawnOption_x_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RespawnOption_y_set")]
  public static extern void RespawnOption_y_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RespawnOption_y_get")]
  public static extern float RespawnOption_y_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RespawnOption_z_set")]
  public static extern void RespawnOption_z_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RespawnOption_z_get")]
  public static extern float RespawnOption_z_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RespawnOption_heading_set")]
  public static extern void RespawnOption_heading_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RespawnOption_heading_get")]
  public static extern float RespawnOption_heading_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_RespawnOption")]
  public static extern global::System.IntPtr new_RespawnOption();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_RespawnOption")]
  public static extern void delete_RespawnOption(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DIAWIND_RESPONSE_ONE_KEY_get")]
  public static extern global::System.IntPtr DIAWIND_RESPONSE_ONE_KEY_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DIAWIND_RESPONSE_TWO_KEY_get")]
  public static extern global::System.IntPtr DIAWIND_RESPONSE_TWO_KEY_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_POPUPID_DIAWIND_ONE_get")]
  public static extern uint POPUPID_DIAWIND_ONE_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_POPUPID_DIAWIND_TWO_get")]
  public static extern uint POPUPID_DIAWIND_TWO_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_POPUPID_UPDATE_SHOWSTATSWINDOW_get")]
  public static extern uint POPUPID_UPDATE_SHOWSTATSWINDOW_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_POPUPID_REPLACE_SPELLWINDOW_get")]
  public static extern uint POPUPID_REPLACE_SPELLWINDOW_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ClientReward_id_set")]
  public static extern void ClientReward_id_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ClientReward_id_get")]
  public static extern uint ClientReward_id_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ClientReward_amount_set")]
  public static extern void ClientReward_amount_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ClientReward_amount_get")]
  public static extern uint ClientReward_amount_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_ClientReward")]
  public static extern global::System.IntPtr new_ClientReward();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_ClientReward")]
  public static extern void delete_ClientReward(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Client")]
  public static extern global::System.IntPtr new_Client(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_Client")]
  public static extern void delete_Client(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ReconnectUCS")]
  public static extern void Client_ReconnectUCS(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_RecordStats")]
  public static extern void Client_RecordStats(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetDisplayMobInfoWindow")]
  public static extern void Client_SetDisplayMobInfoWindow(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetDisplayMobInfoWindow")]
  public static extern bool Client_GetDisplayMobInfoWindow(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsDevToolsEnabled")]
  public static extern bool Client_IsDevToolsEnabled(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetDevToolsEnabled")]
  public static extern void Client_SetDevToolsEnabled(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsEXPEnabled")]
  public static extern bool Client_IsEXPEnabled(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetEXPEnabled")]
  public static extern void Client_SetEXPEnabled(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetPrimaryWeaponOrnamentation")]
  public static extern void Client_SetPrimaryWeaponOrnamentation(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetSecondaryWeaponOrnamentation")]
  public static extern void Client_SetSecondaryWeaponOrnamentation(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendChatLineBreak__SWIG_0")]
  public static extern void Client_SendChatLineBreak__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendChatLineBreak__SWIG_1")]
  public static extern void Client_SendChatLineBreak__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GotoPlayer")]
  public static extern bool Client_GotoPlayer(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GotoPlayerGroup")]
  public static extern bool Client_GotoPlayerGroup(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GotoPlayerRaid")]
  public static extern bool Client_GotoPlayerRaid(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_Death__SWIG_0")]
  public static extern bool Client_Death__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, int jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_Death__SWIG_1")]
  public static extern bool Client_Death__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_Damage__SWIG_0")]
  public static extern void Client_Damage__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, bool jarg6, sbyte jarg7, bool jarg8, int jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_Damage__SWIG_1")]
  public static extern void Client_Damage__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, bool jarg6, sbyte jarg7, bool jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_Damage__SWIG_2")]
  public static extern void Client_Damage__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, bool jarg6, sbyte jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_Damage__SWIG_3")]
  public static extern void Client_Damage__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, bool jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_Damage__SWIG_4")]
  public static extern void Client_Damage__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_HasRaid")]
  public static extern bool Client_HasRaid(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_HasGroup")]
  public static extern bool Client_HasGroup(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetRaid")]
  public static extern global::System.IntPtr Client_GetRaid(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetGroup")]
  public static extern global::System.IntPtr Client_GetGroup(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsBerserk")]
  public static extern bool Client_IsBerserk(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetAttackTimer")]
  public static extern void Client_SetAttackTimer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetQuiverHaste")]
  public static extern int Client_GetQuiverHaste(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_DoAttackRounds__SWIG_0")]
  public static extern void Client_DoAttackRounds__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_DoAttackRounds__SWIG_1")]
  public static extern void Client_DoAttackRounds__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AI_Init")]
  public static extern void Client_AI_Init(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AI_Start__SWIG_0")]
  public static extern void Client_AI_Start__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AI_Start__SWIG_1")]
  public static extern void Client_AI_Start__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AI_Stop")]
  public static extern void Client_AI_Stop(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AI_Process")]
  public static extern void Client_AI_Process(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AI_SpellCast")]
  public static extern void Client_AI_SpellCast(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_Trader_ShowItems")]
  public static extern void Client_Trader_ShowItems(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_Trader_CustomerBrowsing")]
  public static extern void Client_Trader_CustomerBrowsing(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_Trader_EndTrader")]
  public static extern void Client_Trader_EndTrader(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_Trader_StartTrader")]
  public static extern void Client_Trader_StartTrader(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_WithCustomer")]
  public static extern byte Client_WithCustomer(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_KeyRingLoad")]
  public static extern void Client_KeyRingLoad(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_KeyRingAdd")]
  public static extern void Client_KeyRingAdd(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_KeyRingCheck")]
  public static extern bool Client_KeyRingCheck(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_KeyRingList")]
  public static extern void Client_KeyRingList(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsClient")]
  public static extern bool Client_IsClient(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsOfClientBot")]
  public static extern bool Client_IsOfClientBot(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsOfClientBotMerc")]
  public static extern bool Client_IsOfClientBotMerc(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CompleteConnect")]
  public static extern void Client_CompleteConnect(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_TryStacking__SWIG_0")]
  public static extern bool Client_TryStacking__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, byte jarg3, bool jarg4, bool jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_TryStacking__SWIG_1")]
  public static extern bool Client_TryStacking__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, byte jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_TryStacking__SWIG_2")]
  public static extern bool Client_TryStacking__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, byte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_TryStacking__SWIG_3")]
  public static extern bool Client_TryStacking__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendTraderPacket__SWIG_0")]
  public static extern void Client_SendTraderPacket__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendTraderPacket__SWIG_1")]
  public static extern void Client_SendTraderPacket__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendBuyerPacket")]
  public static extern void Client_SendBuyerPacket(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetTraderItems")]
  public static extern global::System.IntPtr Client_GetTraderItems(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendBazaarWelcome")]
  public static extern void Client_SendBazaarWelcome(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_DyeArmor")]
  public static extern void Client_DyeArmor(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_DyeArmorBySlot__SWIG_0")]
  public static extern void Client_DyeArmorBySlot__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, byte jarg3, byte jarg4, byte jarg5, byte jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_DyeArmorBySlot__SWIG_1")]
  public static extern void Client_DyeArmorBySlot__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, byte jarg3, byte jarg4, byte jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SlotConvert__SWIG_0")]
  public static extern byte Client_SlotConvert__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SlotConvert__SWIG_1")]
  public static extern byte Client_SlotConvert__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MessageString__SWIG_0")]
  public static extern void Client_MessageString__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MessageString__SWIG_1")]
  public static extern void Client_MessageString__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MessageString__SWIG_2")]
  public static extern void Client_MessageString__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, string jarg4, string jarg5, string jarg6, string jarg7, string jarg8, string jarg9, string jarg10, string jarg11, string jarg12, uint jarg13);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MessageString__SWIG_3")]
  public static extern void Client_MessageString__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, string jarg4, string jarg5, string jarg6, string jarg7, string jarg8, string jarg9, string jarg10, string jarg11, string jarg12);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MessageString__SWIG_4")]
  public static extern void Client_MessageString__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, string jarg4, string jarg5, string jarg6, string jarg7, string jarg8, string jarg9, string jarg10, string jarg11);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MessageString__SWIG_5")]
  public static extern void Client_MessageString__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, string jarg4, string jarg5, string jarg6, string jarg7, string jarg8, string jarg9, string jarg10);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MessageString__SWIG_6")]
  public static extern void Client_MessageString__SWIG_6(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, string jarg4, string jarg5, string jarg6, string jarg7, string jarg8, string jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MessageString__SWIG_7")]
  public static extern void Client_MessageString__SWIG_7(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, string jarg4, string jarg5, string jarg6, string jarg7, string jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MessageString__SWIG_8")]
  public static extern void Client_MessageString__SWIG_8(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, string jarg4, string jarg5, string jarg6, string jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MessageString__SWIG_9")]
  public static extern void Client_MessageString__SWIG_9(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, string jarg4, string jarg5, string jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MessageString__SWIG_10")]
  public static extern void Client_MessageString__SWIG_10(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, string jarg4, string jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MessageString__SWIG_11")]
  public static extern void Client_MessageString__SWIG_11(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MessageString__SWIG_12")]
  public static extern void Client_MessageString__SWIG_12(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_FilteredMessageCheck")]
  public static extern bool Client_FilteredMessageCheck(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_FilteredMessageString__SWIG_0")]
  public static extern void Client_FilteredMessageString__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, uint jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_FilteredMessageString__SWIG_1")]
  public static extern void Client_FilteredMessageString__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, uint jarg5, string jarg6, string jarg7, string jarg8, string jarg9, string jarg10, string jarg11, string jarg12, string jarg13, string jarg14);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_FilteredMessageString__SWIG_2")]
  public static extern void Client_FilteredMessageString__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, uint jarg5, string jarg6, string jarg7, string jarg8, string jarg9, string jarg10, string jarg11, string jarg12, string jarg13);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_FilteredMessageString__SWIG_3")]
  public static extern void Client_FilteredMessageString__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, uint jarg5, string jarg6, string jarg7, string jarg8, string jarg9, string jarg10, string jarg11, string jarg12);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_FilteredMessageString__SWIG_4")]
  public static extern void Client_FilteredMessageString__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, uint jarg5, string jarg6, string jarg7, string jarg8, string jarg9, string jarg10, string jarg11);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_FilteredMessageString__SWIG_5")]
  public static extern void Client_FilteredMessageString__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, uint jarg5, string jarg6, string jarg7, string jarg8, string jarg9, string jarg10);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_FilteredMessageString__SWIG_6")]
  public static extern void Client_FilteredMessageString__SWIG_6(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, uint jarg5, string jarg6, string jarg7, string jarg8, string jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_FilteredMessageString__SWIG_7")]
  public static extern void Client_FilteredMessageString__SWIG_7(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, uint jarg5, string jarg6, string jarg7, string jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_FilteredMessageString__SWIG_8")]
  public static extern void Client_FilteredMessageString__SWIG_8(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, uint jarg5, string jarg6, string jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_FilteredMessageString__SWIG_9")]
  public static extern void Client_FilteredMessageString__SWIG_9(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, uint jarg5, string jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_Tell_StringID")]
  public static extern void Client_Tell_StringID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, string jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendColoredText")]
  public static extern void Client_SendColoredText(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendBazaarResults")]
  public static extern void Client_SendBazaarResults(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, uint jarg5, uint jarg6, uint jarg7, string jarg8, uint jarg9, uint jarg10);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendTraderItem")]
  public static extern void Client_SendTraderItem(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, ushort jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_FindTraderItem")]
  public static extern ushort Client_FindTraderItem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, ushort jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_FindTraderItemSerialNumber")]
  public static extern uint Client_FindTraderItemSerialNumber(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_FindTraderItemBySerialNumber")]
  public static extern global::System.IntPtr Client_FindTraderItemBySerialNumber(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_FindAndNukeTraderItem")]
  public static extern void Client_FindAndNukeTraderItem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, short jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, ushort jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_NukeTraderItem__SWIG_0")]
  public static extern void Client_NukeTraderItem__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, short jarg3, short jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, ushort jarg6, int jarg7, int jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_NukeTraderItem__SWIG_1")]
  public static extern void Client_NukeTraderItem__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, short jarg3, short jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, ushort jarg6, int jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ReturnTraderReq__SWIG_0")]
  public static extern void Client_ReturnTraderReq__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, short jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ReturnTraderReq__SWIG_1")]
  public static extern void Client_ReturnTraderReq__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, short jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_TradeRequestFailed")]
  public static extern void Client_TradeRequestFailed(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_BuyTraderItem")]
  public static extern void Client_BuyTraderItem(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_FinishTrade__SWIG_0")]
  public static extern void Client_FinishTrade__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_FinishTrade__SWIG_1")]
  public static extern void Client_FinishTrade__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_FinishTrade__SWIG_2")]
  public static extern void Client_FinishTrade__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_FinishTrade__SWIG_3")]
  public static extern void Client_FinishTrade__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendZonePoints")]
  public static extern void Client_SendZonePoints(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendBuyerResults")]
  public static extern void Client_SendBuyerResults(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ShowBuyLines")]
  public static extern void Client_ShowBuyLines(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SellToBuyer")]
  public static extern void Client_SellToBuyer(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ToggleBuyerMode")]
  public static extern void Client_ToggleBuyerMode(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UpdateBuyLine")]
  public static extern void Client_UpdateBuyLine(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_BuyerItemSearch")]
  public static extern void Client_BuyerItemSearch(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetBuyerWelcomeMessage")]
  public static extern void Client_SetBuyerWelcomeMessage(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBuyerWelcomeMessage")]
  public static extern string Client_GetBuyerWelcomeMessage(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_FillSpawnStruct")]
  public static extern void Client_FillSpawnStruct(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ShouldISpawnFor")]
  public static extern bool Client_ShouldISpawnFor(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_Process")]
  public static extern bool Client_Process(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_QueuePacket__SWIG_0")]
  public static extern void Client_QueuePacket__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, int jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_QueuePacket__SWIG_1")]
  public static extern void Client_QueuePacket__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_QueuePacket__SWIG_2")]
  public static extern void Client_QueuePacket__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_QueuePacket__SWIG_3")]
  public static extern void Client_QueuePacket__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_FastQueuePacket__SWIG_0")]
  public static extern void Client_FastQueuePacket__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_FastQueuePacket__SWIG_1")]
  public static extern void Client_FastQueuePacket__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_FastQueuePacket__SWIG_2")]
  public static extern void Client_FastQueuePacket__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ChannelMessageReceived__SWIG_0")]
  public static extern void Client_ChannelMessageReceived__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, byte jarg3, byte jarg4, string jarg5, string jarg6, bool jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ChannelMessageReceived__SWIG_1")]
  public static extern void Client_ChannelMessageReceived__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, byte jarg3, byte jarg4, string jarg5, string jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ChannelMessageReceived__SWIG_2")]
  public static extern void Client_ChannelMessageReceived__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, byte jarg3, byte jarg4, string jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ChannelMessageSend")]
  public static extern void Client_ChannelMessageSend(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, byte jarg4, byte jarg5, byte jarg6, string jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_Message")]
  public static extern void Client_Message(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_FilteredMessage")]
  public static extern void Client_FilteredMessage(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, string jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_VoiceMacroReceived")]
  public static extern void Client_VoiceMacroReceived(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, string jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendSound")]
  public static extern void Client_SendSound(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_LearnRecipe")]
  public static extern void Client_LearnRecipe(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetRecipeMadeCount")]
  public static extern int Client_GetRecipeMadeCount(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_HasRecipeLearned")]
  public static extern bool Client_HasRecipeLearned(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CanIncreaseTradeskill")]
  public static extern bool Client_CanIncreaseTradeskill(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetRevoked")]
  public static extern bool Client_GetRevoked(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetRevoked")]
  public static extern void Client_SetRevoked(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetIP")]
  public static extern uint Client_GetIP(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetIPString")]
  public static extern global::System.IntPtr Client_GetIPString(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetIPExemption")]
  public static extern int Client_GetIPExemption(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetIPExemption")]
  public static extern void Client_SetIPExemption(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetHideMe")]
  public static extern bool Client_GetHideMe(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetHideMe")]
  public static extern void Client_SetHideMe(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetPort")]
  public static extern ushort Client_GetPort(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsDead")]
  public static extern bool Client_IsDead(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsUnconscious")]
  public static extern bool Client_IsUnconscious(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsLFP")]
  public static extern bool Client_IsLFP(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UpdateLFP")]
  public static extern void Client_UpdateLFP(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_Save__SWIG_0")]
  public static extern bool Client_Save__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_Save__SWIG_1")]
  public static extern bool Client_Save__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SaveCurrency")]
  public static extern bool Client_SaveCurrency(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SaveAA")]
  public static extern bool Client_SaveAA(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_RemoveExpendedAA")]
  public static extern void Client_RemoveExpendedAA(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ClientDataLoaded")]
  public static extern bool Client_ClientDataLoaded(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_Connected")]
  public static extern bool Client_Connected(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_InZone")]
  public static extern bool Client_InZone(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_Disconnect")]
  public static extern void Client_Disconnect(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsLD")]
  public static extern bool Client_IsLD(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_Kick")]
  public static extern void Client_Kick(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_WorldKick")]
  public static extern void Client_WorldKick(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetAnon")]
  public static extern byte Client_GetAnon(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetAFK")]
  public static extern byte Client_GetAFK(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetAnon")]
  public static extern void Client_SetAnon(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetAFK")]
  public static extern void Client_SetAFK(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetPP")]
  public static extern global::System.IntPtr Client_GetPP(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetEPP")]
  public static extern global::System.IntPtr Client_GetEPP(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetInv__SWIG_0")]
  public static extern global::System.IntPtr Client_GetInv__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetPetInfo")]
  public static extern global::System.IntPtr Client_GetPetInfo(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetInspectMessage__SWIG_0")]
  public static extern global::System.IntPtr Client_GetInspectMessage__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ReloadExpansionProfileSetting")]
  public static extern void Client_ReloadExpansionProfileSetting(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetPetCommandState")]
  public static extern void Client_SetPetCommandState(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AutoAttackEnabled")]
  public static extern bool Client_AutoAttackEnabled(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AutoFireEnabled")]
  public static extern bool Client_AutoFireEnabled(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ChangeFirstName")]
  public static extern bool Client_ChangeFirstName(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_Duck")]
  public static extern void Client_Duck(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_Stand")]
  public static extern void Client_Stand(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_Sit")]
  public static extern void Client_Sit(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetMaxHP")]
  public static extern void Client_SetMaxHP(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_LevelRegen")]
  public static extern int Client_LevelRegen(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetGM")]
  public static extern void Client_SetGM(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetPVP__SWIG_0")]
  public static extern void Client_SetPVP__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetPVP__SWIG_1")]
  public static extern void Client_SetPVP__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetPVP__SWIG_0")]
  public static extern bool Client_GetPVP__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetPVP__SWIG_1")]
  public static extern bool Client_GetPVP__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetGM")]
  public static extern bool Client_GetGM(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetBaseClass")]
  public static extern void Client_SetBaseClass(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetBaseRace")]
  public static extern void Client_SetBaseRace(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetBaseGender")]
  public static extern void Client_SetBaseGender(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetDeity")]
  public static extern void Client_SetDeity(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetTrackingID")]
  public static extern void Client_SetTrackingID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetLevel2")]
  public static extern byte Client_GetLevel2(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBaseRace")]
  public static extern ushort Client_GetBaseRace(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBaseClass")]
  public static extern ushort Client_GetBaseClass(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBaseGender")]
  public static extern byte Client_GetBaseGender(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBaseFace")]
  public static extern byte Client_GetBaseFace(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBaseHairColor")]
  public static extern byte Client_GetBaseHairColor(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBaseBeardColor")]
  public static extern byte Client_GetBaseBeardColor(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBaseEyeColor")]
  public static extern byte Client_GetBaseEyeColor(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBaseHairStyle")]
  public static extern byte Client_GetBaseHairStyle(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBaseBeard")]
  public static extern byte Client_GetBaseBeard(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBaseHeritage")]
  public static extern byte Client_GetBaseHeritage(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBaseTattoo")]
  public static extern byte Client_GetBaseTattoo(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBaseDetails")]
  public static extern byte Client_GetBaseDetails(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBindX__SWIG_0")]
  public static extern float Client_GetBindX__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBindX__SWIG_1")]
  public static extern float Client_GetBindX__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBindY__SWIG_0")]
  public static extern float Client_GetBindY__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBindY__SWIG_1")]
  public static extern float Client_GetBindY__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBindZ__SWIG_0")]
  public static extern float Client_GetBindZ__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBindZ__SWIG_1")]
  public static extern float Client_GetBindZ__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBindHeading__SWIG_0")]
  public static extern float Client_GetBindHeading__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBindHeading__SWIG_1")]
  public static extern float Client_GetBindHeading__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBindZoneID__SWIG_0")]
  public static extern uint Client_GetBindZoneID__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBindZoneID__SWIG_1")]
  public static extern uint Client_GetBindZoneID__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBindInstanceID__SWIG_0")]
  public static extern uint Client_GetBindInstanceID__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBindInstanceID__SWIG_1")]
  public static extern uint Client_GetBindInstanceID__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CalcMaxMana")]
  public static extern long Client_CalcMaxMana(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CalcBaseMana")]
  public static extern long Client_CalcBaseMana(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetMana")]
  public static extern long Client_SetMana(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CalcManaRegenCap")]
  public static extern long Client_CalcManaRegenCap(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_EnableAreaHPRegen")]
  public static extern void Client_EnableAreaHPRegen(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_DisableAreaHPRegen")]
  public static extern void Client_DisableAreaHPRegen(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_EnableAreaManaRegen")]
  public static extern void Client_EnableAreaManaRegen(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_DisableAreaManaRegen")]
  public static extern void Client_DisableAreaManaRegen(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_EnableAreaEndRegen")]
  public static extern void Client_EnableAreaEndRegen(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_DisableAreaEndRegen")]
  public static extern void Client_DisableAreaEndRegen(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_EnableAreaRegens")]
  public static extern void Client_EnableAreaRegens(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_DisableAreaRegens")]
  public static extern void Client_DisableAreaRegens(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ServerFilter")]
  public static extern void Client_ServerFilter(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_BulkSendTraderInventory")]
  public static extern void Client_BulkSendTraderInventory(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendSingleTraderItem")]
  public static extern void Client_SendSingleTraderItem(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_BulkSendMerchantInventory")]
  public static extern void Client_BulkSendMerchantInventory(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetLanguageSkill")]
  public static extern byte Client_GetLanguageSkill(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendPickPocketResponse__SWIG_0")]
  public static extern void Client_SendPickPocketResponse__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, int jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendPickPocketResponse__SWIG_1")]
  public static extern void Client_SendPickPocketResponse__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetLastName")]
  public static extern string Client_GetLastName(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ProximityX")]
  public static extern float Client_ProximityX(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ProximityY")]
  public static extern float Client_ProximityY(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ProximityZ")]
  public static extern float Client_ProximityZ(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ClearAllProximities")]
  public static extern void Client_ClearAllProximities(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CheckVirtualZoneLines")]
  public static extern void Client_CheckVirtualZoneLines(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CalcBonuses")]
  public static extern void Client_CalcBonuses(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetATKBonus")]
  public static extern int Client_GetATKBonus(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetHaste")]
  public static extern int Client_GetHaste(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetRawACNoShield")]
  public static extern int Client_GetRawACNoShield(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetSTR")]
  public static extern int Client_GetSTR(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetSTA")]
  public static extern int Client_GetSTA(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetDEX")]
  public static extern int Client_GetDEX(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetAGI")]
  public static extern int Client_GetAGI(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetINT")]
  public static extern int Client_GetINT(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetWIS")]
  public static extern int Client_GetWIS(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetCHA")]
  public static extern int Client_GetCHA(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetMR")]
  public static extern int Client_GetMR(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetFR")]
  public static extern int Client_GetFR(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetDR")]
  public static extern int Client_GetDR(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetPR")]
  public static extern int Client_GetPR(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetCR")]
  public static extern int Client_GetCR(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetCorrup")]
  public static extern int Client_GetCorrup(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetPhR")]
  public static extern int Client_GetPhR(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetMaxStat")]
  public static extern int Client_GetMaxStat(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetMaxResist")]
  public static extern int Client_GetMaxResist(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetMaxSTR")]
  public static extern int Client_GetMaxSTR(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetMaxSTA")]
  public static extern int Client_GetMaxSTA(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetMaxDEX")]
  public static extern int Client_GetMaxDEX(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetMaxAGI")]
  public static extern int Client_GetMaxAGI(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetMaxINT")]
  public static extern int Client_GetMaxINT(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetMaxWIS")]
  public static extern int Client_GetMaxWIS(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetMaxCHA")]
  public static extern int Client_GetMaxCHA(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetMaxMR")]
  public static extern int Client_GetMaxMR(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetMaxPR")]
  public static extern int Client_GetMaxPR(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetMaxDR")]
  public static extern int Client_GetMaxDR(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetMaxCR")]
  public static extern int Client_GetMaxCR(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetMaxFR")]
  public static extern int Client_GetMaxFR(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetMaxCorrup")]
  public static extern int Client_GetMaxCorrup(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBaseSTR")]
  public static extern byte Client_GetBaseSTR(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBaseSTA")]
  public static extern byte Client_GetBaseSTA(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBaseCHA")]
  public static extern byte Client_GetBaseCHA(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBaseDEX")]
  public static extern byte Client_GetBaseDEX(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBaseINT")]
  public static extern byte Client_GetBaseINT(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBaseAGI")]
  public static extern byte Client_GetBaseAGI(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBaseWIS")]
  public static extern byte Client_GetBaseWIS(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBaseCorrup")]
  public static extern byte Client_GetBaseCorrup(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBasePhR")]
  public static extern byte Client_GetBasePhR(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetHeroicSTR")]
  public static extern int Client_GetHeroicSTR(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetHeroicSTA")]
  public static extern int Client_GetHeroicSTA(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetHeroicDEX")]
  public static extern int Client_GetHeroicDEX(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetHeroicAGI")]
  public static extern int Client_GetHeroicAGI(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetHeroicINT")]
  public static extern int Client_GetHeroicINT(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetHeroicWIS")]
  public static extern int Client_GetHeroicWIS(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetHeroicCHA")]
  public static extern int Client_GetHeroicCHA(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetHeroicMR")]
  public static extern int Client_GetHeroicMR(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetHeroicFR")]
  public static extern int Client_GetHeroicFR(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetHeroicDR")]
  public static extern int Client_GetHeroicDR(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetHeroicPR")]
  public static extern int Client_GetHeroicPR(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetHeroicCR")]
  public static extern int Client_GetHeroicCR(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetHeroicCorrup")]
  public static extern int Client_GetHeroicCorrup(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetHeroicPhR")]
  public static extern int Client_GetHeroicPhR(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetShielding")]
  public static extern int Client_GetShielding(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetSpellShield")]
  public static extern int Client_GetSpellShield(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetDoTShield")]
  public static extern int Client_GetDoTShield(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetStunResist")]
  public static extern int Client_GetStunResist(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetStrikeThrough")]
  public static extern int Client_GetStrikeThrough(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetAvoidance")]
  public static extern int Client_GetAvoidance(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetAccuracy")]
  public static extern int Client_GetAccuracy(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetCombatEffects")]
  public static extern int Client_GetCombatEffects(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetDS")]
  public static extern int Client_GetDS(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetHealAmt")]
  public static extern int Client_GetHealAmt(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetSpellDmg")]
  public static extern int Client_GetSpellDmg(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetClair")]
  public static extern int Client_GetClair(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetDSMit")]
  public static extern int Client_GetDSMit(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetSingMod")]
  public static extern int Client_GetSingMod(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBrassMod")]
  public static extern int Client_GetBrassMod(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetPercMod")]
  public static extern int Client_GetPercMod(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetStringMod")]
  public static extern int Client_GetStringMod(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetWindMod")]
  public static extern int Client_GetWindMod(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetDelayDeath")]
  public static extern int Client_GetDelayDeath(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CheckFizzle")]
  public static extern bool Client_CheckFizzle(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetCurrentBuffSlots")]
  public static extern int Client_GetCurrentBuffSlots(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetCurrentSongSlots")]
  public static extern int Client_GetCurrentSongSlots(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetCurrentDiscSlots")]
  public static extern int Client_GetCurrentDiscSlots(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetMaxBuffSlots")]
  public static extern int Client_GetMaxBuffSlots(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetMaxSongSlots")]
  public static extern int Client_GetMaxSongSlots(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetMaxDiscSlots")]
  public static extern int Client_GetMaxDiscSlots(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetMaxTotalSlots")]
  public static extern int Client_GetMaxTotalSlots(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetFirstBuffSlot")]
  public static extern uint Client_GetFirstBuffSlot(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetLastBuffSlot")]
  public static extern uint Client_GetLastBuffSlot(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_InitializeBuffSlots")]
  public static extern void Client_InitializeBuffSlots(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UninitializeBuffSlots")]
  public static extern void Client_UninitializeBuffSlots(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBaseHP")]
  public static extern int Client_GetBaseHP(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetWeight")]
  public static extern uint Client_GetWeight(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_RecalcWeight")]
  public static extern void Client_RecalcWeight(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CalcCurrentWeight")]
  public static extern uint Client_CalcCurrentWeight(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetCopper")]
  public static extern uint Client_GetCopper(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetSilver")]
  public static extern uint Client_GetSilver(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetGold")]
  public static extern uint Client_GetGold(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetPlatinum")]
  public static extern uint Client_GetPlatinum(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CalcMaxEndurance")]
  public static extern void Client_CalcMaxEndurance(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CalcBaseEndurance")]
  public static extern long Client_CalcBaseEndurance(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CalcEnduranceRegen__SWIG_0")]
  public static extern long Client_CalcEnduranceRegen__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CalcEnduranceRegen__SWIG_1")]
  public static extern long Client_CalcEnduranceRegen__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetEndurance")]
  public static extern long Client_GetEndurance(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetMaxEndurance")]
  public static extern long Client_GetMaxEndurance(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CalcEnduranceRegenCap")]
  public static extern long Client_CalcEnduranceRegenCap(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CalcHPRegenCap")]
  public static extern long Client_CalcHPRegenCap(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetEndurancePercent")]
  public static extern byte Client_GetEndurancePercent(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetEndurance")]
  public static extern void Client_SetEndurance(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_DoEnduranceRegen")]
  public static extern void Client_DoEnduranceRegen(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_DoEnduranceUpkeep")]
  public static extern void Client_DoEnduranceUpkeep(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetTotalATK")]
  public static extern uint Client_GetTotalATK(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetATKRating")]
  public static extern uint Client_GetATKRating(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetPrimarySkillValue")]
  public static extern ushort Client_GetPrimarySkillValue(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetEXP")]
  public static extern uint Client_GetEXP(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetAAEXPModifier__SWIG_0")]
  public static extern float Client_GetAAEXPModifier__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, short jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetAAEXPModifier__SWIG_1")]
  public static extern float Client_GetAAEXPModifier__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetEXPModifier__SWIG_0")]
  public static extern float Client_GetEXPModifier__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, short jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetEXPModifier__SWIG_1")]
  public static extern float Client_GetEXPModifier__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetAAEXPModifier__SWIG_0")]
  public static extern void Client_SetAAEXPModifier__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, float jarg3, short jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetAAEXPModifier__SWIG_1")]
  public static extern void Client_SetAAEXPModifier__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, float jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetEXPModifier__SWIG_0")]
  public static extern void Client_SetEXPModifier__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, float jarg3, short jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetEXPModifier__SWIG_1")]
  public static extern void Client_SetEXPModifier__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, float jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UpdateLDoNPoints")]
  public static extern bool Client_UpdateLDoNPoints(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetLDoNPoints")]
  public static extern void Client_SetLDoNPoints(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetPVPPoints")]
  public static extern void Client_SetPVPPoints(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetPVPPoints")]
  public static extern uint Client_GetPVPPoints(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AddPVPPoints")]
  public static extern void Client_AddPVPPoints(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AddEbonCrystals__SWIG_0")]
  public static extern void Client_AddEbonCrystals__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AddEbonCrystals__SWIG_1")]
  public static extern void Client_AddEbonCrystals__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AddRadiantCrystals__SWIG_0")]
  public static extern void Client_AddRadiantCrystals__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AddRadiantCrystals__SWIG_1")]
  public static extern void Client_AddRadiantCrystals__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_RemoveEbonCrystals__SWIG_0")]
  public static extern void Client_RemoveEbonCrystals__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_RemoveEbonCrystals__SWIG_1")]
  public static extern void Client_RemoveEbonCrystals__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_RemoveRadiantCrystals__SWIG_0")]
  public static extern void Client_RemoveRadiantCrystals__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_RemoveRadiantCrystals__SWIG_1")]
  public static extern void Client_RemoveRadiantCrystals__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetRadiantCrystals")]
  public static extern uint Client_GetRadiantCrystals(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetRadiantCrystals")]
  public static extern void Client_SetRadiantCrystals(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetEbonCrystals")]
  public static extern uint Client_GetEbonCrystals(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetEbonCrystals")]
  public static extern void Client_SetEbonCrystals(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendCrystalCounts")]
  public static extern void Client_SendCrystalCounts(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetExperienceForKill")]
  public static extern ulong Client_GetExperienceForKill(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AddEXP__SWIG_0")]
  public static extern void Client_AddEXP__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ulong jarg2, byte jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AddEXP__SWIG_1")]
  public static extern void Client_AddEXP__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ulong jarg2, byte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AddEXP__SWIG_2")]
  public static extern void Client_AddEXP__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, ulong jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CalcEXP__SWIG_0")]
  public static extern ulong Client_CalcEXP__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CalcEXP__SWIG_1")]
  public static extern ulong Client_CalcEXP__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CalcEXP__SWIG_2")]
  public static extern ulong Client_CalcEXP__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CalculateNormalizedAAExp")]
  public static extern void Client_CalculateNormalizedAAExp(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, byte jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CalculateStandardAAExp")]
  public static extern void Client_CalculateStandardAAExp(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, byte jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CalculateLeadershipExp")]
  public static extern void Client_CalculateLeadershipExp(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, byte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CalculateExp")]
  public static extern void Client_CalculateExp(global::System.Runtime.InteropServices.HandleRef jarg1, ulong jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, byte jarg5, bool jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetEXP__SWIG_0")]
  public static extern void Client_SetEXP__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ulong jarg2, ulong jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetEXP__SWIG_1")]
  public static extern void Client_SetEXP__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ulong jarg2, ulong jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AddLevelBasedExp__SWIG_0")]
  public static extern void Client_AddLevelBasedExp__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, byte jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AddLevelBasedExp__SWIG_1")]
  public static extern void Client_AddLevelBasedExp__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, byte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AddLevelBasedExp__SWIG_2")]
  public static extern void Client_AddLevelBasedExp__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetLeadershipEXP")]
  public static extern void Client_SetLeadershipEXP(global::System.Runtime.InteropServices.HandleRef jarg1, ulong jarg2, ulong jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AddLeadershipEXP")]
  public static extern void Client_AddLeadershipEXP(global::System.Runtime.InteropServices.HandleRef jarg1, ulong jarg2, ulong jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendLeadershipEXPUpdate")]
  public static extern void Client_SendLeadershipEXPUpdate(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsLeadershipEXPOn")]
  public static extern bool Client_IsLeadershipEXPOn(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetLeadershipAA__SWIG_0")]
  public static extern int Client_GetLeadershipAA__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetLeadershipAA__SWIG_1")]
  public static extern global::System.IntPtr Client_GetLeadershipAA__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetGroupLeadershipAA")]
  public static extern global::System.IntPtr Client_GetGroupLeadershipAA(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetRaidLeadershipAA")]
  public static extern global::System.IntPtr Client_GetRaidLeadershipAA(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GroupLeadershipAAHealthEnhancement")]
  public static extern int Client_GroupLeadershipAAHealthEnhancement(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GroupLeadershipAAManaEnhancement")]
  public static extern int Client_GroupLeadershipAAManaEnhancement(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GroupLeadershipAAHealthRegeneration")]
  public static extern int Client_GroupLeadershipAAHealthRegeneration(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GroupLeadershipAAOffenseEnhancement")]
  public static extern int Client_GroupLeadershipAAOffenseEnhancement(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_InspectBuffs")]
  public static extern void Client_InspectBuffs(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetRaidPoints")]
  public static extern uint Client_GetRaidPoints(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetGroupPoints")]
  public static extern uint Client_GetGroupPoints(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetRaidEXP")]
  public static extern uint Client_GetRaidEXP(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetGroupEXP")]
  public static extern uint Client_GetGroupEXP(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetTotalSecondsPlayed")]
  public static extern uint Client_GetTotalSecondsPlayed(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetLevel__SWIG_0")]
  public static extern void Client_SetLevel__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetLevel__SWIG_1")]
  public static extern void Client_SetLevel__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GoToBind__SWIG_0")]
  public static extern void Client_GoToBind__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GoToBind__SWIG_1")]
  public static extern void Client_GoToBind__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GoToSafeCoords")]
  public static extern void Client_GoToSafeCoords(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, ushort jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_Gate__SWIG_0")]
  public static extern void Client_Gate__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_Gate__SWIG_1")]
  public static extern void Client_Gate__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetBindPoint__SWIG_0")]
  public static extern void Client_SetBindPoint__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, int jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetBindPoint__SWIG_1")]
  public static extern void Client_SetBindPoint__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetBindPoint__SWIG_2")]
  public static extern void Client_SetBindPoint__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetBindPoint__SWIG_3")]
  public static extern void Client_SetBindPoint__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetBindPoint__SWIG_4")]
  public static extern void Client_SetBindPoint__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetBindPoint2__SWIG_0")]
  public static extern void Client_SetBindPoint2__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, int jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetBindPoint2__SWIG_1")]
  public static extern void Client_SetBindPoint2__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetBindPoint2__SWIG_2")]
  public static extern void Client_SetBindPoint2__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetBindPoint2__SWIG_3")]
  public static extern void Client_SetBindPoint2__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetBindPoint2__SWIG_4")]
  public static extern void Client_SetBindPoint2__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetStartZone__SWIG_0")]
  public static extern void Client_SetStartZone__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, float jarg3, float jarg4, float jarg5, float jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetStartZone__SWIG_1")]
  public static extern void Client_SetStartZone__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, float jarg3, float jarg4, float jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetStartZone__SWIG_2")]
  public static extern void Client_SetStartZone__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, float jarg3, float jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetStartZone__SWIG_3")]
  public static extern void Client_SetStartZone__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, float jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetStartZone__SWIG_4")]
  public static extern void Client_SetStartZone__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetStartZone")]
  public static extern uint Client_GetStartZone(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MovePC__SWIG_0")]
  public static extern void Client_MovePC__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, float jarg3, float jarg4, float jarg5, float jarg6, byte jarg7, int jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MovePC__SWIG_1")]
  public static extern void Client_MovePC__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, float jarg3, float jarg4, float jarg5, float jarg6, byte jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MovePC__SWIG_2")]
  public static extern void Client_MovePC__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, float jarg3, float jarg4, float jarg5, float jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MovePC__SWIG_3")]
  public static extern void Client_MovePC__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, float jarg3, float jarg4, float jarg5, float jarg6, byte jarg7, int jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MovePC__SWIG_4")]
  public static extern void Client_MovePC__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, float jarg3, float jarg4, float jarg5, float jarg6, byte jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MovePC__SWIG_5")]
  public static extern void Client_MovePC__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, float jarg3, float jarg4, float jarg5, float jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MovePC__SWIG_6")]
  public static extern void Client_MovePC__SWIG_6(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, float jarg4, float jarg5, byte jarg6, int jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MovePC__SWIG_7")]
  public static extern void Client_MovePC__SWIG_7(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, float jarg4, float jarg5, byte jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MovePC__SWIG_8")]
  public static extern void Client_MovePC__SWIG_8(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, float jarg4, float jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MovePC__SWIG_9")]
  public static extern void Client_MovePC__SWIG_9(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, float jarg4, float jarg5, float jarg6, float jarg7, byte jarg8, int jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MovePC__SWIG_10")]
  public static extern void Client_MovePC__SWIG_10(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, float jarg4, float jarg5, float jarg6, float jarg7, byte jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MovePC__SWIG_11")]
  public static extern void Client_MovePC__SWIG_11(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, float jarg4, float jarg5, float jarg6, float jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MoveZone__SWIG_0")]
  public static extern void Client_MoveZone__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MoveZone__SWIG_1")]
  public static extern void Client_MoveZone__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MoveZoneGroup__SWIG_0")]
  public static extern void Client_MoveZoneGroup__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MoveZoneGroup__SWIG_1")]
  public static extern void Client_MoveZoneGroup__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MoveZoneRaid__SWIG_0")]
  public static extern void Client_MoveZoneRaid__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MoveZoneRaid__SWIG_1")]
  public static extern void Client_MoveZoneRaid__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MoveZoneInstance__SWIG_0")]
  public static extern void Client_MoveZoneInstance__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MoveZoneInstance__SWIG_1")]
  public static extern void Client_MoveZoneInstance__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MoveZoneInstanceGroup__SWIG_0")]
  public static extern void Client_MoveZoneInstanceGroup__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MoveZoneInstanceGroup__SWIG_1")]
  public static extern void Client_MoveZoneInstanceGroup__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MoveZoneInstanceRaid__SWIG_0")]
  public static extern void Client_MoveZoneInstanceRaid__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MoveZoneInstanceRaid__SWIG_1")]
  public static extern void Client_MoveZoneInstanceRaid__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendToGuildHall")]
  public static extern void Client_SendToGuildHall(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendToInstance")]
  public static extern void Client_SendToInstance(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, uint jarg4, float jarg5, float jarg6, float jarg7, float jarg8, global::System.Runtime.InteropServices.HandleRef jarg9, uint jarg10);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AssignToInstance")]
  public static extern void Client_AssignToInstance(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_RemoveFromInstance")]
  public static extern void Client_RemoveFromInstance(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CheckLoreConflict")]
  public static extern bool Client_CheckLoreConflict(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ChangeLastName")]
  public static extern void Client_ChangeLastName(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetGroupAAs")]
  public static extern void Client_GetGroupAAs(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetRaidAAs")]
  public static extern void Client_GetRaidAAs(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ClearGroupAAs")]
  public static extern void Client_ClearGroupAAs(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UpdateGroupAAs")]
  public static extern void Client_UpdateGroupAAs(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SacrificeConfirm")]
  public static extern void Client_SacrificeConfirm(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_Sacrifice")]
  public static extern void Client_Sacrifice(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GoToDeath")]
  public static extern void Client_GoToDeath(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetInstanceID")]
  public static extern int Client_GetInstanceID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetZoning")]
  public static extern void Client_SetZoning(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ShowSpells")]
  public static extern void Client_ShowSpells(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetReverseFactionCon")]
  public static extern global::System.IntPtr Client_GetReverseFactionCon(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetFactionLevel")]
  public static extern global::System.IntPtr Client_GetFactionLevel(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, uint jarg5, uint jarg6, int jarg7, global::System.Runtime.InteropServices.HandleRef jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ReloadCharacterFaction")]
  public static extern bool Client_ReloadCharacterFaction(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetCharacterFactionLevel")]
  public static extern int Client_GetCharacterFactionLevel(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetModCharacterFactionLevel")]
  public static extern int Client_GetModCharacterFactionLevel(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MerchantRejectMessage")]
  public static extern void Client_MerchantRejectMessage(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendFactionMessage")]
  public static extern void Client_SendFactionMessage(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, int jarg4, int jarg5, byte jarg6, int jarg7, int jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UpdatePersonalFaction")]
  public static extern void Client_UpdatePersonalFaction(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, int jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, int jarg6, int jarg7, int jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetFactionLevel__SWIG_0")]
  public static extern void Client_SetFactionLevel__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, byte jarg4, byte jarg5, byte jarg6, bool jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetFactionLevel__SWIG_1")]
  public static extern void Client_SetFactionLevel__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, byte jarg4, byte jarg5, byte jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetFactionLevel2")]
  public static extern void Client_SetFactionLevel2(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, int jarg3, byte jarg4, byte jarg5, byte jarg6, int jarg7, byte jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetRawItemAC")]
  public static extern int Client_GetRawItemAC(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_LSAccountID")]
  public static extern uint Client_LSAccountID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetWID")]
  public static extern uint Client_GetWID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetWID")]
  public static extern void Client_SetWID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AccountID")]
  public static extern uint Client_AccountID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AccountName")]
  public static extern string Client_AccountName(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetAccountCreation")]
  public static extern int Client_GetAccountCreation(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_Admin")]
  public static extern short Client_Admin(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CharacterID")]
  public static extern uint Client_CharacterID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UpdateAdmin__SWIG_0")]
  public static extern void Client_UpdateAdmin__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UpdateAdmin__SWIG_1")]
  public static extern void Client_UpdateAdmin__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UpdateWho__SWIG_0")]
  public static extern void Client_UpdateWho__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UpdateWho__SWIG_1")]
  public static extern void Client_UpdateWho__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GMHideMe__SWIG_0")]
  public static extern bool Client_GMHideMe__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GMHideMe__SWIG_1")]
  public static extern bool Client_GMHideMe__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsInAGuild")]
  public static extern bool Client_IsInAGuild(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsInGuild")]
  public static extern bool Client_IsInGuild(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetGuildListDirty")]
  public static extern bool Client_GetGuildListDirty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetGuildListDirty")]
  public static extern void Client_SetGuildListDirty(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GuildID")]
  public static extern uint Client_GuildID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GuildRank")]
  public static extern byte Client_GuildRank(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GuildTributeOptIn")]
  public static extern bool Client_GuildTributeOptIn(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetGuildTributeOptIn")]
  public static extern void Client_SetGuildTributeOptIn(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendGuildTributeDonateItemReply")]
  public static extern void Client_SendGuildTributeDonateItemReply(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendGuildTributeDonatePlatReply")]
  public static extern void Client_SendGuildTributeDonatePlatReply(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetGuildRank")]
  public static extern void Client_SetGuildRank(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetGuildID")]
  public static extern void Client_SetGuildID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendGuildMOTD__SWIG_0")]
  public static extern void Client_SendGuildMOTD__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendGuildMOTD__SWIG_1")]
  public static extern void Client_SendGuildMOTD__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendGuildURL")]
  public static extern void Client_SendGuildURL(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendGuildChannel")]
  public static extern void Client_SendGuildChannel(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendGuildSpawnAppearance")]
  public static extern void Client_SendGuildSpawnAppearance(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendGuildRanks")]
  public static extern void Client_SendGuildRanks(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendGuildMembers")]
  public static extern void Client_SendGuildMembers(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendGuildList")]
  public static extern void Client_SendGuildList(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendGuildJoin")]
  public static extern void Client_SendGuildJoin(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_RefreshGuildInfo")]
  public static extern void Client_RefreshGuildInfo(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendGuildRankNames")]
  public static extern void Client_SendGuildRankNames(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendGuildTributeDetails")]
  public static extern void Client_SendGuildTributeDetails(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_DoGuildTributeUpdate")]
  public static extern void Client_DoGuildTributeUpdate(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendGuildActiveTributes")]
  public static extern void Client_SendGuildActiveTributes(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendGuildFavorAndTimer")]
  public static extern void Client_SendGuildFavorAndTimer(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendGuildTributeOptInToggle")]
  public static extern void Client_SendGuildTributeOptInToggle(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_RequestGuildActiveTributes")]
  public static extern void Client_RequestGuildActiveTributes(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_RequestGuildFavorAndTimer")]
  public static extern void Client_RequestGuildFavorAndTimer(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendGuildMembersList")]
  public static extern void Client_SendGuildMembersList(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendGuildMemberAdd")]
  public static extern void Client_SendGuildMemberAdd(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, uint jarg5, uint jarg6, uint jarg7, global::System.Runtime.InteropServices.HandleRef jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendGuildMemberRename")]
  public static extern void Client_SendGuildMemberRename(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendGuildMemberDelete")]
  public static extern void Client_SendGuildMemberDelete(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendGuildMemberLevel")]
  public static extern void Client_SendGuildMemberLevel(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendGuildMemberRankAltBanker")]
  public static extern void Client_SendGuildMemberRankAltBanker(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, bool jarg5, bool jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendGuildMemberPublicNote")]
  public static extern void Client_SendGuildMemberPublicNote(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendGuildMemberDetails")]
  public static extern void Client_SendGuildMemberDetails(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendGuildRenameGuild")]
  public static extern void Client_SendGuildRenameGuild(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendGuildDeletePacket")]
  public static extern void Client_SendGuildDeletePacket(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetClientMaxLevel")]
  public static extern byte Client_GetClientMaxLevel(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetClientMaxLevel")]
  public static extern void Client_SetClientMaxLevel(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CheckManaEndUpdate")]
  public static extern void Client_CheckManaEndUpdate(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendManaUpdate")]
  public static extern void Client_SendManaUpdate(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendEnduranceUpdate")]
  public static extern void Client_SendEnduranceUpdate(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetFace")]
  public static extern byte Client_GetFace(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_FriendsWho")]
  public static extern void Client_FriendsWho(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_Stun")]
  public static extern void Client_Stun(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UnStun")]
  public static extern void Client_UnStun(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ReadBook")]
  public static extern void Client_ReadBook(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ReadBookByName")]
  public static extern void Client_ReadBookByName(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, byte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_QuestReadBook")]
  public static extern void Client_QuestReadBook(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, byte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendMoneyUpdate")]
  public static extern void Client_SendMoneyUpdate(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_TakeMoneyFromPP__SWIG_0")]
  public static extern bool Client_TakeMoneyFromPP__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ulong jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_TakeMoneyFromPP__SWIG_1")]
  public static extern bool Client_TakeMoneyFromPP__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ulong jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_TakePlatinum__SWIG_0")]
  public static extern bool Client_TakePlatinum__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_TakePlatinum__SWIG_1")]
  public static extern bool Client_TakePlatinum__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AddMoneyToPP__SWIG_0")]
  public static extern void Client_AddMoneyToPP__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ulong jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AddMoneyToPP__SWIG_1")]
  public static extern void Client_AddMoneyToPP__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ulong jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AddMoneyToPP__SWIG_2")]
  public static extern void Client_AddMoneyToPP__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, uint jarg5, bool jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AddMoneyToPP__SWIG_3")]
  public static extern void Client_AddMoneyToPP__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, uint jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AddPlatinum__SWIG_0")]
  public static extern void Client_AddPlatinum__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AddPlatinum__SWIG_1")]
  public static extern void Client_AddPlatinum__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_HasMoney")]
  public static extern bool Client_HasMoney(global::System.Runtime.InteropServices.HandleRef jarg1, ulong jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetCarriedMoney")]
  public static extern ulong Client_GetCarriedMoney(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetCarriedPlatinum")]
  public static extern uint Client_GetCarriedPlatinum(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetAllMoney")]
  public static extern ulong Client_GetAllMoney(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetMoney")]
  public static extern uint Client_GetMoney(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, byte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetAccountAge")]
  public static extern int Client_GetAccountAge(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendPath")]
  public static extern void Client_SendPath(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsDiscovered")]
  public static extern bool Client_IsDiscovered(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_DiscoverItem")]
  public static extern void Client_DiscoverItem(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_TGB")]
  public static extern bool Client_TGB(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_OnDisconnect")]
  public static extern void Client_OnDisconnect(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetSkillPoints")]
  public static extern ushort Client_GetSkillPoints(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetSkillPoints")]
  public static extern void Client_SetSkillPoints(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IncreaseSkill__SWIG_0")]
  public static extern void Client_IncreaseSkill__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IncreaseSkill__SWIG_1")]
  public static extern void Client_IncreaseSkill__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IncreaseLanguageSkill__SWIG_0")]
  public static extern void Client_IncreaseLanguageSkill__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, byte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IncreaseLanguageSkill__SWIG_1")]
  public static extern void Client_IncreaseLanguageSkill__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetSkill")]
  public static extern ushort Client_GetSkill(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetRawSkill")]
  public static extern uint Client_GetRawSkill(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_HasSkill")]
  public static extern bool Client_HasSkill(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CanHaveSkill")]
  public static extern bool Client_CanHaveSkill(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetSkill")]
  public static extern void Client_SetSkill(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, ushort jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AddSkill")]
  public static extern void Client_AddSkill(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, ushort jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CheckSpecializeIncrease")]
  public static extern void Client_CheckSpecializeIncrease(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CheckSongSkillIncrease")]
  public static extern void Client_CheckSongSkillIncrease(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CheckIncreaseSkill__SWIG_0")]
  public static extern bool Client_CheckIncreaseSkill__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CheckIncreaseSkill__SWIG_1")]
  public static extern bool Client_CheckIncreaseSkill__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CheckLanguageSkillIncrease")]
  public static extern void Client_CheckLanguageSkillIncrease(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, byte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetLanguageSkill")]
  public static extern void Client_SetLanguageSkill(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, byte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetHoTT")]
  public static extern void Client_SetHoTT(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ShowSkillsWindow")]
  public static extern void Client_ShowSkillsWindow(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MaxSkill__SWIG_0")]
  public static extern ushort Client_MaxSkill__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, ushort jarg3, ushort jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MaxSkill__SWIG_1")]
  public static extern ushort Client_MaxSkill__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SkillTrainLevel")]
  public static extern byte Client_SkillTrainLevel(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, ushort jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MaxSkills")]
  public static extern void Client_MaxSkills(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendTradeskillSearchResults")]
  public static extern void Client_SendTradeskillSearchResults(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendTradeskillDetails")]
  public static extern void Client_SendTradeskillDetails(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_TradeskillExecute")]
  public static extern bool Client_TradeskillExecute(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CheckIncreaseTradeskill")]
  public static extern void Client_CheckIncreaseTradeskill(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2, short jarg3, float jarg4, ushort jarg5, global::System.Runtime.InteropServices.HandleRef jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CheckTradeskillLoreConflict")]
  public static extern bool Client_CheckTradeskillLoreConflict(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_InitInnates")]
  public static extern void Client_InitInnates(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GMKill")]
  public static extern void Client_GMKill(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsMedding")]
  public static extern bool Client_IsMedding(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetDuelTarget")]
  public static extern uint Client_GetDuelTarget(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsDueling")]
  public static extern bool Client_IsDueling(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetDuelTarget")]
  public static extern void Client_SetDuelTarget(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetDueling")]
  public static extern void Client_SetDueling(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MemSpell__SWIG_0")]
  public static extern void Client_MemSpell__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, int jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MemSpell__SWIG_1")]
  public static extern void Client_MemSpell__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UnmemSpell__SWIG_0")]
  public static extern void Client_UnmemSpell__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UnmemSpell__SWIG_1")]
  public static extern void Client_UnmemSpell__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UnmemSpellBySpellID")]
  public static extern void Client_UnmemSpellBySpellID(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UnmemSpellAll__SWIG_0")]
  public static extern void Client_UnmemSpellAll__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UnmemSpellAll__SWIG_1")]
  public static extern void Client_UnmemSpellAll__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_FindEmptyMemSlot")]
  public static extern int Client_FindEmptyMemSlot(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_FindMemmedSpellBySlot")]
  public static extern ushort Client_FindMemmedSpellBySlot(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_FindMemmedSpellBySpellID")]
  public static extern int Client_FindMemmedSpellBySpellID(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MemmedCount")]
  public static extern int Client_MemmedCount(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetLearnableDisciplines__SWIG_0")]
  public static extern global::System.IntPtr Client_GetLearnableDisciplines__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, byte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetLearnableDisciplines__SWIG_1")]
  public static extern global::System.IntPtr Client_GetLearnableDisciplines__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetLearnableDisciplines__SWIG_2")]
  public static extern global::System.IntPtr Client_GetLearnableDisciplines__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetLearnedDisciplines")]
  public static extern global::System.IntPtr Client_GetLearnedDisciplines(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetMemmedSpells")]
  public static extern global::System.IntPtr Client_GetMemmedSpells(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetScribeableSpells__SWIG_0")]
  public static extern global::System.IntPtr Client_GetScribeableSpells__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, byte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetScribeableSpells__SWIG_1")]
  public static extern global::System.IntPtr Client_GetScribeableSpells__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetScribeableSpells__SWIG_2")]
  public static extern global::System.IntPtr Client_GetScribeableSpells__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetScribedSpells")]
  public static extern global::System.IntPtr Client_GetScribedSpells(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ScribeSpell__SWIG_0")]
  public static extern void Client_ScribeSpell__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, int jarg3, bool jarg4, bool jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ScribeSpell__SWIG_1")]
  public static extern void Client_ScribeSpell__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, int jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ScribeSpell__SWIG_2")]
  public static extern void Client_ScribeSpell__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SaveSpells")]
  public static extern void Client_SaveSpells(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SaveDisciplines")]
  public static extern void Client_SaveDisciplines(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ScribeSpells")]
  public static extern ushort Client_ScribeSpells(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, byte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_LearnDisciplines")]
  public static extern ushort Client_LearnDisciplines(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, byte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetClassTrackingDistanceMultiplier")]
  public static extern ushort Client_GetClassTrackingDistanceMultiplier(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CanThisClassTrack")]
  public static extern bool Client_CanThisClassTrack(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UnscribeSpell__SWIG_0")]
  public static extern void Client_UnscribeSpell__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, bool jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UnscribeSpell__SWIG_1")]
  public static extern void Client_UnscribeSpell__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UnscribeSpell__SWIG_2")]
  public static extern void Client_UnscribeSpell__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UnscribeSpellAll__SWIG_0")]
  public static extern void Client_UnscribeSpellAll__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UnscribeSpellAll__SWIG_1")]
  public static extern void Client_UnscribeSpellAll__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UnscribeSpellBySpellID__SWIG_0")]
  public static extern void Client_UnscribeSpellBySpellID__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UnscribeSpellBySpellID__SWIG_1")]
  public static extern void Client_UnscribeSpellBySpellID__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UntrainDisc__SWIG_0")]
  public static extern void Client_UntrainDisc__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, bool jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UntrainDisc__SWIG_1")]
  public static extern void Client_UntrainDisc__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UntrainDisc__SWIG_2")]
  public static extern void Client_UntrainDisc__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UntrainDiscAll__SWIG_0")]
  public static extern void Client_UntrainDiscAll__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UntrainDiscAll__SWIG_1")]
  public static extern void Client_UntrainDiscAll__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UntrainDiscBySpellID__SWIG_0")]
  public static extern void Client_UntrainDiscBySpellID__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UntrainDiscBySpellID__SWIG_1")]
  public static extern void Client_UntrainDiscBySpellID__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SpellGlobalCheck")]
  public static extern bool Client_SpellGlobalCheck(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SpellBucketCheck")]
  public static extern bool Client_SpellBucketCheck(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetCharMaxLevelFromQGlobal")]
  public static extern byte Client_GetCharMaxLevelFromQGlobal(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetCharMaxLevelFromBucket")]
  public static extern byte Client_GetCharMaxLevelFromBucket(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_Fling__SWIG_0")]
  public static extern void Client_Fling__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, float jarg4, float jarg5, bool jarg6, bool jarg7, bool jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_Fling__SWIG_1")]
  public static extern void Client_Fling__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, float jarg4, float jarg5, bool jarg6, bool jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_Fling__SWIG_2")]
  public static extern void Client_Fling__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, float jarg4, float jarg5, bool jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_Fling__SWIG_3")]
  public static extern void Client_Fling__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, float jarg4, float jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsStanding")]
  public static extern bool Client_IsStanding(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsSitting")]
  public static extern bool Client_IsSitting(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsCrouching")]
  public static extern bool Client_IsCrouching(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsBecomeNPC")]
  public static extern bool Client_IsBecomeNPC(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBecomeNPCLevel")]
  public static extern byte Client_GetBecomeNPCLevel(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetBecomeNPC")]
  public static extern void Client_SetBecomeNPC(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetBecomeNPCLevel")]
  public static extern void Client_SetBecomeNPCLevel(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_Connection")]
  public static extern global::System.IntPtr Client_Connection(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetEquippedItemFromTextureSlot")]
  public static extern uint Client_GetEquippedItemFromTextureSlot(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetEquipmentColor")]
  public static extern uint Client_GetEquipmentColor(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UpdateEquipmentLight")]
  public static extern void Client_UpdateEquipmentLight(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AutoSplitEnabled")]
  public static extern bool Client_AutoSplitEnabled(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AutoConsentGroupEnabled")]
  public static extern bool Client_AutoConsentGroupEnabled(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AutoConsentRaidEnabled")]
  public static extern bool Client_AutoConsentRaidEnabled(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AutoConsentGuildEnabled")]
  public static extern bool Client_AutoConsentGuildEnabled(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SummonHorse")]
  public static extern void Client_SummonHorse(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetHorseId")]
  public static extern void Client_SetHorseId(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetControlledMobId")]
  public static extern void Client_SetControlledMobId(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetControlledMobId")]
  public static extern ushort Client_GetControlledMobId(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetHorseId")]
  public static extern ushort Client_GetHorseId(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CanMedOnHorse")]
  public static extern bool Client_CanMedOnHorse(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CanFastRegen")]
  public static extern bool Client_CanFastRegen(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_NPCSpawn__SWIG_0")]
  public static extern void Client_NPCSpawn__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, string jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_NPCSpawn__SWIG_1")]
  public static extern void Client_NPCSpawn__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_Disarm")]
  public static extern void Client_Disarm(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_BindWound__SWIG_0")]
  public static extern bool Client_BindWound__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_BindWound__SWIG_1")]
  public static extern bool Client_BindWound__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetTradeskillObject")]
  public static extern void Client_SetTradeskillObject(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetTradeskillObject")]
  public static extern global::System.IntPtr Client_GetTradeskillObject(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendTributes")]
  public static extern void Client_SendTributes(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendGuildTributes")]
  public static extern void Client_SendGuildTributes(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_DoTributeUpdate")]
  public static extern void Client_DoTributeUpdate(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendTributeDetails")]
  public static extern void Client_SendTributeDetails(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_TributeItem")]
  public static extern int Client_TributeItem(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_TributeMoney")]
  public static extern int Client_TributeMoney(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AddTributePoints")]
  public static extern void Client_AddTributePoints(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ChangeTributeSettings")]
  public static extern void Client_ChangeTributeSettings(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendTributeTimer")]
  public static extern void Client_SendTributeTimer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ToggleTribute")]
  public static extern void Client_ToggleTribute(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendPathPacket")]
  public static extern void Client_SendPathPacket(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetPTimers")]
  public static extern global::System.IntPtr Client_GetPTimers(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendAlternateAdvancementRank")]
  public static extern void Client_SendAlternateAdvancementRank(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendAlternateAdvancementTable")]
  public static extern void Client_SendAlternateAdvancementTable(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendAlternateAdvancementStats")]
  public static extern void Client_SendAlternateAdvancementStats(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_PurchaseAlternateAdvancementRank")]
  public static extern void Client_PurchaseAlternateAdvancementRank(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GrantAlternateAdvancementAbility__SWIG_0")]
  public static extern bool Client_GrantAlternateAdvancementAbility__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GrantAlternateAdvancementAbility__SWIG_1")]
  public static extern bool Client_GrantAlternateAdvancementAbility__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IncrementAlternateAdvancementRank")]
  public static extern void Client_IncrementAlternateAdvancementRank(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ActivateAlternateAdvancementAbility")]
  public static extern void Client_ActivateAlternateAdvancementAbility(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendAlternateAdvancementPoints")]
  public static extern void Client_SendAlternateAdvancementPoints(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendAlternateAdvancementTimer")]
  public static extern void Client_SendAlternateAdvancementTimer(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendAlternateAdvancementTimers")]
  public static extern void Client_SendAlternateAdvancementTimers(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ResetAlternateAdvancementTimer")]
  public static extern void Client_ResetAlternateAdvancementTimer(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ResetAlternateAdvancementTimers")]
  public static extern void Client_ResetAlternateAdvancementTimers(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ResetOnDeathAlternateAdvancement")]
  public static extern void Client_ResetOnDeathAlternateAdvancement(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetAAPoints")]
  public static extern void Client_SetAAPoints(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AddAAPoints")]
  public static extern void Client_AddAAPoints(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetAAPoints")]
  public static extern int Client_GetAAPoints(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetSpentAA")]
  public static extern int Client_GetSpentAA(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetRequiredAAExperience")]
  public static extern uint Client_GetRequiredAAExperience(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AutoGrantAAPoints")]
  public static extern void Client_AutoGrantAAPoints(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GrantAllAAPoints__SWIG_0")]
  public static extern void Client_GrantAllAAPoints__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GrantAllAAPoints__SWIG_1")]
  public static extern void Client_GrantAllAAPoints__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_HasAlreadyPurchasedRank")]
  public static extern bool Client_HasAlreadyPurchasedRank(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ListPurchasedAAs__SWIG_0")]
  public static extern void Client_ListPurchasedAAs__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ListPurchasedAAs__SWIG_1")]
  public static extern void Client_ListPurchasedAAs__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendGMCommand__SWIG_0")]
  public static extern bool Client_SendGMCommand__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendGMCommand__SWIG_1")]
  public static extern bool Client_SendGMCommand__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_RegisterBug")]
  public static extern void Client_RegisterBug(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetApplySpellList")]
  public static extern global::System.IntPtr Client_GetApplySpellList(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, bool jarg4, bool jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ApplySpell__SWIG_0")]
  public static extern void Client_ApplySpell__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, int jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, bool jarg6, bool jarg7, bool jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ApplySpell__SWIG_1")]
  public static extern void Client_ApplySpell__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, int jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, bool jarg6, bool jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ApplySpell__SWIG_2")]
  public static extern void Client_ApplySpell__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, int jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, bool jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ApplySpell__SWIG_3")]
  public static extern void Client_ApplySpell__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, int jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ApplySpell__SWIG_4")]
  public static extern void Client_ApplySpell__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ApplySpell__SWIG_5")]
  public static extern void Client_ApplySpell__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ApplySpell__SWIG_6")]
  public static extern void Client_ApplySpell__SWIG_6(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetSpellDuration__SWIG_0")]
  public static extern void Client_SetSpellDuration__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, int jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, bool jarg6, bool jarg7, bool jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetSpellDuration__SWIG_1")]
  public static extern void Client_SetSpellDuration__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, int jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, bool jarg6, bool jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetSpellDuration__SWIG_2")]
  public static extern void Client_SetSpellDuration__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, int jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, bool jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetSpellDuration__SWIG_3")]
  public static extern void Client_SetSpellDuration__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, int jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetSpellDuration__SWIG_4")]
  public static extern void Client_SetSpellDuration__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetSpellDuration__SWIG_5")]
  public static extern void Client_SetSpellDuration__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetSpellDuration__SWIG_6")]
  public static extern void Client_SetSpellDuration__SWIG_6(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ResetAA")]
  public static extern void Client_ResetAA(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_RefundAA")]
  public static extern void Client_RefundAA(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendClearAA")]
  public static extern void Client_SendClearAA(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendClearLeadershipAA")]
  public static extern void Client_SendClearLeadershipAA(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendClearPlayerAA")]
  public static extern void Client_SendClearPlayerAA(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetAAXP")]
  public static extern uint Client_GetAAXP(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetAAPercent")]
  public static extern uint Client_GetAAPercent(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetAATitle")]
  public static extern void Client_SetAATitle(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetTitleSuffix")]
  public static extern void Client_SetTitleSuffix(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MemorizeSpell__SWIG_0")]
  public static extern void Client_MemorizeSpell__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, uint jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MemorizeSpell__SWIG_1")]
  public static extern void Client_MemorizeSpell__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetAAEXPPercentage")]
  public static extern int Client_GetAAEXPPercentage(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetEXPPercentage")]
  public static extern int Client_GetEXPPercentage(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UseAugmentContainer")]
  public static extern void Client_UseAugmentContainer(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_EVENT_ITEM_ScriptStopReturn")]
  public static extern void Client_EVENT_ITEM_ScriptStopReturn(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_NukeItem__SWIG_0")]
  public static extern uint Client_NukeItem__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, byte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_NukeItem__SWIG_1")]
  public static extern uint Client_NukeItem__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetTint__SWIG_0")]
  public static extern void Client_SetTint__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetTint__SWIG_1")]
  public static extern void Client_SetTint__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetMaterial")]
  public static extern void Client_SetMaterial(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_Undye")]
  public static extern void Client_Undye(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetItemIDAt")]
  public static extern int Client_GetItemIDAt(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetAugmentIDAt")]
  public static extern int Client_GetAugmentIDAt(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2, byte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_PutItemInInventory__SWIG_0")]
  public static extern bool Client_PutItemInInventory__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_PutItemInInventory__SWIG_1")]
  public static extern bool Client_PutItemInInventory__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_PushItemOnCursor__SWIG_0")]
  public static extern bool Client_PushItemOnCursor__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_PushItemOnCursor__SWIG_1")]
  public static extern bool Client_PushItemOnCursor__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendCursorBuffer")]
  public static extern void Client_SendCursorBuffer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_DeleteItemInInventory__SWIG_0")]
  public static extern void Client_DeleteItemInInventory__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2, short jarg3, bool jarg4, bool jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_DeleteItemInInventory__SWIG_1")]
  public static extern void Client_DeleteItemInInventory__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2, short jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_DeleteItemInInventory__SWIG_2")]
  public static extern void Client_DeleteItemInInventory__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2, short jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_DeleteItemInInventory__SWIG_3")]
  public static extern void Client_DeleteItemInInventory__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CountItem")]
  public static extern int Client_CountItem(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ResetItemCooldown")]
  public static extern void Client_ResetItemCooldown(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetItemCooldown__SWIG_0")]
  public static extern void Client_SetItemCooldown__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, bool jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetItemCooldown__SWIG_1")]
  public static extern void Client_SetItemCooldown__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetItemCooldown__SWIG_2")]
  public static extern void Client_SetItemCooldown__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetItemCooldown")]
  public static extern uint Client_GetItemCooldown(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_RemoveItem__SWIG_0")]
  public static extern void Client_RemoveItem__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_RemoveItem__SWIG_1")]
  public static extern void Client_RemoveItem__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SwapItem")]
  public static extern bool Client_SwapItem(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SwapItemResync")]
  public static extern void Client_SwapItemResync(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_QSSwapItemAuditor__SWIG_0")]
  public static extern void Client_QSSwapItemAuditor__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_QSSwapItemAuditor__SWIG_1")]
  public static extern void Client_QSSwapItemAuditor__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_PutLootInInventory__SWIG_0")]
  public static extern void Client_PutLootInInventory__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_PutLootInInventory__SWIG_1")]
  public static extern void Client_PutLootInInventory__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AutoPutLootInInventory__SWIG_0")]
  public static extern bool Client_AutoPutLootInInventory__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, bool jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AutoPutLootInInventory__SWIG_1")]
  public static extern bool Client_AutoPutLootInInventory__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AutoPutLootInInventory__SWIG_2")]
  public static extern bool Client_AutoPutLootInInventory__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AutoPutLootInInventory__SWIG_3")]
  public static extern bool Client_AutoPutLootInInventory__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SummonItem__SWIG_0")]
  public static extern bool Client_SummonItem__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, short jarg3, uint jarg4, uint jarg5, uint jarg6, uint jarg7, uint jarg8, uint jarg9, bool jarg10, ushort jarg11, uint jarg12, uint jarg13, uint jarg14);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SummonItem__SWIG_1")]
  public static extern bool Client_SummonItem__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, short jarg3, uint jarg4, uint jarg5, uint jarg6, uint jarg7, uint jarg8, uint jarg9, bool jarg10, ushort jarg11, uint jarg12, uint jarg13);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SummonItem__SWIG_2")]
  public static extern bool Client_SummonItem__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, short jarg3, uint jarg4, uint jarg5, uint jarg6, uint jarg7, uint jarg8, uint jarg9, bool jarg10, ushort jarg11, uint jarg12);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SummonItem__SWIG_3")]
  public static extern bool Client_SummonItem__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, short jarg3, uint jarg4, uint jarg5, uint jarg6, uint jarg7, uint jarg8, uint jarg9, bool jarg10, ushort jarg11);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SummonItem__SWIG_4")]
  public static extern bool Client_SummonItem__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, short jarg3, uint jarg4, uint jarg5, uint jarg6, uint jarg7, uint jarg8, uint jarg9, bool jarg10);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SummonItem__SWIG_5")]
  public static extern bool Client_SummonItem__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, short jarg3, uint jarg4, uint jarg5, uint jarg6, uint jarg7, uint jarg8, uint jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SummonItem__SWIG_6")]
  public static extern bool Client_SummonItem__SWIG_6(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, short jarg3, uint jarg4, uint jarg5, uint jarg6, uint jarg7, uint jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SummonItem__SWIG_7")]
  public static extern bool Client_SummonItem__SWIG_7(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, short jarg3, uint jarg4, uint jarg5, uint jarg6, uint jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SummonItem__SWIG_8")]
  public static extern bool Client_SummonItem__SWIG_8(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, short jarg3, uint jarg4, uint jarg5, uint jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SummonItem__SWIG_9")]
  public static extern bool Client_SummonItem__SWIG_9(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, short jarg3, uint jarg4, uint jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SummonItem__SWIG_10")]
  public static extern bool Client_SummonItem__SWIG_10(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, short jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SummonItem__SWIG_11")]
  public static extern bool Client_SummonItem__SWIG_11(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, short jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SummonItem__SWIG_12")]
  public static extern bool Client_SummonItem__SWIG_12(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SummonItemIntoInventory__SWIG_0")]
  public static extern void Client_SummonItemIntoInventory__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, short jarg3, uint jarg4, uint jarg5, uint jarg6, uint jarg7, uint jarg8, uint jarg9, bool jarg10);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SummonItemIntoInventory__SWIG_1")]
  public static extern void Client_SummonItemIntoInventory__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, short jarg3, uint jarg4, uint jarg5, uint jarg6, uint jarg7, uint jarg8, uint jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SummonItemIntoInventory__SWIG_2")]
  public static extern void Client_SummonItemIntoInventory__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, short jarg3, uint jarg4, uint jarg5, uint jarg6, uint jarg7, uint jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SummonItemIntoInventory__SWIG_3")]
  public static extern void Client_SummonItemIntoInventory__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, short jarg3, uint jarg4, uint jarg5, uint jarg6, uint jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SummonItemIntoInventory__SWIG_4")]
  public static extern void Client_SummonItemIntoInventory__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, short jarg3, uint jarg4, uint jarg5, uint jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SummonItemIntoInventory__SWIG_5")]
  public static extern void Client_SummonItemIntoInventory__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, short jarg3, uint jarg4, uint jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SummonItemIntoInventory__SWIG_6")]
  public static extern void Client_SummonItemIntoInventory__SWIG_6(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, short jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SummonItemIntoInventory__SWIG_7")]
  public static extern void Client_SummonItemIntoInventory__SWIG_7(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, short jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SummonItemIntoInventory__SWIG_8")]
  public static extern void Client_SummonItemIntoInventory__SWIG_8(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SummonBaggedItems")]
  public static extern void Client_SummonBaggedItems(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetStats")]
  public static extern void Client_SetStats(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, short jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IncStats")]
  public static extern void Client_IncStats(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, short jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_DropItem__SWIG_0")]
  public static extern void Client_DropItem__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_DropItem__SWIG_1")]
  public static extern void Client_DropItem__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_DropItemQS")]
  public static extern void Client_DropItemQS(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_HasItemOnCorpse")]
  public static extern bool Client_HasItemOnCorpse(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsAugmentRestricted")]
  public static extern bool Client_IsAugmentRestricted(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetItemLinkHash")]
  public static extern int Client_GetItemLinkHash(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendItemLink__SWIG_0")]
  public static extern void Client_SendItemLink__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendItemLink__SWIG_1")]
  public static extern void Client_SendItemLink__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendLootItemInPacket")]
  public static extern void Client_SendLootItemInPacket(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, short jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendItemPacket")]
  public static extern void Client_SendItemPacket(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsValidSlot")]
  public static extern bool Client_IsValidSlot(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsBankSlot")]
  public static extern bool Client_IsBankSlot(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsTrader")]
  public static extern bool Client_IsTrader(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsBuyer")]
  public static extern bool Client_IsBuyer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetFilter")]
  public static extern global::System.IntPtr Client_GetFilter(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetFilter")]
  public static extern void Client_SetFilter(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CancelSneakHide")]
  public static extern void Client_CancelSneakHide(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_BreakInvis")]
  public static extern void Client_BreakInvis(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_BreakSneakWhenCastOn")]
  public static extern void Client_BreakSneakWhenCastOn(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_BreakFeignDeathWhenCastOn")]
  public static extern void Client_BreakFeignDeathWhenCastOn(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_LeaveGroup")]
  public static extern void Client_LeaveGroup(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_Hungry")]
  public static extern bool Client_Hungry(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_Thirsty")]
  public static extern bool Client_Thirsty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetHunger")]
  public static extern int Client_GetHunger(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetThirst")]
  public static extern int Client_GetThirst(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetHunger")]
  public static extern void Client_SetHunger(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetThirst")]
  public static extern void Client_SetThirst(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetConsumption")]
  public static extern void Client_SetConsumption(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsStarved")]
  public static extern bool Client_IsStarved(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetIntoxication")]
  public static extern int Client_GetIntoxication(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CheckTradeLoreConflict")]
  public static extern bool Client_CheckTradeLoreConflict(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CheckTradeNonDroppable")]
  public static extern bool Client_CheckTradeNonDroppable(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_LinkDead")]
  public static extern void Client_LinkDead(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CheckDoubleAttack")]
  public static extern bool Client_CheckDoubleAttack(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CheckTripleAttack")]
  public static extern bool Client_CheckTripleAttack(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CheckDoubleRangedAttack")]
  public static extern bool Client_CheckDoubleRangedAttack(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CheckDualWield")]
  public static extern bool Client_CheckDualWield(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_DecreaseByID")]
  public static extern bool Client_DecreaseByID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, short jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SlotConvert2")]
  public static extern byte Client_SlotConvert2(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_Escape")]
  public static extern void Client_Escape(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_DisenchantSummonedBags__SWIG_0")]
  public static extern void Client_DisenchantSummonedBags__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_DisenchantSummonedBags__SWIG_1")]
  public static extern void Client_DisenchantSummonedBags__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_RemoveNoRent__SWIG_0")]
  public static extern void Client_RemoveNoRent__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_RemoveNoRent__SWIG_1")]
  public static extern void Client_RemoveNoRent__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_RemoveDuplicateLore__SWIG_0")]
  public static extern void Client_RemoveDuplicateLore__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_RemoveDuplicateLore__SWIG_1")]
  public static extern void Client_RemoveDuplicateLore__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MoveSlotNotAllowed__SWIG_0")]
  public static extern void Client_MoveSlotNotAllowed__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MoveSlotNotAllowed__SWIG_1")]
  public static extern void Client_MoveSlotNotAllowed__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_RangedAttack__SWIG_0")]
  public static extern void Client_RangedAttack__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_RangedAttack__SWIG_1")]
  public static extern void Client_RangedAttack__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ThrowingAttack__SWIG_0")]
  public static extern void Client_ThrowingAttack__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ThrowingAttack__SWIG_1")]
  public static extern void Client_ThrowingAttack__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_DoClassAttacks__SWIG_0")]
  public static extern void Client_DoClassAttacks__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, ushort jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_DoClassAttacks__SWIG_1")]
  public static extern void Client_DoClassAttacks__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, ushort jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_DoClassAttacks__SWIG_2")]
  public static extern void Client_DoClassAttacks__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ClearZoneFlag")]
  public static extern void Client_ClearZoneFlag(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetZoneFlags")]
  public static extern global::System.IntPtr Client_GetZoneFlags(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_HasZoneFlag")]
  public static extern bool Client_HasZoneFlag(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_LoadZoneFlags")]
  public static extern void Client_LoadZoneFlags(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendZoneFlagInfo")]
  public static extern void Client_SendZoneFlagInfo(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetZoneFlag")]
  public static extern void Client_SetZoneFlag(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ClearPEQZoneFlag")]
  public static extern void Client_ClearPEQZoneFlag(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetPEQZoneFlags")]
  public static extern global::System.IntPtr Client_GetPEQZoneFlags(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_HasPEQZoneFlag")]
  public static extern bool Client_HasPEQZoneFlag(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_LoadPEQZoneFlags")]
  public static extern void Client_LoadPEQZoneFlags(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendPEQZoneFlagInfo")]
  public static extern void Client_SendPEQZoneFlagInfo(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetPEQZoneFlag")]
  public static extern void Client_SetPEQZoneFlag(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CanFish")]
  public static extern bool Client_CanFish(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GoFish")]
  public static extern void Client_GoFish(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ForageItem__SWIG_0")]
  public static extern void Client_ForageItem__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ForageItem__SWIG_1")]
  public static extern void Client_ForageItem__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CalcPriceMod__SWIG_0")]
  public static extern float Client_CalcPriceMod__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CalcPriceMod__SWIG_1")]
  public static extern float Client_CalcPriceMod__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CalcPriceMod__SWIG_2")]
  public static extern float Client_CalcPriceMod__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ResetTrade")]
  public static extern void Client_ResetTrade(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_DropInst")]
  public static extern void Client_DropInst(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_TrainDiscipline")]
  public static extern bool Client_TrainDiscipline(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MemorizeSpellFromItem")]
  public static extern bool Client_MemorizeSpellFromItem(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_TrainDiscBySpellID")]
  public static extern void Client_TrainDiscBySpellID(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetDisciplineTimer")]
  public static extern uint Client_GetDisciplineTimer(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ResetAllDisciplineTimers")]
  public static extern void Client_ResetAllDisciplineTimers(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetDiscSlotBySpellID")]
  public static extern int Client_GetDiscSlotBySpellID(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ResetDisciplineTimer")]
  public static extern void Client_ResetDisciplineTimer(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendDisciplineUpdate")]
  public static extern void Client_SendDisciplineUpdate(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendDisciplineTimer")]
  public static extern void Client_SendDisciplineTimer(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UseDiscipline")]
  public static extern bool Client_UseDiscipline(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_HasDisciplineLearned")]
  public static extern bool Client_HasDisciplineLearned(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetLinkedSpellReuseTimer")]
  public static extern void Client_SetLinkedSpellReuseTimer(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsLinkedSpellReuseTimerReady")]
  public static extern bool Client_IsLinkedSpellReuseTimerReady(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ResetCastbarCooldownBySlot")]
  public static extern void Client_ResetCastbarCooldownBySlot(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ResetAllCastbarCooldowns")]
  public static extern void Client_ResetAllCastbarCooldowns(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ResetCastbarCooldownBySpellID")]
  public static extern void Client_ResetCastbarCooldownBySpellID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CheckTitle")]
  public static extern bool Client_CheckTitle(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_EnableTitle")]
  public static extern void Client_EnableTitle(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_RemoveTitle")]
  public static extern void Client_RemoveTitle(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_EnteringMessages")]
  public static extern void Client_EnteringMessages(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendRules")]
  public static extern void Client_SendRules(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetGMSpeed")]
  public static extern bool Client_GetGMSpeed(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetGMInvul")]
  public static extern bool Client_GetGMInvul(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CanUseReport_set")]
  public static extern void Client_CanUseReport_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CanUseReport_get")]
  public static extern bool Client_CanUseReport_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendBuffDurationPacket")]
  public static extern void Client_SendBuffDurationPacket(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendBuffNumHitPacket")]
  public static extern void Client_SendBuffNumHitPacket(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ProcessInspectRequest")]
  public static extern void Client_ProcessInspectRequest(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ClientFinishedLoading")]
  public static extern bool Client_ClientFinishedLoading(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_FindSpellBookSlotBySpellID")]
  public static extern int Client_FindSpellBookSlotBySpellID(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetSpellIDByBookSlot")]
  public static extern uint Client_GetSpellIDByBookSlot(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetNextAvailableSpellBookSlot__SWIG_0")]
  public static extern int Client_GetNextAvailableSpellBookSlot__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetNextAvailableSpellBookSlot__SWIG_1")]
  public static extern int Client_GetNextAvailableSpellBookSlot__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetNextAvailableDisciplineSlot__SWIG_0")]
  public static extern int Client_GetNextAvailableDisciplineSlot__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetNextAvailableDisciplineSlot__SWIG_1")]
  public static extern int Client_GetNextAvailableDisciplineSlot__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetSpellByBookSlot")]
  public static extern uint Client_GetSpellByBookSlot(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_HasSpellScribed")]
  public static extern bool Client_HasSpellScribed(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetHighestScribedSpellinSpellGroup")]
  public static extern uint Client_GetHighestScribedSpellinSpellGroup(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetMaxSkillAfterSpecializationRules")]
  public static extern ushort Client_GetMaxSkillAfterSpecializationRules(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, ushort jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendPopupToClient__SWIG_0")]
  public static extern void Client_SendPopupToClient__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, uint jarg4, uint jarg5, uint jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendPopupToClient__SWIG_1")]
  public static extern void Client_SendPopupToClient__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, uint jarg4, uint jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendPopupToClient__SWIG_2")]
  public static extern void Client_SendPopupToClient__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendPopupToClient__SWIG_3")]
  public static extern void Client_SendPopupToClient__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendFullPopup__SWIG_0")]
  public static extern void Client_SendFullPopup__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, uint jarg4, uint jarg5, uint jarg6, uint jarg7, string jarg8, string jarg9, uint jarg10);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendFullPopup__SWIG_1")]
  public static extern void Client_SendFullPopup__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, uint jarg4, uint jarg5, uint jarg6, uint jarg7, string jarg8, string jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendFullPopup__SWIG_2")]
  public static extern void Client_SendFullPopup__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, uint jarg4, uint jarg5, uint jarg6, uint jarg7, string jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendFullPopup__SWIG_3")]
  public static extern void Client_SendFullPopup__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, uint jarg4, uint jarg5, uint jarg6, uint jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendFullPopup__SWIG_4")]
  public static extern void Client_SendFullPopup__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, uint jarg4, uint jarg5, uint jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendFullPopup__SWIG_5")]
  public static extern void Client_SendFullPopup__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, uint jarg4, uint jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendFullPopup__SWIG_6")]
  public static extern void Client_SendFullPopup__SWIG_6(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendFullPopup__SWIG_7")]
  public static extern void Client_SendFullPopup__SWIG_7(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendWindow")]
  public static extern void Client_SendWindow(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, string jarg5, string jarg6, uint jarg7, int jarg8, global::System.Runtime.InteropServices.HandleRef jarg9, string jarg10, string jarg11);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_PendingTranslocate_set")]
  public static extern void Client_PendingTranslocate_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_PendingTranslocate_get")]
  public static extern bool Client_PendingTranslocate_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_TranslocateTime_set")]
  public static extern void Client_TranslocateTime_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_TranslocateTime_get")]
  public static extern global::System.IntPtr Client_TranslocateTime_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_PendingSacrifice_set")]
  public static extern void Client_PendingSacrifice_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_PendingSacrifice_get")]
  public static extern bool Client_PendingSacrifice_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SacrificeCaster_set")]
  public static extern void Client_SacrificeCaster_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SacrificeCaster_get")]
  public static extern global::System.IntPtr Client_SacrificeCaster_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_PendingTranslocateData_set")]
  public static extern void Client_PendingTranslocateData_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_PendingTranslocateData_get")]
  public static extern global::System.IntPtr Client_PendingTranslocateData_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendOPTranslocateConfirm")]
  public static extern void Client_SendOPTranslocateConfirm(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, ushort jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_LoadClientTaskState")]
  public static extern void Client_LoadClientTaskState(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_RemoveClientTaskState")]
  public static extern void Client_RemoveClientTaskState(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendTaskActivityComplete__SWIG_0")]
  public static extern void Client_SendTaskActivityComplete__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, int jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, int jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendTaskActivityComplete__SWIG_1")]
  public static extern void Client_SendTaskActivityComplete__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, int jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendTaskFailed")]
  public static extern void Client_SendTaskFailed(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_HasTaskRequestCooldownTimer")]
  public static extern bool Client_HasTaskRequestCooldownTimer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendTaskRequestCooldownTimerMessage")]
  public static extern void Client_SendTaskRequestCooldownTimerMessage(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_StartTaskRequestCooldownTimer")]
  public static extern void Client_StartTaskRequestCooldownTimer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetTaskState")]
  public static extern global::System.IntPtr Client_GetTaskState(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_HasTaskState")]
  public static extern bool Client_HasTaskState(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CancelTask")]
  public static extern void Client_CancelTask(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SaveTaskState")]
  public static extern bool Client_SaveTaskState(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsTaskStateLoaded")]
  public static extern bool Client_IsTaskStateLoaded(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsTaskActive")]
  public static extern bool Client_IsTaskActive(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsTaskActivityActive")]
  public static extern bool Client_IsTaskActivityActive(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetTaskActivityState")]
  public static extern global::System.IntPtr Client_GetTaskActivityState(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UpdateTaskActivity__SWIG_0")]
  public static extern void Client_UpdateTaskActivity__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, int jarg4, bool jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UpdateTaskActivity__SWIG_1")]
  public static extern void Client_UpdateTaskActivity__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_RemoveTaskByTaskID")]
  public static extern void Client_RemoveTaskByTaskID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ResetTaskActivity")]
  public static extern void Client_ResetTaskActivity(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UpdateTasksForItem__SWIG_0")]
  public static extern void Client_UpdateTasksForItem__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UpdateTasksForItem__SWIG_1")]
  public static extern void Client_UpdateTasksForItem__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UpdateTasksOnLoot__SWIG_0")]
  public static extern void Client_UpdateTasksOnLoot__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UpdateTasksOnLoot__SWIG_1")]
  public static extern void Client_UpdateTasksOnLoot__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UpdateTasksOnExplore")]
  public static extern void Client_UpdateTasksOnExplore(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UpdateTasksOnSpeakWith")]
  public static extern bool Client_UpdateTasksOnSpeakWith(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UpdateTasksOnDeliver")]
  public static extern bool Client_UpdateTasksOnDeliver(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UpdateTasksOnTouchSwitch")]
  public static extern void Client_UpdateTasksOnTouchSwitch(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_TaskSetSelector")]
  public static extern void Client_TaskSetSelector(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_TaskQuestSetSelector")]
  public static extern void Client_TaskQuestSetSelector(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_EnableTask")]
  public static extern void Client_EnableTask(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_DisableTask")]
  public static extern void Client_DisableTask(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsTaskEnabled")]
  public static extern bool Client_IsTaskEnabled(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ProcessTaskProximities")]
  public static extern void Client_ProcessTaskProximities(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, float jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AssignTask__SWIG_0")]
  public static extern void Client_AssignTask__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AssignTask__SWIG_1")]
  public static extern void Client_AssignTask__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AssignTask__SWIG_2")]
  public static extern void Client_AssignTask__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ActiveSpeakTask")]
  public static extern int Client_ActiveSpeakTask(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ActiveSpeakActivity")]
  public static extern int Client_ActiveSpeakActivity(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CompleteTask")]
  public static extern bool Client_CompleteTask(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_FailTask")]
  public static extern void Client_FailTask(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_TaskTimeLeft")]
  public static extern int Client_TaskTimeLeft(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_EnabledTaskCount")]
  public static extern int Client_EnabledTaskCount(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsTaskCompleted")]
  public static extern int Client_IsTaskCompleted(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ShowClientTasks")]
  public static extern void Client_ShowClientTasks(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CancelAllTasks")]
  public static extern void Client_CancelAllTasks(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetActiveTaskCount")]
  public static extern int Client_GetActiveTaskCount(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetActiveTaskID")]
  public static extern int Client_GetActiveTaskID(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetTaskStartTime")]
  public static extern int Client_GetTaskStartTime(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsTaskActivityCompleted")]
  public static extern bool Client_IsTaskActivityCompleted(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetTaskActivityDoneCount")]
  public static extern int Client_GetTaskActivityDoneCount(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetTaskActivityDoneCountFromTaskID")]
  public static extern int Client_GetTaskActivityDoneCountFromTaskID(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ActiveTasksInSet")]
  public static extern int Client_ActiveTasksInSet(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CompletedTasksInSet")]
  public static extern int Client_CompletedTasksInSet(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_PurgeTaskTimers")]
  public static extern void Client_PurgeTaskTimers(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_LockSharedTask")]
  public static extern void Client_LockSharedTask(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_EndSharedTask__SWIG_0")]
  public static extern void Client_EndSharedTask__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_EndSharedTask__SWIG_1")]
  public static extern void Client_EndSharedTask__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_m_requesting_shared_task_set")]
  public static extern void Client_m_requesting_shared_task_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_m_requesting_shared_task_get")]
  public static extern bool Client_m_requesting_shared_task_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_m_shared_task_update_set")]
  public static extern void Client_m_shared_task_update_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_m_shared_task_update_get")]
  public static extern bool Client_m_shared_task_update_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_m_requested_shared_task_removal_set")]
  public static extern void Client_m_requested_shared_task_removal_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_m_requested_shared_task_removal_get")]
  public static extern bool Client_m_requested_shared_task_removal_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetPartyMembers")]
  public static extern global::System.IntPtr Client_GetPartyMembers(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ClientVersion")]
  public static extern global::System.IntPtr Client_ClientVersion(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ClientVersionBit")]
  public static extern uint Client_ClientVersionBit(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetClientVersion")]
  public static extern void Client_SetClientVersion(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendAdventureError")]
  public static extern void Client_SendAdventureError(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendAdventureDetails")]
  public static extern void Client_SendAdventureDetails(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendAdventureCount")]
  public static extern void Client_SendAdventureCount(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_NewAdventure")]
  public static extern void Client_NewAdventure(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, string jarg4, int jarg5, string jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsOnAdventure")]
  public static extern bool Client_IsOnAdventure(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_LeaveAdventure")]
  public static extern void Client_LeaveAdventure(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AdventureFinish")]
  public static extern void Client_AdventureFinish(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetAdventureData")]
  public static extern void Client_SetAdventureData(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ClearAdventureData")]
  public static extern void Client_ClearAdventureData(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_HasAdventureData")]
  public static extern bool Client_HasAdventureData(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ClearCurrentAdventure")]
  public static extern void Client_ClearCurrentAdventure(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_PendingAdventureRequest")]
  public static extern void Client_PendingAdventureRequest(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetPendingAdventureRequest")]
  public static extern bool Client_GetPendingAdventureRequest(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ClearPendingAdventureRequest")]
  public static extern void Client_ClearPendingAdventureRequest(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_PendingAdventureCreate")]
  public static extern void Client_PendingAdventureCreate(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetPendingAdventureCreate")]
  public static extern bool Client_GetPendingAdventureCreate(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ClearPendingAdventureCreate")]
  public static extern void Client_ClearPendingAdventureCreate(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_PendingAdventureLeave")]
  public static extern void Client_PendingAdventureLeave(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetPendingAdventureLeave")]
  public static extern bool Client_GetPendingAdventureLeave(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ClearPendingAdventureLeave")]
  public static extern void Client_ClearPendingAdventureLeave(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_PendingAdventureDoorClick")]
  public static extern void Client_PendingAdventureDoorClick(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetPendingAdventureDoorClick")]
  public static extern bool Client_GetPendingAdventureDoorClick(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ClearPendingAdventureDoorClick")]
  public static extern void Client_ClearPendingAdventureDoorClick(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ClearPendingAdventureData")]
  public static extern void Client_ClearPendingAdventureData(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CanEnterZone__SWIG_0")]
  public static extern bool Client_CanEnterZone__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, short jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CanEnterZone__SWIG_1")]
  public static extern bool Client_CanEnterZone__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CanEnterZone__SWIG_2")]
  public static extern bool Client_CanEnterZone__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetAggroCount")]
  public static extern uint Client_GetAggroCount(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IncrementAggroCount__SWIG_0")]
  public static extern void Client_IncrementAggroCount__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IncrementAggroCount__SWIG_1")]
  public static extern void Client_IncrementAggroCount__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_DecrementAggroCount")]
  public static extern void Client_DecrementAggroCount(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendPVPStats")]
  public static extern void Client_SendPVPStats(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendDisciplineTimers")]
  public static extern void Client_SendDisciplineTimers(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendRespawnBinds")]
  public static extern void Client_SendRespawnBinds(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetLDoNWins")]
  public static extern uint Client_GetLDoNWins(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetLDoNLosses")]
  public static extern uint Client_GetLDoNLosses(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetLDoNWinsTheme")]
  public static extern uint Client_GetLDoNWinsTheme(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetLDoNLossesTheme")]
  public static extern uint Client_GetLDoNLossesTheme(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetLDoNPointsTheme")]
  public static extern uint Client_GetLDoNPointsTheme(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UpdateLDoNWinLoss__SWIG_0")]
  public static extern void Client_UpdateLDoNWinLoss__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, bool jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UpdateLDoNWinLoss__SWIG_1")]
  public static extern void Client_UpdateLDoNWinLoss__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UpdateLDoNWinLoss__SWIG_2")]
  public static extern void Client_UpdateLDoNWinLoss__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CheckLDoNHail")]
  public static extern void Client_CheckLDoNHail(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CheckEmoteHail")]
  public static extern void Client_CheckEmoteHail(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_HandleLDoNOpen")]
  public static extern void Client_HandleLDoNOpen(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_HandleLDoNSenseTraps")]
  public static extern void Client_HandleLDoNSenseTraps(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, ushort jarg3, byte jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_HandleLDoNDisarm")]
  public static extern void Client_HandleLDoNDisarm(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, ushort jarg3, byte jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_HandleLDoNPickLock")]
  public static extern void Client_HandleLDoNPickLock(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, ushort jarg3, byte jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_LDoNChest_SkillCheck")]
  public static extern int Client_LDoNChest_SkillCheck(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MarkSingleCompassLoc__SWIG_0")]
  public static extern void Client_MarkSingleCompassLoc__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, float jarg4, byte jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MarkSingleCompassLoc__SWIG_1")]
  public static extern void Client_MarkSingleCompassLoc__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, float jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendCrossZoneMessage")]
  public static extern void Client_SendCrossZoneMessage(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, ushort jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendCrossZoneMessageString__SWIG_0")]
  public static extern void Client_SendCrossZoneMessageString__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, ushort jarg3, uint jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendCrossZoneMessageString__SWIG_1")]
  public static extern void Client_SendCrossZoneMessageString__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, ushort jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AddExpeditionLockout__SWIG_0")]
  public static extern void Client_AddExpeditionLockout__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AddExpeditionLockout__SWIG_1")]
  public static extern void Client_AddExpeditionLockout__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AddExpeditionLockoutDuration__SWIG_0")]
  public static extern void Client_AddExpeditionLockoutDuration__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, bool jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AddExpeditionLockoutDuration__SWIG_1")]
  public static extern void Client_AddExpeditionLockoutDuration__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AddExpeditionLockoutDuration__SWIG_2")]
  public static extern void Client_AddExpeditionLockoutDuration__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AddNewExpeditionLockout__SWIG_0")]
  public static extern void Client_AddNewExpeditionLockout__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, uint jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AddNewExpeditionLockout__SWIG_1")]
  public static extern void Client_AddNewExpeditionLockout__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CreateExpedition__SWIG_0")]
  public static extern global::System.IntPtr Client_CreateExpedition__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CreateExpedition__SWIG_1")]
  public static extern global::System.IntPtr Client_CreateExpedition__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CreateExpedition__SWIG_2")]
  public static extern global::System.IntPtr Client_CreateExpedition__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, uint jarg6, uint jarg7, bool jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CreateExpedition__SWIG_3")]
  public static extern global::System.IntPtr Client_CreateExpedition__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, uint jarg6, uint jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CreateExpeditionFromTemplate")]
  public static extern global::System.IntPtr Client_CreateExpeditionFromTemplate(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetExpedition")]
  public static extern global::System.IntPtr Client_GetExpedition(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetExpeditionID")]
  public static extern uint Client_GetExpeditionID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetExpeditionLockout__SWIG_0")]
  public static extern global::System.IntPtr Client_GetExpeditionLockout__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetExpeditionLockout__SWIG_1")]
  public static extern global::System.IntPtr Client_GetExpeditionLockout__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetExpeditionLockouts__SWIG_0")]
  public static extern global::System.IntPtr Client_GetExpeditionLockouts__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetExpeditionLockouts__SWIG_1")]
  public static extern global::System.IntPtr Client_GetExpeditionLockouts__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetExpeditionLockouts__SWIG_2")]
  public static extern global::System.IntPtr Client_GetExpeditionLockouts__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetPendingExpeditionInviteID")]
  public static extern uint Client_GetPendingExpeditionInviteID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_HasExpeditionLockout__SWIG_0")]
  public static extern bool Client_HasExpeditionLockout__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_HasExpeditionLockout__SWIG_1")]
  public static extern bool Client_HasExpeditionLockout__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsInExpedition")]
  public static extern bool Client_IsInExpedition(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_RemoveAllExpeditionLockouts__SWIG_0")]
  public static extern void Client_RemoveAllExpeditionLockouts__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_RemoveAllExpeditionLockouts__SWIG_1")]
  public static extern void Client_RemoveAllExpeditionLockouts__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_RemoveExpeditionLockout__SWIG_0")]
  public static extern void Client_RemoveExpeditionLockout__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_RemoveExpeditionLockout__SWIG_1")]
  public static extern void Client_RemoveExpeditionLockout__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_RequestPendingExpeditionInvite")]
  public static extern void Client_RequestPendingExpeditionInvite(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendExpeditionLockoutTimers")]
  public static extern void Client_SendExpeditionLockoutTimers(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetExpeditionID")]
  public static extern void Client_SetExpeditionID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetPendingExpeditionInvite")]
  public static extern void Client_SetPendingExpeditionInvite(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_DzListTimers")]
  public static extern void Client_DzListTimers(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetDzRemovalTimer")]
  public static extern void Client_SetDzRemovalTimer(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendDzCompassUpdate")]
  public static extern void Client_SendDzCompassUpdate(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GoToDzSafeReturnOrBind")]
  public static extern void Client_GoToDzSafeReturnOrBind(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MovePCDynamicZone__SWIG_0")]
  public static extern void Client_MovePCDynamicZone__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, int jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MovePCDynamicZone__SWIG_1")]
  public static extern void Client_MovePCDynamicZone__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MovePCDynamicZone__SWIG_2")]
  public static extern void Client_MovePCDynamicZone__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MovePCDynamicZone__SWIG_3")]
  public static extern void Client_MovePCDynamicZone__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MovePCDynamicZone__SWIG_4")]
  public static extern void Client_MovePCDynamicZone__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MovePCDynamicZone__SWIG_5")]
  public static extern void Client_MovePCDynamicZone__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_TryMovePCDynamicZoneSwitch")]
  public static extern bool Client_TryMovePCDynamicZoneSwitch(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetDynamicZones__SWIG_0")]
  public static extern global::System.IntPtr Client_GetDynamicZones__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetDynamicZones__SWIG_1")]
  public static extern global::System.IntPtr Client_GetDynamicZones__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetDynamicZones__SWIG_2")]
  public static extern global::System.IntPtr Client_GetDynamicZones__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CreateDzSwitchListPacket")]
  public static extern global::System.IntPtr Client_CreateDzSwitchListPacket(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CreateCompassPacket")]
  public static extern global::System.IntPtr Client_CreateCompassPacket(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AddDynamicZoneID")]
  public static extern void Client_AddDynamicZoneID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_RemoveDynamicZoneID")]
  public static extern void Client_RemoveDynamicZoneID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendDynamicZoneUpdates")]
  public static extern void Client_SendDynamicZoneUpdates(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetDynamicZoneMemberStatus")]
  public static extern void Client_SetDynamicZoneMemberStatus(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CreateTaskDynamicZone")]
  public static extern void Client_CreateTaskDynamicZone(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CalcItemScale__SWIG_0")]
  public static extern void Client_CalcItemScale__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CalcItemScale__SWIG_1")]
  public static extern bool Client_CalcItemScale__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_DoItemEnterZone__SWIG_0")]
  public static extern void Client_DoItemEnterZone__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_DoItemEnterZone__SWIG_1")]
  public static extern bool Client_DoItemEnterZone__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SummonAndRezzAllCorpses")]
  public static extern void Client_SummonAndRezzAllCorpses(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SummonAllCorpses")]
  public static extern void Client_SummonAllCorpses(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_DepopAllCorpses")]
  public static extern void Client_DepopAllCorpses(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_DepopPlayerCorpse")]
  public static extern void Client_DepopPlayerCorpse(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_BuryPlayerCorpses")]
  public static extern void Client_BuryPlayerCorpses(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetCorpseCount")]
  public static extern long Client_GetCorpseCount(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetCorpseID")]
  public static extern uint Client_GetCorpseID(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetCorpseItemAt")]
  public static extern uint Client_GetCorpseItemAt(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SuspendMinion")]
  public static extern void Client_SuspendMinion(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_Doppelganger")]
  public static extern void Client_Doppelganger(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, string jarg4, int jarg5, int jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_NotifyNewTitlesAvailable")]
  public static extern void Client_NotifyNewTitlesAvailable(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_Signal")]
  public static extern void Client_Signal(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendPayload__SWIG_0")]
  public static extern void Client_SendPayload__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendPayload__SWIG_1")]
  public static extern void Client_SendPayload__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBindSightTarget")]
  public static extern global::System.IntPtr Client_GetBindSightTarget(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetBindSightTarget")]
  public static extern void Client_SetBindSightTarget(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBoatID")]
  public static extern ushort Client_GetBoatID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendRewards")]
  public static extern void Client_SendRewards(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_TryReward")]
  public static extern bool Client_TryReward(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetQGlobals")]
  public static extern global::System.IntPtr Client_GetQGlobals(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CreateQGlobals")]
  public static extern global::System.IntPtr Client_CreateQGlobals(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GuildBankAck")]
  public static extern void Client_GuildBankAck(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GuildBankDepositAck")]
  public static extern void Client_GuildBankDepositAck(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2, sbyte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsGuildBanker")]
  public static extern bool Client_IsGuildBanker(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetGuildBanker")]
  public static extern void Client_SetGuildBanker(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ClearGuildBank")]
  public static extern void Client_ClearGuildBank(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendGroupCreatePacket")]
  public static extern void Client_SendGroupCreatePacket(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendGroupLeaderChangePacket")]
  public static extern void Client_SendGroupLeaderChangePacket(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendGroupJoinAcknowledge")]
  public static extern void Client_SendGroupJoinAcknowledge(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_DoTracking")]
  public static extern void Client_DoTracking(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsTracking")]
  public static extern bool Client_IsTracking(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetPendingGuildInvitation")]
  public static extern void Client_SetPendingGuildInvitation(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetPendingGuildInvitation")]
  public static extern bool Client_GetPendingGuildInvitation(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_LocateCorpse")]
  public static extern void Client_LocateCorpse(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendTargetCommand")]
  public static extern void Client_SendTargetCommand(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MoveItemToInventory__SWIG_0")]
  public static extern bool Client_MoveItemToInventory__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MoveItemToInventory__SWIG_1")]
  public static extern bool Client_MoveItemToInventory__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_HandleRespawnFromHover")]
  public static extern void Client_HandleRespawnFromHover(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsHoveringForRespawn")]
  public static extern bool Client_IsHoveringForRespawn(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_respawn_options_set")]
  public static extern void Client_respawn_options_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_respawn_options_get")]
  public static extern global::System.IntPtr Client_respawn_options_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AddRespawnOption__SWIG_0")]
  public static extern void Client_AddRespawnOption__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, ushort jarg4, float jarg5, float jarg6, float jarg7, float jarg8, bool jarg9, sbyte jarg10);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AddRespawnOption__SWIG_1")]
  public static extern void Client_AddRespawnOption__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, ushort jarg4, float jarg5, float jarg6, float jarg7, float jarg8, bool jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AddRespawnOption__SWIG_2")]
  public static extern void Client_AddRespawnOption__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, ushort jarg4, float jarg5, float jarg6, float jarg7, float jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AddRespawnOption__SWIG_3")]
  public static extern void Client_AddRespawnOption__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, ushort jarg4, float jarg5, float jarg6, float jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_RemoveRespawnOption__SWIG_0")]
  public static extern bool Client_RemoveRespawnOption__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_RemoveRespawnOption__SWIG_1")]
  public static extern bool Client_RemoveRespawnOption__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ClearRespawnOptions")]
  public static extern void Client_ClearRespawnOptions(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetPendingRezzData")]
  public static extern void Client_SetPendingRezzData(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, uint jarg3, ushort jarg4, string jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsRezzPending")]
  public static extern bool Client_IsRezzPending(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ClearHover")]
  public static extern void Client_ClearHover(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsBlockedBuff")]
  public static extern bool Client_IsBlockedBuff(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsBlockedPetBuff")]
  public static extern bool Client_IsBlockedPetBuff(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsDraggingCorpse__SWIG_0")]
  public static extern bool Client_IsDraggingCorpse__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsDraggingCorpse__SWIG_1")]
  public static extern bool Client_IsDraggingCorpse__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_DragCorpses")]
  public static extern void Client_DragCorpses(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ClearDraggedCorpses")]
  public static extern void Client_ClearDraggedCorpses(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ConsentCorpses__SWIG_0")]
  public static extern void Client_ConsentCorpses__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ConsentCorpses__SWIG_1")]
  public static extern void Client_ConsentCorpses__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendAltCurrencies")]
  public static extern void Client_SendAltCurrencies(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetAlternateCurrencyValue")]
  public static extern void Client_SetAlternateCurrencyValue(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AddAlternateCurrencyValue__SWIG_0")]
  public static extern int Client_AddAlternateCurrencyValue__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, int jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AddAlternateCurrencyValue__SWIG_1")]
  public static extern int Client_AddAlternateCurrencyValue__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendAlternateCurrencyValues")]
  public static extern void Client_SendAlternateCurrencyValues(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendAlternateCurrencyValue__SWIG_0")]
  public static extern void Client_SendAlternateCurrencyValue__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendAlternateCurrencyValue__SWIG_1")]
  public static extern void Client_SendAlternateCurrencyValue__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetAlternateCurrencyValue")]
  public static extern uint Client_GetAlternateCurrencyValue(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ProcessAlternateCurrencyQueue")]
  public static extern void Client_ProcessAlternateCurrencyQueue(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_OpenLFGuildWindow")]
  public static extern void Client_OpenLFGuildWindow(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_HandleLFGuildResponse")]
  public static extern void Client_HandleLFGuildResponse(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendLFGuildStatus")]
  public static extern void Client_SendLFGuildStatus(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendGuildLFGuildStatus")]
  public static extern void Client_SendGuildLFGuildStatus(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_XTargettingAvailable")]
  public static extern bool Client_XTargettingAvailable(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetMaxXTargets")]
  public static extern byte Client_GetMaxXTargets(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetMaxXTargets")]
  public static extern void Client_SetMaxXTargets(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsXTarget")]
  public static extern bool Client_IsXTarget(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsClientXTarget")]
  public static extern bool Client_IsClientXTarget(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UpdateClientXTarget")]
  public static extern void Client_UpdateClientXTarget(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UpdateXTargetType__SWIG_0")]
  public static extern void Client_UpdateXTargetType__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UpdateXTargetType__SWIG_1")]
  public static extern void Client_UpdateXTargetType__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AddAutoXTarget__SWIG_0")]
  public static extern void Client_AddAutoXTarget__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AddAutoXTarget__SWIG_1")]
  public static extern void Client_AddAutoXTarget__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_RemoveXTarget")]
  public static extern void Client_RemoveXTarget(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendXTargetPacket")]
  public static extern void Client_SendXTargetPacket(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendXTargetUpdates")]
  public static extern void Client_SendXTargetUpdates(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_RemoveGroupXTargets")]
  public static extern void Client_RemoveGroupXTargets(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_RemoveAutoXTargets")]
  public static extern void Client_RemoveAutoXTargets(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ShowXTargets")]
  public static extern void Client_ShowXTargets(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetXTargetAutoMgr")]
  public static extern global::System.IntPtr Client_GetXTargetAutoMgr(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetXTargetAutoMgr")]
  public static extern void Client_SetXTargetAutoMgr(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetDirtyAutoHaters")]
  public static extern void Client_SetDirtyAutoHaters(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ProcessXTargetAutoHaters")]
  public static extern void Client_ProcessXTargetAutoHaters(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_JoinGroupXTargets")]
  public static extern void Client_JoinGroupXTargets(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_LeaveGroupXTargets")]
  public static extern void Client_LeaveGroupXTargets(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_LeaveRaidXTargets")]
  public static extern void Client_LeaveRaidXTargets(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ClearXTargets")]
  public static extern void Client_ClearXTargets(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GroupFollow")]
  public static extern bool Client_GroupFollow(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetRunMode")]
  public static extern bool Client_GetRunMode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CheckWaterAutoFireLoS")]
  public static extern bool Client_CheckWaterAutoFireLoS(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendReloadCommandMessages")]
  public static extern void Client_SendReloadCommandMessages(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendItemRecastTimer__SWIG_0")]
  public static extern void Client_SendItemRecastTimer__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, uint jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendItemRecastTimer__SWIG_1")]
  public static extern void Client_SendItemRecastTimer__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendItemRecastTimer__SWIG_2")]
  public static extern void Client_SendItemRecastTimer__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetItemRecastTimer")]
  public static extern void Client_SetItemRecastTimer(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_DeleteItemRecastTimer")]
  public static extern void Client_DeleteItemRecastTimer(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_HasItemRecastTimer")]
  public static extern bool Client_HasItemRecastTimer(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_AggroMeterAvailable")]
  public static extern bool Client_AggroMeterAvailable(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetAggroMeterLock")]
  public static extern void Client_SetAggroMeterLock(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ProcessAggroMeter")]
  public static extern void Client_ProcessAggroMeter(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_InitializeMercInfo")]
  public static extern void Client_InitializeMercInfo(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CheckCanSpawnMerc")]
  public static extern bool Client_CheckCanSpawnMerc(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CheckCanHireMerc")]
  public static extern bool Client_CheckCanHireMerc(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CheckCanRetainMerc")]
  public static extern bool Client_CheckCanRetainMerc(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CheckCanUnsuspendMerc")]
  public static extern bool Client_CheckCanUnsuspendMerc(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_DismissMerc")]
  public static extern bool Client_DismissMerc(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_MercOnlyOrNoGroup")]
  public static extern bool Client_MercOnlyOrNoGroup(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetMercenaryID")]
  public static extern uint Client_GetMercenaryID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetMercSlot")]
  public static extern byte Client_GetMercSlot(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetMercID")]
  public static extern void Client_SetMercID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetMercSlot")]
  public static extern void Client_SetMercSlot(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetMerc")]
  public static extern global::System.IntPtr Client_GetMerc(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetMercInfo__SWIG_0")]
  public static extern global::System.IntPtr Client_GetMercInfo__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetMercInfo__SWIG_1")]
  public static extern global::System.IntPtr Client_GetMercInfo__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetNumberOfMercenaries")]
  public static extern byte Client_GetNumberOfMercenaries(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetMerc")]
  public static extern void Client_SetMerc(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendMercResponsePackets")]
  public static extern void Client_SendMercResponsePackets(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendMercMerchantResponsePacket")]
  public static extern void Client_SendMercMerchantResponsePacket(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendMercenaryUnknownPacket")]
  public static extern void Client_SendMercenaryUnknownPacket(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendMercenaryUnsuspendPacket")]
  public static extern void Client_SendMercenaryUnsuspendPacket(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendMercTimer__SWIG_0")]
  public static extern void Client_SendMercTimer__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendMercTimer__SWIG_1")]
  public static extern void Client_SendMercTimer__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendMercTimerPacket__SWIG_0")]
  public static extern void Client_SendMercTimerPacket__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendMercTimerPacket__SWIG_1")]
  public static extern void Client_SendMercTimerPacket__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, int jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendMercTimerPacket__SWIG_2")]
  public static extern void Client_SendMercTimerPacket__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendMercSuspendResponsePacket")]
  public static extern void Client_SendMercSuspendResponsePacket(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendMercAssignPacket")]
  public static extern void Client_SendMercAssignPacket(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendMercPersonalInfo")]
  public static extern void Client_SendMercPersonalInfo(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendClearMercInfo")]
  public static extern void Client_SendClearMercInfo(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SuspendMercCommand")]
  public static extern void Client_SuspendMercCommand(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SpawnMercOnZone")]
  public static extern void Client_SpawnMercOnZone(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SpawnMerc")]
  public static extern void Client_SpawnMerc(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UpdateMercTimer")]
  public static extern void Client_UpdateMercTimer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UpdateMercLevel")]
  public static extern void Client_UpdateMercLevel(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CheckMercSuspendTimer")]
  public static extern void Client_CheckMercSuspendTimer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetMercTimer")]
  public static extern global::System.IntPtr Client_GetMercTimer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetPickLockTimer")]
  public static extern global::System.IntPtr Client_GetPickLockTimer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendWebLink")]
  public static extern void Client_SendWebLink(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendMarqueeMessage__SWIG_0")]
  public static extern void Client_SendMarqueeMessage__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendMarqueeMessage__SWIG_1")]
  public static extern void Client_SendMarqueeMessage__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendMarqueeMessage__SWIG_2")]
  public static extern void Client_SendMarqueeMessage__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, uint jarg5, uint jarg6, global::System.Runtime.InteropServices.HandleRef jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendSpellAnim")]
  public static extern void Client_SendSpellAnim(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, ushort jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_DuplicateLoreMessage")]
  public static extern void Client_DuplicateLoreMessage(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GarbleMessage")]
  public static extern void Client_GarbleMessage(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, byte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ItemTimerCheck")]
  public static extern void Client_ItemTimerCheck(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_TryItemTimer")]
  public static extern void Client_TryItemTimer(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendItemScale")]
  public static extern void Client_SendItemScale(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetActSTR")]
  public static extern int Client_GetActSTR(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetActSTA")]
  public static extern int Client_GetActSTA(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetActDEX")]
  public static extern int Client_GetActDEX(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetActAGI")]
  public static extern int Client_GetActAGI(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetActINT")]
  public static extern int Client_GetActINT(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetActWIS")]
  public static extern int Client_GetActWIS(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetActCHA")]
  public static extern int Client_GetActCHA(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_LoadAccountFlags")]
  public static extern void Client_LoadAccountFlags(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ClearAccountFlag")]
  public static extern void Client_ClearAccountFlag(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetAccountFlag")]
  public static extern void Client_SetAccountFlag(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetAccountFlag")]
  public static extern global::System.IntPtr Client_GetAccountFlag(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetAccountFlags")]
  public static extern global::System.IntPtr Client_GetAccountFlags(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetGMStatus")]
  public static extern void Client_SetGMStatus(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_Consume")]
  public static extern void Client_Consume(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, byte jarg3, short jarg4, bool jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_PlayMP3")]
  public static extern void Client_PlayMP3(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ExpeditionSay")]
  public static extern void Client_ExpeditionSay(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetEnvironmentDamageModifier")]
  public static extern int Client_GetEnvironmentDamageModifier(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetEnvironmentDamageModifier")]
  public static extern void Client_SetEnvironmentDamageModifier(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetInvulnerableEnvironmentDamage")]
  public static extern bool Client_GetInvulnerableEnvironmentDamage(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetInvulnerableEnvironmentDamage")]
  public static extern void Client_SetInvulnerableEnvironmentDamage(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetIntoxication")]
  public static extern void Client_SetIntoxication(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ApplyWeaponsStance")]
  public static extern void Client_ApplyWeaponsStance(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_TogglePassiveAlternativeAdvancement")]
  public static extern void Client_TogglePassiveAlternativeAdvancement(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_UseTogglePassiveHotkey")]
  public static extern bool Client_UseTogglePassiveHotkey(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_TogglePurchaseAlternativeAdvancementRank")]
  public static extern void Client_TogglePurchaseAlternativeAdvancementRank(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ResetAlternateAdvancementRank")]
  public static extern void Client_ResetAlternateAdvancementRank(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsEffectinAlternateAdvancementRankEffects")]
  public static extern bool Client_IsEffectinAlternateAdvancementRankEffects(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_TripInterrogateInvState")]
  public static extern void Client_TripInterrogateInvState(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetInterrogateInvState")]
  public static extern bool Client_GetInterrogateInvState(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_InterrogateInventory__SWIG_0")]
  public static extern bool Client_InterrogateInventory__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, bool jarg4, bool jarg5, global::System.Runtime.InteropServices.HandleRef jarg6, bool jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_InterrogateInventory__SWIG_1")]
  public static extern bool Client_InterrogateInventory__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, bool jarg4, bool jarg5, global::System.Runtime.InteropServices.HandleRef jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetNextInvSnapshot")]
  public static extern void Client_SetNextInvSnapshot(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetLastInvSnapshotTime")]
  public static extern uint Client_GetLastInvSnapshotTime(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetNextInvSnapshotTime")]
  public static extern uint Client_GetNextInvSnapshotTime(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_QuestReward__SWIG_0")]
  public static extern void Client_QuestReward__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4, uint jarg5, uint jarg6, uint jarg7, uint jarg8, bool jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_QuestReward__SWIG_1")]
  public static extern void Client_QuestReward__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4, uint jarg5, uint jarg6, uint jarg7, uint jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_QuestReward__SWIG_2")]
  public static extern void Client_QuestReward__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4, uint jarg5, uint jarg6, uint jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_QuestReward__SWIG_3")]
  public static extern void Client_QuestReward__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4, uint jarg5, uint jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_QuestReward__SWIG_4")]
  public static extern void Client_QuestReward__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4, uint jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_QuestReward__SWIG_5")]
  public static extern void Client_QuestReward__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_QuestReward__SWIG_6")]
  public static extern void Client_QuestReward__SWIG_6(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_QuestReward__SWIG_7")]
  public static extern void Client_QuestReward__SWIG_7(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_QuestReward__SWIG_8")]
  public static extern void Client_QuestReward__SWIG_8(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_QuestReward__SWIG_9")]
  public static extern void Client_QuestReward__SWIG_9(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CashReward")]
  public static extern void Client_CashReward(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, uint jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_RewardFaction")]
  public static extern void Client_RewardFaction(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ResetHPUpdateTimer")]
  public static extern void Client_ResetHPUpdateTimer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SendHPUpdateMarquee")]
  public static extern void Client_SendHPUpdateMarquee(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CheckRegionTypeChanges")]
  public static extern void Client_CheckRegionTypeChanges(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetLastRegion")]
  public static extern int Client_GetLastRegion(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CalcATK")]
  public static extern int Client_CalcATK(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_trapid_set")]
  public static extern void Client_trapid_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_trapid_get")]
  public static extern uint Client_trapid_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetLastPositionBeforeBulkUpdate")]
  public static extern void Client_SetLastPositionBeforeBulkUpdate(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetLastPositionBeforeBulkUpdate")]
  public static extern global::System.IntPtr Client_GetLastPositionBeforeBulkUpdate(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_p_raid_instance_set")]
  public static extern void Client_p_raid_instance_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_p_raid_instance_get")]
  public static extern global::System.IntPtr Client_p_raid_instance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_ShowDevToolsMenu")]
  public static extern void Client_ShowDevToolsMenu(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_cheat_manager_set")]
  public static extern void Client_cheat_manager_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_cheat_manager_get")]
  public static extern global::System.IntPtr Client_cheat_manager_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_m_list_task_timers_rate_limit_set")]
  public static extern void Client_m_list_task_timers_rate_limit_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_m_list_task_timers_rate_limit_get")]
  public static extern global::System.IntPtr Client_m_list_task_timers_rate_limit_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetGuildPublicNote")]
  public static extern global::System.IntPtr Client_GetGuildPublicNote(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetPlayerEvent")]
  public static extern global::System.IntPtr Client_GetPlayerEvent(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_RecordKilledNPCEvent")]
  public static extern void Client_RecordKilledNPCEvent(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetEXPForLevel")]
  public static extern uint Client_GetEXPForLevel(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetDoorToolEntityId")]
  public static extern ushort Client_GetDoorToolEntityId(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetDoorToolEntityId")]
  public static extern void Client_SetDoorToolEntityId(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetObjectToolEntityId")]
  public static extern ushort Client_GetObjectToolEntityId(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetObjectToolEntityId")]
  public static extern void Client_SetObjectToolEntityId(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_IsLockSavePosition")]
  public static extern bool Client_IsLockSavePosition(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetLockSavePosition")]
  public static extern void Client_SetLockSavePosition(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetSharedTaskId")]
  public static extern void Client_SetSharedTaskId(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetSharedTaskId")]
  public static extern long Client_GetSharedTaskId(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_XTargets_set")]
  public static extern void Client_XTargets_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_XTargets_get")]
  public static extern global::System.IntPtr Client_XTargets_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBotOption")]
  public static extern bool Client_GetBotOption(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetBotOption__SWIG_0")]
  public static extern void Client_SetBotOption__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetBotOption__SWIG_1")]
  public static extern void Client_SetBotOption__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBotPulling")]
  public static extern bool Client_GetBotPulling(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetBotPulling__SWIG_0")]
  public static extern void Client_SetBotPulling__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetBotPulling__SWIG_1")]
  public static extern void Client_SetBotPulling__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBotPrecombat")]
  public static extern bool Client_GetBotPrecombat(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetBotPrecombat__SWIG_0")]
  public static extern void Client_SetBotPrecombat__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetBotPrecombat__SWIG_1")]
  public static extern void Client_SetBotPrecombat__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBotRequiredLevel__SWIG_0")]
  public static extern int Client_GetBotRequiredLevel__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBotRequiredLevel__SWIG_1")]
  public static extern int Client_GetBotRequiredLevel__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBotCreationLimit__SWIG_0")]
  public static extern uint Client_GetBotCreationLimit__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBotCreationLimit__SWIG_1")]
  public static extern uint Client_GetBotCreationLimit__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBotSpawnLimit__SWIG_0")]
  public static extern int Client_GetBotSpawnLimit__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetBotSpawnLimit__SWIG_1")]
  public static extern int Client_GetBotSpawnLimit__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetBotCreationLimit__SWIG_0")]
  public static extern void Client_SetBotCreationLimit__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, byte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetBotCreationLimit__SWIG_1")]
  public static extern void Client_SetBotCreationLimit__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetBotRequiredLevel__SWIG_0")]
  public static extern void Client_SetBotRequiredLevel__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, byte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetBotRequiredLevel__SWIG_1")]
  public static extern void Client_SetBotRequiredLevel__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetBotSpawnLimit__SWIG_0")]
  public static extern void Client_SetBotSpawnLimit__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, byte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SetBotSpawnLimit__SWIG_1")]
  public static extern void Client_SetBotSpawnLimit__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CampAllBots__SWIG_0")]
  public static extern void Client_CampAllBots__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_CampAllBots__SWIG_1")]
  public static extern void Client_CampAllBots__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SpawnRaidBotsOnConnect")]
  public static extern void Client_SpawnRaidBotsOnConnect(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetMailKeyFull")]
  public static extern global::System.IntPtr Client_GetMailKeyFull(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_GetMailKey")]
  public static extern global::System.IntPtr Client_GetMailKey(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MAX_LOOTERS_get")]
  public static extern int MAX_LOOTERS_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_SendEndLootErrorPacket")]
  public static extern void Corpse_SendEndLootErrorPacket(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_SendLootReqErrorPacket__SWIG_0")]
  public static extern void Corpse_SendLootReqErrorPacket__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_SendLootReqErrorPacket__SWIG_1")]
  public static extern void Corpse_SendLootReqErrorPacket__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Corpse__SWIG_0")]
  public static extern global::System.IntPtr new_Corpse__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, uint jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Corpse__SWIG_1")]
  public static extern global::System.IntPtr new_Corpse__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Corpse__SWIG_2")]
  public static extern global::System.IntPtr new_Corpse__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Corpse__SWIG_3")]
  public static extern global::System.IntPtr new_Corpse__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Corpse__SWIG_4")]
  public static extern global::System.IntPtr new_Corpse__SWIG_4(uint jarg1, uint jarg2, string jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, uint jarg5, uint jarg6, uint jarg7, uint jarg8, global::System.Runtime.InteropServices.HandleRef jarg9, float jarg10, byte jarg11, ushort jarg12, byte jarg13, byte jarg14, byte jarg15, byte jarg16, byte jarg17, uint jarg18, uint jarg19, int jarg20, bool jarg21, uint jarg22, bool jarg23);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Corpse__SWIG_5")]
  public static extern global::System.IntPtr new_Corpse__SWIG_5(uint jarg1, uint jarg2, string jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, uint jarg5, uint jarg6, uint jarg7, uint jarg8, global::System.Runtime.InteropServices.HandleRef jarg9, float jarg10, byte jarg11, ushort jarg12, byte jarg13, byte jarg14, byte jarg15, byte jarg16, byte jarg17, uint jarg18, uint jarg19, int jarg20, bool jarg21, uint jarg22);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_Corpse")]
  public static extern void delete_Corpse(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_Death__SWIG_0")]
  public static extern bool Corpse_Death__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, int jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_Death__SWIG_1")]
  public static extern bool Corpse_Death__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_Damage__SWIG_0")]
  public static extern void Corpse_Damage__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, bool jarg6, sbyte jarg7, bool jarg8, int jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_Damage__SWIG_1")]
  public static extern void Corpse_Damage__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, bool jarg6, sbyte jarg7, bool jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_Damage__SWIG_2")]
  public static extern void Corpse_Damage__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, bool jarg6, sbyte jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_Damage__SWIG_3")]
  public static extern void Corpse_Damage__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, bool jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_Damage__SWIG_4")]
  public static extern void Corpse_Damage__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, long jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_Attack__SWIG_0")]
  public static extern bool Corpse_Attack__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, bool jarg4, bool jarg5, bool jarg6, global::System.Runtime.InteropServices.HandleRef jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_Attack__SWIG_1")]
  public static extern bool Corpse_Attack__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, bool jarg4, bool jarg5, bool jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_Attack__SWIG_2")]
  public static extern bool Corpse_Attack__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, bool jarg4, bool jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_Attack__SWIG_3")]
  public static extern bool Corpse_Attack__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_Attack__SWIG_4")]
  public static extern bool Corpse_Attack__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_Attack__SWIG_5")]
  public static extern bool Corpse_Attack__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_HasRaid")]
  public static extern bool Corpse_HasRaid(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_HasGroup")]
  public static extern bool Corpse_HasGroup(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_GetRaid")]
  public static extern global::System.IntPtr Corpse_GetRaid(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_GetGroup")]
  public static extern global::System.IntPtr Corpse_GetGroup(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_GetCorpseDBID")]
  public static extern uint Corpse_GetCorpseDBID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_GetOwnerName")]
  public static extern string Corpse_GetOwnerName(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_IsEmpty")]
  public static extern bool Corpse_IsEmpty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_IsCorpse")]
  public static extern bool Corpse_IsCorpse(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_IsPlayerCorpse")]
  public static extern bool Corpse_IsPlayerCorpse(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_IsNPCCorpse")]
  public static extern bool Corpse_IsNPCCorpse(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_IsBecomeNPCCorpse")]
  public static extern bool Corpse_IsBecomeNPCCorpse(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_DepopNPCCorpse")]
  public static extern void Corpse_DepopNPCCorpse(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_DepopPlayerCorpse")]
  public static extern void Corpse_DepopPlayerCorpse(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_Process")]
  public static extern bool Corpse_Process(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_Save")]
  public static extern bool Corpse_Save(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_GetCharID")]
  public static extern uint Corpse_GetCharID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_SetCharID")]
  public static extern uint Corpse_SetCharID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_GetDecayTime")]
  public static extern uint Corpse_GetDecayTime(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_GetRezTime")]
  public static extern uint Corpse_GetRezTime(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_ResetDecayTimer")]
  public static extern void Corpse_ResetDecayTimer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_SetDecayTimer")]
  public static extern void Corpse_SetDecayTimer(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_SetConsentGroupID")]
  public static extern void Corpse_SetConsentGroupID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_SetConsentRaidID")]
  public static extern void Corpse_SetConsentRaidID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_SetConsentGuildID")]
  public static extern void Corpse_SetConsentGuildID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_AddConsentName")]
  public static extern void Corpse_AddConsentName(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_RemoveConsentName")]
  public static extern void Corpse_RemoveConsentName(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_SendWorldSpawnPlayerCorpseInZone")]
  public static extern void Corpse_SendWorldSpawnPlayerCorpseInZone(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_MovePlayerCorpseToGraveyard")]
  public static extern bool Corpse_MovePlayerCorpseToGraveyard(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_MovePlayerCorpseToNonInstance")]
  public static extern bool Corpse_MovePlayerCorpseToNonInstance(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_Delete")]
  public static extern void Corpse_Delete(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_Bury")]
  public static extern void Corpse_Bury(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_CalcCorpseName")]
  public static extern void Corpse_CalcCorpseName(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_LoadPlayerCorpseDecayTime")]
  public static extern void Corpse_LoadPlayerCorpseDecayTime(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_GetWornItem")]
  public static extern uint Corpse_GetWornItem(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_GetItem__SWIG_0")]
  public static extern global::System.IntPtr Corpse_GetItem__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_GetItem__SWIG_1")]
  public static extern global::System.IntPtr Corpse_GetItem__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_SetPlayerKillItemID")]
  public static extern void Corpse_SetPlayerKillItemID(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_GetPlayerKillItem")]
  public static extern int Corpse_GetPlayerKillItem(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_RemoveItem__SWIG_0")]
  public static extern void Corpse_RemoveItem__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_RemoveItem__SWIG_1")]
  public static extern void Corpse_RemoveItem__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_RemoveItemByID__SWIG_0")]
  public static extern void Corpse_RemoveItemByID__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_RemoveItemByID__SWIG_1")]
  public static extern void Corpse_RemoveItemByID__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_AddItem__SWIG_0")]
  public static extern void Corpse_AddItem__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, ushort jarg3, short jarg4, uint jarg5, uint jarg6, uint jarg7, uint jarg8, uint jarg9, uint jarg10, bool jarg11, global::System.Runtime.InteropServices.HandleRef jarg12, uint jarg13, uint jarg14, uint jarg15);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_AddItem__SWIG_1")]
  public static extern void Corpse_AddItem__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, ushort jarg3, short jarg4, uint jarg5, uint jarg6, uint jarg7, uint jarg8, uint jarg9, uint jarg10, bool jarg11, global::System.Runtime.InteropServices.HandleRef jarg12, uint jarg13, uint jarg14);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_AddItem__SWIG_2")]
  public static extern void Corpse_AddItem__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, ushort jarg3, short jarg4, uint jarg5, uint jarg6, uint jarg7, uint jarg8, uint jarg9, uint jarg10, bool jarg11, global::System.Runtime.InteropServices.HandleRef jarg12, uint jarg13);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_AddItem__SWIG_3")]
  public static extern void Corpse_AddItem__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, ushort jarg3, short jarg4, uint jarg5, uint jarg6, uint jarg7, uint jarg8, uint jarg9, uint jarg10, bool jarg11, global::System.Runtime.InteropServices.HandleRef jarg12);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_AddItem__SWIG_4")]
  public static extern void Corpse_AddItem__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, ushort jarg3, short jarg4, uint jarg5, uint jarg6, uint jarg7, uint jarg8, uint jarg9, uint jarg10, bool jarg11);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_AddItem__SWIG_5")]
  public static extern void Corpse_AddItem__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, ushort jarg3, short jarg4, uint jarg5, uint jarg6, uint jarg7, uint jarg8, uint jarg9, uint jarg10);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_AddItem__SWIG_6")]
  public static extern void Corpse_AddItem__SWIG_6(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, ushort jarg3, short jarg4, uint jarg5, uint jarg6, uint jarg7, uint jarg8, uint jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_AddItem__SWIG_7")]
  public static extern void Corpse_AddItem__SWIG_7(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, ushort jarg3, short jarg4, uint jarg5, uint jarg6, uint jarg7, uint jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_AddItem__SWIG_8")]
  public static extern void Corpse_AddItem__SWIG_8(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, ushort jarg3, short jarg4, uint jarg5, uint jarg6, uint jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_AddItem__SWIG_9")]
  public static extern void Corpse_AddItem__SWIG_9(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, ushort jarg3, short jarg4, uint jarg5, uint jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_AddItem__SWIG_10")]
  public static extern void Corpse_AddItem__SWIG_10(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, ushort jarg3, short jarg4, uint jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_AddItem__SWIG_11")]
  public static extern void Corpse_AddItem__SWIG_11(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, ushort jarg3, short jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_AddItem__SWIG_12")]
  public static extern void Corpse_AddItem__SWIG_12(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, ushort jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_SetCash")]
  public static extern void Corpse_SetCash(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, uint jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_RemoveCash")]
  public static extern void Corpse_RemoveCash(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_GetCopper")]
  public static extern uint Corpse_GetCopper(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_GetSilver")]
  public static extern uint Corpse_GetSilver(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_GetGold")]
  public static extern uint Corpse_GetGold(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_GetPlatinum")]
  public static extern uint Corpse_GetPlatinum(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_IsRezzed__SWIG_0")]
  public static extern bool Corpse_IsRezzed__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_IsRezzed__SWIG_1")]
  public static extern void Corpse_IsRezzed__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_CastRezz")]
  public static extern void Corpse_CastRezz(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_CompleteResurrection__SWIG_0")]
  public static extern void Corpse_CompleteResurrection__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_CompleteResurrection__SWIG_1")]
  public static extern void Corpse_CompleteResurrection__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_IsRezzable")]
  public static extern bool Corpse_IsRezzable(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_SetRezTimer__SWIG_0")]
  public static extern void Corpse_SetRezTimer__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_SetRezTimer__SWIG_1")]
  public static extern void Corpse_SetRezTimer__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_QueryLoot")]
  public static extern void Corpse_QueryLoot(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_HasItem")]
  public static extern bool Corpse_HasItem(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_CountItem")]
  public static extern ushort Corpse_CountItem(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_GetItemIDBySlot")]
  public static extern uint Corpse_GetItemIDBySlot(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_GetFirstLootSlotByItemID")]
  public static extern ushort Corpse_GetFirstLootSlotByItemID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_GetLootList")]
  public static extern global::System.IntPtr Corpse_GetLootList(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_LootCorpseItem")]
  public static extern void Corpse_LootCorpseItem(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_EndLoot")]
  public static extern void Corpse_EndLoot(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_MakeLootRequestPackets")]
  public static extern void Corpse_MakeLootRequestPackets(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_AllowPlayerLoot")]
  public static extern void Corpse_AllowPlayerLoot(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, byte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_AddLooter")]
  public static extern void Corpse_AddLooter(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_CountItems")]
  public static extern uint Corpse_CountItems(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_CanPlayerLoot")]
  public static extern bool Corpse_CanPlayerLoot(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_Lock")]
  public static extern void Corpse_Lock(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_UnLock")]
  public static extern void Corpse_UnLock(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_IsLocked")]
  public static extern bool Corpse_IsLocked(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_ResetLooter")]
  public static extern void Corpse_ResetLooter(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_IsBeingLooted")]
  public static extern bool Corpse_IsBeingLooted(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_IsBeingLootedBy")]
  public static extern bool Corpse_IsBeingLootedBy(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_FillSpawnStruct")]
  public static extern void Corpse_FillSpawnStruct(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_Summon")]
  public static extern bool Corpse_Summon(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_Spawn")]
  public static extern void Corpse_Spawn(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_corpse_name_set")]
  public static extern void Corpse_corpse_name_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_corpse_name_get")]
  public static extern string Corpse_corpse_name_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_GetEquippedItemFromTextureSlot")]
  public static extern uint Corpse_GetEquippedItemFromTextureSlot(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_GetEquipmentColor")]
  public static extern uint Corpse_GetEquipmentColor(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_GetRezExp")]
  public static extern long Corpse_GetRezExp(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_GetGMRezExp")]
  public static extern long Corpse_GetGMRezExp(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_GetKilledBy")]
  public static extern byte Corpse_GetKilledBy(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_GetRemainingRezTime")]
  public static extern uint Corpse_GetRemainingRezTime(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_UpdateEquipmentLight")]
  public static extern void Corpse_UpdateEquipmentLight(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_CheckIsOwnerOnline")]
  public static extern void Corpse_CheckIsOwnerOnline(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_SetOwnerOnline")]
  public static extern void Corpse_SetOwnerOnline(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_GetOwnerOnline")]
  public static extern bool Corpse_GetOwnerOnline(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_LoadCharacterCorpse")]
  public static extern global::System.IntPtr Corpse_LoadCharacterCorpse(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_Doors")]
  public static extern void delete_Doors(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Doors__SWIG_0")]
  public static extern global::System.IntPtr new_Doors__SWIG_0(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, byte jarg3, ushort jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Doors__SWIG_1")]
  public static extern global::System.IntPtr new_Doors__SWIG_1(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, byte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Doors__SWIG_2")]
  public static extern global::System.IntPtr new_Doors__SWIG_2(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Doors__SWIG_3")]
  public static extern global::System.IntPtr new_Doors__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_GetDisableTimer")]
  public static extern bool Doors_GetDisableTimer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_IsDoor")]
  public static extern bool Doors_IsDoor(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_IsDoorOpen")]
  public static extern bool Doors_IsDoorOpen(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_Process")]
  public static extern bool Doors_Process(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_triggered_set")]
  public static extern void Doors_triggered_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_triggered_get")]
  public static extern bool Doors_triggered_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_GetDoorName")]
  public static extern string Doors_GetDoorName(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_GetPosition")]
  public static extern global::System.IntPtr Doors_GetPosition(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_GetDzSwitchID")]
  public static extern int Doors_GetDzSwitchID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_GetIncline")]
  public static extern int Doors_GetIncline(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_GetInvertState")]
  public static extern int Doors_GetInvertState(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_GetDoorID")]
  public static extern byte Doors_GetDoorID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_GetNoKeyring")]
  public static extern byte Doors_GetNoKeyring(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_GetOpenType")]
  public static extern byte Doors_GetOpenType(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_GetTriggerDoorID")]
  public static extern byte Doors_GetTriggerDoorID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_GetTriggerType")]
  public static extern byte Doors_GetTriggerType(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_IsLDoNDoor")]
  public static extern byte Doors_IsLDoNDoor(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_GetLockpick")]
  public static extern ushort Doors_GetLockpick(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_GetSize")]
  public static extern ushort Doors_GetSize(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_GetClientVersionMask")]
  public static extern uint Doors_GetClientVersionMask(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_GetDoorDBID")]
  public static extern uint Doors_GetDoorDBID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_GetDoorParam")]
  public static extern int Doors_GetDoorParam(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_GetEntityID")]
  public static extern uint Doors_GetEntityID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_GetGuildID")]
  public static extern uint Doors_GetGuildID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_GetKeyItem")]
  public static extern uint Doors_GetKeyItem(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_CreateDatabaseEntry")]
  public static extern void Doors_CreateDatabaseEntry(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_ForceClose__SWIG_0")]
  public static extern void Doors_ForceClose__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_ForceClose__SWIG_1")]
  public static extern void Doors_ForceClose__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_ForceOpen__SWIG_0")]
  public static extern void Doors_ForceOpen__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_ForceOpen__SWIG_1")]
  public static extern void Doors_ForceOpen__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_HandleClick")]
  public static extern void Doors_HandleClick(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, byte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_Open__SWIG_0")]
  public static extern void Doors_Open__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_Open__SWIG_1")]
  public static extern void Doors_Open__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_SetDisableTimer")]
  public static extern void Doors_SetDisableTimer(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_SetDoorName")]
  public static extern void Doors_SetDoorName(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_SetEntityID")]
  public static extern void Doors_SetEntityID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_SetIncline")]
  public static extern void Doors_SetIncline(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_SetInvertState")]
  public static extern void Doors_SetInvertState(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_SetKeyItem")]
  public static extern void Doors_SetKeyItem(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_SetLocation")]
  public static extern void Doors_SetLocation(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, float jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_SetLockpick")]
  public static extern void Doors_SetLockpick(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_SetNoKeyring")]
  public static extern void Doors_SetNoKeyring(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_SetOpenState")]
  public static extern void Doors_SetOpenState(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_SetOpenType")]
  public static extern void Doors_SetOpenType(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_SetPosition")]
  public static extern void Doors_SetPosition(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_SetSize")]
  public static extern void Doors_SetSize(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_ToggleState")]
  public static extern void Doors_ToggleState(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_GetX")]
  public static extern float Doors_GetX(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_GetY")]
  public static extern float Doors_GetY(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_GetZ")]
  public static extern float Doors_GetZ(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_GetHeading")]
  public static extern float Doors_GetHeading(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_HasDestinationZone")]
  public static extern bool Doors_HasDestinationZone(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_IsDestinationZoneSame")]
  public static extern bool Doors_IsDestinationZoneSame(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_IsDoorBlacklisted")]
  public static extern bool Doors_IsDoorBlacklisted(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MAX_MARKED_NPCS_get")]
  public static extern int MAX_MARKED_NPCS_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RoleAssist_get")]
  public static extern int RoleAssist_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RoleTank_get")]
  public static extern int RoleTank_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RolePuller_get")]
  public static extern int RolePuller_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_GroupIDConsumer__SWIG_0")]
  public static extern global::System.IntPtr new_GroupIDConsumer__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_GroupIDConsumer__SWIG_1")]
  public static extern global::System.IntPtr new_GroupIDConsumer__SWIG_1(uint jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_GroupIDConsumer_GetID")]
  public static extern uint GroupIDConsumer_GetID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_GroupIDConsumer")]
  public static extern void delete_GroupIDConsumer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Group__SWIG_0")]
  public static extern global::System.IntPtr new_Group__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Group__SWIG_1")]
  public static extern global::System.IntPtr new_Group__SWIG_1(uint jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_Group")]
  public static extern void delete_Group(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_AddMember__SWIG_0")]
  public static extern bool Group_AddMember__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, string jarg3, uint jarg4, bool jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_AddMember__SWIG_1")]
  public static extern bool Group_AddMember__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, string jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_AddMember__SWIG_2")]
  public static extern bool Group_AddMember__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_AddMember__SWIG_3")]
  public static extern bool Group_AddMember__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_AddMember__SWIG_4")]
  public static extern void Group_AddMember__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_SendUpdate")]
  public static extern void Group_SendUpdate(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_SendLeadershipAAUpdate")]
  public static extern void Group_SendLeadershipAAUpdate(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_DelMemberOOZ")]
  public static extern bool Group_DelMemberOOZ(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_DelMember__SWIG_0")]
  public static extern bool Group_DelMember__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_DelMember__SWIG_1")]
  public static extern bool Group_DelMember__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_DisbandGroup__SWIG_0")]
  public static extern void Group_DisbandGroup__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_DisbandGroup__SWIG_1")]
  public static extern void Group_DisbandGroup__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_GetMemberList__SWIG_0")]
  public static extern void Group_GetMemberList__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_GetMemberList__SWIG_1")]
  public static extern void Group_GetMemberList__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_GetClientList__SWIG_0")]
  public static extern void Group_GetClientList__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_GetClientList__SWIG_1")]
  public static extern void Group_GetClientList__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_GetBotList__SWIG_0")]
  public static extern void Group_GetBotList__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_GetBotList__SWIG_1")]
  public static extern void Group_GetBotList__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_IsGroupMember__SWIG_0")]
  public static extern bool Group_IsGroupMember__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_IsGroupMember__SWIG_1")]
  public static extern bool Group_IsGroupMember__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_Process")]
  public static extern bool Group_Process(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_IsGroup")]
  public static extern bool Group_IsGroup(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_SendGroupJoinOOZ")]
  public static extern void Group_SendGroupJoinOOZ(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_CastGroupSpell")]
  public static extern void Group_CastGroupSpell(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, ushort jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_SplitExp")]
  public static extern void Group_SplitExp(global::System.Runtime.InteropServices.HandleRef jarg1, ulong jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_GroupMessage")]
  public static extern void Group_GroupMessage(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, byte jarg3, byte jarg4, string jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_GroupMessageString__SWIG_0")]
  public static extern void Group_GroupMessageString__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4, string jarg5, string jarg6, string jarg7, string jarg8, string jarg9, string jarg10, string jarg11, string jarg12, string jarg13, uint jarg14);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_GroupMessageString__SWIG_1")]
  public static extern void Group_GroupMessageString__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4, string jarg5, string jarg6, string jarg7, string jarg8, string jarg9, string jarg10, string jarg11, string jarg12, string jarg13);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_GroupMessageString__SWIG_2")]
  public static extern void Group_GroupMessageString__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4, string jarg5, string jarg6, string jarg7, string jarg8, string jarg9, string jarg10, string jarg11, string jarg12);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_GroupMessageString__SWIG_3")]
  public static extern void Group_GroupMessageString__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4, string jarg5, string jarg6, string jarg7, string jarg8, string jarg9, string jarg10, string jarg11);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_GroupMessageString__SWIG_4")]
  public static extern void Group_GroupMessageString__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4, string jarg5, string jarg6, string jarg7, string jarg8, string jarg9, string jarg10);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_GroupMessageString__SWIG_5")]
  public static extern void Group_GroupMessageString__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4, string jarg5, string jarg6, string jarg7, string jarg8, string jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_GroupMessageString__SWIG_6")]
  public static extern void Group_GroupMessageString__SWIG_6(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4, string jarg5, string jarg6, string jarg7, string jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_GroupMessageString__SWIG_7")]
  public static extern void Group_GroupMessageString__SWIG_7(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4, string jarg5, string jarg6, string jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_GroupMessageString__SWIG_8")]
  public static extern void Group_GroupMessageString__SWIG_8(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4, string jarg5, string jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_GroupMessageString__SWIG_9")]
  public static extern void Group_GroupMessageString__SWIG_9(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4, string jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_GetTotalGroupDamage")]
  public static extern uint Group_GetTotalGroupDamage(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_SplitMoney__SWIG_0")]
  public static extern void Group_SplitMoney__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, uint jarg5, global::System.Runtime.InteropServices.HandleRef jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_SplitMoney__SWIG_1")]
  public static extern void Group_SplitMoney__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, uint jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_SetLeader")]
  public static extern void Group_SetLeader(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_GetLeader")]
  public static extern global::System.IntPtr Group_GetLeader(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_GetLeaderName")]
  public static extern string Group_GetLeaderName(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_SendHPManaEndPacketsTo")]
  public static extern void Group_SendHPManaEndPacketsTo(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_SendHPPacketsFrom")]
  public static extern void Group_SendHPPacketsFrom(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_SendManaPacketFrom")]
  public static extern void Group_SendManaPacketFrom(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_SendEndurancePacketFrom")]
  public static extern void Group_SendEndurancePacketFrom(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_UpdatePlayer")]
  public static extern bool Group_UpdatePlayer(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_MemberZoned")]
  public static extern void Group_MemberZoned(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_IsLeader__SWIG_0")]
  public static extern bool Group_IsLeader__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_IsLeader__SWIG_1")]
  public static extern bool Group_IsLeader__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_GroupCount")]
  public static extern byte Group_GroupCount(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_GetHighestLevel")]
  public static extern uint Group_GetHighestLevel(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_GetLowestLevel")]
  public static extern uint Group_GetLowestLevel(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_QueuePacket__SWIG_0")]
  public static extern void Group_QueuePacket__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_QueuePacket__SWIG_1")]
  public static extern void Group_QueuePacket__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_TeleportGroup")]
  public static extern void Group_TeleportGroup(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, ushort jarg4, float jarg5, float jarg6, float jarg7, float jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_GetAvgLevel")]
  public static extern ushort Group_GetAvgLevel(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_LearnMembers")]
  public static extern bool Group_LearnMembers(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_VerifyGroup")]
  public static extern void Group_VerifyGroup(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_BalanceHP__SWIG_0")]
  public static extern void Group_BalanceHP__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, float jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_BalanceHP__SWIG_1")]
  public static extern void Group_BalanceHP__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, float jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_BalanceHP__SWIG_2")]
  public static extern void Group_BalanceHP__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, float jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_BalanceHP__SWIG_3")]
  public static extern void Group_BalanceHP__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_BalanceMana__SWIG_0")]
  public static extern void Group_BalanceMana__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, float jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_BalanceMana__SWIG_1")]
  public static extern void Group_BalanceMana__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, float jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_BalanceMana__SWIG_2")]
  public static extern void Group_BalanceMana__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, float jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_BalanceMana__SWIG_3")]
  public static extern void Group_BalanceMana__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_HealGroup__SWIG_0")]
  public static extern void Group_HealGroup__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, float jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_HealGroup__SWIG_1")]
  public static extern void Group_HealGroup__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_SetGroupAAs")]
  public static extern void Group_SetGroupAAs(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_GetGroupAAs")]
  public static extern void Group_GetGroupAAs(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_UpdateGroupAAs")]
  public static extern void Group_UpdateGroupAAs(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_SaveGroupLeaderAA")]
  public static extern void Group_SaveGroupLeaderAA(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_MarkNPC")]
  public static extern void Group_MarkNPC(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_GetNumberNeedingHealedInGroup")]
  public static extern sbyte Group_GetNumberNeedingHealedInGroup(global::System.Runtime.InteropServices.HandleRef jarg1, sbyte jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_DelegateMainTank__SWIG_0")]
  public static extern void Group_DelegateMainTank__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, byte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_DelegateMainTank__SWIG_1")]
  public static extern void Group_DelegateMainTank__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_DelegateMainAssist__SWIG_0")]
  public static extern void Group_DelegateMainAssist__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, byte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_DelegateMainAssist__SWIG_1")]
  public static extern void Group_DelegateMainAssist__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_DelegatePuller__SWIG_0")]
  public static extern void Group_DelegatePuller__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, byte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_DelegatePuller__SWIG_1")]
  public static extern void Group_DelegatePuller__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_UnDelegateMainTank__SWIG_0")]
  public static extern void Group_UnDelegateMainTank__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, byte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_UnDelegateMainTank__SWIG_1")]
  public static extern void Group_UnDelegateMainTank__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_UnDelegateMainAssist__SWIG_0")]
  public static extern void Group_UnDelegateMainAssist__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, byte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_UnDelegateMainAssist__SWIG_1")]
  public static extern void Group_UnDelegateMainAssist__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_UnDelegatePuller__SWIG_0")]
  public static extern void Group_UnDelegatePuller__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, byte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_UnDelegatePuller__SWIG_1")]
  public static extern void Group_UnDelegatePuller__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_IsNPCMarker")]
  public static extern bool Group_IsNPCMarker(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_SetGroupAssistTarget")]
  public static extern void Group_SetGroupAssistTarget(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_SetGroupTankTarget")]
  public static extern void Group_SetGroupTankTarget(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_SetGroupPullerTarget")]
  public static extern void Group_SetGroupPullerTarget(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_HasRole")]
  public static extern bool Group_HasRole(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, byte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_NotifyAssistTarget")]
  public static extern void Group_NotifyAssistTarget(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_NotifyTankTarget")]
  public static extern void Group_NotifyTankTarget(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_NotifyPullerTarget")]
  public static extern void Group_NotifyPullerTarget(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_DelegateMarkNPC")]
  public static extern void Group_DelegateMarkNPC(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_UnDelegateMarkNPC")]
  public static extern void Group_UnDelegateMarkNPC(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_NotifyMainTank__SWIG_0")]
  public static extern void Group_NotifyMainTank__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, byte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_NotifyMainTank__SWIG_1")]
  public static extern void Group_NotifyMainTank__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_NotifyMainAssist__SWIG_0")]
  public static extern void Group_NotifyMainAssist__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, byte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_NotifyMainAssist__SWIG_1")]
  public static extern void Group_NotifyMainAssist__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_NotifyPuller__SWIG_0")]
  public static extern void Group_NotifyPuller__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, byte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_NotifyPuller__SWIG_1")]
  public static extern void Group_NotifyPuller__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_NotifyMarkNPC")]
  public static extern void Group_NotifyMarkNPC(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_GetNPCMarkerID")]
  public static extern uint Group_GetNPCMarkerID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_SetMainTank")]
  public static extern void Group_SetMainTank(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_SetMainAssist")]
  public static extern void Group_SetMainAssist(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_SetPuller")]
  public static extern void Group_SetPuller(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_GetMainTankName")]
  public static extern string Group_GetMainTankName(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_GetMainAssistName")]
  public static extern string Group_GetMainAssistName(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_GetPullerName")]
  public static extern string Group_GetPullerName(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_AmIMainTank")]
  public static extern bool Group_AmIMainTank(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_AmIMainAssist")]
  public static extern bool Group_AmIMainAssist(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_AmIPuller")]
  public static extern bool Group_AmIPuller(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_SetNPCMarker")]
  public static extern void Group_SetNPCMarker(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_UnMarkNPC")]
  public static extern void Group_UnMarkNPC(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_SendMarkedNPCsToMember__SWIG_0")]
  public static extern void Group_SendMarkedNPCsToMember__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_SendMarkedNPCsToMember__SWIG_1")]
  public static extern void Group_SendMarkedNPCsToMember__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_GetLeadershipAA")]
  public static extern int Group_GetLeadershipAA(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_ClearAllNPCMarks")]
  public static extern void Group_ClearAllNPCMarks(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_QueueHPPacketsForNPCHealthAA")]
  public static extern void Group_QueueHPPacketsForNPCHealthAA(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_QueueClients__SWIG_0")]
  public static extern void Group_QueueClients__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4, bool jarg5, float jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_QueueClients__SWIG_1")]
  public static extern void Group_QueueClients__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4, bool jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_QueueClients__SWIG_2")]
  public static extern void Group_QueueClients__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_QueueClients__SWIG_3")]
  public static extern void Group_QueueClients__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_ChangeLeader")]
  public static extern void Group_ChangeLeader(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_GetClientNameByIndex")]
  public static extern string Group_GetClientNameByIndex(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_UpdateXTargetMarkedNPC")]
  public static extern void Group_UpdateXTargetMarkedNPC(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_SetDirtyAutoHaters")]
  public static extern void Group_SetDirtyAutoHaters(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_GetXTargetAutoMgr")]
  public static extern global::System.IntPtr Group_GetXTargetAutoMgr(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_JoinRaidXTarget__SWIG_0")]
  public static extern void Group_JoinRaidXTarget__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_JoinRaidXTarget__SWIG_1")]
  public static extern void Group_JoinRaidXTarget__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_SetGroupMentor")]
  public static extern void Group_SetGroupMentor(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_ClearGroupMentor")]
  public static extern void Group_ClearGroupMentor(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_GetMentorPercent")]
  public static extern int Group_GetMentorPercent(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_GetMentoree")]
  public static extern global::System.IntPtr Group_GetMentoree(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_DoesAnyMemberHaveExpeditionLockout__SWIG_0")]
  public static extern bool Group_DoesAnyMemberHaveExpeditionLockout__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_DoesAnyMemberHaveExpeditionLockout__SWIG_1")]
  public static extern bool Group_DoesAnyMemberHaveExpeditionLockout__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_members_set")]
  public static extern void Group_members_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_members_get")]
  public static extern global::System.IntPtr Group_members_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_membername_set")]
  public static extern void Group_membername_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_membername_get")]
  public static extern global::System.IntPtr Group_membername_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_MemberRoles_set")]
  public static extern void Group_MemberRoles_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_MemberRoles_get")]
  public static extern global::System.IntPtr Group_MemberRoles_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_disbandcheck_set")]
  public static extern void Group_disbandcheck_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_disbandcheck_get")]
  public static extern bool Group_disbandcheck_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_castspell_set")]
  public static extern void Group_castspell_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_castspell_get")]
  public static extern bool Group_castspell_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Object__SWIG_0")]
  public static extern global::System.IntPtr new_Object__SWIG_0(uint jarg1, uint jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, bool jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Object__SWIG_1")]
  public static extern global::System.IntPtr new_Object__SWIG_1(uint jarg1, uint jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Object__SWIG_2")]
  public static extern global::System.IntPtr new_Object__SWIG_2(uint jarg1, uint jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Object__SWIG_3")]
  public static extern global::System.IntPtr new_Object__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, uint jarg9, bool jarg10);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Object__SWIG_4")]
  public static extern global::System.IntPtr new_Object__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Object__SWIG_5")]
  public static extern global::System.IntPtr new_Object__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, float jarg4, float jarg5, uint jarg6, bool jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Object__SWIG_6")]
  public static extern global::System.IntPtr new_Object__SWIG_6(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, float jarg4, float jarg5, uint jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Object__SWIG_7")]
  public static extern global::System.IntPtr new_Object__SWIG_7(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, float jarg4, float jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Object__SWIG_8")]
  public static extern global::System.IntPtr new_Object__SWIG_8(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, float jarg4, float jarg5, byte jarg6, uint jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Object__SWIG_9")]
  public static extern global::System.IntPtr new_Object__SWIG_9(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, float jarg4, float jarg5, byte jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_Object")]
  public static extern void delete_Object(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_Process")]
  public static extern bool Object_Process(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_IsGroundSpawn")]
  public static extern bool Object_IsGroundSpawn(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_HandleClick")]
  public static extern bool Object_HandleClick(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_Close")]
  public static extern void Object_Close(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_Delete__SWIG_0")]
  public static extern void Object_Delete__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_Delete__SWIG_1")]
  public static extern void Object_Delete__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_HandleCombine")]
  public static extern void Object_HandleCombine(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_HandleAugmentation")]
  public static extern void Object_HandleAugmentation(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_HandleAutoCombine")]
  public static extern void Object_HandleAutoCombine(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_CreateSpawnPacket")]
  public static extern void Object_CreateSpawnPacket(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_CreateDeSpawnPacket")]
  public static extern void Object_CreateDeSpawnPacket(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_Depop")]
  public static extern void Object_Depop(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_Repop")]
  public static extern void Object_Repop(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_IsFixZEnabled")]
  public static extern bool Object_IsFixZEnabled(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_SetFixZ")]
  public static extern void Object_SetFixZ(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_StartDecay")]
  public static extern void Object_StartDecay(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_GetItem")]
  public static extern global::System.IntPtr Object_GetItem(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_PutItem")]
  public static extern void Object_PutItem(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_DeleteItem")]
  public static extern void Object_DeleteItem(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_PopItem")]
  public static extern global::System.IntPtr Object_PopItem(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_IsObject")]
  public static extern bool Object_IsObject(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_Save")]
  public static extern bool Object_Save(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_VarSave")]
  public static extern ushort Object_VarSave(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_SetID")]
  public static extern void Object_SetID(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_ClearUser")]
  public static extern void Object_ClearUser(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_GetDBID")]
  public static extern uint Object_GetDBID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_GetType")]
  public static extern uint Object_GetType(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_SetType")]
  public static extern void Object_SetType(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_GetIcon")]
  public static extern uint Object_GetIcon(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_SetIcon")]
  public static extern void Object_SetIcon(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_GetItemID")]
  public static extern uint Object_GetItemID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_SetItemID")]
  public static extern void Object_SetItemID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_GetObjectData")]
  public static extern void Object_GetObjectData(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_SetObjectData")]
  public static extern void Object_SetObjectData(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_GetLocation")]
  public static extern void Object_GetLocation(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_SetLocation")]
  public static extern void Object_SetLocation(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, float jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_GetHeading")]
  public static extern void Object_GetHeading(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_SetHeading")]
  public static extern void Object_SetHeading(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_GetX")]
  public static extern float Object_GetX(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_GetY")]
  public static extern float Object_GetY(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_GetZ")]
  public static extern float Object_GetZ(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_GetHeadingData")]
  public static extern float Object_GetHeadingData(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_SetX")]
  public static extern void Object_SetX(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_SetY")]
  public static extern void Object_SetY(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_SetZ")]
  public static extern void Object_SetZ(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_SetTiltX")]
  public static extern void Object_SetTiltX(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_SetTiltY")]
  public static extern void Object_SetTiltY(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_GetTiltX")]
  public static extern float Object_GetTiltX(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_GetTiltY")]
  public static extern float Object_GetTiltY(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_SetModelName")]
  public static extern void Object_SetModelName(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_GetModelName")]
  public static extern string Object_GetModelName(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_GetSize")]
  public static extern float Object_GetSize(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_SetSize")]
  public static extern void Object_SetSize(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_GetSolidType")]
  public static extern ushort Object_GetSolidType(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_SetSolidType")]
  public static extern void Object_SetSolidType(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_SetDisplayName")]
  public static extern void Object_SetDisplayName(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_GetDisplayName")]
  public static extern string Object_GetDisplayName(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_ClearEntityVariables")]
  public static extern bool Object_ClearEntityVariables(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_DeleteEntityVariable")]
  public static extern bool Object_DeleteEntityVariable(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_GetEntityVariable")]
  public static extern global::System.IntPtr Object_GetEntityVariable(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_GetEntityVariables")]
  public static extern global::System.IntPtr Object_GetEntityVariables(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_SetEntityVariable")]
  public static extern void Object_SetEntityVariable(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_EntityVariableExists")]
  public static extern bool Object_EntityVariableExists(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_FindNextMarkerSlot_get")]
  public static extern int FindNextMarkerSlot_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_FindNextAssisterSlot_get")]
  public static extern int FindNextAssisterSlot_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidDelegateMainAssist_get")]
  public static extern int RaidDelegateMainAssist_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidDelegateMainMarker_get")]
  public static extern int RaidDelegateMainMarker_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ClearDelegate_get")]
  public static extern int ClearDelegate_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SetDelegate_get")]
  public static extern int SetDelegate_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_FindNextRaidMainMarkerSlot_get")]
  public static extern int FindNextRaidMainMarkerSlot_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_FindNextRaidMainAssisterSlot_get")]
  public static extern int FindNextRaidMainAssisterSlot_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DELEGATE_OFF_get")]
  public static extern int DELEGATE_OFF_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DELEGATE_ON_get")]
  public static extern int DELEGATE_ON_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_Marked_NPC_entity_id_set")]
  public static extern void Raid_Marked_NPC_entity_id_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_Marked_NPC_entity_id_get")]
  public static extern uint Raid_Marked_NPC_entity_id_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_Marked_NPC_zone_id_set")]
  public static extern void Raid_Marked_NPC_zone_id_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_Marked_NPC_zone_id_get")]
  public static extern uint Raid_Marked_NPC_zone_id_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_Marked_NPC_instance_id_set")]
  public static extern void Raid_Marked_NPC_instance_id_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_Marked_NPC_instance_id_get")]
  public static extern uint Raid_Marked_NPC_instance_id_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Raid_Marked_NPC")]
  public static extern global::System.IntPtr new_Raid_Marked_NPC();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_Raid_Marked_NPC")]
  public static extern void delete_Raid_Marked_NPC(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MAX_RAID_GROUPS_get")]
  public static extern byte MAX_RAID_GROUPS_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MAX_RAID_MEMBERS_get")]
  public static extern byte MAX_RAID_MEMBERS_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RAID_GROUPLESS_get")]
  public static extern uint RAID_GROUPLESS_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MAX_NO_RAID_MAIN_ASSISTERS_get")]
  public static extern int MAX_NO_RAID_MAIN_ASSISTERS_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MAX_NO_RAID_MAIN_MARKERS_get")]
  public static extern int MAX_NO_RAID_MAIN_MARKERS_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidMember_member_name_set")]
  public static extern void RaidMember_member_name_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidMember_member_name_get")]
  public static extern string RaidMember_member_name_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidMember_member_set")]
  public static extern void RaidMember_member_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidMember_member_get")]
  public static extern global::System.IntPtr RaidMember_member_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidMember_group_number_set")]
  public static extern void RaidMember_group_number_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidMember_group_number_get")]
  public static extern uint RaidMember_group_number_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidMember__class_set")]
  public static extern void RaidMember__class_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidMember__class_get")]
  public static extern byte RaidMember__class_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidMember_level_set")]
  public static extern void RaidMember_level_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidMember_level_get")]
  public static extern byte RaidMember_level_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidMember_note_set")]
  public static extern void RaidMember_note_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidMember_note_get")]
  public static extern global::System.IntPtr RaidMember_note_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidMember_is_group_leader_set")]
  public static extern void RaidMember_is_group_leader_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidMember_is_group_leader_get")]
  public static extern bool RaidMember_is_group_leader_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidMember_is_raid_leader_set")]
  public static extern void RaidMember_is_raid_leader_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidMember_is_raid_leader_get")]
  public static extern bool RaidMember_is_raid_leader_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidMember_is_looter_set")]
  public static extern void RaidMember_is_looter_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidMember_is_looter_get")]
  public static extern bool RaidMember_is_looter_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidMember_main_marker_set")]
  public static extern void RaidMember_main_marker_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidMember_main_marker_get")]
  public static extern byte RaidMember_main_marker_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidMember_main_assister_set")]
  public static extern void RaidMember_main_assister_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidMember_main_assister_get")]
  public static extern byte RaidMember_main_assister_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidMember_is_bot_set")]
  public static extern void RaidMember_is_bot_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidMember_is_bot_get")]
  public static extern bool RaidMember_is_bot_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidMember_is_raid_main_assist_one_set")]
  public static extern void RaidMember_is_raid_main_assist_one_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidMember_is_raid_main_assist_one_get")]
  public static extern bool RaidMember_is_raid_main_assist_one_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_RaidMember")]
  public static extern global::System.IntPtr new_RaidMember();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_RaidMember")]
  public static extern void delete_RaidMember(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_GroupMentor_name_set")]
  public static extern void GroupMentor_name_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_GroupMentor_name_get")]
  public static extern global::System.IntPtr GroupMentor_name_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_GroupMentor_mentoree_set")]
  public static extern void GroupMentor_mentoree_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_GroupMentor_mentoree_get")]
  public static extern global::System.IntPtr GroupMentor_mentoree_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_GroupMentor_mentor_percent_set")]
  public static extern void GroupMentor_mentor_percent_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_GroupMentor_mentor_percent_get")]
  public static extern int GroupMentor_mentor_percent_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_GroupMentor")]
  public static extern global::System.IntPtr new_GroupMentor();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_GroupMentor")]
  public static extern void delete_GroupMentor(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Raid__SWIG_0")]
  public static extern global::System.IntPtr new_Raid__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Raid__SWIG_1")]
  public static extern global::System.IntPtr new_Raid__SWIG_1(uint jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_Raid")]
  public static extern void delete_Raid(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SetLeader")]
  public static extern void Raid_SetLeader(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_GetLeader")]
  public static extern global::System.IntPtr Raid_GetLeader(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_GetLeaderName")]
  public static extern global::System.IntPtr Raid_GetLeaderName(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_IsLeader__SWIG_0")]
  public static extern bool Raid_IsLeader__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_IsLeader__SWIG_1")]
  public static extern bool Raid_IsLeader__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SetRaidLeader")]
  public static extern void Raid_SetRaidLeader(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_Process")]
  public static extern bool Raid_Process(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_AddMember__SWIG_0")]
  public static extern void Raid_AddMember__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, bool jarg4, bool jarg5, bool jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_AddMember__SWIG_1")]
  public static extern void Raid_AddMember__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, bool jarg4, bool jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_AddMember__SWIG_2")]
  public static extern void Raid_AddMember__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_AddMember__SWIG_3")]
  public static extern void Raid_AddMember__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_AddMember__SWIG_4")]
  public static extern void Raid_AddMember__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_AddBot__SWIG_0")]
  public static extern void Raid_AddBot__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, bool jarg4, bool jarg5, bool jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_AddBot__SWIG_1")]
  public static extern void Raid_AddBot__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, bool jarg4, bool jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_AddBot__SWIG_2")]
  public static extern void Raid_AddBot__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_AddBot__SWIG_3")]
  public static extern void Raid_AddBot__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_AddBot__SWIG_4")]
  public static extern void Raid_AddBot__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_RaidGroupSay__SWIG_0")]
  public static extern void Raid_RaidGroupSay__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, byte jarg4, byte jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_RaidSay__SWIG_0")]
  public static extern void Raid_RaidSay__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, byte jarg4, byte jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_IsEngaged")]
  public static extern bool Raid_IsEngaged(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_GetRaidMainAssistOne")]
  public static extern global::System.IntPtr Raid_GetRaidMainAssistOne(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_RemoveMember")]
  public static extern void Raid_RemoveMember(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_DisbandRaid")]
  public static extern void Raid_DisbandRaid(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_MoveMember")]
  public static extern void Raid_MoveMember(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SetGroupLeader__SWIG_0")]
  public static extern void Raid_SetGroupLeader__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SetGroupLeader__SWIG_1")]
  public static extern void Raid_SetGroupLeader__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_GetGroupLeader")]
  public static extern global::System.IntPtr Raid_GetGroupLeader(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_IsGroupLeader__SWIG_0")]
  public static extern bool Raid_IsGroupLeader__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_IsGroupLeader__SWIG_1")]
  public static extern bool Raid_IsGroupLeader__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_IsRaidMember__SWIG_0")]
  public static extern bool Raid_IsRaidMember__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_IsRaidMember__SWIG_1")]
  public static extern bool Raid_IsRaidMember__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_UpdateLevel")]
  public static extern void Raid_UpdateLevel(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SetNewRaidLeader")]
  public static extern void Raid_SetNewRaidLeader(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_IsAssister")]
  public static extern bool Raid_IsAssister(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_IsMarker")]
  public static extern bool Raid_IsMarker(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_EmptyRaidMembers")]
  public static extern void Raid_EmptyRaidMembers(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_GetFreeGroup")]
  public static extern uint Raid_GetFreeGroup(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_GroupCount")]
  public static extern byte Raid_GroupCount(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_RaidCount")]
  public static extern byte Raid_RaidCount(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_GetHighestLevel")]
  public static extern uint Raid_GetHighestLevel(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_GetLowestLevel")]
  public static extern uint Raid_GetLowestLevel(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_GetGroup__SWIG_0")]
  public static extern uint Raid_GetGroup__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_GetGroup__SWIG_1")]
  public static extern uint Raid_GetGroup__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_GetAvgLevel")]
  public static extern ushort Raid_GetAvgLevel(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_GetLootType")]
  public static extern uint Raid_GetLootType(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_ChangeLootType")]
  public static extern void Raid_ChangeLootType(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_AddRaidLooter")]
  public static extern void Raid_AddRaidLooter(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_RemoveRaidLooter")]
  public static extern void Raid_RemoveRaidLooter(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SetRaidMOTD")]
  public static extern void Raid_SetRaidMOTD(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_GetPlayerIndex__SWIG_0")]
  public static extern uint Raid_GetPlayerIndex__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_GetPlayerIndex__SWIG_1")]
  public static extern uint Raid_GetPlayerIndex__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_GetClientByIndex")]
  public static extern global::System.IntPtr Raid_GetClientByIndex(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_GetClientNameByIndex")]
  public static extern string Raid_GetClientNameByIndex(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_LockRaid")]
  public static extern void Raid_LockRaid(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_IsLocked")]
  public static extern bool Raid_IsLocked(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_RaidMessageString__SWIG_0")]
  public static extern void Raid_RaidMessageString__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4, string jarg5, string jarg6, string jarg7, string jarg8, string jarg9, string jarg10, string jarg11, string jarg12, string jarg13, uint jarg14);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_RaidMessageString__SWIG_1")]
  public static extern void Raid_RaidMessageString__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4, string jarg5, string jarg6, string jarg7, string jarg8, string jarg9, string jarg10, string jarg11, string jarg12, string jarg13);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_RaidMessageString__SWIG_2")]
  public static extern void Raid_RaidMessageString__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4, string jarg5, string jarg6, string jarg7, string jarg8, string jarg9, string jarg10, string jarg11, string jarg12);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_RaidMessageString__SWIG_3")]
  public static extern void Raid_RaidMessageString__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4, string jarg5, string jarg6, string jarg7, string jarg8, string jarg9, string jarg10, string jarg11);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_RaidMessageString__SWIG_4")]
  public static extern void Raid_RaidMessageString__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4, string jarg5, string jarg6, string jarg7, string jarg8, string jarg9, string jarg10);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_RaidMessageString__SWIG_5")]
  public static extern void Raid_RaidMessageString__SWIG_5(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4, string jarg5, string jarg6, string jarg7, string jarg8, string jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_RaidMessageString__SWIG_6")]
  public static extern void Raid_RaidMessageString__SWIG_6(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4, string jarg5, string jarg6, string jarg7, string jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_RaidMessageString__SWIG_7")]
  public static extern void Raid_RaidMessageString__SWIG_7(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4, string jarg5, string jarg6, string jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_RaidMessageString__SWIG_8")]
  public static extern void Raid_RaidMessageString__SWIG_8(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4, string jarg5, string jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_RaidMessageString__SWIG_9")]
  public static extern void Raid_RaidMessageString__SWIG_9(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4, string jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_CastGroupSpell")]
  public static extern void Raid_CastGroupSpell(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, ushort jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SplitExp")]
  public static extern void Raid_SplitExp(global::System.Runtime.InteropServices.HandleRef jarg1, ulong jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_GetTotalRaidDamage")]
  public static extern uint Raid_GetTotalRaidDamage(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_BalanceHP__SWIG_0")]
  public static extern void Raid_BalanceHP__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, uint jarg3, float jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, int jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_BalanceHP__SWIG_1")]
  public static extern void Raid_BalanceHP__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, uint jarg3, float jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_BalanceHP__SWIG_2")]
  public static extern void Raid_BalanceHP__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, uint jarg3, float jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_BalanceHP__SWIG_3")]
  public static extern void Raid_BalanceHP__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_BalanceMana__SWIG_0")]
  public static extern void Raid_BalanceMana__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, uint jarg3, float jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, int jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_BalanceMana__SWIG_1")]
  public static extern void Raid_BalanceMana__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, uint jarg3, float jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_BalanceMana__SWIG_2")]
  public static extern void Raid_BalanceMana__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, uint jarg3, float jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_BalanceMana__SWIG_3")]
  public static extern void Raid_BalanceMana__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_HealGroup__SWIG_0")]
  public static extern void Raid_HealGroup__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, uint jarg4, float jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_HealGroup__SWIG_1")]
  public static extern void Raid_HealGroup__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SplitMoney__SWIG_0")]
  public static extern void Raid_SplitMoney__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, uint jarg5, uint jarg6, global::System.Runtime.InteropServices.HandleRef jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SplitMoney__SWIG_1")]
  public static extern void Raid_SplitMoney__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, uint jarg5, uint jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_TeleportGroup")]
  public static extern void Raid_TeleportGroup(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, ushort jarg4, float jarg5, float jarg6, float jarg7, float jarg8, uint jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_TeleportRaid")]
  public static extern void Raid_TeleportRaid(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, ushort jarg4, float jarg5, float jarg6, float jarg7, float jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SetRaidDetails")]
  public static extern void Raid_SetRaidDetails(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_GetRaidDetails")]
  public static extern void Raid_GetRaidDetails(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SaveRaidMOTD")]
  public static extern void Raid_SaveRaidMOTD(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_LearnMembers")]
  public static extern bool Raid_LearnMembers(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_VerifyRaid")]
  public static extern void Raid_VerifyRaid(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_MemberZoned")]
  public static extern void Raid_MemberZoned(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SendHPManaEndPacketsTo")]
  public static extern void Raid_SendHPManaEndPacketsTo(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SendHPManaEndPacketsFrom")]
  public static extern void Raid_SendHPManaEndPacketsFrom(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SendManaPacketFrom")]
  public static extern void Raid_SendManaPacketFrom(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SendEndurancePacketFrom")]
  public static extern void Raid_SendEndurancePacketFrom(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_RaidSay__SWIG_1")]
  public static extern void Raid_RaidSay__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, byte jarg4, byte jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_RaidGroupSay__SWIG_1")]
  public static extern void Raid_RaidGroupSay__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, byte jarg4, byte jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SaveRaidNote")]
  public static extern void Raid_SaveRaidNote(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_GetMembersWithNotes")]
  public static extern global::System.IntPtr Raid_GetMembersWithNotes(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_DelegateAbilityAssist")]
  public static extern void Raid_DelegateAbilityAssist(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_DelegateAbilityMark")]
  public static extern void Raid_DelegateAbilityMark(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_RaidMarkNPC")]
  public static extern void Raid_RaidMarkNPC(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_UpdateXTargetType__SWIG_0")]
  public static extern void Raid_UpdateXTargetType__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_UpdateXTargetType__SWIG_1")]
  public static extern void Raid_UpdateXTargetType__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_FindNextRaidDelegateSlot")]
  public static extern int Raid_FindNextRaidDelegateSlot(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_UpdateXtargetMarkedNPC")]
  public static extern void Raid_UpdateXtargetMarkedNPC(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_RaidClearNPCMarks")]
  public static extern void Raid_RaidClearNPCMarks(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_RemoveRaidDelegates")]
  public static extern void Raid_RemoveRaidDelegates(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_UpdateRaidXTargets")]
  public static extern void Raid_UpdateRaidXTargets(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SendRaidCreate")]
  public static extern void Raid_SendRaidCreate(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SendRaidAdd")]
  public static extern void Raid_SendRaidAdd(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SendRaidAddAll")]
  public static extern void Raid_SendRaidAddAll(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SendRaidRemove")]
  public static extern void Raid_SendRaidRemove(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SendRaidRemoveAll")]
  public static extern void Raid_SendRaidRemoveAll(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SendRaidDisband")]
  public static extern void Raid_SendRaidDisband(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SendRaidDisbandAll")]
  public static extern void Raid_SendRaidDisbandAll(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SendRaidMove")]
  public static extern void Raid_SendRaidMove(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SendRaidMoveAll")]
  public static extern void Raid_SendRaidMoveAll(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SendBulkRaid")]
  public static extern void Raid_SendBulkRaid(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SendRaidNotes")]
  public static extern void Raid_SendRaidNotes(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SendRaidNotesToWorld")]
  public static extern void Raid_SendRaidNotesToWorld(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SendRemoveRaidXTargets")]
  public static extern void Raid_SendRemoveRaidXTargets(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SendRemoveAllRaidXTargets__SWIG_0")]
  public static extern void Raid_SendRemoveAllRaidXTargets__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SendRemoveAllRaidXTargets__SWIG_1")]
  public static extern void Raid_SendRemoveAllRaidXTargets__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SendRaidAssistTarget")]
  public static extern void Raid_SendRaidAssistTarget(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SendAssistTarget")]
  public static extern void Raid_SendAssistTarget(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_GroupUpdate__SWIG_0")]
  public static extern void Raid_GroupUpdate__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_GroupUpdate__SWIG_1")]
  public static extern void Raid_GroupUpdate__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SendGroupUpdate")]
  public static extern void Raid_SendGroupUpdate(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SendGroupDisband")]
  public static extern void Raid_SendGroupDisband(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SendRaidLock")]
  public static extern void Raid_SendRaidLock(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SendRaidUnlock")]
  public static extern void Raid_SendRaidUnlock(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SendRaidLockTo")]
  public static extern void Raid_SendRaidLockTo(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SendRaidUnlockTo")]
  public static extern void Raid_SendRaidUnlockTo(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SendRaidGroupAdd")]
  public static extern void Raid_SendRaidGroupAdd(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SendRaidGroupRemove")]
  public static extern void Raid_SendRaidGroupRemove(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SendMakeLeaderPacket")]
  public static extern void Raid_SendMakeLeaderPacket(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SendMakeLeaderPacketTo")]
  public static extern void Raid_SendMakeLeaderPacketTo(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SendMakeGroupLeaderPacketAll")]
  public static extern void Raid_SendMakeGroupLeaderPacketAll(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SendMakeGroupLeaderPacket")]
  public static extern void Raid_SendMakeGroupLeaderPacket(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SendMakeGroupLeaderPacketTo")]
  public static extern void Raid_SendMakeGroupLeaderPacketTo(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SendRaidMOTD__SWIG_0")]
  public static extern void Raid_SendRaidMOTD__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SendRaidMOTD__SWIG_1")]
  public static extern void Raid_SendRaidMOTD__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SendRaidMOTDToWorld")]
  public static extern void Raid_SendRaidMOTDToWorld(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SendRaidAssisterTo")]
  public static extern void Raid_SendRaidAssisterTo(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SendRaidAssister")]
  public static extern void Raid_SendRaidAssister(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SendRaidMarkerTo")]
  public static extern void Raid_SendRaidMarkerTo(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SendRaidMarker")]
  public static extern void Raid_SendRaidMarker(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SendMarkTargets")]
  public static extern void Raid_SendMarkTargets(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_QueuePacket__SWIG_0")]
  public static extern void Raid_QueuePacket__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_QueuePacket__SWIG_1")]
  public static extern void Raid_QueuePacket__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_UpdateGroupAAs")]
  public static extern void Raid_UpdateGroupAAs(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SaveGroupLeaderAA")]
  public static extern void Raid_SaveGroupLeaderAA(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_UpdateRaidAAs")]
  public static extern void Raid_UpdateRaidAAs(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SaveRaidLeaderAA")]
  public static extern void Raid_SaveRaidLeaderAA(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SendGroupLeadershipAA__SWIG_0")]
  public static extern void Raid_SendGroupLeadershipAA__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SendGroupLeadershipAA__SWIG_1")]
  public static extern void Raid_SendGroupLeadershipAA__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SendAllRaidLeadershipAA")]
  public static extern void Raid_SendAllRaidLeadershipAA(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_LoadLeadership")]
  public static extern void Raid_LoadLeadership(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_GetLeadershipAA__SWIG_0")]
  public static extern int Raid_GetLeadershipAA__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_GetLeadershipAA__SWIG_1")]
  public static extern int Raid_GetLeadershipAA__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SetGroupAAs")]
  public static extern void Raid_SetGroupAAs(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SetRaidAAs")]
  public static extern void Raid_SetRaidAAs(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SetGroupMentor")]
  public static extern void Raid_SetGroupMentor(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, int jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_ClearGroupMentor")]
  public static extern void Raid_ClearGroupMentor(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_CheckGroupMentor")]
  public static extern void Raid_CheckGroupMentor(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_GetMentorPercent")]
  public static extern int Raid_GetMentorPercent(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_GetMentoree")]
  public static extern global::System.IntPtr Raid_GetMentoree(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SetDirtyAutoHaters")]
  public static extern void Raid_SetDirtyAutoHaters(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_GetXTargetAutoMgr")]
  public static extern global::System.IntPtr Raid_GetXTargetAutoMgr(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_QueueClients__SWIG_0")]
  public static extern void Raid_QueueClients__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4, bool jarg5, float jarg6, bool jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_QueueClients__SWIG_1")]
  public static extern void Raid_QueueClients__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4, bool jarg5, float jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_QueueClients__SWIG_2")]
  public static extern void Raid_QueueClients__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4, bool jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_QueueClients__SWIG_3")]
  public static extern void Raid_QueueClients__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_QueueClients__SWIG_4")]
  public static extern void Raid_QueueClients__SWIG_4(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_DoesAnyMemberHaveExpeditionLockout__SWIG_0")]
  public static extern bool Raid_DoesAnyMemberHaveExpeditionLockout__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_DoesAnyMemberHaveExpeditionLockout__SWIG_1")]
  public static extern bool Raid_DoesAnyMemberHaveExpeditionLockout__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_GetMembers")]
  public static extern global::System.IntPtr Raid_GetMembers(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_GetRaidGroupMembers")]
  public static extern global::System.IntPtr Raid_GetRaidGroupMembers(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_GetRaidGroupBotMembers")]
  public static extern global::System.IntPtr Raid_GetRaidGroupBotMembers(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_GetRaidBotMembers__SWIG_0")]
  public static extern global::System.IntPtr Raid_GetRaidBotMembers__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_GetRaidBotMembers__SWIG_1")]
  public static extern global::System.IntPtr Raid_GetRaidBotMembers__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_HandleBotGroupDisband__SWIG_0")]
  public static extern void Raid_HandleBotGroupDisband__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_HandleBotGroupDisband__SWIG_1")]
  public static extern void Raid_HandleBotGroupDisband__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_HandleOfflineBots")]
  public static extern void Raid_HandleOfflineBots(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_members_set")]
  public static extern void Raid_members_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_members_get")]
  public static extern global::System.IntPtr Raid_members_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_leadername_set")]
  public static extern void Raid_leadername_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_leadername_get")]
  public static extern string Raid_leadername_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_main_assister_pcs_set")]
  public static extern void Raid_main_assister_pcs_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_main_assister_pcs_get")]
  public static extern global::System.IntPtr Raid_main_assister_pcs_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_main_marker_pcs_set")]
  public static extern void Raid_main_marker_pcs_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_main_marker_pcs_get")]
  public static extern global::System.IntPtr Raid_main_marker_pcs_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_marked_npcs_set")]
  public static extern void Raid_marked_npcs_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_marked_npcs_get")]
  public static extern global::System.IntPtr Raid_marked_npcs_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_TRAP_NPC_TYPE_get")]
  public static extern int TRAP_NPC_TYPE_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Trap")]
  public static extern global::System.IntPtr new_Trap();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_Trap")]
  public static extern void delete_Trap(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_Process")]
  public static extern bool Trap_Process(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_IsTrap")]
  public static extern bool Trap_IsTrap(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_Trigger")]
  public static extern void Trap_Trigger(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_GetHiddenTrigger")]
  public static extern global::System.IntPtr Trap_GetHiddenTrigger(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_SetHiddenTrigger")]
  public static extern void Trap_SetHiddenTrigger(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_CreateHiddenTrigger")]
  public static extern void Trap_CreateHiddenTrigger(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_DestroyHiddenTrigger")]
  public static extern void Trap_DestroyHiddenTrigger(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_UpdateTrap__SWIG_0")]
  public static extern void Trap_UpdateTrap__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_UpdateTrap__SWIG_1")]
  public static extern void Trap_UpdateTrap__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_UpdateTrap__SWIG_2")]
  public static extern void Trap_UpdateTrap__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_respawn_timer_set")]
  public static extern void Trap_respawn_timer_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_respawn_timer_get")]
  public static extern global::System.IntPtr Trap_respawn_timer_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_chkarea_timer_set")]
  public static extern void Trap_chkarea_timer_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_chkarea_timer_get")]
  public static extern global::System.IntPtr Trap_chkarea_timer_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_reset_timer_set")]
  public static extern void Trap_reset_timer_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_reset_timer_get")]
  public static extern global::System.IntPtr Trap_reset_timer_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_trap_id_set")]
  public static extern void Trap_trap_id_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_trap_id_get")]
  public static extern uint Trap_trap_id_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_db_id_set")]
  public static extern void Trap_db_id_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_db_id_get")]
  public static extern uint Trap_db_id_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_m_Position_set")]
  public static extern void Trap_m_Position_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_m_Position_get")]
  public static extern global::System.IntPtr Trap_m_Position_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_maxzdiff_set")]
  public static extern void Trap_maxzdiff_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_maxzdiff_get")]
  public static extern float Trap_maxzdiff_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_radius_set")]
  public static extern void Trap_radius_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_radius_get")]
  public static extern float Trap_radius_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_chance_set")]
  public static extern void Trap_chance_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_chance_get")]
  public static extern byte Trap_chance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_effect_set")]
  public static extern void Trap_effect_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_effect_get")]
  public static extern byte Trap_effect_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_effectvalue_set")]
  public static extern void Trap_effectvalue_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_effectvalue_get")]
  public static extern int Trap_effectvalue_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_effectvalue2_set")]
  public static extern void Trap_effectvalue2_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_effectvalue2_get")]
  public static extern int Trap_effectvalue2_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_skill_set")]
  public static extern void Trap_skill_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_skill_get")]
  public static extern byte Trap_skill_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_level_set")]
  public static extern void Trap_level_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_level_get")]
  public static extern byte Trap_level_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_detected_set")]
  public static extern void Trap_detected_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_detected_get")]
  public static extern bool Trap_detected_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_disarmed_set")]
  public static extern void Trap_disarmed_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_disarmed_get")]
  public static extern bool Trap_disarmed_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_respawn_time_set")]
  public static extern void Trap_respawn_time_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_respawn_time_get")]
  public static extern uint Trap_respawn_time_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_respawn_var_set")]
  public static extern void Trap_respawn_var_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_respawn_var_get")]
  public static extern uint Trap_respawn_var_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_triggered_number_set")]
  public static extern void Trap_triggered_number_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_triggered_number_get")]
  public static extern byte Trap_triggered_number_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_times_triggered_set")]
  public static extern void Trap_times_triggered_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_times_triggered_get")]
  public static extern byte Trap_times_triggered_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_group_set")]
  public static extern void Trap_group_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_group_get")]
  public static extern byte Trap_group_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_despawn_when_triggered_set")]
  public static extern void Trap_despawn_when_triggered_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_despawn_when_triggered_get")]
  public static extern bool Trap_despawn_when_triggered_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_charid_set")]
  public static extern void Trap_charid_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_charid_get")]
  public static extern uint Trap_charid_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_undetectable_set")]
  public static extern void Trap_undetectable_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_undetectable_get")]
  public static extern bool Trap_undetectable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_message_set")]
  public static extern void Trap_message_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_message_get")]
  public static extern global::System.IntPtr Trap_message_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EXPModifier_aa_modifier_set")]
  public static extern void EXPModifier_aa_modifier_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EXPModifier_aa_modifier_get")]
  public static extern float EXPModifier_aa_modifier_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EXPModifier_exp_modifier_set")]
  public static extern void EXPModifier_exp_modifier_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_EXPModifier_exp_modifier_get")]
  public static extern float EXPModifier_exp_modifier_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_EXPModifier")]
  public static extern global::System.IntPtr new_EXPModifier();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_EXPModifier")]
  public static extern void delete_EXPModifier(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZonePoint_x_set")]
  public static extern void ZonePoint_x_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZonePoint_x_get")]
  public static extern float ZonePoint_x_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZonePoint_y_set")]
  public static extern void ZonePoint_y_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZonePoint_y_get")]
  public static extern float ZonePoint_y_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZonePoint_z_set")]
  public static extern void ZonePoint_z_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZonePoint_z_get")]
  public static extern float ZonePoint_z_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZonePoint_heading_set")]
  public static extern void ZonePoint_heading_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZonePoint_heading_get")]
  public static extern float ZonePoint_heading_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZonePoint_number_set")]
  public static extern void ZonePoint_number_set(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZonePoint_number_get")]
  public static extern ushort ZonePoint_number_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZonePoint_target_x_set")]
  public static extern void ZonePoint_target_x_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZonePoint_target_x_get")]
  public static extern float ZonePoint_target_x_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZonePoint_target_y_set")]
  public static extern void ZonePoint_target_y_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZonePoint_target_y_get")]
  public static extern float ZonePoint_target_y_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZonePoint_target_z_set")]
  public static extern void ZonePoint_target_z_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZonePoint_target_z_get")]
  public static extern float ZonePoint_target_z_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZonePoint_target_heading_set")]
  public static extern void ZonePoint_target_heading_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZonePoint_target_heading_get")]
  public static extern float ZonePoint_target_heading_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZonePoint_target_zone_id_set")]
  public static extern void ZonePoint_target_zone_id_set(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZonePoint_target_zone_id_get")]
  public static extern ushort ZonePoint_target_zone_id_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZonePoint_target_zone_instance_set")]
  public static extern void ZonePoint_target_zone_instance_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZonePoint_target_zone_instance_get")]
  public static extern int ZonePoint_target_zone_instance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZonePoint_client_version_mask_set")]
  public static extern void ZonePoint_client_version_mask_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZonePoint_client_version_mask_get")]
  public static extern uint ZonePoint_client_version_mask_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZonePoint_is_virtual_set")]
  public static extern void ZonePoint_is_virtual_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZonePoint_is_virtual_get")]
  public static extern bool ZonePoint_is_virtual_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZonePoint_height_set")]
  public static extern void ZonePoint_height_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZonePoint_height_get")]
  public static extern int ZonePoint_height_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZonePoint_width_set")]
  public static extern void ZonePoint_width_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZonePoint_width_get")]
  public static extern int ZonePoint_width_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_ZonePoint")]
  public static extern global::System.IntPtr new_ZonePoint();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_ZonePoint")]
  public static extern void delete_ZonePoint(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneClientAuth_Struct_ip_set")]
  public static extern void ZoneClientAuth_Struct_ip_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneClientAuth_Struct_ip_get")]
  public static extern uint ZoneClientAuth_Struct_ip_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneClientAuth_Struct_wid_set")]
  public static extern void ZoneClientAuth_Struct_wid_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneClientAuth_Struct_wid_get")]
  public static extern uint ZoneClientAuth_Struct_wid_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneClientAuth_Struct_accid_set")]
  public static extern void ZoneClientAuth_Struct_accid_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneClientAuth_Struct_accid_get")]
  public static extern uint ZoneClientAuth_Struct_accid_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneClientAuth_Struct_admin_set")]
  public static extern void ZoneClientAuth_Struct_admin_set(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneClientAuth_Struct_admin_get")]
  public static extern short ZoneClientAuth_Struct_admin_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneClientAuth_Struct_charid_set")]
  public static extern void ZoneClientAuth_Struct_charid_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneClientAuth_Struct_charid_get")]
  public static extern uint ZoneClientAuth_Struct_charid_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneClientAuth_Struct_lsid_set")]
  public static extern void ZoneClientAuth_Struct_lsid_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneClientAuth_Struct_lsid_get")]
  public static extern uint ZoneClientAuth_Struct_lsid_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneClientAuth_Struct_tellsoff_set")]
  public static extern void ZoneClientAuth_Struct_tellsoff_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneClientAuth_Struct_tellsoff_get")]
  public static extern bool ZoneClientAuth_Struct_tellsoff_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneClientAuth_Struct_charname_set")]
  public static extern void ZoneClientAuth_Struct_charname_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneClientAuth_Struct_charname_get")]
  public static extern string ZoneClientAuth_Struct_charname_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneClientAuth_Struct_lskey_set")]
  public static extern void ZoneClientAuth_Struct_lskey_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneClientAuth_Struct_lskey_get")]
  public static extern string ZoneClientAuth_Struct_lskey_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneClientAuth_Struct_stale_set")]
  public static extern void ZoneClientAuth_Struct_stale_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneClientAuth_Struct_stale_get")]
  public static extern bool ZoneClientAuth_Struct_stale_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_ZoneClientAuth_Struct")]
  public static extern global::System.IntPtr new_ZoneClientAuth_Struct();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_ZoneClientAuth_Struct")]
  public static extern void delete_ZoneClientAuth_Struct(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneEXPModInfo_ExpMod_set")]
  public static extern void ZoneEXPModInfo_ExpMod_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneEXPModInfo_ExpMod_get")]
  public static extern float ZoneEXPModInfo_ExpMod_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneEXPModInfo_AAExpMod_set")]
  public static extern void ZoneEXPModInfo_AAExpMod_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneEXPModInfo_AAExpMod_get")]
  public static extern float ZoneEXPModInfo_AAExpMod_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_ZoneEXPModInfo")]
  public static extern global::System.IntPtr new_ZoneEXPModInfo();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_ZoneEXPModInfo")]
  public static extern void delete_ZoneEXPModInfo(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_Bootup__SWIG_0")]
  public static extern bool Zone_Bootup__SWIG_0(uint jarg1, uint jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_Bootup__SWIG_1")]
  public static extern bool Zone_Bootup__SWIG_1(uint jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_Shutdown__SWIG_0")]
  public static extern void Zone_Shutdown__SWIG_0(bool jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_Shutdown__SWIG_1")]
  public static extern void Zone_Shutdown__SWIG_1();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Zone")]
  public static extern global::System.IntPtr new_Zone(uint jarg1, uint jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_Zone")]
  public static extern void delete_Zone(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetAlternateAdvancementAbility")]
  public static extern global::System.IntPtr Zone_GetAlternateAdvancementAbility(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetAlternateAdvancementAbilityByRank")]
  public static extern global::System.IntPtr Zone_GetAlternateAdvancementAbilityByRank(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetAlternateAdvancementRank")]
  public static extern global::System.IntPtr Zone_GetAlternateAdvancementRank(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_is_zone_time_localized_set")]
  public static extern void Zone_is_zone_time_localized_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_is_zone_time_localized_get")]
  public static extern bool Zone_is_zone_time_localized_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_quest_idle_override_set")]
  public static extern void Zone_quest_idle_override_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_quest_idle_override_get")]
  public static extern bool Zone_quest_idle_override_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_IsIdleWhenEmpty")]
  public static extern bool Zone_IsIdleWhenEmpty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_SetIdleWhenEmpty")]
  public static extern void Zone_SetIdleWhenEmpty(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetSecondsBeforeIdle")]
  public static extern uint Zone_GetSecondsBeforeIdle(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_SetSecondsBeforeIdle")]
  public static extern void Zone_SetSecondsBeforeIdle(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_AggroLimitReached")]
  public static extern bool Zone_AggroLimitReached(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_AllowMercs")]
  public static extern bool Zone_AllowMercs(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_CanBind")]
  public static extern bool Zone_CanBind(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_CanCastOutdoor")]
  public static extern bool Zone_CanCastOutdoor(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_CanDoCombat")]
  public static extern bool Zone_CanDoCombat(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_CanLevitate")]
  public static extern bool Zone_CanLevitate(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_Depop__SWIG_0")]
  public static extern bool Zone_Depop__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_Depop__SWIG_1")]
  public static extern bool Zone_Depop__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_did_adventure_actions_set")]
  public static extern void Zone_did_adventure_actions_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_did_adventure_actions_get")]
  public static extern bool Zone_did_adventure_actions_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_HasGraveyard")]
  public static extern bool Zone_HasGraveyard(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_HasWeather")]
  public static extern bool Zone_HasWeather(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_Init")]
  public static extern bool Zone_Init(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_IsCity")]
  public static extern bool Zone_IsCity(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_IsHotzone")]
  public static extern bool Zone_IsHotzone(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_IsLoaded")]
  public static extern bool Zone_IsLoaded(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_IsPVPZone")]
  public static extern bool Zone_IsPVPZone(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_IsSpellBlocked")]
  public static extern bool Zone_IsSpellBlocked(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_IsUCSServerAvailable")]
  public static extern bool Zone_IsUCSServerAvailable(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_IsZone")]
  public static extern bool Zone_IsZone(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, ushort jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_LoadGroundSpawns")]
  public static extern bool Zone_LoadGroundSpawns(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_LoadZoneCFG")]
  public static extern bool Zone_LoadZoneCFG(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, ushort jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_LoadZoneObjects")]
  public static extern bool Zone_LoadZoneObjects(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_IsSpecialBindLocation")]
  public static extern bool Zone_IsSpecialBindLocation(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_Process")]
  public static extern bool Zone_Process(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_SaveZoneCFG")]
  public static extern bool Zone_SaveZoneCFG(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetNpcPositionUpdateDistance")]
  public static extern int Zone_GetNpcPositionUpdateDistance(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_SetNpcPositionUpdateDistance")]
  public static extern void Zone_SetNpcPositionUpdateDistance(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_adv_data_set")]
  public static extern void Zone_adv_data_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_adv_data_get")]
  public static extern string Zone_adv_data_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetSpellBlockedMessage")]
  public static extern string Zone_GetSpellBlockedMessage(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_random_set")]
  public static extern void Zone_random_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_random_get")]
  public static extern global::System.IntPtr Zone_random_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_zone_time_set")]
  public static extern void Zone_zone_time_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_zone_time_get")]
  public static extern global::System.IntPtr Zone_zone_time_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetClosestZonePoint__SWIG_0")]
  public static extern global::System.IntPtr Zone_GetClosestZonePoint__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, string jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, float jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetClosestZonePoint__SWIG_1")]
  public static extern global::System.IntPtr Zone_GetClosestZonePoint__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, string jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_BuffTimersSuspended")]
  public static extern bool Zone_BuffTimersSuspended(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_HasMap")]
  public static extern bool Zone_HasMap(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_HasWaterMap")]
  public static extern bool Zone_HasWaterMap(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_InstantGrids")]
  public static extern bool Zone_InstantGrids(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_IsStaticZone")]
  public static extern bool Zone_IsStaticZone(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_IsInstancePersistent")]
  public static extern bool Zone_IsInstancePersistent(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetFileName")]
  public static extern string Zone_GetFileName(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetLongName")]
  public static extern string Zone_GetLongName(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetShortName")]
  public static extern string Zone_GetShortName(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetZoneType")]
  public static extern byte Zone_GetZoneType(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetInstanceVersion")]
  public static extern ushort Zone_GetInstanceVersion(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetMaxClients")]
  public static extern uint Zone_GetMaxClients(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_graveyard_id")]
  public static extern uint Zone_graveyard_id(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_graveyard_zoneid")]
  public static extern uint Zone_graveyard_zoneid(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetInstanceID")]
  public static extern uint Zone_GetInstanceID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetZoneID")]
  public static extern uint Zone_GetZoneID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetSafePoint")]
  public static extern global::System.IntPtr Zone_GetSafePoint(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetGraveyardPoint")]
  public static extern global::System.IntPtr Zone_GetGraveyardPoint(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetGlobalLootTables")]
  public static extern global::System.IntPtr Zone_GetGlobalLootTables(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetInstanceTimer")]
  public static extern global::System.IntPtr Zone_GetInstanceTimer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_AddGlobalLootEntry")]
  public static extern void Zone_AddGlobalLootEntry(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_SetZoneHasCurrentTime")]
  public static extern void Zone_SetZoneHasCurrentTime(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_ShowNPCGlobalLoot")]
  public static extern void Zone_ShowNPCGlobalLoot(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_ShowZoneGlobalLoot")]
  public static extern void Zone_ShowZoneGlobalLoot(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetZoneTotalBlockedSpells")]
  public static extern int Zone_GetZoneTotalBlockedSpells(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_SaveTempItem__SWIG_0")]
  public static extern int Zone_SaveTempItem__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, int jarg5, bool jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_SaveTempItem__SWIG_1")]
  public static extern int Zone_SaveTempItem__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_MobsAggroCount")]
  public static extern int Zone_MobsAggroCount(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetDynamicZone")]
  public static extern global::System.IntPtr Zone_GetDynamicZone(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_pathing_set")]
  public static extern void Zone_pathing_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_pathing_get")]
  public static extern global::System.IntPtr Zone_pathing_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_npc_emote_list_set")]
  public static extern void Zone_npc_emote_list_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_npc_emote_list_get")]
  public static extern global::System.IntPtr Zone_npc_emote_list_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_spawn2_list_set")]
  public static extern void Zone_spawn2_list_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_spawn2_list_get")]
  public static extern global::System.IntPtr Zone_spawn2_list_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_zone_point_list_set")]
  public static extern void Zone_zone_point_list_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_zone_point_list_get")]
  public static extern global::System.IntPtr Zone_zone_point_list_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_virtual_zone_point_list_set")]
  public static extern void Zone_virtual_zone_point_list_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_virtual_zone_point_list_get")]
  public static extern global::System.IntPtr Zone_virtual_zone_point_list_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_zonemap_set")]
  public static extern void Zone_zonemap_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_zonemap_get")]
  public static extern global::System.IntPtr Zone_zonemap_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetMercTemplate")]
  public static extern global::System.IntPtr Zone_GetMercTemplate(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_newzone_data_set")]
  public static extern void Zone_newzone_data_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_newzone_data_get")]
  public static extern global::System.IntPtr Zone_newzone_data_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_CreateQGlobals")]
  public static extern global::System.IntPtr Zone_CreateQGlobals(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetQGlobals")]
  public static extern global::System.IntPtr Zone_GetQGlobals(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_spawn_conditions_set")]
  public static extern void Zone_spawn_conditions_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_spawn_conditions_get")]
  public static extern global::System.IntPtr Zone_spawn_conditions_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_spawn_group_list_set")]
  public static extern void Zone_spawn_group_list_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_spawn_group_list_get")]
  public static extern global::System.IntPtr Zone_spawn_group_list_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_AlternateCurrencies_set")]
  public static extern void Zone_AlternateCurrencies_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_AlternateCurrencies_get")]
  public static extern global::System.IntPtr Zone_AlternateCurrencies_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_VeteranRewards_set")]
  public static extern void Zone_VeteranRewards_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_VeteranRewards_get")]
  public static extern global::System.IntPtr Zone_VeteranRewards_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_merctable_set")]
  public static extern void Zone_merctable_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_merctable_get")]
  public static extern global::System.IntPtr Zone_merctable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_npctable_set")]
  public static extern void Zone_npctable_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_npctable_get")]
  public static extern global::System.IntPtr Zone_npctable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_level_exp_mod_set")]
  public static extern void Zone_level_exp_mod_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_level_exp_mod_get")]
  public static extern global::System.IntPtr Zone_level_exp_mod_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_zone_grids_set")]
  public static extern void Zone_zone_grids_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_zone_grids_get")]
  public static extern global::System.IntPtr Zone_zone_grids_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_zone_grid_entries_set")]
  public static extern void Zone_zone_grid_entries_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_zone_grid_entries_get")]
  public static extern global::System.IntPtr Zone_zone_grid_entries_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_exp_modifiers_set")]
  public static extern void Zone_exp_modifiers_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_exp_modifiers_get")]
  public static extern global::System.IntPtr Zone_exp_modifiers_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_weather_timer_set")]
  public static extern void Zone_weather_timer_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_weather_timer_get")]
  public static extern global::System.IntPtr Zone_weather_timer_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_spawn2_timer_set")]
  public static extern void Zone_spawn2_timer_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_spawn2_timer_get")]
  public static extern global::System.IntPtr Zone_spawn2_timer_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_hot_reload_timer_set")]
  public static extern void Zone_hot_reload_timer_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_hot_reload_timer_get")]
  public static extern global::System.IntPtr Zone_hot_reload_timer_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_weather_intensity_set")]
  public static extern void Zone_weather_intensity_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_weather_intensity_get")]
  public static extern byte Zone_weather_intensity_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_zone_weather_set")]
  public static extern void Zone_zone_weather_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_zone_weather_get")]
  public static extern byte Zone_zone_weather_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_loglevelvar_set")]
  public static extern void Zone_loglevelvar_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_loglevelvar_get")]
  public static extern byte Zone_loglevelvar_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_lootvar_set")]
  public static extern void Zone_lootvar_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_lootvar_get")]
  public static extern byte Zone_lootvar_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_merchantvar_set")]
  public static extern void Zone_merchantvar_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_merchantvar_get")]
  public static extern byte Zone_merchantvar_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_tradevar_set")]
  public static extern void Zone_tradevar_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_tradevar_get")]
  public static extern byte Zone_tradevar_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_numzonepoints_set")]
  public static extern void Zone_numzonepoints_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_numzonepoints_get")]
  public static extern uint Zone_numzonepoints_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_CountAuth")]
  public static extern uint Zone_CountAuth(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_CountSpawn2")]
  public static extern uint Zone_CountSpawn2(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetSpawnKillCount")]
  public static extern uint Zone_GetSpawnKillCount(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetTempMerchantQuantity")]
  public static extern uint Zone_GetTempMerchantQuantity(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetCurrencyID")]
  public static extern uint Zone_GetCurrencyID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetCurrencyItemID")]
  public static extern uint Zone_GetCurrencyItemID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetAAName")]
  public static extern global::System.IntPtr Zone_GetAAName(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_IsRaining")]
  public static extern bool Zone_IsRaining(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_IsSnowing")]
  public static extern bool Zone_IsSnowing(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetZoneDescription")]
  public static extern global::System.IntPtr Zone_GetZoneDescription(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_SendReloadMessage")]
  public static extern void Zone_SendReloadMessage(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_ClearEXPModifier")]
  public static extern void Zone_ClearEXPModifier(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetAAEXPModifier")]
  public static extern float Zone_GetAAEXPModifier(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetEXPModifier")]
  public static extern float Zone_GetEXPModifier(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_SetAAEXPModifier")]
  public static extern void Zone_SetAAEXPModifier(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, float jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_SetEXPModifier")]
  public static extern void Zone_SetEXPModifier(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, float jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_AddAggroMob")]
  public static extern void Zone_AddAggroMob(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_AddAuth")]
  public static extern void Zone_AddAuth(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_ChangeWeather")]
  public static extern void Zone_ChangeWeather(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_ClearBlockedSpells")]
  public static extern void Zone_ClearBlockedSpells(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_ClearNPCTypeCache")]
  public static extern void Zone_ClearNPCTypeCache(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_CalculateNpcUpdateDistanceSpread")]
  public static extern void Zone_CalculateNpcUpdateDistanceSpread(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_DelAggroMob")]
  public static extern void Zone_DelAggroMob(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_DeleteQGlobal")]
  public static extern void Zone_DeleteQGlobal(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4, uint jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_Despawn")]
  public static extern void Zone_Despawn(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_DoAdventureActions")]
  public static extern void Zone_DoAdventureActions(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_DoAdventureAssassinationCountIncrease")]
  public static extern void Zone_DoAdventureAssassinationCountIncrease(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_DoAdventureCountIncrease")]
  public static extern void Zone_DoAdventureCountIncrease(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_LoadMerchants")]
  public static extern void Zone_LoadMerchants(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetTimeSync")]
  public static extern void Zone_GetTimeSync(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_LoadAdventureFlavor")]
  public static extern void Zone_LoadAdventureFlavor(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_LoadAlternateAdvancement")]
  public static extern void Zone_LoadAlternateAdvancement(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_LoadAlternateCurrencies")]
  public static extern void Zone_LoadAlternateCurrencies(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_LoadDynamicZoneTemplates")]
  public static extern void Zone_LoadDynamicZoneTemplates(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_LoadZoneBlockedSpells")]
  public static extern void Zone_LoadZoneBlockedSpells(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_LoadLDoNTrapEntries")]
  public static extern void Zone_LoadLDoNTrapEntries(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_LoadLDoNTraps")]
  public static extern void Zone_LoadLDoNTraps(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_LoadLevelEXPMods")]
  public static extern void Zone_LoadLevelEXPMods(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_LoadGrids")]
  public static extern void Zone_LoadGrids(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_LoadMercenarySpells")]
  public static extern void Zone_LoadMercenarySpells(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_LoadMercenaryTemplates")]
  public static extern void Zone_LoadMercenaryTemplates(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_LoadNewMerchantData")]
  public static extern void Zone_LoadNewMerchantData(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_LoadNPCEmotes")]
  public static extern void Zone_LoadNPCEmotes(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_LoadTempMerchantData")]
  public static extern void Zone_LoadTempMerchantData(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_LoadVeteranRewards")]
  public static extern void Zone_LoadVeteranRewards(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_LoadZoneDoors")]
  public static extern void Zone_LoadZoneDoors(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_ReloadStaticData")]
  public static extern void Zone_ReloadStaticData(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_ReloadWorld")]
  public static extern void Zone_ReloadWorld(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_RemoveAuth__SWIG_0")]
  public static extern void Zone_RemoveAuth__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_RemoveAuth__SWIG_1")]
  public static extern void Zone_RemoveAuth__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_Repop__SWIG_0")]
  public static extern void Zone_Repop__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_Repop__SWIG_1")]
  public static extern void Zone_Repop__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_RequestUCSServerStatus")]
  public static extern void Zone_RequestUCSServerStatus(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_ResetAuth")]
  public static extern void Zone_ResetAuth(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_SetDate")]
  public static extern void Zone_SetDate(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, byte jarg3, byte jarg4, byte jarg5, byte jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_SetInstanceTimer")]
  public static extern void Zone_SetInstanceTimer(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_SetStaticZone")]
  public static extern void Zone_SetStaticZone(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_SetTime__SWIG_0")]
  public static extern void Zone_SetTime__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, byte jarg3, bool jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_SetTime__SWIG_1")]
  public static extern void Zone_SetTime__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, byte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_SetUCSServerAvailable")]
  public static extern void Zone_SetUCSServerAvailable(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_SpawnConditionChanged")]
  public static extern void Zone_SpawnConditionChanged(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, short jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_StartShutdownTimer__SWIG_0")]
  public static extern void Zone_StartShutdownTimer__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_StartShutdownTimer__SWIG_1")]
  public static extern void Zone_StartShutdownTimer__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_ResetShutdownTimer")]
  public static extern void Zone_ResetShutdownTimer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_StopShutdownTimer")]
  public static extern void Zone_StopShutdownTimer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_UpdateQGlobal")]
  public static extern void Zone_UpdateQGlobal(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_weatherSend__SWIG_0")]
  public static extern void Zone_weatherSend__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_weatherSend__SWIG_1")]
  public static extern void Zone_weatherSend__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_ClearSpawnTimers")]
  public static extern void Zone_ClearSpawnTimers(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_IsQuestHotReloadQueued")]
  public static extern bool Zone_IsQuestHotReloadQueued(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_SetQuestHotReloadQueued")]
  public static extern void Zone_SetQuestHotReloadQueued(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_CompareDataBucket")]
  public static extern bool Zone_CompareDataBucket(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_watermap_set")]
  public static extern void Zone_watermap_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_watermap_get")]
  public static extern global::System.IntPtr Zone_watermap_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetClosestZonePoint__SWIG_2")]
  public static extern global::System.IntPtr Zone_GetClosestZonePoint__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, float jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetClosestZonePoint__SWIG_3")]
  public static extern global::System.IntPtr Zone_GetClosestZonePoint__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetClosestZonePointWithoutZone__SWIG_0")]
  public static extern global::System.IntPtr Zone_GetClosestZonePointWithoutZone__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, float jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, float jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetClosestZonePointWithoutZone__SWIG_1")]
  public static extern global::System.IntPtr Zone_GetClosestZonePointWithoutZone__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, float jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetInitgridsTimer")]
  public static extern global::System.IntPtr Zone_GetInitgridsTimer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetInstanceTimeRemaining")]
  public static extern uint Zone_GetInstanceTimeRemaining(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_SetInstanceTimeRemaining")]
  public static extern void Zone_SetInstanceTimeRemaining(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GMSayHookCallBackProcess")]
  public static extern void Zone_GMSayHookCallBackProcess(ushort jarg1, string jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_SendDiscordMessage__SWIG_0")]
  public static extern void Zone_SendDiscordMessage__SWIG_0(int jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_SendDiscordMessage__SWIG_1")]
  public static extern void Zone_SendDiscordMessage__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_DiscordWebhookMessageHandler")]
  public static extern void Zone_DiscordWebhookMessageHandler(ushort jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetMaxMovementUpdateRange")]
  public static extern double Zone_GetMaxMovementUpdateRange(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_SetIsHotzone")]
  public static extern void Zone_SetIsHotzone(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_ReloadContentFlags")]
  public static extern void Zone_ReloadContentFlags(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_LoadNPCFaction")]
  public static extern void Zone_LoadNPCFaction(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_LoadNPCFactions")]
  public static extern void Zone_LoadNPCFactions(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_ClearNPCFactions")]
  public static extern void Zone_ClearNPCFactions(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_ReloadNPCFactions")]
  public static extern void Zone_ReloadNPCFactions(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetNPCFaction")]
  public static extern global::System.IntPtr Zone_GetNPCFaction(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetNPCFactionEntries")]
  public static extern global::System.IntPtr Zone_GetNPCFactionEntries(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_LoadNPCFactionAssociation")]
  public static extern void Zone_LoadNPCFactionAssociation(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_LoadNPCFactionAssociations")]
  public static extern void Zone_LoadNPCFactionAssociations(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_LoadFactionAssociation")]
  public static extern void Zone_LoadFactionAssociation(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_LoadFactionAssociations")]
  public static extern void Zone_LoadFactionAssociations(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_ClearFactionAssociations")]
  public static extern void Zone_ClearFactionAssociations(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_ReloadFactionAssociations")]
  public static extern void Zone_ReloadFactionAssociations(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetFactionAssociation")]
  public static extern global::System.IntPtr Zone_GetFactionAssociation(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_LoadLootTable")]
  public static extern void Zone_LoadLootTable(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_LoadLootTables")]
  public static extern void Zone_LoadLootTables(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_ClearLootTables")]
  public static extern void Zone_ClearLootTables(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_ReloadLootTables")]
  public static extern void Zone_ReloadLootTables(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetLootTable")]
  public static extern global::System.IntPtr Zone_GetLootTable(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetLootTableEntries")]
  public static extern global::System.IntPtr Zone_GetLootTableEntries(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetLootdrop")]
  public static extern global::System.IntPtr Zone_GetLootdrop(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetLootdropEntries")]
  public static extern global::System.IntPtr Zone_GetLootdropEntries(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_ClearBaseData")]
  public static extern void Zone_ClearBaseData(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_GetBaseData")]
  public static extern global::System.IntPtr Zone_GetBaseData(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, byte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_LoadBaseData")]
  public static extern void Zone_LoadBaseData(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Zone_ReloadBaseData")]
  public static extern void Zone_ReloadBaseData(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SC_AlwaysEnabled_get")]
  public static extern int SC_AlwaysEnabled_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Spawn2__SWIG_0")]
  public static extern global::System.IntPtr new_Spawn2__SWIG_0(uint jarg1, uint jarg2, float jarg3, float jarg4, float jarg5, float jarg6, uint jarg7, uint jarg8, uint jarg9, uint jarg10, bool jarg11, ushort jarg12, short jarg13, bool jarg14, global::System.Runtime.InteropServices.HandleRef jarg15);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Spawn2__SWIG_1")]
  public static extern global::System.IntPtr new_Spawn2__SWIG_1(uint jarg1, uint jarg2, float jarg3, float jarg4, float jarg5, float jarg6, uint jarg7, uint jarg8, uint jarg9, uint jarg10, bool jarg11, ushort jarg12, short jarg13, bool jarg14);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Spawn2__SWIG_2")]
  public static extern global::System.IntPtr new_Spawn2__SWIG_2(uint jarg1, uint jarg2, float jarg3, float jarg4, float jarg5, float jarg6, uint jarg7, uint jarg8, uint jarg9, uint jarg10, bool jarg11, ushort jarg12, short jarg13);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Spawn2__SWIG_3")]
  public static extern global::System.IntPtr new_Spawn2__SWIG_3(uint jarg1, uint jarg2, float jarg3, float jarg4, float jarg5, float jarg6, uint jarg7, uint jarg8, uint jarg9, uint jarg10, bool jarg11, ushort jarg12);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Spawn2__SWIG_4")]
  public static extern global::System.IntPtr new_Spawn2__SWIG_4(uint jarg1, uint jarg2, float jarg3, float jarg4, float jarg5, float jarg6, uint jarg7, uint jarg8, uint jarg9, uint jarg10, bool jarg11);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Spawn2__SWIG_5")]
  public static extern global::System.IntPtr new_Spawn2__SWIG_5(uint jarg1, uint jarg2, float jarg3, float jarg4, float jarg5, float jarg6, uint jarg7, uint jarg8, uint jarg9, uint jarg10);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Spawn2__SWIG_6")]
  public static extern global::System.IntPtr new_Spawn2__SWIG_6(uint jarg1, uint jarg2, float jarg3, float jarg4, float jarg5, float jarg6, uint jarg7, uint jarg8, uint jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_Spawn2__SWIG_7")]
  public static extern global::System.IntPtr new_Spawn2__SWIG_7(uint jarg1, uint jarg2, float jarg3, float jarg4, float jarg5, float jarg6, uint jarg7, uint jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_Spawn2")]
  public static extern void delete_Spawn2(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Spawn2_LoadGrid__SWIG_0")]
  public static extern void Spawn2_LoadGrid__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Spawn2_LoadGrid__SWIG_1")]
  public static extern void Spawn2_LoadGrid__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Spawn2_Enable")]
  public static extern void Spawn2_Enable(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Spawn2_Disable")]
  public static extern void Spawn2_Disable(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Spawn2_Enabled")]
  public static extern bool Spawn2_Enabled(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Spawn2_Process")]
  public static extern bool Spawn2_Process(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Spawn2_Reset")]
  public static extern void Spawn2_Reset(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Spawn2_Depop")]
  public static extern void Spawn2_Depop(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Spawn2_Repop__SWIG_0")]
  public static extern void Spawn2_Repop__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Spawn2_Repop__SWIG_1")]
  public static extern void Spawn2_Repop__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Spawn2_ForceDespawn")]
  public static extern void Spawn2_ForceDespawn(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Spawn2_DeathReset__SWIG_0")]
  public static extern void Spawn2_DeathReset__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Spawn2_DeathReset__SWIG_1")]
  public static extern void Spawn2_DeathReset__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Spawn2_SpawnConditionChanged")]
  public static extern void Spawn2_SpawnConditionChanged(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, short jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Spawn2_GetID")]
  public static extern uint Spawn2_GetID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Spawn2_GetX")]
  public static extern float Spawn2_GetX(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Spawn2_GetY")]
  public static extern float Spawn2_GetY(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Spawn2_GetZ")]
  public static extern float Spawn2_GetZ(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Spawn2_GetHeading")]
  public static extern float Spawn2_GetHeading(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Spawn2_PathWhenZoneIdle")]
  public static extern bool Spawn2_PathWhenZoneIdle(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Spawn2_SetRespawnTimer")]
  public static extern void Spawn2_SetRespawnTimer(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Spawn2_SetVariance")]
  public static extern void Spawn2_SetVariance(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Spawn2_GetVariance")]
  public static extern uint Spawn2_GetVariance(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Spawn2_RespawnTimer")]
  public static extern uint Spawn2_RespawnTimer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Spawn2_SpawnGroupID")]
  public static extern uint Spawn2_SpawnGroupID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Spawn2_CurrentNPCID")]
  public static extern uint Spawn2_CurrentNPCID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Spawn2_SetCurrentNPCID")]
  public static extern void Spawn2_SetCurrentNPCID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Spawn2_GetSpawnCondition")]
  public static extern uint Spawn2_GetSpawnCondition(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Spawn2_NPCPointerValid")]
  public static extern bool Spawn2_NPCPointerValid(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Spawn2_SetNPCPointer")]
  public static extern void Spawn2_SetNPCPointer(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Spawn2_SetNPCPointerNull")]
  public static extern void Spawn2_SetNPCPointerNull(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Spawn2_GetTimer")]
  public static extern global::System.IntPtr Spawn2_GetTimer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Spawn2_SetTimer")]
  public static extern void Spawn2_SetTimer(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Spawn2_GetKillCount")]
  public static extern uint Spawn2_GetKillCount(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_SpawnCondition")]
  public static extern global::System.IntPtr new_SpawnCondition();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnCondition_condition_id_set")]
  public static extern void SpawnCondition_condition_id_set(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnCondition_condition_id_get")]
  public static extern ushort SpawnCondition_condition_id_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnCondition_value_set")]
  public static extern void SpawnCondition_value_set(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnCondition_value_get")]
  public static extern short SpawnCondition_value_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnCondition_on_change_set")]
  public static extern void SpawnCondition_on_change_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnCondition_on_change_get")]
  public static extern int SpawnCondition_on_change_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_SpawnCondition")]
  public static extern void delete_SpawnCondition(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_SpawnEvent")]
  public static extern global::System.IntPtr new_SpawnEvent();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnEvent_id_set")]
  public static extern void SpawnEvent_id_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnEvent_id_get")]
  public static extern uint SpawnEvent_id_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnEvent_condition_id_set")]
  public static extern void SpawnEvent_condition_id_set(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnEvent_condition_id_get")]
  public static extern ushort SpawnEvent_condition_id_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnEvent_zone_name_set")]
  public static extern void SpawnEvent_zone_name_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnEvent_zone_name_get")]
  public static extern global::System.IntPtr SpawnEvent_zone_name_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnEvent_enabled_set")]
  public static extern void SpawnEvent_enabled_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnEvent_enabled_get")]
  public static extern bool SpawnEvent_enabled_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnEvent_action_set")]
  public static extern void SpawnEvent_action_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnEvent_action_get")]
  public static extern int SpawnEvent_action_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnEvent_argument_set")]
  public static extern void SpawnEvent_argument_set(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnEvent_argument_get")]
  public static extern short SpawnEvent_argument_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnEvent_strict_set")]
  public static extern void SpawnEvent_strict_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnEvent_strict_get")]
  public static extern bool SpawnEvent_strict_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnEvent_period_set")]
  public static extern void SpawnEvent_period_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnEvent_period_get")]
  public static extern uint SpawnEvent_period_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnEvent_next_set")]
  public static extern void SpawnEvent_next_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnEvent_next_get")]
  public static extern global::System.IntPtr SpawnEvent_next_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_SpawnEvent")]
  public static extern void delete_SpawnEvent(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_SpawnConditionManager")]
  public static extern global::System.IntPtr new_SpawnConditionManager();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnConditionManager_Process")]
  public static extern void SpawnConditionManager_Process(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnConditionManager_LoadSpawnConditions")]
  public static extern bool SpawnConditionManager_LoadSpawnConditions(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnConditionManager_GetCondition")]
  public static extern short SpawnConditionManager_GetCondition(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, ushort jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnConditionManager_SetCondition__SWIG_0")]
  public static extern void SpawnConditionManager_SetCondition__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, uint jarg3, ushort jarg4, short jarg5, bool jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnConditionManager_SetCondition__SWIG_1")]
  public static extern void SpawnConditionManager_SetCondition__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, uint jarg3, ushort jarg4, short jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnConditionManager_ToggleEvent")]
  public static extern void SpawnConditionManager_ToggleEvent(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, bool jarg3, bool jarg4, bool jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnConditionManager_Check")]
  public static extern bool SpawnConditionManager_Check(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, short jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnConditionManager_ReloadEvent")]
  public static extern void SpawnConditionManager_ReloadEvent(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_SpawnConditionManager")]
  public static extern void delete_SpawnConditionManager(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_format_as__SWIG_0")]
  public static extern int format_as__SWIG_0(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_format_as__SWIG_1")]
  public static extern int format_as__SWIG_1(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_SpawnEntry")]
  public static extern global::System.IntPtr new_SpawnEntry(uint jarg1, int jarg2, ushort jarg3, byte jarg4, byte jarg5, byte jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_SpawnEntry")]
  public static extern void delete_SpawnEntry(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnEntry_NPCType_set")]
  public static extern void SpawnEntry_NPCType_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnEntry_NPCType_get")]
  public static extern uint SpawnEntry_NPCType_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnEntry_chance_set")]
  public static extern void SpawnEntry_chance_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnEntry_chance_get")]
  public static extern int SpawnEntry_chance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnEntry_min_time_set")]
  public static extern void SpawnEntry_min_time_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnEntry_min_time_get")]
  public static extern byte SpawnEntry_min_time_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnEntry_max_time_set")]
  public static extern void SpawnEntry_max_time_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnEntry_max_time_get")]
  public static extern byte SpawnEntry_max_time_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnEntry_condition_value_filter_set")]
  public static extern void SpawnEntry_condition_value_filter_set(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnEntry_condition_value_filter_get")]
  public static extern ushort SpawnEntry_condition_value_filter_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnEntry_npc_spawn_limit_set")]
  public static extern void SpawnEntry_npc_spawn_limit_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnEntry_npc_spawn_limit_get")]
  public static extern byte SpawnEntry_npc_spawn_limit_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_SpawnGroup")]
  public static extern global::System.IntPtr new_SpawnGroup(uint jarg1, string jarg2, int jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, int jarg9, int jarg10, uint jarg11, int jarg12, bool jarg13);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_SpawnGroup")]
  public static extern void delete_SpawnGroup(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnGroup_GetNPCType__SWIG_0")]
  public static extern uint SpawnGroup_GetNPCType__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnGroup_GetNPCType__SWIG_1")]
  public static extern uint SpawnGroup_GetNPCType__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnGroup_AddSpawnEntry")]
  public static extern void SpawnGroup_AddSpawnEntry(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnGroup_id_set")]
  public static extern void SpawnGroup_id_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnGroup_id_get")]
  public static extern uint SpawnGroup_id_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnGroup_wp_spawns_set")]
  public static extern void SpawnGroup_wp_spawns_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnGroup_wp_spawns_get")]
  public static extern bool SpawnGroup_wp_spawns_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnGroup_roamdist_set")]
  public static extern void SpawnGroup_roamdist_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnGroup_roamdist_get")]
  public static extern float SpawnGroup_roamdist_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnGroup_roambox_set")]
  public static extern void SpawnGroup_roambox_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnGroup_roambox_get")]
  public static extern global::System.IntPtr SpawnGroup_roambox_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnGroup_min_delay_set")]
  public static extern void SpawnGroup_min_delay_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnGroup_min_delay_get")]
  public static extern int SpawnGroup_min_delay_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnGroup_delay_set")]
  public static extern void SpawnGroup_delay_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnGroup_delay_get")]
  public static extern int SpawnGroup_delay_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnGroup_despawn_set")]
  public static extern void SpawnGroup_despawn_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnGroup_despawn_get")]
  public static extern int SpawnGroup_despawn_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnGroup_despawn_timer_set")]
  public static extern void SpawnGroup_despawn_timer_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnGroup_despawn_timer_get")]
  public static extern uint SpawnGroup_despawn_timer_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_SpawnGroupList__SWIG_0")]
  public static extern global::System.IntPtr new_SpawnGroupList__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_SpawnGroupList")]
  public static extern void delete_SpawnGroupList(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_SpawnGroupList__SWIG_1")]
  public static extern global::System.IntPtr new_SpawnGroupList__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnGroupList_AddSpawnGroup")]
  public static extern void SpawnGroupList_AddSpawnGroup(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnGroupList_GetSpawnGroup")]
  public static extern global::System.IntPtr SpawnGroupList_GetSpawnGroup(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnGroupList_ClearSpawnGroups")]
  public static extern void SpawnGroupList_ClearSpawnGroups(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_SpawnGroupList_ReloadSpawnGroups")]
  public static extern void SpawnGroupList_ReloadSpawnGroups(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_wplist_index_set")]
  public static extern void wplist_index_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_wplist_index_get")]
  public static extern int wplist_index_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_wplist_x_set")]
  public static extern void wplist_x_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_wplist_x_get")]
  public static extern float wplist_x_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_wplist_y_set")]
  public static extern void wplist_y_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_wplist_y_get")]
  public static extern float wplist_y_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_wplist_z_set")]
  public static extern void wplist_z_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_wplist_z_get")]
  public static extern float wplist_z_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_wplist_pause_set")]
  public static extern void wplist_pause_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_wplist_pause_get")]
  public static extern int wplist_pause_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_wplist_heading_set")]
  public static extern void wplist_heading_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_wplist_heading_get")]
  public static extern float wplist_heading_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_wplist_centerpoint_set")]
  public static extern void wplist_centerpoint_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_wplist_centerpoint_get")]
  public static extern bool wplist_centerpoint_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_wplist")]
  public static extern global::System.IntPtr new_wplist();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_wplist")]
  public static extern void delete_wplist(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_entries_Struct_spellid_set")]
  public static extern void DBnpcspells_entries_Struct_spellid_set(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_entries_Struct_spellid_get")]
  public static extern ushort DBnpcspells_entries_Struct_spellid_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_entries_Struct_minlevel_set")]
  public static extern void DBnpcspells_entries_Struct_minlevel_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_entries_Struct_minlevel_get")]
  public static extern byte DBnpcspells_entries_Struct_minlevel_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_entries_Struct_maxlevel_set")]
  public static extern void DBnpcspells_entries_Struct_maxlevel_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_entries_Struct_maxlevel_get")]
  public static extern byte DBnpcspells_entries_Struct_maxlevel_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_entries_Struct_type_set")]
  public static extern void DBnpcspells_entries_Struct_type_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_entries_Struct_type_get")]
  public static extern uint DBnpcspells_entries_Struct_type_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_entries_Struct_manacost_set")]
  public static extern void DBnpcspells_entries_Struct_manacost_set(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_entries_Struct_manacost_get")]
  public static extern short DBnpcspells_entries_Struct_manacost_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_entries_Struct_priority_set")]
  public static extern void DBnpcspells_entries_Struct_priority_set(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_entries_Struct_priority_get")]
  public static extern short DBnpcspells_entries_Struct_priority_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_entries_Struct_recast_delay_set")]
  public static extern void DBnpcspells_entries_Struct_recast_delay_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_entries_Struct_recast_delay_get")]
  public static extern int DBnpcspells_entries_Struct_recast_delay_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_entries_Struct_resist_adjust_set")]
  public static extern void DBnpcspells_entries_Struct_resist_adjust_set(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_entries_Struct_resist_adjust_get")]
  public static extern short DBnpcspells_entries_Struct_resist_adjust_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_entries_Struct_min_hp_set")]
  public static extern void DBnpcspells_entries_Struct_min_hp_set(global::System.Runtime.InteropServices.HandleRef jarg1, sbyte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_entries_Struct_min_hp_get")]
  public static extern sbyte DBnpcspells_entries_Struct_min_hp_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_entries_Struct_max_hp_set")]
  public static extern void DBnpcspells_entries_Struct_max_hp_set(global::System.Runtime.InteropServices.HandleRef jarg1, sbyte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_entries_Struct_max_hp_get")]
  public static extern sbyte DBnpcspells_entries_Struct_max_hp_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_DBnpcspells_entries_Struct")]
  public static extern global::System.IntPtr new_DBnpcspells_entries_Struct();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_DBnpcspells_entries_Struct")]
  public static extern void delete_DBnpcspells_entries_Struct(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspellseffects_entries_Struct_spelleffectid_set")]
  public static extern void DBnpcspellseffects_entries_Struct_spelleffectid_set(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspellseffects_entries_Struct_spelleffectid_get")]
  public static extern short DBnpcspellseffects_entries_Struct_spelleffectid_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspellseffects_entries_Struct_minlevel_set")]
  public static extern void DBnpcspellseffects_entries_Struct_minlevel_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspellseffects_entries_Struct_minlevel_get")]
  public static extern byte DBnpcspellseffects_entries_Struct_minlevel_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspellseffects_entries_Struct_maxlevel_set")]
  public static extern void DBnpcspellseffects_entries_Struct_maxlevel_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspellseffects_entries_Struct_maxlevel_get")]
  public static extern byte DBnpcspellseffects_entries_Struct_maxlevel_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspellseffects_entries_Struct_base_value_set")]
  public static extern void DBnpcspellseffects_entries_Struct_base_value_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspellseffects_entries_Struct_base_value_get")]
  public static extern int DBnpcspellseffects_entries_Struct_base_value_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspellseffects_entries_Struct_limit_set")]
  public static extern void DBnpcspellseffects_entries_Struct_limit_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspellseffects_entries_Struct_limit_get")]
  public static extern int DBnpcspellseffects_entries_Struct_limit_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspellseffects_entries_Struct_max_value_set")]
  public static extern void DBnpcspellseffects_entries_Struct_max_value_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspellseffects_entries_Struct_max_value_get")]
  public static extern int DBnpcspellseffects_entries_Struct_max_value_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_DBnpcspellseffects_entries_Struct")]
  public static extern global::System.IntPtr new_DBnpcspellseffects_entries_Struct();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_DBnpcspellseffects_entries_Struct")]
  public static extern void delete_DBnpcspellseffects_entries_Struct(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_Struct_parent_list_set")]
  public static extern void DBnpcspells_Struct_parent_list_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_Struct_parent_list_get")]
  public static extern uint DBnpcspells_Struct_parent_list_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_Struct_attack_proc_set")]
  public static extern void DBnpcspells_Struct_attack_proc_set(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_Struct_attack_proc_get")]
  public static extern ushort DBnpcspells_Struct_attack_proc_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_Struct_proc_chance_set")]
  public static extern void DBnpcspells_Struct_proc_chance_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_Struct_proc_chance_get")]
  public static extern byte DBnpcspells_Struct_proc_chance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_Struct_range_proc_set")]
  public static extern void DBnpcspells_Struct_range_proc_set(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_Struct_range_proc_get")]
  public static extern ushort DBnpcspells_Struct_range_proc_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_Struct_rproc_chance_set")]
  public static extern void DBnpcspells_Struct_rproc_chance_set(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_Struct_rproc_chance_get")]
  public static extern short DBnpcspells_Struct_rproc_chance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_Struct_defensive_proc_set")]
  public static extern void DBnpcspells_Struct_defensive_proc_set(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_Struct_defensive_proc_get")]
  public static extern ushort DBnpcspells_Struct_defensive_proc_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_Struct_dproc_chance_set")]
  public static extern void DBnpcspells_Struct_dproc_chance_set(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_Struct_dproc_chance_get")]
  public static extern short DBnpcspells_Struct_dproc_chance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_Struct_fail_recast_set")]
  public static extern void DBnpcspells_Struct_fail_recast_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_Struct_fail_recast_get")]
  public static extern uint DBnpcspells_Struct_fail_recast_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_Struct_engaged_no_sp_recast_min_set")]
  public static extern void DBnpcspells_Struct_engaged_no_sp_recast_min_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_Struct_engaged_no_sp_recast_min_get")]
  public static extern uint DBnpcspells_Struct_engaged_no_sp_recast_min_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_Struct_engaged_no_sp_recast_max_set")]
  public static extern void DBnpcspells_Struct_engaged_no_sp_recast_max_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_Struct_engaged_no_sp_recast_max_get")]
  public static extern uint DBnpcspells_Struct_engaged_no_sp_recast_max_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_Struct_engaged_beneficial_self_chance_set")]
  public static extern void DBnpcspells_Struct_engaged_beneficial_self_chance_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_Struct_engaged_beneficial_self_chance_get")]
  public static extern byte DBnpcspells_Struct_engaged_beneficial_self_chance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_Struct_engaged_beneficial_other_chance_set")]
  public static extern void DBnpcspells_Struct_engaged_beneficial_other_chance_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_Struct_engaged_beneficial_other_chance_get")]
  public static extern byte DBnpcspells_Struct_engaged_beneficial_other_chance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_Struct_engaged_detrimental_chance_set")]
  public static extern void DBnpcspells_Struct_engaged_detrimental_chance_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_Struct_engaged_detrimental_chance_get")]
  public static extern byte DBnpcspells_Struct_engaged_detrimental_chance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_Struct_pursue_no_sp_recast_min_set")]
  public static extern void DBnpcspells_Struct_pursue_no_sp_recast_min_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_Struct_pursue_no_sp_recast_min_get")]
  public static extern uint DBnpcspells_Struct_pursue_no_sp_recast_min_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_Struct_pursue_no_sp_recast_max_set")]
  public static extern void DBnpcspells_Struct_pursue_no_sp_recast_max_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_Struct_pursue_no_sp_recast_max_get")]
  public static extern uint DBnpcspells_Struct_pursue_no_sp_recast_max_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_Struct_pursue_detrimental_chance_set")]
  public static extern void DBnpcspells_Struct_pursue_detrimental_chance_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_Struct_pursue_detrimental_chance_get")]
  public static extern byte DBnpcspells_Struct_pursue_detrimental_chance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_Struct_idle_no_sp_recast_min_set")]
  public static extern void DBnpcspells_Struct_idle_no_sp_recast_min_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_Struct_idle_no_sp_recast_min_get")]
  public static extern uint DBnpcspells_Struct_idle_no_sp_recast_min_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_Struct_idle_no_sp_recast_max_set")]
  public static extern void DBnpcspells_Struct_idle_no_sp_recast_max_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_Struct_idle_no_sp_recast_max_get")]
  public static extern uint DBnpcspells_Struct_idle_no_sp_recast_max_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_Struct_idle_beneficial_chance_set")]
  public static extern void DBnpcspells_Struct_idle_beneficial_chance_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_Struct_idle_beneficial_chance_get")]
  public static extern byte DBnpcspells_Struct_idle_beneficial_chance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_Struct_entries_set")]
  public static extern void DBnpcspells_Struct_entries_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspells_Struct_entries_get")]
  public static extern global::System.IntPtr DBnpcspells_Struct_entries_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_DBnpcspells_Struct")]
  public static extern global::System.IntPtr new_DBnpcspells_Struct();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_DBnpcspells_Struct")]
  public static extern void delete_DBnpcspells_Struct(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspellseffects_Struct_parent_list_set")]
  public static extern void DBnpcspellseffects_Struct_parent_list_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspellseffects_Struct_parent_list_get")]
  public static extern uint DBnpcspellseffects_Struct_parent_list_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspellseffects_Struct_numentries_set")]
  public static extern void DBnpcspellseffects_Struct_numentries_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspellseffects_Struct_numentries_get")]
  public static extern uint DBnpcspellseffects_Struct_numentries_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspellseffects_Struct_entries_set")]
  public static extern void DBnpcspellseffects_Struct_entries_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBnpcspellseffects_Struct_entries_get")]
  public static extern global::System.IntPtr DBnpcspellseffects_Struct_entries_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_DBnpcspellseffects_Struct")]
  public static extern global::System.IntPtr new_DBnpcspellseffects_Struct();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_DBnpcspellseffects_Struct")]
  public static extern void delete_DBnpcspellseffects_Struct(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_entries_Struct_spellid_set")]
  public static extern void DBbotspells_entries_Struct_spellid_set(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_entries_Struct_spellid_get")]
  public static extern ushort DBbotspells_entries_Struct_spellid_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_entries_Struct_minlevel_set")]
  public static extern void DBbotspells_entries_Struct_minlevel_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_entries_Struct_minlevel_get")]
  public static extern byte DBbotspells_entries_Struct_minlevel_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_entries_Struct_maxlevel_set")]
  public static extern void DBbotspells_entries_Struct_maxlevel_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_entries_Struct_maxlevel_get")]
  public static extern byte DBbotspells_entries_Struct_maxlevel_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_entries_Struct_type_set")]
  public static extern void DBbotspells_entries_Struct_type_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_entries_Struct_type_get")]
  public static extern uint DBbotspells_entries_Struct_type_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_entries_Struct_manacost_set")]
  public static extern void DBbotspells_entries_Struct_manacost_set(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_entries_Struct_manacost_get")]
  public static extern short DBbotspells_entries_Struct_manacost_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_entries_Struct_priority_set")]
  public static extern void DBbotspells_entries_Struct_priority_set(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_entries_Struct_priority_get")]
  public static extern short DBbotspells_entries_Struct_priority_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_entries_Struct_recast_delay_set")]
  public static extern void DBbotspells_entries_Struct_recast_delay_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_entries_Struct_recast_delay_get")]
  public static extern int DBbotspells_entries_Struct_recast_delay_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_entries_Struct_resist_adjust_set")]
  public static extern void DBbotspells_entries_Struct_resist_adjust_set(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_entries_Struct_resist_adjust_get")]
  public static extern short DBbotspells_entries_Struct_resist_adjust_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_entries_Struct_min_hp_set")]
  public static extern void DBbotspells_entries_Struct_min_hp_set(global::System.Runtime.InteropServices.HandleRef jarg1, sbyte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_entries_Struct_min_hp_get")]
  public static extern sbyte DBbotspells_entries_Struct_min_hp_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_entries_Struct_max_hp_set")]
  public static extern void DBbotspells_entries_Struct_max_hp_set(global::System.Runtime.InteropServices.HandleRef jarg1, sbyte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_entries_Struct_max_hp_get")]
  public static extern sbyte DBbotspells_entries_Struct_max_hp_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_entries_Struct_bucket_name_set")]
  public static extern void DBbotspells_entries_Struct_bucket_name_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_entries_Struct_bucket_name_get")]
  public static extern global::System.IntPtr DBbotspells_entries_Struct_bucket_name_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_entries_Struct_bucket_value_set")]
  public static extern void DBbotspells_entries_Struct_bucket_value_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_entries_Struct_bucket_value_get")]
  public static extern global::System.IntPtr DBbotspells_entries_Struct_bucket_value_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_entries_Struct_bucket_comparison_set")]
  public static extern void DBbotspells_entries_Struct_bucket_comparison_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_entries_Struct_bucket_comparison_get")]
  public static extern byte DBbotspells_entries_Struct_bucket_comparison_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_DBbotspells_entries_Struct")]
  public static extern global::System.IntPtr new_DBbotspells_entries_Struct();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_DBbotspells_entries_Struct")]
  public static extern void delete_DBbotspells_entries_Struct(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_Struct_parent_list_set")]
  public static extern void DBbotspells_Struct_parent_list_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_Struct_parent_list_get")]
  public static extern uint DBbotspells_Struct_parent_list_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_Struct_attack_proc_set")]
  public static extern void DBbotspells_Struct_attack_proc_set(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_Struct_attack_proc_get")]
  public static extern ushort DBbotspells_Struct_attack_proc_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_Struct_proc_chance_set")]
  public static extern void DBbotspells_Struct_proc_chance_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_Struct_proc_chance_get")]
  public static extern byte DBbotspells_Struct_proc_chance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_Struct_range_proc_set")]
  public static extern void DBbotspells_Struct_range_proc_set(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_Struct_range_proc_get")]
  public static extern ushort DBbotspells_Struct_range_proc_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_Struct_rproc_chance_set")]
  public static extern void DBbotspells_Struct_rproc_chance_set(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_Struct_rproc_chance_get")]
  public static extern short DBbotspells_Struct_rproc_chance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_Struct_defensive_proc_set")]
  public static extern void DBbotspells_Struct_defensive_proc_set(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_Struct_defensive_proc_get")]
  public static extern ushort DBbotspells_Struct_defensive_proc_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_Struct_dproc_chance_set")]
  public static extern void DBbotspells_Struct_dproc_chance_set(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_Struct_dproc_chance_get")]
  public static extern short DBbotspells_Struct_dproc_chance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_Struct_fail_recast_set")]
  public static extern void DBbotspells_Struct_fail_recast_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_Struct_fail_recast_get")]
  public static extern uint DBbotspells_Struct_fail_recast_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_Struct_engaged_no_sp_recast_min_set")]
  public static extern void DBbotspells_Struct_engaged_no_sp_recast_min_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_Struct_engaged_no_sp_recast_min_get")]
  public static extern uint DBbotspells_Struct_engaged_no_sp_recast_min_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_Struct_engaged_no_sp_recast_max_set")]
  public static extern void DBbotspells_Struct_engaged_no_sp_recast_max_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_Struct_engaged_no_sp_recast_max_get")]
  public static extern uint DBbotspells_Struct_engaged_no_sp_recast_max_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_Struct_engaged_beneficial_self_chance_set")]
  public static extern void DBbotspells_Struct_engaged_beneficial_self_chance_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_Struct_engaged_beneficial_self_chance_get")]
  public static extern byte DBbotspells_Struct_engaged_beneficial_self_chance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_Struct_engaged_beneficial_other_chance_set")]
  public static extern void DBbotspells_Struct_engaged_beneficial_other_chance_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_Struct_engaged_beneficial_other_chance_get")]
  public static extern byte DBbotspells_Struct_engaged_beneficial_other_chance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_Struct_engaged_detrimental_chance_set")]
  public static extern void DBbotspells_Struct_engaged_detrimental_chance_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_Struct_engaged_detrimental_chance_get")]
  public static extern byte DBbotspells_Struct_engaged_detrimental_chance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_Struct_pursue_no_sp_recast_min_set")]
  public static extern void DBbotspells_Struct_pursue_no_sp_recast_min_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_Struct_pursue_no_sp_recast_min_get")]
  public static extern uint DBbotspells_Struct_pursue_no_sp_recast_min_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_Struct_pursue_no_sp_recast_max_set")]
  public static extern void DBbotspells_Struct_pursue_no_sp_recast_max_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_Struct_pursue_no_sp_recast_max_get")]
  public static extern uint DBbotspells_Struct_pursue_no_sp_recast_max_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_Struct_pursue_detrimental_chance_set")]
  public static extern void DBbotspells_Struct_pursue_detrimental_chance_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_Struct_pursue_detrimental_chance_get")]
  public static extern byte DBbotspells_Struct_pursue_detrimental_chance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_Struct_idle_no_sp_recast_min_set")]
  public static extern void DBbotspells_Struct_idle_no_sp_recast_min_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_Struct_idle_no_sp_recast_min_get")]
  public static extern uint DBbotspells_Struct_idle_no_sp_recast_min_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_Struct_idle_no_sp_recast_max_set")]
  public static extern void DBbotspells_Struct_idle_no_sp_recast_max_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_Struct_idle_no_sp_recast_max_get")]
  public static extern uint DBbotspells_Struct_idle_no_sp_recast_max_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_Struct_idle_beneficial_chance_set")]
  public static extern void DBbotspells_Struct_idle_beneficial_chance_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_Struct_idle_beneficial_chance_get")]
  public static extern byte DBbotspells_Struct_idle_beneficial_chance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_Struct_entries_set")]
  public static extern void DBbotspells_Struct_entries_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBbotspells_Struct_entries_get")]
  public static extern global::System.IntPtr DBbotspells_Struct_entries_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_DBbotspells_Struct")]
  public static extern global::System.IntPtr new_DBbotspells_Struct();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_DBbotspells_Struct")]
  public static extern void delete_DBbotspells_Struct(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBTradeskillRecipe_Struct_tradeskill_set")]
  public static extern void DBTradeskillRecipe_Struct_tradeskill_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBTradeskillRecipe_Struct_tradeskill_get")]
  public static extern global::System.IntPtr DBTradeskillRecipe_Struct_tradeskill_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBTradeskillRecipe_Struct_skill_needed_set")]
  public static extern void DBTradeskillRecipe_Struct_skill_needed_set(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBTradeskillRecipe_Struct_skill_needed_get")]
  public static extern short DBTradeskillRecipe_Struct_skill_needed_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBTradeskillRecipe_Struct_trivial_set")]
  public static extern void DBTradeskillRecipe_Struct_trivial_set(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBTradeskillRecipe_Struct_trivial_get")]
  public static extern ushort DBTradeskillRecipe_Struct_trivial_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBTradeskillRecipe_Struct_nofail_set")]
  public static extern void DBTradeskillRecipe_Struct_nofail_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBTradeskillRecipe_Struct_nofail_get")]
  public static extern bool DBTradeskillRecipe_Struct_nofail_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBTradeskillRecipe_Struct_replace_container_set")]
  public static extern void DBTradeskillRecipe_Struct_replace_container_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBTradeskillRecipe_Struct_replace_container_get")]
  public static extern bool DBTradeskillRecipe_Struct_replace_container_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBTradeskillRecipe_Struct_onsuccess_set")]
  public static extern void DBTradeskillRecipe_Struct_onsuccess_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBTradeskillRecipe_Struct_onsuccess_get")]
  public static extern global::System.IntPtr DBTradeskillRecipe_Struct_onsuccess_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBTradeskillRecipe_Struct_onfail_set")]
  public static extern void DBTradeskillRecipe_Struct_onfail_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBTradeskillRecipe_Struct_onfail_get")]
  public static extern global::System.IntPtr DBTradeskillRecipe_Struct_onfail_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBTradeskillRecipe_Struct_salvage_set")]
  public static extern void DBTradeskillRecipe_Struct_salvage_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBTradeskillRecipe_Struct_salvage_get")]
  public static extern global::System.IntPtr DBTradeskillRecipe_Struct_salvage_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBTradeskillRecipe_Struct_name_set")]
  public static extern void DBTradeskillRecipe_Struct_name_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBTradeskillRecipe_Struct_name_get")]
  public static extern global::System.IntPtr DBTradeskillRecipe_Struct_name_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBTradeskillRecipe_Struct_must_learn_set")]
  public static extern void DBTradeskillRecipe_Struct_must_learn_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBTradeskillRecipe_Struct_must_learn_get")]
  public static extern byte DBTradeskillRecipe_Struct_must_learn_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBTradeskillRecipe_Struct_has_learnt_set")]
  public static extern void DBTradeskillRecipe_Struct_has_learnt_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBTradeskillRecipe_Struct_has_learnt_get")]
  public static extern bool DBTradeskillRecipe_Struct_has_learnt_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBTradeskillRecipe_Struct_madecount_set")]
  public static extern void DBTradeskillRecipe_Struct_madecount_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBTradeskillRecipe_Struct_madecount_get")]
  public static extern uint DBTradeskillRecipe_Struct_madecount_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBTradeskillRecipe_Struct_recipe_id_set")]
  public static extern void DBTradeskillRecipe_Struct_recipe_id_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBTradeskillRecipe_Struct_recipe_id_get")]
  public static extern uint DBTradeskillRecipe_Struct_recipe_id_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBTradeskillRecipe_Struct_quest_set")]
  public static extern void DBTradeskillRecipe_Struct_quest_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DBTradeskillRecipe_Struct_quest_get")]
  public static extern bool DBTradeskillRecipe_Struct_quest_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_DBTradeskillRecipe_Struct")]
  public static extern global::System.IntPtr new_DBTradeskillRecipe_Struct();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_DBTradeskillRecipe_Struct")]
  public static extern void delete_DBTradeskillRecipe_Struct(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PetRecord_npc_type_set")]
  public static extern void PetRecord_npc_type_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PetRecord_npc_type_get")]
  public static extern uint PetRecord_npc_type_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PetRecord_temporary_set")]
  public static extern void PetRecord_temporary_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PetRecord_temporary_get")]
  public static extern bool PetRecord_temporary_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PetRecord_petpower_set")]
  public static extern void PetRecord_petpower_set(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PetRecord_petpower_get")]
  public static extern short PetRecord_petpower_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PetRecord_petcontrol_set")]
  public static extern void PetRecord_petcontrol_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PetRecord_petcontrol_get")]
  public static extern byte PetRecord_petcontrol_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PetRecord_petnaming_set")]
  public static extern void PetRecord_petnaming_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PetRecord_petnaming_get")]
  public static extern byte PetRecord_petnaming_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PetRecord_monsterflag_set")]
  public static extern void PetRecord_monsterflag_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PetRecord_monsterflag_get")]
  public static extern bool PetRecord_monsterflag_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PetRecord_equipmentset_set")]
  public static extern void PetRecord_equipmentset_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PetRecord_equipmentset_get")]
  public static extern uint PetRecord_equipmentset_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_PetRecord")]
  public static extern global::System.IntPtr new_PetRecord();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_PetRecord")]
  public static extern void delete_PetRecord(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AuraRecord_npc_type_set")]
  public static extern void AuraRecord_npc_type_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AuraRecord_npc_type_get")]
  public static extern uint AuraRecord_npc_type_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AuraRecord_name_set")]
  public static extern void AuraRecord_name_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AuraRecord_name_get")]
  public static extern string AuraRecord_name_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AuraRecord_spell_id_set")]
  public static extern void AuraRecord_spell_id_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AuraRecord_spell_id_get")]
  public static extern int AuraRecord_spell_id_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AuraRecord_distance_set")]
  public static extern void AuraRecord_distance_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AuraRecord_distance_get")]
  public static extern int AuraRecord_distance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AuraRecord_aura_type_set")]
  public static extern void AuraRecord_aura_type_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AuraRecord_aura_type_get")]
  public static extern int AuraRecord_aura_type_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AuraRecord_spawn_type_set")]
  public static extern void AuraRecord_spawn_type_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AuraRecord_spawn_type_get")]
  public static extern int AuraRecord_spawn_type_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AuraRecord_movement_set")]
  public static extern void AuraRecord_movement_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AuraRecord_movement_get")]
  public static extern int AuraRecord_movement_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AuraRecord_duration_set")]
  public static extern void AuraRecord_duration_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AuraRecord_duration_get")]
  public static extern int AuraRecord_duration_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AuraRecord_icon_set")]
  public static extern void AuraRecord_icon_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AuraRecord_icon_get")]
  public static extern int AuraRecord_icon_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AuraRecord_cast_time_set")]
  public static extern void AuraRecord_cast_time_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AuraRecord_cast_time_get")]
  public static extern int AuraRecord_cast_time_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_AuraRecord")]
  public static extern global::System.IntPtr new_AuraRecord();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_AuraRecord")]
  public static extern void delete_AuraRecord(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PetInfo_SpellID_set")]
  public static extern void PetInfo_SpellID_set(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PetInfo_SpellID_get")]
  public static extern ushort PetInfo_SpellID_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PetInfo_petpower_set")]
  public static extern void PetInfo_petpower_set(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PetInfo_petpower_get")]
  public static extern short PetInfo_petpower_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PetInfo_HP_set")]
  public static extern void PetInfo_HP_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PetInfo_HP_get")]
  public static extern uint PetInfo_HP_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PetInfo_Mana_set")]
  public static extern void PetInfo_Mana_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PetInfo_Mana_get")]
  public static extern uint PetInfo_Mana_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PetInfo_size_set")]
  public static extern void PetInfo_size_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PetInfo_size_get")]
  public static extern float PetInfo_size_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PetInfo_Buffs_set")]
  public static extern void PetInfo_Buffs_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PetInfo_Buffs_get")]
  public static extern global::System.IntPtr PetInfo_Buffs_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PetInfo_Items_set")]
  public static extern void PetInfo_Items_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PetInfo_Items_get")]
  public static extern global::System.IntPtr PetInfo_Items_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PetInfo_Name_set")]
  public static extern void PetInfo_Name_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PetInfo_Name_get")]
  public static extern string PetInfo_Name_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PetInfo_taunting_set")]
  public static extern void PetInfo_taunting_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PetInfo_taunting_get")]
  public static extern bool PetInfo_taunting_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_PetInfo")]
  public static extern global::System.IntPtr new_PetInfo();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_PetInfo")]
  public static extern void delete_PetInfo(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneSpellsBlocked_spellid_set")]
  public static extern void ZoneSpellsBlocked_spellid_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneSpellsBlocked_spellid_get")]
  public static extern uint ZoneSpellsBlocked_spellid_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneSpellsBlocked_type_set")]
  public static extern void ZoneSpellsBlocked_type_set(global::System.Runtime.InteropServices.HandleRef jarg1, sbyte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneSpellsBlocked_type_get")]
  public static extern sbyte ZoneSpellsBlocked_type_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneSpellsBlocked_m_Location_set")]
  public static extern void ZoneSpellsBlocked_m_Location_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneSpellsBlocked_m_Location_get")]
  public static extern global::System.IntPtr ZoneSpellsBlocked_m_Location_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneSpellsBlocked_m_Difference_set")]
  public static extern void ZoneSpellsBlocked_m_Difference_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneSpellsBlocked_m_Difference_get")]
  public static extern global::System.IntPtr ZoneSpellsBlocked_m_Difference_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneSpellsBlocked_message_set")]
  public static extern void ZoneSpellsBlocked_message_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneSpellsBlocked_message_get")]
  public static extern string ZoneSpellsBlocked_message_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_ZoneSpellsBlocked")]
  public static extern global::System.IntPtr new_ZoneSpellsBlocked();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_ZoneSpellsBlocked")]
  public static extern void delete_ZoneSpellsBlocked(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_TraderCharges_Struct_ItemID_set")]
  public static extern void TraderCharges_Struct_ItemID_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_TraderCharges_Struct_ItemID_get")]
  public static extern global::System.IntPtr TraderCharges_Struct_ItemID_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_TraderCharges_Struct_SerialNumber_set")]
  public static extern void TraderCharges_Struct_SerialNumber_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_TraderCharges_Struct_SerialNumber_get")]
  public static extern global::System.IntPtr TraderCharges_Struct_SerialNumber_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_TraderCharges_Struct_ItemCost_set")]
  public static extern void TraderCharges_Struct_ItemCost_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_TraderCharges_Struct_ItemCost_get")]
  public static extern global::System.IntPtr TraderCharges_Struct_ItemCost_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_TraderCharges_Struct_Charges_set")]
  public static extern void TraderCharges_Struct_Charges_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_TraderCharges_Struct_Charges_get")]
  public static extern global::System.IntPtr TraderCharges_Struct_Charges_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_TraderCharges_Struct")]
  public static extern global::System.IntPtr new_TraderCharges_Struct();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_TraderCharges_Struct")]
  public static extern void delete_TraderCharges_Struct(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MaxMercStanceID_get")]
  public static extern int MaxMercStanceID_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercStanceInfo_ProficiencyID_set")]
  public static extern void MercStanceInfo_ProficiencyID_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercStanceInfo_ProficiencyID_get")]
  public static extern byte MercStanceInfo_ProficiencyID_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercStanceInfo_ClassID_set")]
  public static extern void MercStanceInfo_ClassID_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercStanceInfo_ClassID_get")]
  public static extern byte MercStanceInfo_ClassID_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercStanceInfo_StanceID_set")]
  public static extern void MercStanceInfo_StanceID_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercStanceInfo_StanceID_get")]
  public static extern uint MercStanceInfo_StanceID_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercStanceInfo_IsDefault_set")]
  public static extern void MercStanceInfo_IsDefault_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercStanceInfo_IsDefault_get")]
  public static extern byte MercStanceInfo_IsDefault_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_MercStanceInfo")]
  public static extern global::System.IntPtr new_MercStanceInfo();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_MercStanceInfo")]
  public static extern void delete_MercStanceInfo(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercTemplate_MercTemplateID_set")]
  public static extern void MercTemplate_MercTemplateID_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercTemplate_MercTemplateID_get")]
  public static extern uint MercTemplate_MercTemplateID_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercTemplate_MercType_set")]
  public static extern void MercTemplate_MercType_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercTemplate_MercType_get")]
  public static extern uint MercTemplate_MercType_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercTemplate_MercSubType_set")]
  public static extern void MercTemplate_MercSubType_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercTemplate_MercSubType_get")]
  public static extern uint MercTemplate_MercSubType_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercTemplate_RaceID_set")]
  public static extern void MercTemplate_RaceID_set(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercTemplate_RaceID_get")]
  public static extern ushort MercTemplate_RaceID_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercTemplate_ClassID_set")]
  public static extern void MercTemplate_ClassID_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercTemplate_ClassID_get")]
  public static extern byte MercTemplate_ClassID_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercTemplate_MercNPCID_set")]
  public static extern void MercTemplate_MercNPCID_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercTemplate_MercNPCID_get")]
  public static extern uint MercTemplate_MercNPCID_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercTemplate_ProficiencyID_set")]
  public static extern void MercTemplate_ProficiencyID_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercTemplate_ProficiencyID_get")]
  public static extern byte MercTemplate_ProficiencyID_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercTemplate_TierID_set")]
  public static extern void MercTemplate_TierID_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercTemplate_TierID_get")]
  public static extern byte MercTemplate_TierID_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercTemplate_CostFormula_set")]
  public static extern void MercTemplate_CostFormula_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercTemplate_CostFormula_get")]
  public static extern byte MercTemplate_CostFormula_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercTemplate_ClientVersion_set")]
  public static extern void MercTemplate_ClientVersion_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercTemplate_ClientVersion_get")]
  public static extern uint MercTemplate_ClientVersion_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercTemplate_MercNameType_set")]
  public static extern void MercTemplate_MercNameType_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercTemplate_MercNameType_get")]
  public static extern byte MercTemplate_MercNameType_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercTemplate_MercNamePrefix_set")]
  public static extern void MercTemplate_MercNamePrefix_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercTemplate_MercNamePrefix_get")]
  public static extern string MercTemplate_MercNamePrefix_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercTemplate_MercNameSuffix_set")]
  public static extern void MercTemplate_MercNameSuffix_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercTemplate_MercNameSuffix_get")]
  public static extern string MercTemplate_MercNameSuffix_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercTemplate_Stances_set")]
  public static extern void MercTemplate_Stances_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercTemplate_Stances_get")]
  public static extern global::System.IntPtr MercTemplate_Stances_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_MercTemplate")]
  public static extern global::System.IntPtr new_MercTemplate();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_MercTemplate")]
  public static extern void delete_MercTemplate(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_mercid_set")]
  public static extern void MercInfo_mercid_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_mercid_get")]
  public static extern uint MercInfo_mercid_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_slot_set")]
  public static extern void MercInfo_slot_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_slot_get")]
  public static extern byte MercInfo_slot_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_merc_name_set")]
  public static extern void MercInfo_merc_name_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_merc_name_get")]
  public static extern string MercInfo_merc_name_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_MercTemplateID_set")]
  public static extern void MercInfo_MercTemplateID_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_MercTemplateID_get")]
  public static extern uint MercInfo_MercTemplateID_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_myTemplate_set")]
  public static extern void MercInfo_myTemplate_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_myTemplate_get")]
  public static extern global::System.IntPtr MercInfo_myTemplate_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_SuspendedTime_set")]
  public static extern void MercInfo_SuspendedTime_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_SuspendedTime_get")]
  public static extern uint MercInfo_SuspendedTime_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_IsSuspended_set")]
  public static extern void MercInfo_IsSuspended_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_IsSuspended_get")]
  public static extern bool MercInfo_IsSuspended_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_MercTimerRemaining_set")]
  public static extern void MercInfo_MercTimerRemaining_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_MercTimerRemaining_get")]
  public static extern uint MercInfo_MercTimerRemaining_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_Gender_set")]
  public static extern void MercInfo_Gender_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_Gender_get")]
  public static extern byte MercInfo_Gender_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_MercSize_set")]
  public static extern void MercInfo_MercSize_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_MercSize_get")]
  public static extern float MercInfo_MercSize_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_State_set")]
  public static extern void MercInfo_State_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_State_get")]
  public static extern int MercInfo_State_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_Stance_set")]
  public static extern void MercInfo_Stance_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_Stance_get")]
  public static extern uint MercInfo_Stance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_hp_set")]
  public static extern void MercInfo_hp_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_hp_get")]
  public static extern int MercInfo_hp_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_mana_set")]
  public static extern void MercInfo_mana_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_mana_get")]
  public static extern int MercInfo_mana_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_endurance_set")]
  public static extern void MercInfo_endurance_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_endurance_get")]
  public static extern int MercInfo_endurance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_face_set")]
  public static extern void MercInfo_face_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_face_get")]
  public static extern byte MercInfo_face_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_luclinHairStyle_set")]
  public static extern void MercInfo_luclinHairStyle_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_luclinHairStyle_get")]
  public static extern byte MercInfo_luclinHairStyle_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_luclinHairColor_set")]
  public static extern void MercInfo_luclinHairColor_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_luclinHairColor_get")]
  public static extern byte MercInfo_luclinHairColor_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_luclinEyeColor_set")]
  public static extern void MercInfo_luclinEyeColor_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_luclinEyeColor_get")]
  public static extern byte MercInfo_luclinEyeColor_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_luclinEyeColor2_set")]
  public static extern void MercInfo_luclinEyeColor2_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_luclinEyeColor2_get")]
  public static extern byte MercInfo_luclinEyeColor2_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_luclinBeardColor_set")]
  public static extern void MercInfo_luclinBeardColor_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_luclinBeardColor_get")]
  public static extern byte MercInfo_luclinBeardColor_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_luclinBeard_set")]
  public static extern void MercInfo_luclinBeard_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_luclinBeard_get")]
  public static extern byte MercInfo_luclinBeard_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_drakkinHeritage_set")]
  public static extern void MercInfo_drakkinHeritage_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_drakkinHeritage_get")]
  public static extern uint MercInfo_drakkinHeritage_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_drakkinTattoo_set")]
  public static extern void MercInfo_drakkinTattoo_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_drakkinTattoo_get")]
  public static extern uint MercInfo_drakkinTattoo_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_drakkinDetails_set")]
  public static extern void MercInfo_drakkinDetails_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercInfo_drakkinDetails_get")]
  public static extern uint MercInfo_drakkinDetails_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_MercInfo")]
  public static extern global::System.IntPtr new_MercInfo();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_MercInfo")]
  public static extern void delete_MercInfo(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercSpellEntry_proficiencyid_set")]
  public static extern void MercSpellEntry_proficiencyid_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercSpellEntry_proficiencyid_get")]
  public static extern byte MercSpellEntry_proficiencyid_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercSpellEntry_spellid_set")]
  public static extern void MercSpellEntry_spellid_set(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercSpellEntry_spellid_get")]
  public static extern ushort MercSpellEntry_spellid_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercSpellEntry_type_set")]
  public static extern void MercSpellEntry_type_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercSpellEntry_type_get")]
  public static extern uint MercSpellEntry_type_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercSpellEntry_stance_set")]
  public static extern void MercSpellEntry_stance_set(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercSpellEntry_stance_get")]
  public static extern short MercSpellEntry_stance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercSpellEntry_minlevel_set")]
  public static extern void MercSpellEntry_minlevel_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercSpellEntry_minlevel_get")]
  public static extern byte MercSpellEntry_minlevel_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercSpellEntry_maxlevel_set")]
  public static extern void MercSpellEntry_maxlevel_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercSpellEntry_maxlevel_get")]
  public static extern byte MercSpellEntry_maxlevel_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercSpellEntry_slot_set")]
  public static extern void MercSpellEntry_slot_set(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercSpellEntry_slot_get")]
  public static extern short MercSpellEntry_slot_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercSpellEntry_proc_chance_set")]
  public static extern void MercSpellEntry_proc_chance_set(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercSpellEntry_proc_chance_get")]
  public static extern ushort MercSpellEntry_proc_chance_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercSpellEntry_time_cancast_set")]
  public static extern void MercSpellEntry_time_cancast_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_MercSpellEntry_time_cancast_get")]
  public static extern uint MercSpellEntry_time_cancast_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_MercSpellEntry")]
  public static extern global::System.IntPtr new_MercSpellEntry();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_MercSpellEntry")]
  public static extern void delete_MercSpellEntry(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ClientMercEntry_id_set")]
  public static extern void ClientMercEntry_id_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ClientMercEntry_id_get")]
  public static extern uint ClientMercEntry_id_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ClientMercEntry_npcid_set")]
  public static extern void ClientMercEntry_npcid_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ClientMercEntry_npcid_get")]
  public static extern uint ClientMercEntry_npcid_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_ClientMercEntry")]
  public static extern global::System.IntPtr new_ClientMercEntry();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_ClientMercEntry")]
  public static extern void delete_ClientMercEntry(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseItemEntry_item_id_set")]
  public static extern void CharacterCorpseItemEntry_item_id_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseItemEntry_item_id_get")]
  public static extern uint CharacterCorpseItemEntry_item_id_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseItemEntry_equip_slot_set")]
  public static extern void CharacterCorpseItemEntry_equip_slot_set(global::System.Runtime.InteropServices.HandleRef jarg1, short jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseItemEntry_equip_slot_get")]
  public static extern short CharacterCorpseItemEntry_equip_slot_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseItemEntry_charges_set")]
  public static extern void CharacterCorpseItemEntry_charges_set(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseItemEntry_charges_get")]
  public static extern ushort CharacterCorpseItemEntry_charges_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseItemEntry_lootslot_set")]
  public static extern void CharacterCorpseItemEntry_lootslot_set(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseItemEntry_lootslot_get")]
  public static extern ushort CharacterCorpseItemEntry_lootslot_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseItemEntry_aug_1_set")]
  public static extern void CharacterCorpseItemEntry_aug_1_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseItemEntry_aug_1_get")]
  public static extern uint CharacterCorpseItemEntry_aug_1_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseItemEntry_aug_2_set")]
  public static extern void CharacterCorpseItemEntry_aug_2_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseItemEntry_aug_2_get")]
  public static extern uint CharacterCorpseItemEntry_aug_2_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseItemEntry_aug_3_set")]
  public static extern void CharacterCorpseItemEntry_aug_3_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseItemEntry_aug_3_get")]
  public static extern uint CharacterCorpseItemEntry_aug_3_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseItemEntry_aug_4_set")]
  public static extern void CharacterCorpseItemEntry_aug_4_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseItemEntry_aug_4_get")]
  public static extern uint CharacterCorpseItemEntry_aug_4_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseItemEntry_aug_5_set")]
  public static extern void CharacterCorpseItemEntry_aug_5_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseItemEntry_aug_5_get")]
  public static extern uint CharacterCorpseItemEntry_aug_5_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseItemEntry_aug_6_set")]
  public static extern void CharacterCorpseItemEntry_aug_6_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseItemEntry_aug_6_get")]
  public static extern uint CharacterCorpseItemEntry_aug_6_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseItemEntry_attuned_set")]
  public static extern void CharacterCorpseItemEntry_attuned_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseItemEntry_attuned_get")]
  public static extern bool CharacterCorpseItemEntry_attuned_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseItemEntry_custom_data_set")]
  public static extern void CharacterCorpseItemEntry_custom_data_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseItemEntry_custom_data_get")]
  public static extern global::System.IntPtr CharacterCorpseItemEntry_custom_data_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseItemEntry_ornamenticon_set")]
  public static extern void CharacterCorpseItemEntry_ornamenticon_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseItemEntry_ornamenticon_get")]
  public static extern uint CharacterCorpseItemEntry_ornamenticon_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseItemEntry_ornamentidfile_set")]
  public static extern void CharacterCorpseItemEntry_ornamentidfile_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseItemEntry_ornamentidfile_get")]
  public static extern uint CharacterCorpseItemEntry_ornamentidfile_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseItemEntry_ornament_hero_model_set")]
  public static extern void CharacterCorpseItemEntry_ornament_hero_model_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseItemEntry_ornament_hero_model_get")]
  public static extern uint CharacterCorpseItemEntry_ornament_hero_model_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_CharacterCorpseItemEntry")]
  public static extern global::System.IntPtr new_CharacterCorpseItemEntry();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_CharacterCorpseItemEntry")]
  public static extern void delete_CharacterCorpseItemEntry(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_locked_set")]
  public static extern void CharacterCorpseEntry_locked_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_locked_get")]
  public static extern bool CharacterCorpseEntry_locked_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_exp_set")]
  public static extern void CharacterCorpseEntry_exp_set(global::System.Runtime.InteropServices.HandleRef jarg1, ulong jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_exp_get")]
  public static extern ulong CharacterCorpseEntry_exp_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_gm_exp_set")]
  public static extern void CharacterCorpseEntry_gm_exp_set(global::System.Runtime.InteropServices.HandleRef jarg1, ulong jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_gm_exp_get")]
  public static extern ulong CharacterCorpseEntry_gm_exp_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_size_set")]
  public static extern void CharacterCorpseEntry_size_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_size_get")]
  public static extern float CharacterCorpseEntry_size_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_level_set")]
  public static extern void CharacterCorpseEntry_level_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_level_get")]
  public static extern byte CharacterCorpseEntry_level_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_race_set")]
  public static extern void CharacterCorpseEntry_race_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_race_get")]
  public static extern uint CharacterCorpseEntry_race_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_gender_set")]
  public static extern void CharacterCorpseEntry_gender_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_gender_get")]
  public static extern byte CharacterCorpseEntry_gender_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_class__set")]
  public static extern void CharacterCorpseEntry_class__set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_class__get")]
  public static extern byte CharacterCorpseEntry_class__get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_deity_set")]
  public static extern void CharacterCorpseEntry_deity_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_deity_get")]
  public static extern byte CharacterCorpseEntry_deity_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_texture_set")]
  public static extern void CharacterCorpseEntry_texture_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_texture_get")]
  public static extern byte CharacterCorpseEntry_texture_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_helmtexture_set")]
  public static extern void CharacterCorpseEntry_helmtexture_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_helmtexture_get")]
  public static extern byte CharacterCorpseEntry_helmtexture_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_copper_set")]
  public static extern void CharacterCorpseEntry_copper_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_copper_get")]
  public static extern uint CharacterCorpseEntry_copper_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_silver_set")]
  public static extern void CharacterCorpseEntry_silver_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_silver_get")]
  public static extern uint CharacterCorpseEntry_silver_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_gold_set")]
  public static extern void CharacterCorpseEntry_gold_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_gold_get")]
  public static extern uint CharacterCorpseEntry_gold_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_plat_set")]
  public static extern void CharacterCorpseEntry_plat_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_plat_get")]
  public static extern uint CharacterCorpseEntry_plat_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_item_tint_set")]
  public static extern void CharacterCorpseEntry_item_tint_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_item_tint_get")]
  public static extern global::System.IntPtr CharacterCorpseEntry_item_tint_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_haircolor_set")]
  public static extern void CharacterCorpseEntry_haircolor_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_haircolor_get")]
  public static extern byte CharacterCorpseEntry_haircolor_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_beardcolor_set")]
  public static extern void CharacterCorpseEntry_beardcolor_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_beardcolor_get")]
  public static extern byte CharacterCorpseEntry_beardcolor_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_eyecolor1_set")]
  public static extern void CharacterCorpseEntry_eyecolor1_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_eyecolor1_get")]
  public static extern byte CharacterCorpseEntry_eyecolor1_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_eyecolor2_set")]
  public static extern void CharacterCorpseEntry_eyecolor2_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_eyecolor2_get")]
  public static extern byte CharacterCorpseEntry_eyecolor2_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_hairstyle_set")]
  public static extern void CharacterCorpseEntry_hairstyle_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_hairstyle_get")]
  public static extern byte CharacterCorpseEntry_hairstyle_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_face_set")]
  public static extern void CharacterCorpseEntry_face_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_face_get")]
  public static extern byte CharacterCorpseEntry_face_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_beard_set")]
  public static extern void CharacterCorpseEntry_beard_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_beard_get")]
  public static extern byte CharacterCorpseEntry_beard_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_killed_by_set")]
  public static extern void CharacterCorpseEntry_killed_by_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_killed_by_get")]
  public static extern byte CharacterCorpseEntry_killed_by_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_rezzable_set")]
  public static extern void CharacterCorpseEntry_rezzable_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_rezzable_get")]
  public static extern bool CharacterCorpseEntry_rezzable_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_rez_time_set")]
  public static extern void CharacterCorpseEntry_rez_time_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_rez_time_get")]
  public static extern uint CharacterCorpseEntry_rez_time_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_drakkin_heritage_set")]
  public static extern void CharacterCorpseEntry_drakkin_heritage_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_drakkin_heritage_get")]
  public static extern uint CharacterCorpseEntry_drakkin_heritage_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_drakkin_tattoo_set")]
  public static extern void CharacterCorpseEntry_drakkin_tattoo_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_drakkin_tattoo_get")]
  public static extern uint CharacterCorpseEntry_drakkin_tattoo_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_drakkin_details_set")]
  public static extern void CharacterCorpseEntry_drakkin_details_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_drakkin_details_get")]
  public static extern uint CharacterCorpseEntry_drakkin_details_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_items_set")]
  public static extern void CharacterCorpseEntry_items_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CharacterCorpseEntry_items_get")]
  public static extern global::System.IntPtr CharacterCorpseEntry_items_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_CharacterCorpseEntry")]
  public static extern global::System.IntPtr new_CharacterCorpseEntry();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_CharacterCorpseEntry")]
  public static extern void delete_CharacterCorpseEntry(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PetStruct_race_id_set")]
  public static extern void PetStruct_race_id_set(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PetStruct_race_id_get")]
  public static extern ushort PetStruct_race_id_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PetStruct_texture_set")]
  public static extern void PetStruct_texture_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PetStruct_texture_get")]
  public static extern byte PetStruct_texture_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PetStruct_helm_texture_set")]
  public static extern void PetStruct_helm_texture_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PetStruct_helm_texture_get")]
  public static extern byte PetStruct_helm_texture_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PetStruct_gender_set")]
  public static extern void PetStruct_gender_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PetStruct_gender_get")]
  public static extern byte PetStruct_gender_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PetStruct_size_modifier_set")]
  public static extern void PetStruct_size_modifier_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PetStruct_size_modifier_get")]
  public static extern float PetStruct_size_modifier_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PetStruct_face_set")]
  public static extern void PetStruct_face_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_PetStruct_face_get")]
  public static extern byte PetStruct_face_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_PetStruct")]
  public static extern global::System.IntPtr new_PetStruct();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_PetStruct")]
  public static extern void delete_PetStruct(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CreateNewSpawn_get")]
  public static extern int CreateNewSpawn_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AddNewSpawngroup_get")]
  public static extern int AddNewSpawngroup_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_UpdateAppearance_get")]
  public static extern int UpdateAppearance_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RemoveSpawn_get")]
  public static extern int RemoveSpawn_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DeleteSpawn_get")]
  public static extern int DeleteSpawn_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AddSpawnFromSpawngroup_get")]
  public static extern int AddSpawnFromSpawngroup_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_CreateNewNPC_get")]
  public static extern int CreateNewNPC_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidLeader_get")]
  public static extern int RaidLeader_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_GroupLeader_get")]
  public static extern int GroupLeader_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Selected_get")]
  public static extern int Selected_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_All_get")]
  public static extern int All_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_ZoneDatabase__SWIG_0")]
  public static extern global::System.IntPtr new_ZoneDatabase__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_ZoneDatabase__SWIG_1")]
  public static extern global::System.IntPtr new_ZoneDatabase__SWIG_1(string jarg1, string jarg2, string jarg3, string jarg4, uint jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_ZoneDatabase")]
  public static extern void delete_ZoneDatabase(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_LoadWorldContainer")]
  public static extern void ZoneDatabase_LoadWorldContainer(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_SaveWorldContainer")]
  public static extern void ZoneDatabase_SaveWorldContainer(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_DeleteWorldContainer")]
  public static extern void ZoneDatabase_DeleteWorldContainer(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_AddObject")]
  public static extern uint ZoneDatabase_AddObject(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_UpdateObject")]
  public static extern void ZoneDatabase_UpdateObject(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, global::System.Runtime.InteropServices.HandleRef jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_DeleteObject")]
  public static extern void ZoneDatabase_DeleteObject(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_LoadGroundSpawns")]
  public static extern global::System.IntPtr ZoneDatabase_LoadGroundSpawns(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, short jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_SaveTraderItem")]
  public static extern void ZoneDatabase_SaveTraderItem(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, int jarg5, uint jarg6, byte jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_UpdateTraderItemCharges")]
  public static extern void ZoneDatabase_UpdateTraderItemCharges(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, uint jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_UpdateTraderItemPrice")]
  public static extern void ZoneDatabase_UpdateTraderItemPrice(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, uint jarg3, uint jarg4, uint jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_DeleteTraderItem__SWIG_0")]
  public static extern void ZoneDatabase_DeleteTraderItem__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_DeleteTraderItem__SWIG_1")]
  public static extern void ZoneDatabase_DeleteTraderItem__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, ushort jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_LoadSingleTraderItem")]
  public static extern global::System.IntPtr ZoneDatabase_LoadSingleTraderItem(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_LoadTraderItem")]
  public static extern global::System.IntPtr ZoneDatabase_LoadTraderItem(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_LoadTraderItemWithCharges")]
  public static extern global::System.IntPtr ZoneDatabase_LoadTraderItemWithCharges(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_AddBuyLine")]
  public static extern void ZoneDatabase_AddBuyLine(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, string jarg5, uint jarg6, uint jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_RemoveBuyLine")]
  public static extern void ZoneDatabase_RemoveBuyLine(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_DeleteBuyLines")]
  public static extern void ZoneDatabase_DeleteBuyLines(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_UpdateBuyLine")]
  public static extern void ZoneDatabase_UpdateBuyLine(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_UpdateGMStatus")]
  public static extern void ZoneDatabase_UpdateGMStatus(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_SaveBuffs")]
  public static extern void ZoneDatabase_SaveBuffs(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_LoadBuffs")]
  public static extern void ZoneDatabase_LoadBuffs(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_SaveAuras")]
  public static extern void ZoneDatabase_SaveAuras(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_LoadAuras")]
  public static extern void ZoneDatabase_LoadAuras(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_LoadPetInfo")]
  public static extern void ZoneDatabase_LoadPetInfo(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_SavePetInfo")]
  public static extern void ZoneDatabase_SavePetInfo(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_RemoveTempFactions")]
  public static extern void ZoneDatabase_RemoveTempFactions(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_UpdateItemRecast")]
  public static extern void ZoneDatabase_UpdateItemRecast(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_DeleteItemRecast")]
  public static extern void ZoneDatabase_DeleteItemRecast(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_DeleteCharacterAAs")]
  public static extern bool ZoneDatabase_DeleteCharacterAAs(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_DeleteCharacterBandolier")]
  public static extern bool ZoneDatabase_DeleteCharacterBandolier(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_DeleteCharacterDiscipline")]
  public static extern bool ZoneDatabase_DeleteCharacterDiscipline(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_DeleteCharacterMaterialColor")]
  public static extern bool ZoneDatabase_DeleteCharacterMaterialColor(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_DeleteCharacterLeadershipAbilities")]
  public static extern bool ZoneDatabase_DeleteCharacterLeadershipAbilities(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_DeleteCharacterMemorizedSpell")]
  public static extern bool ZoneDatabase_DeleteCharacterMemorizedSpell(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_DeleteCharacterSpell")]
  public static extern bool ZoneDatabase_DeleteCharacterSpell(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_LoadCharacterBandolier")]
  public static extern bool ZoneDatabase_LoadCharacterBandolier(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_LoadCharacterBindPoint")]
  public static extern bool ZoneDatabase_LoadCharacterBindPoint(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_LoadCharacterCurrency")]
  public static extern bool ZoneDatabase_LoadCharacterCurrency(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_LoadCharacterData")]
  public static extern bool ZoneDatabase_LoadCharacterData(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_LoadCharacterDisciplines")]
  public static extern bool ZoneDatabase_LoadCharacterDisciplines(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_LoadCharacterFactionValues")]
  public static extern bool ZoneDatabase_LoadCharacterFactionValues(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_LoadCharacterLanguages")]
  public static extern bool ZoneDatabase_LoadCharacterLanguages(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_LoadCharacterLeadershipAbilities")]
  public static extern bool ZoneDatabase_LoadCharacterLeadershipAbilities(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_LoadCharacterMaterialColor")]
  public static extern bool ZoneDatabase_LoadCharacterMaterialColor(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_LoadCharacterMemmedSpells")]
  public static extern bool ZoneDatabase_LoadCharacterMemmedSpells(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_LoadCharacterPotionBelt")]
  public static extern bool ZoneDatabase_LoadCharacterPotionBelt(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_LoadCharacterSkills")]
  public static extern bool ZoneDatabase_LoadCharacterSkills(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_LoadCharacterSpellBook")]
  public static extern bool ZoneDatabase_LoadCharacterSpellBook(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_SaveCharacterBandolier")]
  public static extern bool ZoneDatabase_SaveCharacterBandolier(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, byte jarg3, byte jarg4, uint jarg5, uint jarg6, string jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_SaveCharacterCurrency")]
  public static extern bool ZoneDatabase_SaveCharacterCurrency(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_SaveCharacterData")]
  public static extern bool ZoneDatabase_SaveCharacterData(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_SaveCharacterDiscipline")]
  public static extern bool ZoneDatabase_SaveCharacterDiscipline(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_SaveCharacterLanguage")]
  public static extern bool ZoneDatabase_SaveCharacterLanguage(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_SaveCharacterLeadershipAbilities")]
  public static extern bool ZoneDatabase_SaveCharacterLeadershipAbilities(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_SaveCharacterMaterialColor")]
  public static extern bool ZoneDatabase_SaveCharacterMaterialColor(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, byte jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_SaveCharacterMemorizedSpell")]
  public static extern bool ZoneDatabase_SaveCharacterMemorizedSpell(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_SaveCharacterPotionBelt")]
  public static extern bool ZoneDatabase_SaveCharacterPotionBelt(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, byte jarg3, uint jarg4, uint jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_SaveCharacterSkill")]
  public static extern bool ZoneDatabase_SaveCharacterSkill(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_SaveCharacterSpell")]
  public static extern bool ZoneDatabase_SaveCharacterSpell(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_ZeroPlayerProfileCurrency")]
  public static extern void ZoneDatabase_ZeroPlayerProfileCurrency(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_LoadCharacterEXPModifier")]
  public static extern void ZoneDatabase_LoadCharacterEXPModifier(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_SaveCharacterEXPModifier")]
  public static extern void ZoneDatabase_SaveCharacterEXPModifier(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_GetAAEXPModifierByCharID__SWIG_0")]
  public static extern float ZoneDatabase_GetAAEXPModifierByCharID__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, short jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_GetAAEXPModifierByCharID__SWIG_1")]
  public static extern float ZoneDatabase_GetAAEXPModifierByCharID__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_GetEXPModifierByCharID__SWIG_0")]
  public static extern float ZoneDatabase_GetEXPModifierByCharID__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, short jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_GetEXPModifierByCharID__SWIG_1")]
  public static extern float ZoneDatabase_GetEXPModifierByCharID__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_SetAAEXPModifierByCharID__SWIG_0")]
  public static extern void ZoneDatabase_SetAAEXPModifierByCharID__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, float jarg4, short jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_SetAAEXPModifierByCharID__SWIG_1")]
  public static extern void ZoneDatabase_SetAAEXPModifierByCharID__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, float jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_SetEXPModifierByCharID__SWIG_0")]
  public static extern void ZoneDatabase_SetEXPModifierByCharID__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, float jarg4, short jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_SetEXPModifierByCharID__SWIG_1")]
  public static extern void ZoneDatabase_SetEXPModifierByCharID__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, float jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_NoRentExpired")]
  public static extern bool ZoneDatabase_NoRentExpired(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_SaveCharacterInvSnapshot")]
  public static extern bool ZoneDatabase_SaveCharacterInvSnapshot(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_CountCharacterInvSnapshots")]
  public static extern int ZoneDatabase_CountCharacterInvSnapshots(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_ClearCharacterInvSnapshots__SWIG_0")]
  public static extern void ZoneDatabase_ClearCharacterInvSnapshots__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_ClearCharacterInvSnapshots__SWIG_1")]
  public static extern void ZoneDatabase_ClearCharacterInvSnapshots__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_ListCharacterInvSnapshots")]
  public static extern void ZoneDatabase_ListCharacterInvSnapshots(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_ValidateCharacterInvSnapshotTimestamp")]
  public static extern bool ZoneDatabase_ValidateCharacterInvSnapshotTimestamp(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_ParseCharacterInvSnapshot")]
  public static extern void ZoneDatabase_ParseCharacterInvSnapshot(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_DivergeCharacterInvSnapshotFromInventory")]
  public static extern void ZoneDatabase_DivergeCharacterInvSnapshotFromInventory(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_DivergeCharacterInventoryFromInvSnapshot")]
  public static extern void ZoneDatabase_DivergeCharacterInventoryFromInvSnapshot(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_RestoreCharacterInvSnapshot")]
  public static extern bool ZoneDatabase_RestoreCharacterInvSnapshot(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_BuryAllCharacterCorpses")]
  public static extern bool ZoneDatabase_BuryAllCharacterCorpses(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_BuryCharacterCorpse")]
  public static extern bool ZoneDatabase_BuryCharacterCorpse(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_CountCharacterCorpses")]
  public static extern long ZoneDatabase_CountCharacterCorpses(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_CountCharacterCorpsesByZoneID")]
  public static extern long ZoneDatabase_CountCharacterCorpsesByZoneID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_DeleteCharacterCorpse")]
  public static extern bool ZoneDatabase_DeleteCharacterCorpse(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_DeleteItemOffCharacterCorpse")]
  public static extern bool ZoneDatabase_DeleteItemOffCharacterCorpse(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_GetCharacterBuriedCorpseCount")]
  public static extern uint ZoneDatabase_GetCharacterBuriedCorpseCount(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_GetCharacterCorpseCount")]
  public static extern long ZoneDatabase_GetCharacterCorpseCount(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_GetCharacterCorpseDecayTimer")]
  public static extern uint ZoneDatabase_GetCharacterCorpseDecayTimer(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_GetCharacterCorpseID")]
  public static extern uint ZoneDatabase_GetCharacterCorpseID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, byte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_GetCharacterCorpseItemAt")]
  public static extern uint ZoneDatabase_GetCharacterCorpseItemAt(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, ushort jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_GetDecayTimes")]
  public static extern bool ZoneDatabase_GetDecayTimes(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_GetFirstCorpseID")]
  public static extern uint ZoneDatabase_GetFirstCorpseID(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_LoadCharacterCorpse")]
  public static extern global::System.IntPtr ZoneDatabase_LoadCharacterCorpse(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_LoadCharacterCorpses")]
  public static extern bool ZoneDatabase_LoadCharacterCorpses(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, ushort jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_MarkCorpseAsResurrected")]
  public static extern void ZoneDatabase_MarkCorpseAsResurrected(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_SaveCharacterCorpse")]
  public static extern uint ZoneDatabase_SaveCharacterCorpse(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, uint jarg4, ushort jarg5, global::System.Runtime.InteropServices.HandleRef jarg6, global::System.Runtime.InteropServices.HandleRef jarg7, uint jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_SendCharacterCorpseToGraveyard")]
  public static extern uint ZoneDatabase_SendCharacterCorpseToGraveyard(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_SendCharacterCorpseToNonInstance")]
  public static extern void ZoneDatabase_SendCharacterCorpseToNonInstance(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_SummonBuriedCharacterCorpses")]
  public static extern global::System.IntPtr ZoneDatabase_SummonBuriedCharacterCorpses(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_SummonAllCharacterCorpses")]
  public static extern bool ZoneDatabase_SummonAllCharacterCorpses(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_UnburyCharacterCorpse")]
  public static extern bool ZoneDatabase_UnburyCharacterCorpse(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, ushort jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_UpdateCharacterCorpse__SWIG_0")]
  public static extern uint ZoneDatabase_UpdateCharacterCorpse__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, uint jarg5, ushort jarg6, global::System.Runtime.InteropServices.HandleRef jarg7, global::System.Runtime.InteropServices.HandleRef jarg8, uint jarg9, bool jarg10);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_UpdateCharacterCorpse__SWIG_1")]
  public static extern uint ZoneDatabase_UpdateCharacterCorpse__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, uint jarg5, ushort jarg6, global::System.Runtime.InteropServices.HandleRef jarg7, global::System.Runtime.InteropServices.HandleRef jarg8, uint jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_UpdateCharacterCorpseConsent")]
  public static extern uint ZoneDatabase_UpdateCharacterCorpseConsent(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_GetFactionData")]
  public static extern bool ZoneDatabase_GetFactionData(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4, uint jarg5, int jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_GetFactionName__SWIG_0")]
  public static extern bool ZoneDatabase_GetFactionName__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_GetFactionName__SWIG_1")]
  public static extern global::System.IntPtr ZoneDatabase_GetFactionName__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_GetFactionIDsForNPC__SWIG_0")]
  public static extern bool ZoneDatabase_GetFactionIDsForNPC__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_GetFactionIDsForNPC__SWIG_1")]
  public static extern bool ZoneDatabase_GetFactionIDsForNPC__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_SetCharacterFactionLevel")]
  public static extern bool ZoneDatabase_SetCharacterFactionLevel(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, int jarg3, int jarg4, byte jarg5, global::System.Runtime.InteropServices.HandleRef jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_LoadFactionData")]
  public static extern bool ZoneDatabase_LoadFactionData(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_GetMaxFaction")]
  public static extern uint ZoneDatabase_GetMaxFaction(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_LoadAlternateAdvancementAbilities")]
  public static extern bool ZoneDatabase_LoadAlternateAdvancementAbilities(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_LoadAlternateAdvancement")]
  public static extern bool ZoneDatabase_LoadAlternateAdvancement(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_SaveZoneCFG")]
  public static extern bool ZoneDatabase_SaveZoneCFG(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, ushort jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_LoadStaticZonePoints")]
  public static extern bool ZoneDatabase_LoadStaticZonePoints(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, string jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_getZoneShutDownDelay")]
  public static extern int ZoneDatabase_getZoneShutDownDelay(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_LoadSpawnGroups")]
  public static extern bool ZoneDatabase_LoadSpawnGroups(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, ushort jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_LoadSpawnGroupsByID")]
  public static extern bool ZoneDatabase_LoadSpawnGroupsByID(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_PopulateZoneSpawnList")]
  public static extern bool ZoneDatabase_PopulateZoneSpawnList(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, short jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_CreateSpawn2")]
  public static extern bool ZoneDatabase_CreateSpawn2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, uint jarg6, uint jarg7, ushort jarg8, short jarg9);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_UpdateRespawnTime")]
  public static extern void ZoneDatabase_UpdateRespawnTime(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, ushort jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_GetSpawnTimeLeft")]
  public static extern uint ZoneDatabase_GetSpawnTimeLeft(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, ushort jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_UpdateSpawn2Status")]
  public static extern void ZoneDatabase_UpdateSpawn2Status(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, byte jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_GetFreeGrid")]
  public static extern uint ZoneDatabase_GetFreeGrid(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_DeleteWaypoint")]
  public static extern void ZoneDatabase_DeleteWaypoint(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4, uint jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_AddWaypoint")]
  public static extern void ZoneDatabase_AddWaypoint(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, uint jarg6, uint jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_AddWaypointForSpawn")]
  public static extern uint ZoneDatabase_AddWaypointForSpawn(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, uint jarg5, int jarg6, int jarg7, uint jarg8);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_ModifyGrid__SWIG_0")]
  public static extern void ZoneDatabase_ModifyGrid__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, uint jarg4, byte jarg5, byte jarg6, uint jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_ModifyGrid__SWIG_1")]
  public static extern void ZoneDatabase_ModifyGrid__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, uint jarg4, byte jarg5, byte jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_ModifyGrid__SWIG_2")]
  public static extern void ZoneDatabase_ModifyGrid__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, uint jarg4, byte jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_ModifyGrid__SWIG_3")]
  public static extern void ZoneDatabase_ModifyGrid__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_GridExistsInZone")]
  public static extern bool ZoneDatabase_GridExistsInZone(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_GetHighestGrid")]
  public static extern int ZoneDatabase_GetHighestGrid(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_GetHighestWaypoint")]
  public static extern int ZoneDatabase_GetHighestWaypoint(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_GetRandomWaypointFromGrid")]
  public static extern int ZoneDatabase_GetRandomWaypointFromGrid(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_NPCSpawnDB__SWIG_0")]
  public static extern uint ZoneDatabase_NPCSpawnDB__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, uint jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, global::System.Runtime.InteropServices.HandleRef jarg6, uint jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_NPCSpawnDB__SWIG_1")]
  public static extern uint ZoneDatabase_NPCSpawnDB__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, uint jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, global::System.Runtime.InteropServices.HandleRef jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_NPCSpawnDB__SWIG_2")]
  public static extern uint ZoneDatabase_NPCSpawnDB__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, uint jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_CreateNewNPCCommand")]
  public static extern uint ZoneDatabase_CreateNewNPCCommand(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, uint jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_AddNewNPCSpawnGroupCommand")]
  public static extern uint ZoneDatabase_AddNewNPCSpawnGroupCommand(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, uint jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_DeleteSpawnLeaveInNPCTypeTable")]
  public static extern uint ZoneDatabase_DeleteSpawnLeaveInNPCTypeTable(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_DeleteSpawnRemoveFromNPCTypeTable")]
  public static extern uint ZoneDatabase_DeleteSpawnRemoveFromNPCTypeTable(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_AddSpawnFromSpawnGroup")]
  public static extern uint ZoneDatabase_AddSpawnFromSpawnGroup(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, uint jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_AddNPCTypes")]
  public static extern uint ZoneDatabase_AddNPCTypes(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, uint jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_UpdateNPCTypeAppearance")]
  public static extern uint ZoneDatabase_UpdateNPCTypeAppearance(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_SetSpecialAttkFlag")]
  public static extern bool ZoneDatabase_SetSpecialAttkFlag(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_GetPetEntry")]
  public static extern bool ZoneDatabase_GetPetEntry(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_GetPoweredPetEntry")]
  public static extern bool ZoneDatabase_GetPoweredPetEntry(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, short jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_GetBasePetItems")]
  public static extern bool ZoneDatabase_GetBasePetItems(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_GetBeastlordPetData")]
  public static extern global::System.IntPtr ZoneDatabase_GetBeastlordPetData(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_GetMaxNPCSpellsID")]
  public static extern uint ZoneDatabase_GetMaxNPCSpellsID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_GetMaxNPCSpellsEffectsID")]
  public static extern uint ZoneDatabase_GetMaxNPCSpellsEffectsID(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_GetAuraEntry")]
  public static extern bool ZoneDatabase_GetAuraEntry(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_LoadGlobalLoot")]
  public static extern void ZoneDatabase_LoadGlobalLoot(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_GetNPCSpells")]
  public static extern global::System.IntPtr ZoneDatabase_GetNPCSpells(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_GetNPCSpellsEffects")]
  public static extern global::System.IntPtr ZoneDatabase_GetNPCSpellsEffects(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_ClearNPCSpells")]
  public static extern void ZoneDatabase_ClearNPCSpells(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_LoadNPCTypesData__SWIG_0")]
  public static extern global::System.IntPtr ZoneDatabase_LoadNPCTypesData__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_LoadNPCTypesData__SWIG_1")]
  public static extern global::System.IntPtr ZoneDatabase_LoadNPCTypesData__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_GetBotSpells")]
  public static extern global::System.IntPtr ZoneDatabase_GetBotSpells(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_ClearBotSpells")]
  public static extern void ZoneDatabase_ClearBotSpells(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_GetMercenaryType")]
  public static extern global::System.IntPtr ZoneDatabase_GetMercenaryType(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, ushort jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_LoadMercenaryEquipment")]
  public static extern void ZoneDatabase_LoadMercenaryEquipment(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_SaveMercenaryBuffs")]
  public static extern void ZoneDatabase_SaveMercenaryBuffs(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_LoadMercenaryBuffs")]
  public static extern void ZoneDatabase_LoadMercenaryBuffs(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_LoadMercenaryInfo")]
  public static extern bool ZoneDatabase_LoadMercenaryInfo(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_LoadCurrentMercenary")]
  public static extern bool ZoneDatabase_LoadCurrentMercenary(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_SaveMercenary")]
  public static extern bool ZoneDatabase_SaveMercenary(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_DeleteMercenary")]
  public static extern bool ZoneDatabase_DeleteMercenary(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_DeletePetitionFromDB")]
  public static extern void ZoneDatabase_DeletePetitionFromDB(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_UpdatePetitionToDB")]
  public static extern void ZoneDatabase_UpdatePetitionToDB(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_InsertPetitionToDB")]
  public static extern void ZoneDatabase_InsertPetitionToDB(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_RefreshPetitionsFromDB")]
  public static extern void ZoneDatabase_RefreshPetitionsFromDB(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_SaveMerchantTemp")]
  public static extern void ZoneDatabase_SaveMerchantTemp(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, uint jarg5, uint jarg6, uint jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_DeleteMerchantTemp")]
  public static extern void ZoneDatabase_DeleteMerchantTemp(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, uint jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_GetTradeRecipe__SWIG_0")]
  public static extern bool ZoneDatabase_GetTradeRecipe__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, byte jarg3, uint jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, global::System.Runtime.InteropServices.HandleRef jarg6, global::System.Runtime.InteropServices.HandleRef jarg7);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_GetTradeRecipe__SWIG_1")]
  public static extern bool ZoneDatabase_GetTradeRecipe__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, byte jarg3, uint jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, global::System.Runtime.InteropServices.HandleRef jarg6);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_LoadForage")]
  public static extern uint ZoneDatabase_LoadForage(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, byte jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_LoadFishing")]
  public static extern uint ZoneDatabase_LoadFishing(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, byte jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_UpdateRecipeMadecount")]
  public static extern void ZoneDatabase_UpdateRecipeMadecount(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_EnableRecipe")]
  public static extern bool ZoneDatabase_EnableRecipe(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_DisableRecipe")]
  public static extern bool ZoneDatabase_DisableRecipe(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_GetRecipeComponentItemIDs")]
  public static extern global::System.IntPtr ZoneDatabase_GetRecipeComponentItemIDs(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_GetRecipeComponentCount")]
  public static extern sbyte ZoneDatabase_GetRecipeComponentCount(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_LoadTributes")]
  public static extern bool ZoneDatabase_LoadTributes(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_LoadDoors")]
  public static extern global::System.IntPtr ZoneDatabase_LoadDoors(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, short jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_GetDoorsCountPlusOne")]
  public static extern uint ZoneDatabase_GetDoorsCountPlusOne(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_GetDoorsDBCountPlusOne")]
  public static extern int ZoneDatabase_GetDoorsDBCountPlusOne(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, short jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_GetBlockedSpellsCount")]
  public static extern long ZoneDatabase_GetBlockedSpellsCount(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_LoadBlockedSpells")]
  public static extern bool ZoneDatabase_LoadBlockedSpells(global::System.Runtime.InteropServices.HandleRef jarg1, long jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_LoadTraps")]
  public static extern bool ZoneDatabase_LoadTraps(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, short jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_SetTrapData__SWIG_0")]
  public static extern bool ZoneDatabase_SetTrapData__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_SetTrapData__SWIG_1")]
  public static extern bool ZoneDatabase_SetTrapData__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_GetZoneTimezone")]
  public static extern uint ZoneDatabase_GetZoneTimezone(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_SetZoneTimezone")]
  public static extern bool ZoneDatabase_SetZoneTimezone(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_RefreshGroupFromDB")]
  public static extern void ZoneDatabase_RefreshGroupFromDB(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_ListAllInstances")]
  public static extern void ZoneDatabase_ListAllInstances(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_QGlobalPurge")]
  public static extern void ZoneDatabase_QGlobalPurge(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_LoadAltCurrencyValues")]
  public static extern void ZoneDatabase_LoadAltCurrencyValues(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_UpdateAltCurrencyValue")]
  public static extern void ZoneDatabase_UpdateAltCurrencyValue(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_GetKarma")]
  public static extern uint ZoneDatabase_GetKarma(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_UpdateKarma")]
  public static extern void ZoneDatabase_UpdateKarma(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_botdb_set")]
  public static extern void ZoneDatabase_botdb_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_botdb_get")]
  public static extern global::System.IntPtr ZoneDatabase_botdb_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_LoadCharacterTribute")]
  public static extern void ZoneDatabase_LoadCharacterTribute(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_SaveCharacterBinds")]
  public static extern void ZoneDatabase_SaveCharacterBinds(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ZoneDatabase_SaveCharacterTribute")]
  public static extern void ZoneDatabase_SaveCharacterTribute(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_database_set")]
  public static extern void database_set(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_database_get")]
  public static extern global::System.IntPtr database_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_content_db_set")]
  public static extern void content_db_set(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_content_db_get")]
  public static extern global::System.IntPtr content_db_get();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_LinkedListNewSpawn")]
  public static extern global::System.IntPtr new_LinkedListNewSpawn();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_LinkedListNewSpawn")]
  public static extern void delete_LinkedListNewSpawn(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListNewSpawn_dont_delete_set")]
  public static extern void LinkedListNewSpawn_dont_delete_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListNewSpawn_dont_delete_get")]
  public static extern bool LinkedListNewSpawn_dont_delete_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListNewSpawn_Append")]
  public static extern void LinkedListNewSpawn_Append(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListNewSpawn_Insert")]
  public static extern void LinkedListNewSpawn_Insert(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListNewSpawn_Pop")]
  public static extern global::System.IntPtr LinkedListNewSpawn_Pop(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListNewSpawn_PeekTop")]
  public static extern global::System.IntPtr LinkedListNewSpawn_PeekTop(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListNewSpawn_Clear")]
  public static extern void LinkedListNewSpawn_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListNewSpawn_LCount")]
  public static extern void LinkedListNewSpawn_LCount(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListNewSpawn_ResetCount")]
  public static extern void LinkedListNewSpawn_ResetCount(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListNewSpawn_Count")]
  public static extern uint LinkedListNewSpawn_Count(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListNewSpawn_GetFirst")]
  public static extern global::System.IntPtr LinkedListNewSpawn_GetFirst(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_LinkedListSpawn2")]
  public static extern global::System.IntPtr new_LinkedListSpawn2();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_LinkedListSpawn2")]
  public static extern void delete_LinkedListSpawn2(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListSpawn2_dont_delete_set")]
  public static extern void LinkedListSpawn2_dont_delete_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListSpawn2_dont_delete_get")]
  public static extern bool LinkedListSpawn2_dont_delete_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListSpawn2_Append")]
  public static extern void LinkedListSpawn2_Append(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListSpawn2_Insert")]
  public static extern void LinkedListSpawn2_Insert(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListSpawn2_Pop")]
  public static extern global::System.IntPtr LinkedListSpawn2_Pop(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListSpawn2_PeekTop")]
  public static extern global::System.IntPtr LinkedListSpawn2_PeekTop(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListSpawn2_Clear")]
  public static extern void LinkedListSpawn2_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListSpawn2_LCount")]
  public static extern void LinkedListSpawn2_LCount(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListSpawn2_ResetCount")]
  public static extern void LinkedListSpawn2_ResetCount(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListSpawn2_Count")]
  public static extern uint LinkedListSpawn2_Count(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListSpawn2_GetFirst")]
  public static extern global::System.IntPtr LinkedListSpawn2_GetFirst(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_LinkedListZonePoint")]
  public static extern global::System.IntPtr new_LinkedListZonePoint();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_LinkedListZonePoint")]
  public static extern void delete_LinkedListZonePoint(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListZonePoint_dont_delete_set")]
  public static extern void LinkedListZonePoint_dont_delete_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListZonePoint_dont_delete_get")]
  public static extern bool LinkedListZonePoint_dont_delete_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListZonePoint_Append")]
  public static extern void LinkedListZonePoint_Append(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListZonePoint_Insert")]
  public static extern void LinkedListZonePoint_Insert(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListZonePoint_Pop")]
  public static extern global::System.IntPtr LinkedListZonePoint_Pop(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListZonePoint_PeekTop")]
  public static extern global::System.IntPtr LinkedListZonePoint_PeekTop(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListZonePoint_Clear")]
  public static extern void LinkedListZonePoint_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListZonePoint_LCount")]
  public static extern void LinkedListZonePoint_LCount(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListZonePoint_ResetCount")]
  public static extern void LinkedListZonePoint_ResetCount(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListZonePoint_Count")]
  public static extern uint LinkedListZonePoint_Count(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListZonePoint_GetFirst")]
  public static extern global::System.IntPtr LinkedListZonePoint_GetFirst(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_LinkedListElementNewSpawn")]
  public static extern global::System.IntPtr new_LinkedListElementNewSpawn(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_LinkedListElementNewSpawn")]
  public static extern void delete_LinkedListElementNewSpawn(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListElementNewSpawn_GetLast")]
  public static extern global::System.IntPtr LinkedListElementNewSpawn_GetLast(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListElementNewSpawn_GetNext")]
  public static extern global::System.IntPtr LinkedListElementNewSpawn_GetNext(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListElementNewSpawn_GetPrev")]
  public static extern global::System.IntPtr LinkedListElementNewSpawn_GetPrev(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListElementNewSpawn_GetData__SWIG_0")]
  public static extern global::System.IntPtr LinkedListElementNewSpawn_GetData__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListElementNewSpawn_SetData")]
  public static extern void LinkedListElementNewSpawn_SetData(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListElementNewSpawn_SetLastNext")]
  public static extern void LinkedListElementNewSpawn_SetLastNext(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListElementNewSpawn_SetNext")]
  public static extern void LinkedListElementNewSpawn_SetNext(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListElementNewSpawn_SetPrev")]
  public static extern void LinkedListElementNewSpawn_SetPrev(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListElementNewSpawn_ReplaceData")]
  public static extern void LinkedListElementNewSpawn_ReplaceData(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListElementNewSpawn_GetObject")]
  public static extern global::System.IntPtr LinkedListElementNewSpawn_GetObject(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_LinkedListElementSpawn2")]
  public static extern global::System.IntPtr new_LinkedListElementSpawn2(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_LinkedListElementSpawn2")]
  public static extern void delete_LinkedListElementSpawn2(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListElementSpawn2_GetLast")]
  public static extern global::System.IntPtr LinkedListElementSpawn2_GetLast(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListElementSpawn2_GetNext")]
  public static extern global::System.IntPtr LinkedListElementSpawn2_GetNext(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListElementSpawn2_GetPrev")]
  public static extern global::System.IntPtr LinkedListElementSpawn2_GetPrev(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListElementSpawn2_GetData__SWIG_0")]
  public static extern global::System.IntPtr LinkedListElementSpawn2_GetData__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListElementSpawn2_SetData")]
  public static extern void LinkedListElementSpawn2_SetData(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListElementSpawn2_SetLastNext")]
  public static extern void LinkedListElementSpawn2_SetLastNext(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListElementSpawn2_SetNext")]
  public static extern void LinkedListElementSpawn2_SetNext(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListElementSpawn2_SetPrev")]
  public static extern void LinkedListElementSpawn2_SetPrev(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListElementSpawn2_ReplaceData")]
  public static extern void LinkedListElementSpawn2_ReplaceData(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListElementSpawn2_GetObject")]
  public static extern global::System.IntPtr LinkedListElementSpawn2_GetObject(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_LinkedListElementZonePoint")]
  public static extern global::System.IntPtr new_LinkedListElementZonePoint(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_LinkedListElementZonePoint")]
  public static extern void delete_LinkedListElementZonePoint(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListElementZonePoint_GetLast")]
  public static extern global::System.IntPtr LinkedListElementZonePoint_GetLast(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListElementZonePoint_GetNext")]
  public static extern global::System.IntPtr LinkedListElementZonePoint_GetNext(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListElementZonePoint_GetPrev")]
  public static extern global::System.IntPtr LinkedListElementZonePoint_GetPrev(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListElementZonePoint_GetData__SWIG_0")]
  public static extern global::System.IntPtr LinkedListElementZonePoint_GetData__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListElementZonePoint_SetData")]
  public static extern void LinkedListElementZonePoint_SetData(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListElementZonePoint_SetLastNext")]
  public static extern void LinkedListElementZonePoint_SetLastNext(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListElementZonePoint_SetNext")]
  public static extern void LinkedListElementZonePoint_SetNext(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListElementZonePoint_SetPrev")]
  public static extern void LinkedListElementZonePoint_SetPrev(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_LinkedListElementZonePoint_ReplaceData")]
  public static extern void LinkedListElementZonePoint_ReplaceData(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_IntVector__SWIG_0")]
  public static extern global::System.IntPtr new_IntVector__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_IntVector__SWIG_1")]
  public static extern global::System.IntPtr new_IntVector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntVector_Clear")]
  public static extern void IntVector_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntVector_Add")]
  public static extern void IntVector_Add(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntVector_size")]
  public static extern uint IntVector_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntVector_empty")]
  public static extern bool IntVector_empty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntVector_capacity")]
  public static extern uint IntVector_capacity(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntVector_reserve")]
  public static extern void IntVector_reserve(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_IntVector__SWIG_2")]
  public static extern global::System.IntPtr new_IntVector__SWIG_2(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntVector_getitemcopy")]
  public static extern int IntVector_getitemcopy(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntVector_getitem")]
  public static extern int IntVector_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntVector_setitem")]
  public static extern void IntVector_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntVector_AddRange")]
  public static extern void IntVector_AddRange(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntVector_GetRange")]
  public static extern global::System.IntPtr IntVector_GetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntVector_Insert")]
  public static extern void IntVector_Insert(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntVector_InsertRange")]
  public static extern void IntVector_InsertRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntVector_RemoveAt")]
  public static extern void IntVector_RemoveAt(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntVector_RemoveRange")]
  public static extern void IntVector_RemoveRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntVector_Repeat")]
  public static extern global::System.IntPtr IntVector_Repeat(int jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntVector_Reverse__SWIG_0")]
  public static extern void IntVector_Reverse__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntVector_Reverse__SWIG_1")]
  public static extern void IntVector_Reverse__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntVector_SetRange")]
  public static extern void IntVector_SetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntVector_Contains")]
  public static extern bool IntVector_Contains(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntVector_IndexOf")]
  public static extern int IntVector_IndexOf(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntVector_LastIndexOf")]
  public static extern int IntVector_LastIndexOf(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntVector_Remove")]
  public static extern bool IntVector_Remove(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_IntVector")]
  public static extern void delete_IntVector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_DoubleVector__SWIG_0")]
  public static extern global::System.IntPtr new_DoubleVector__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_DoubleVector__SWIG_1")]
  public static extern global::System.IntPtr new_DoubleVector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DoubleVector_Clear")]
  public static extern void DoubleVector_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DoubleVector_Add")]
  public static extern void DoubleVector_Add(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DoubleVector_size")]
  public static extern uint DoubleVector_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DoubleVector_empty")]
  public static extern bool DoubleVector_empty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DoubleVector_capacity")]
  public static extern uint DoubleVector_capacity(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DoubleVector_reserve")]
  public static extern void DoubleVector_reserve(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_DoubleVector__SWIG_2")]
  public static extern global::System.IntPtr new_DoubleVector__SWIG_2(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DoubleVector_getitemcopy")]
  public static extern double DoubleVector_getitemcopy(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DoubleVector_getitem")]
  public static extern double DoubleVector_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DoubleVector_setitem")]
  public static extern void DoubleVector_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, double jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DoubleVector_AddRange")]
  public static extern void DoubleVector_AddRange(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DoubleVector_GetRange")]
  public static extern global::System.IntPtr DoubleVector_GetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DoubleVector_Insert")]
  public static extern void DoubleVector_Insert(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, double jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DoubleVector_InsertRange")]
  public static extern void DoubleVector_InsertRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DoubleVector_RemoveAt")]
  public static extern void DoubleVector_RemoveAt(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DoubleVector_RemoveRange")]
  public static extern void DoubleVector_RemoveRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DoubleVector_Repeat")]
  public static extern global::System.IntPtr DoubleVector_Repeat(double jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DoubleVector_Reverse__SWIG_0")]
  public static extern void DoubleVector_Reverse__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DoubleVector_Reverse__SWIG_1")]
  public static extern void DoubleVector_Reverse__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DoubleVector_SetRange")]
  public static extern void DoubleVector_SetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DoubleVector_Contains")]
  public static extern bool DoubleVector_Contains(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DoubleVector_IndexOf")]
  public static extern int DoubleVector_IndexOf(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DoubleVector_LastIndexOf")]
  public static extern int DoubleVector_LastIndexOf(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DoubleVector_Remove")]
  public static extern bool DoubleVector_Remove(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_DoubleVector")]
  public static extern void delete_DoubleVector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntList_push_front")]
  public static extern void IntList_push_front(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntList_push_back")]
  public static extern void IntList_push_back(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntList_RemoveFirst")]
  public static extern void IntList_RemoveFirst(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntList_RemoveLast")]
  public static extern void IntList_RemoveLast(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntList_size")]
  public static extern uint IntList_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntList_Clear")]
  public static extern void IntList_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntList_getItem")]
  public static extern int IntList_getItem(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntList_setItem")]
  public static extern void IntList_setItem(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntList_getFirstIter")]
  public static extern global::System.IntPtr IntList_getFirstIter(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntList_getLastIter")]
  public static extern global::System.IntPtr IntList_getLastIter(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntList_getNextIter")]
  public static extern global::System.IntPtr IntList_getNextIter(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntList_getPrevIter")]
  public static extern global::System.IntPtr IntList_getPrevIter(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntList_insertNode")]
  public static extern global::System.IntPtr IntList_insertNode(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntList_eraseIter")]
  public static extern void IntList_eraseIter(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntList_deleteIter")]
  public static extern void IntList_deleteIter(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntList_equals")]
  public static extern bool IntList_equals(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2, global::System.IntPtr jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntList_Contains")]
  public static extern bool IntList_Contains(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntList_Remove")]
  public static extern bool IntList_Remove(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntList_find")]
  public static extern global::System.IntPtr IntList_find(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_IntList")]
  public static extern global::System.IntPtr new_IntList();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_IntList")]
  public static extern void delete_IntList(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DoubleList_push_front")]
  public static extern void DoubleList_push_front(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DoubleList_push_back")]
  public static extern void DoubleList_push_back(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DoubleList_RemoveFirst")]
  public static extern void DoubleList_RemoveFirst(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DoubleList_RemoveLast")]
  public static extern void DoubleList_RemoveLast(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DoubleList_size")]
  public static extern uint DoubleList_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DoubleList_Clear")]
  public static extern void DoubleList_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DoubleList_getItem")]
  public static extern double DoubleList_getItem(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DoubleList_setItem")]
  public static extern void DoubleList_setItem(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2, double jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DoubleList_getFirstIter")]
  public static extern global::System.IntPtr DoubleList_getFirstIter(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DoubleList_getLastIter")]
  public static extern global::System.IntPtr DoubleList_getLastIter(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DoubleList_getNextIter")]
  public static extern global::System.IntPtr DoubleList_getNextIter(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DoubleList_getPrevIter")]
  public static extern global::System.IntPtr DoubleList_getPrevIter(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DoubleList_insertNode")]
  public static extern global::System.IntPtr DoubleList_insertNode(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2, double jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DoubleList_eraseIter")]
  public static extern void DoubleList_eraseIter(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DoubleList_deleteIter")]
  public static extern void DoubleList_deleteIter(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DoubleList_equals")]
  public static extern bool DoubleList_equals(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2, global::System.IntPtr jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DoubleList_Contains")]
  public static extern bool DoubleList_Contains(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DoubleList_Remove")]
  public static extern bool DoubleList_Remove(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_DoubleList_find")]
  public static extern global::System.IntPtr DoubleList_find(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_DoubleList")]
  public static extern global::System.IntPtr new_DoubleList();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_DoubleList")]
  public static extern void delete_DoubleList(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AltCurrencyDefinitionList_push_front")]
  public static extern void AltCurrencyDefinitionList_push_front(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AltCurrencyDefinitionList_push_back")]
  public static extern void AltCurrencyDefinitionList_push_back(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AltCurrencyDefinitionList_RemoveFirst")]
  public static extern void AltCurrencyDefinitionList_RemoveFirst(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AltCurrencyDefinitionList_RemoveLast")]
  public static extern void AltCurrencyDefinitionList_RemoveLast(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AltCurrencyDefinitionList_size")]
  public static extern uint AltCurrencyDefinitionList_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AltCurrencyDefinitionList_Clear")]
  public static extern void AltCurrencyDefinitionList_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AltCurrencyDefinitionList_getItem")]
  public static extern global::System.IntPtr AltCurrencyDefinitionList_getItem(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AltCurrencyDefinitionList_setItem")]
  public static extern void AltCurrencyDefinitionList_setItem(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AltCurrencyDefinitionList_getFirstIter")]
  public static extern global::System.IntPtr AltCurrencyDefinitionList_getFirstIter(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AltCurrencyDefinitionList_getLastIter")]
  public static extern global::System.IntPtr AltCurrencyDefinitionList_getLastIter(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AltCurrencyDefinitionList_getNextIter")]
  public static extern global::System.IntPtr AltCurrencyDefinitionList_getNextIter(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AltCurrencyDefinitionList_getPrevIter")]
  public static extern global::System.IntPtr AltCurrencyDefinitionList_getPrevIter(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AltCurrencyDefinitionList_insertNode")]
  public static extern global::System.IntPtr AltCurrencyDefinitionList_insertNode(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AltCurrencyDefinitionList_eraseIter")]
  public static extern void AltCurrencyDefinitionList_eraseIter(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AltCurrencyDefinitionList_deleteIter")]
  public static extern void AltCurrencyDefinitionList_deleteIter(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AltCurrencyDefinitionList_equals")]
  public static extern bool AltCurrencyDefinitionList_equals(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2, global::System.IntPtr jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_AltCurrencyDefinitionList")]
  public static extern global::System.IntPtr new_AltCurrencyDefinitionList();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_AltCurrencyDefinitionList")]
  public static extern void delete_AltCurrencyDefinitionList(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_InternalVeteranRewardList_push_front")]
  public static extern void InternalVeteranRewardList_push_front(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_InternalVeteranRewardList_push_back")]
  public static extern void InternalVeteranRewardList_push_back(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_InternalVeteranRewardList_RemoveFirst")]
  public static extern void InternalVeteranRewardList_RemoveFirst(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_InternalVeteranRewardList_RemoveLast")]
  public static extern void InternalVeteranRewardList_RemoveLast(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_InternalVeteranRewardList_size")]
  public static extern uint InternalVeteranRewardList_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_InternalVeteranRewardList_Clear")]
  public static extern void InternalVeteranRewardList_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_InternalVeteranRewardList_getItem")]
  public static extern global::System.IntPtr InternalVeteranRewardList_getItem(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_InternalVeteranRewardList_setItem")]
  public static extern void InternalVeteranRewardList_setItem(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_InternalVeteranRewardList_getFirstIter")]
  public static extern global::System.IntPtr InternalVeteranRewardList_getFirstIter(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_InternalVeteranRewardList_getLastIter")]
  public static extern global::System.IntPtr InternalVeteranRewardList_getLastIter(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_InternalVeteranRewardList_getNextIter")]
  public static extern global::System.IntPtr InternalVeteranRewardList_getNextIter(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_InternalVeteranRewardList_getPrevIter")]
  public static extern global::System.IntPtr InternalVeteranRewardList_getPrevIter(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_InternalVeteranRewardList_insertNode")]
  public static extern global::System.IntPtr InternalVeteranRewardList_insertNode(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_InternalVeteranRewardList_eraseIter")]
  public static extern void InternalVeteranRewardList_eraseIter(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_InternalVeteranRewardList_deleteIter")]
  public static extern void InternalVeteranRewardList_deleteIter(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_InternalVeteranRewardList_equals")]
  public static extern bool InternalVeteranRewardList_equals(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2, global::System.IntPtr jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_InternalVeteranRewardList")]
  public static extern global::System.IntPtr new_InternalVeteranRewardList();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_InternalVeteranRewardList")]
  public static extern void delete_InternalVeteranRewardList(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_IntStringMap__SWIG_0")]
  public static extern global::System.IntPtr new_IntStringMap__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_IntStringMap__SWIG_1")]
  public static extern global::System.IntPtr new_IntStringMap__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntStringMap_size")]
  public static extern uint IntStringMap_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntStringMap_empty")]
  public static extern bool IntStringMap_empty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntStringMap_Clear")]
  public static extern void IntStringMap_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntStringMap_getitem")]
  public static extern global::System.IntPtr IntStringMap_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntStringMap_setitem")]
  public static extern void IntStringMap_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntStringMap_ContainsKey")]
  public static extern bool IntStringMap_ContainsKey(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntStringMap_Add")]
  public static extern void IntStringMap_Add(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntStringMap_Remove")]
  public static extern bool IntStringMap_Remove(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntStringMap_create_iterator_begin")]
  public static extern global::System.IntPtr IntStringMap_create_iterator_begin(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntStringMap_get_next_key")]
  public static extern int IntStringMap_get_next_key(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntStringMap_destroy_iterator")]
  public static extern void IntStringMap_destroy_iterator(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_IntStringMap")]
  public static extern void delete_IntStringMap(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_IntDoubleMap__SWIG_0")]
  public static extern global::System.IntPtr new_IntDoubleMap__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_IntDoubleMap__SWIG_1")]
  public static extern global::System.IntPtr new_IntDoubleMap__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntDoubleMap_size")]
  public static extern uint IntDoubleMap_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntDoubleMap_empty")]
  public static extern bool IntDoubleMap_empty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntDoubleMap_Clear")]
  public static extern void IntDoubleMap_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntDoubleMap_getitem")]
  public static extern double IntDoubleMap_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntDoubleMap_setitem")]
  public static extern void IntDoubleMap_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, double jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntDoubleMap_ContainsKey")]
  public static extern bool IntDoubleMap_ContainsKey(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntDoubleMap_Add")]
  public static extern void IntDoubleMap_Add(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, double jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntDoubleMap_Remove")]
  public static extern bool IntDoubleMap_Remove(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntDoubleMap_create_iterator_begin")]
  public static extern global::System.IntPtr IntDoubleMap_create_iterator_begin(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntDoubleMap_get_next_key")]
  public static extern int IntDoubleMap_get_next_key(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntDoubleMap_destroy_iterator")]
  public static extern void IntDoubleMap_destroy_iterator(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_IntDoubleMap")]
  public static extern void delete_IntDoubleMap(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_IntExpModifierMap__SWIG_0")]
  public static extern global::System.IntPtr new_IntExpModifierMap__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_IntExpModifierMap__SWIG_1")]
  public static extern global::System.IntPtr new_IntExpModifierMap__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntExpModifierMap_size")]
  public static extern uint IntExpModifierMap_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntExpModifierMap_empty")]
  public static extern bool IntExpModifierMap_empty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntExpModifierMap_Clear")]
  public static extern void IntExpModifierMap_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntExpModifierMap_getitem")]
  public static extern global::System.IntPtr IntExpModifierMap_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntExpModifierMap_setitem")]
  public static extern void IntExpModifierMap_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntExpModifierMap_ContainsKey")]
  public static extern bool IntExpModifierMap_ContainsKey(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntExpModifierMap_Add")]
  public static extern void IntExpModifierMap_Add(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntExpModifierMap_Remove")]
  public static extern bool IntExpModifierMap_Remove(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntExpModifierMap_create_iterator_begin")]
  public static extern global::System.IntPtr IntExpModifierMap_create_iterator_begin(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntExpModifierMap_get_next_key")]
  public static extern uint IntExpModifierMap_get_next_key(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntExpModifierMap_destroy_iterator")]
  public static extern void IntExpModifierMap_destroy_iterator(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_IntExpModifierMap")]
  public static extern void delete_IntExpModifierMap(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_IntNpcMap__SWIG_0")]
  public static extern global::System.IntPtr new_IntNpcMap__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_IntNpcMap__SWIG_1")]
  public static extern global::System.IntPtr new_IntNpcMap__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntNpcMap_size")]
  public static extern uint IntNpcMap_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntNpcMap_empty")]
  public static extern bool IntNpcMap_empty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntNpcMap_Clear")]
  public static extern void IntNpcMap_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntNpcMap_getitem")]
  public static extern global::System.IntPtr IntNpcMap_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntNpcMap_setitem")]
  public static extern void IntNpcMap_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntNpcMap_ContainsKey")]
  public static extern bool IntNpcMap_ContainsKey(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntNpcMap_Add")]
  public static extern void IntNpcMap_Add(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntNpcMap_Remove")]
  public static extern bool IntNpcMap_Remove(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntNpcMap_create_iterator_begin")]
  public static extern global::System.IntPtr IntNpcMap_create_iterator_begin(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntNpcMap_get_next_key")]
  public static extern uint IntNpcMap_get_next_key(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntNpcMap_destroy_iterator")]
  public static extern void IntNpcMap_destroy_iterator(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_IntNpcMap")]
  public static extern void delete_IntNpcMap(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_IntClientMap__SWIG_0")]
  public static extern global::System.IntPtr new_IntClientMap__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_IntClientMap__SWIG_1")]
  public static extern global::System.IntPtr new_IntClientMap__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntClientMap_size")]
  public static extern uint IntClientMap_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntClientMap_empty")]
  public static extern bool IntClientMap_empty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntClientMap_Clear")]
  public static extern void IntClientMap_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntClientMap_getitem")]
  public static extern global::System.IntPtr IntClientMap_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntClientMap_setitem")]
  public static extern void IntClientMap_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntClientMap_ContainsKey")]
  public static extern bool IntClientMap_ContainsKey(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntClientMap_Add")]
  public static extern void IntClientMap_Add(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntClientMap_Remove")]
  public static extern bool IntClientMap_Remove(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntClientMap_create_iterator_begin")]
  public static extern global::System.IntPtr IntClientMap_create_iterator_begin(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntClientMap_get_next_key")]
  public static extern ushort IntClientMap_get_next_key(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntClientMap_destroy_iterator")]
  public static extern void IntClientMap_destroy_iterator(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_IntClientMap")]
  public static extern void delete_IntClientMap(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_IntMobMap__SWIG_0")]
  public static extern global::System.IntPtr new_IntMobMap__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_IntMobMap__SWIG_1")]
  public static extern global::System.IntPtr new_IntMobMap__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntMobMap_size")]
  public static extern uint IntMobMap_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntMobMap_empty")]
  public static extern bool IntMobMap_empty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntMobMap_Clear")]
  public static extern void IntMobMap_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntMobMap_getitem")]
  public static extern global::System.IntPtr IntMobMap_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntMobMap_setitem")]
  public static extern void IntMobMap_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntMobMap_ContainsKey")]
  public static extern bool IntMobMap_ContainsKey(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntMobMap_Add")]
  public static extern void IntMobMap_Add(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntMobMap_Remove")]
  public static extern bool IntMobMap_Remove(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntMobMap_create_iterator_begin")]
  public static extern global::System.IntPtr IntMobMap_create_iterator_begin(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntMobMap_get_next_key")]
  public static extern ushort IntMobMap_get_next_key(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntMobMap_destroy_iterator")]
  public static extern void IntMobMap_destroy_iterator(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_IntMobMap")]
  public static extern void delete_IntMobMap(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_IntNpcMap2__SWIG_0")]
  public static extern global::System.IntPtr new_IntNpcMap2__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_IntNpcMap2__SWIG_1")]
  public static extern global::System.IntPtr new_IntNpcMap2__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntNpcMap2_size")]
  public static extern uint IntNpcMap2_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntNpcMap2_empty")]
  public static extern bool IntNpcMap2_empty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntNpcMap2_Clear")]
  public static extern void IntNpcMap2_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntNpcMap2_getitem")]
  public static extern global::System.IntPtr IntNpcMap2_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntNpcMap2_setitem")]
  public static extern void IntNpcMap2_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntNpcMap2_ContainsKey")]
  public static extern bool IntNpcMap2_ContainsKey(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntNpcMap2_Add")]
  public static extern void IntNpcMap2_Add(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntNpcMap2_Remove")]
  public static extern bool IntNpcMap2_Remove(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntNpcMap2_create_iterator_begin")]
  public static extern global::System.IntPtr IntNpcMap2_create_iterator_begin(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntNpcMap2_get_next_key")]
  public static extern ushort IntNpcMap2_get_next_key(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntNpcMap2_destroy_iterator")]
  public static extern void IntNpcMap2_destroy_iterator(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_IntNpcMap2")]
  public static extern void delete_IntNpcMap2(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_IntMercMap__SWIG_0")]
  public static extern global::System.IntPtr new_IntMercMap__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_IntMercMap__SWIG_1")]
  public static extern global::System.IntPtr new_IntMercMap__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntMercMap_size")]
  public static extern uint IntMercMap_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntMercMap_empty")]
  public static extern bool IntMercMap_empty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntMercMap_Clear")]
  public static extern void IntMercMap_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntMercMap_getitem")]
  public static extern global::System.IntPtr IntMercMap_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntMercMap_setitem")]
  public static extern void IntMercMap_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntMercMap_ContainsKey")]
  public static extern bool IntMercMap_ContainsKey(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntMercMap_Add")]
  public static extern void IntMercMap_Add(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntMercMap_Remove")]
  public static extern bool IntMercMap_Remove(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntMercMap_create_iterator_begin")]
  public static extern global::System.IntPtr IntMercMap_create_iterator_begin(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntMercMap_get_next_key")]
  public static extern ushort IntMercMap_get_next_key(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntMercMap_destroy_iterator")]
  public static extern void IntMercMap_destroy_iterator(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_IntMercMap")]
  public static extern void delete_IntMercMap(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_IntCorpseMap__SWIG_0")]
  public static extern global::System.IntPtr new_IntCorpseMap__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_IntCorpseMap__SWIG_1")]
  public static extern global::System.IntPtr new_IntCorpseMap__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntCorpseMap_size")]
  public static extern uint IntCorpseMap_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntCorpseMap_empty")]
  public static extern bool IntCorpseMap_empty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntCorpseMap_Clear")]
  public static extern void IntCorpseMap_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntCorpseMap_getitem")]
  public static extern global::System.IntPtr IntCorpseMap_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntCorpseMap_setitem")]
  public static extern void IntCorpseMap_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntCorpseMap_ContainsKey")]
  public static extern bool IntCorpseMap_ContainsKey(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntCorpseMap_Add")]
  public static extern void IntCorpseMap_Add(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntCorpseMap_Remove")]
  public static extern bool IntCorpseMap_Remove(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntCorpseMap_create_iterator_begin")]
  public static extern global::System.IntPtr IntCorpseMap_create_iterator_begin(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntCorpseMap_get_next_key")]
  public static extern ushort IntCorpseMap_get_next_key(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntCorpseMap_destroy_iterator")]
  public static extern void IntCorpseMap_destroy_iterator(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_IntCorpseMap")]
  public static extern void delete_IntCorpseMap(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_IntObjectMap__SWIG_0")]
  public static extern global::System.IntPtr new_IntObjectMap__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_IntObjectMap__SWIG_1")]
  public static extern global::System.IntPtr new_IntObjectMap__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntObjectMap_size")]
  public static extern uint IntObjectMap_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntObjectMap_empty")]
  public static extern bool IntObjectMap_empty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntObjectMap_Clear")]
  public static extern void IntObjectMap_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntObjectMap_getitem")]
  public static extern global::System.IntPtr IntObjectMap_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntObjectMap_setitem")]
  public static extern void IntObjectMap_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntObjectMap_ContainsKey")]
  public static extern bool IntObjectMap_ContainsKey(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntObjectMap_Add")]
  public static extern void IntObjectMap_Add(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntObjectMap_Remove")]
  public static extern bool IntObjectMap_Remove(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntObjectMap_create_iterator_begin")]
  public static extern global::System.IntPtr IntObjectMap_create_iterator_begin(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntObjectMap_get_next_key")]
  public static extern ushort IntObjectMap_get_next_key(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntObjectMap_destroy_iterator")]
  public static extern void IntObjectMap_destroy_iterator(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_IntObjectMap")]
  public static extern void delete_IntObjectMap(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_IntDoorMap__SWIG_0")]
  public static extern global::System.IntPtr new_IntDoorMap__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_IntDoorMap__SWIG_1")]
  public static extern global::System.IntPtr new_IntDoorMap__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntDoorMap_size")]
  public static extern uint IntDoorMap_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntDoorMap_empty")]
  public static extern bool IntDoorMap_empty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntDoorMap_Clear")]
  public static extern void IntDoorMap_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntDoorMap_getitem")]
  public static extern global::System.IntPtr IntDoorMap_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntDoorMap_setitem")]
  public static extern void IntDoorMap_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntDoorMap_ContainsKey")]
  public static extern bool IntDoorMap_ContainsKey(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntDoorMap_Add")]
  public static extern void IntDoorMap_Add(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntDoorMap_Remove")]
  public static extern bool IntDoorMap_Remove(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntDoorMap_create_iterator_begin")]
  public static extern global::System.IntPtr IntDoorMap_create_iterator_begin(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntDoorMap_get_next_key")]
  public static extern ushort IntDoorMap_get_next_key(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntDoorMap_destroy_iterator")]
  public static extern void IntDoorMap_destroy_iterator(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_IntDoorMap")]
  public static extern void delete_IntDoorMap(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_IntTrapMap__SWIG_0")]
  public static extern global::System.IntPtr new_IntTrapMap__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_IntTrapMap__SWIG_1")]
  public static extern global::System.IntPtr new_IntTrapMap__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntTrapMap_size")]
  public static extern uint IntTrapMap_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntTrapMap_empty")]
  public static extern bool IntTrapMap_empty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntTrapMap_Clear")]
  public static extern void IntTrapMap_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntTrapMap_getitem")]
  public static extern global::System.IntPtr IntTrapMap_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntTrapMap_setitem")]
  public static extern void IntTrapMap_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntTrapMap_ContainsKey")]
  public static extern bool IntTrapMap_ContainsKey(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntTrapMap_Add")]
  public static extern void IntTrapMap_Add(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntTrapMap_Remove")]
  public static extern bool IntTrapMap_Remove(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntTrapMap_create_iterator_begin")]
  public static extern global::System.IntPtr IntTrapMap_create_iterator_begin(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntTrapMap_get_next_key")]
  public static extern ushort IntTrapMap_get_next_key(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntTrapMap_destroy_iterator")]
  public static extern void IntTrapMap_destroy_iterator(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_IntTrapMap")]
  public static extern void delete_IntTrapMap(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_IntBeaconMap__SWIG_0")]
  public static extern global::System.IntPtr new_IntBeaconMap__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_IntBeaconMap__SWIG_1")]
  public static extern global::System.IntPtr new_IntBeaconMap__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntBeaconMap_size")]
  public static extern uint IntBeaconMap_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntBeaconMap_empty")]
  public static extern bool IntBeaconMap_empty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntBeaconMap_Clear")]
  public static extern void IntBeaconMap_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntBeaconMap_getitem")]
  public static extern global::System.IntPtr IntBeaconMap_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntBeaconMap_setitem")]
  public static extern void IntBeaconMap_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntBeaconMap_ContainsKey")]
  public static extern bool IntBeaconMap_ContainsKey(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntBeaconMap_Add")]
  public static extern void IntBeaconMap_Add(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntBeaconMap_Remove")]
  public static extern bool IntBeaconMap_Remove(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntBeaconMap_create_iterator_begin")]
  public static extern global::System.IntPtr IntBeaconMap_create_iterator_begin(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntBeaconMap_get_next_key")]
  public static extern ushort IntBeaconMap_get_next_key(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntBeaconMap_destroy_iterator")]
  public static extern void IntBeaconMap_destroy_iterator(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_IntBeaconMap")]
  public static extern void delete_IntBeaconMap(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_IntEncounterMap__SWIG_0")]
  public static extern global::System.IntPtr new_IntEncounterMap__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_IntEncounterMap__SWIG_1")]
  public static extern global::System.IntPtr new_IntEncounterMap__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntEncounterMap_size")]
  public static extern uint IntEncounterMap_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntEncounterMap_empty")]
  public static extern bool IntEncounterMap_empty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntEncounterMap_Clear")]
  public static extern void IntEncounterMap_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntEncounterMap_getitem")]
  public static extern global::System.IntPtr IntEncounterMap_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntEncounterMap_setitem")]
  public static extern void IntEncounterMap_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntEncounterMap_ContainsKey")]
  public static extern bool IntEncounterMap_ContainsKey(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntEncounterMap_Add")]
  public static extern void IntEncounterMap_Add(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntEncounterMap_Remove")]
  public static extern bool IntEncounterMap_Remove(global::System.Runtime.InteropServices.HandleRef jarg1, ushort jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntEncounterMap_create_iterator_begin")]
  public static extern global::System.IntPtr IntEncounterMap_create_iterator_begin(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntEncounterMap_get_next_key")]
  public static extern ushort IntEncounterMap_get_next_key(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_IntEncounterMap_destroy_iterator")]
  public static extern void IntEncounterMap_destroy_iterator(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_IntEncounterMap")]
  public static extern void delete_IntEncounterMap(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ProximityList_push_front")]
  public static extern void ProximityList_push_front(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ProximityList_push_back")]
  public static extern void ProximityList_push_back(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ProximityList_RemoveFirst")]
  public static extern void ProximityList_RemoveFirst(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ProximityList_RemoveLast")]
  public static extern void ProximityList_RemoveLast(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ProximityList_size")]
  public static extern uint ProximityList_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ProximityList_Clear")]
  public static extern void ProximityList_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ProximityList_getItem")]
  public static extern global::System.IntPtr ProximityList_getItem(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ProximityList_setItem")]
  public static extern void ProximityList_setItem(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ProximityList_getFirstIter")]
  public static extern global::System.IntPtr ProximityList_getFirstIter(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ProximityList_getLastIter")]
  public static extern global::System.IntPtr ProximityList_getLastIter(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ProximityList_getNextIter")]
  public static extern global::System.IntPtr ProximityList_getNextIter(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ProximityList_getPrevIter")]
  public static extern global::System.IntPtr ProximityList_getPrevIter(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ProximityList_insertNode")]
  public static extern global::System.IntPtr ProximityList_insertNode(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ProximityList_eraseIter")]
  public static extern void ProximityList_eraseIter(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ProximityList_deleteIter")]
  public static extern void ProximityList_deleteIter(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ProximityList_equals")]
  public static extern bool ProximityList_equals(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2, global::System.IntPtr jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ProximityList_Contains")]
  public static extern bool ProximityList_Contains(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ProximityList_Remove")]
  public static extern bool ProximityList_Remove(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_ProximityList_find")]
  public static extern global::System.IntPtr ProximityList_find(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_ProximityList")]
  public static extern global::System.IntPtr new_ProximityList();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_ProximityList")]
  public static extern void delete_ProximityList(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_GroupList_push_front")]
  public static extern void GroupList_push_front(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_GroupList_push_back")]
  public static extern void GroupList_push_back(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_GroupList_RemoveFirst")]
  public static extern void GroupList_RemoveFirst(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_GroupList_RemoveLast")]
  public static extern void GroupList_RemoveLast(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_GroupList_size")]
  public static extern uint GroupList_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_GroupList_Clear")]
  public static extern void GroupList_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_GroupList_getItem")]
  public static extern global::System.IntPtr GroupList_getItem(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_GroupList_setItem")]
  public static extern void GroupList_setItem(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_GroupList_getFirstIter")]
  public static extern global::System.IntPtr GroupList_getFirstIter(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_GroupList_getLastIter")]
  public static extern global::System.IntPtr GroupList_getLastIter(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_GroupList_getNextIter")]
  public static extern global::System.IntPtr GroupList_getNextIter(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_GroupList_getPrevIter")]
  public static extern global::System.IntPtr GroupList_getPrevIter(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_GroupList_insertNode")]
  public static extern global::System.IntPtr GroupList_insertNode(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_GroupList_eraseIter")]
  public static extern void GroupList_eraseIter(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_GroupList_deleteIter")]
  public static extern void GroupList_deleteIter(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_GroupList_equals")]
  public static extern bool GroupList_equals(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2, global::System.IntPtr jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_GroupList_Contains")]
  public static extern bool GroupList_Contains(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_GroupList_Remove")]
  public static extern bool GroupList_Remove(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_GroupList_find")]
  public static extern global::System.IntPtr GroupList_find(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_GroupList")]
  public static extern global::System.IntPtr new_GroupList();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_GroupList")]
  public static extern void delete_GroupList(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidList_push_front")]
  public static extern void RaidList_push_front(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidList_push_back")]
  public static extern void RaidList_push_back(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidList_RemoveFirst")]
  public static extern void RaidList_RemoveFirst(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidList_RemoveLast")]
  public static extern void RaidList_RemoveLast(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidList_size")]
  public static extern uint RaidList_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidList_Clear")]
  public static extern void RaidList_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidList_getItem")]
  public static extern global::System.IntPtr RaidList_getItem(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidList_setItem")]
  public static extern void RaidList_setItem(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidList_getFirstIter")]
  public static extern global::System.IntPtr RaidList_getFirstIter(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidList_getLastIter")]
  public static extern global::System.IntPtr RaidList_getLastIter(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidList_getNextIter")]
  public static extern global::System.IntPtr RaidList_getNextIter(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidList_getPrevIter")]
  public static extern global::System.IntPtr RaidList_getPrevIter(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidList_insertNode")]
  public static extern global::System.IntPtr RaidList_insertNode(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidList_eraseIter")]
  public static extern void RaidList_eraseIter(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidList_deleteIter")]
  public static extern void RaidList_deleteIter(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidList_equals")]
  public static extern bool RaidList_equals(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2, global::System.IntPtr jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidList_Contains")]
  public static extern bool RaidList_Contains(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidList_Remove")]
  public static extern bool RaidList_Remove(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_RaidList_find")]
  public static extern global::System.IntPtr RaidList_find(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_RaidList")]
  public static extern global::System.IntPtr new_RaidList();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_RaidList")]
  public static extern void delete_RaidList(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AreaList_push_front")]
  public static extern void AreaList_push_front(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AreaList_push_back")]
  public static extern void AreaList_push_back(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AreaList_RemoveFirst")]
  public static extern void AreaList_RemoveFirst(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AreaList_RemoveLast")]
  public static extern void AreaList_RemoveLast(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AreaList_size")]
  public static extern uint AreaList_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AreaList_Clear")]
  public static extern void AreaList_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AreaList_getItem")]
  public static extern global::System.IntPtr AreaList_getItem(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AreaList_setItem")]
  public static extern void AreaList_setItem(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AreaList_getFirstIter")]
  public static extern global::System.IntPtr AreaList_getFirstIter(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AreaList_getLastIter")]
  public static extern global::System.IntPtr AreaList_getLastIter(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AreaList_getNextIter")]
  public static extern global::System.IntPtr AreaList_getNextIter(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AreaList_getPrevIter")]
  public static extern global::System.IntPtr AreaList_getPrevIter(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AreaList_insertNode")]
  public static extern global::System.IntPtr AreaList_insertNode(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AreaList_eraseIter")]
  public static extern void AreaList_eraseIter(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AreaList_deleteIter")]
  public static extern void AreaList_deleteIter(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_AreaList_equals")]
  public static extern bool AreaList_equals(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2, global::System.IntPtr jarg3);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_new_AreaList")]
  public static extern global::System.IntPtr new_AreaList();

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_delete_AreaList")]
  public static extern void delete_AreaList(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Mob_SWIGUpcast")]
  public static extern global::System.IntPtr Mob_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_NPC_SWIGUpcast")]
  public static extern global::System.IntPtr NPC_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Encounter_SWIGUpcast")]
  public static extern global::System.IntPtr Encounter_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Beacon_SWIGUpcast")]
  public static extern global::System.IntPtr Beacon_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Client_SWIGUpcast")]
  public static extern global::System.IntPtr Client_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Corpse_SWIGUpcast")]
  public static extern global::System.IntPtr Corpse_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Doors_SWIGUpcast")]
  public static extern global::System.IntPtr Doors_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Group_SWIGUpcast")]
  public static extern global::System.IntPtr Group_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Object_SWIGUpcast")]
  public static extern global::System.IntPtr Object_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Raid_SWIGUpcast")]
  public static extern global::System.IntPtr Raid_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("questinterface", EntryPoint="CSharp_Trap_SWIGUpcast")]
  public static extern global::System.IntPtr Trap_SWIGUpcast(global::System.IntPtr jarg1);
}

public class questinterface {
  public static string DZ_REPLAY_TIMER_NAME {
    get {
      string ret = questinterfacePINVOKE.DZ_REPLAY_TIMER_NAME_get();
      return ret;
    } 
  }

  public static ushort BUFFSTACKER_EXISTS {
    get {
      ushort ret = questinterfacePINVOKE.BUFFSTACKER_EXISTS_get();
      return ret;
    } 
  }

  public static ushort BUFFSTACKER_VALUE {
    get {
      ushort ret = questinterfacePINVOKE.BUFFSTACKER_VALUE_get();
      return ret;
    } 
  }

  public static ushort EXTRA_ATTACK_CHANCE {
    get {
      ushort ret = questinterfacePINVOKE.EXTRA_ATTACK_CHANCE_get();
      return ret;
    } 
  }

  public static ushort EXTRA_ATTACK_NUM_ATKS {
    get {
      ushort ret = questinterfacePINVOKE.EXTRA_ATTACK_NUM_ATKS_get();
      return ret;
    } 
  }

  public static ushort DIVINE_SAVE_CHANCE {
    get {
      ushort ret = questinterfacePINVOKE.DIVINE_SAVE_CHANCE_get();
      return ret;
    } 
  }

  public static ushort DIVINE_SAVE_SPELL_TRIGGER_ID {
    get {
      ushort ret = questinterfacePINVOKE.DIVINE_SAVE_SPELL_TRIGGER_ID_get();
      return ret;
    } 
  }

  public static ushort DEATH_SAVE_TYPE {
    get {
      ushort ret = questinterfacePINVOKE.DEATH_SAVE_TYPE_get();
      return ret;
    } 
  }

  public static ushort DEATH_SAVE_BUFFSLOT {
    get {
      ushort ret = questinterfacePINVOKE.DEATH_SAVE_BUFFSLOT_get();
      return ret;
    } 
  }

  public static ushort DEATH_SAVE_MIN_LEVEL_FOR_HEAL {
    get {
      ushort ret = questinterfacePINVOKE.DEATH_SAVE_MIN_LEVEL_FOR_HEAL_get();
      return ret;
    } 
  }

  public static ushort DEATH_SAVE_HEAL_AMT {
    get {
      ushort ret = questinterfacePINVOKE.DEATH_SAVE_HEAL_AMT_get();
      return ret;
    } 
  }

  public static ushort RESOURCE_PERCENT_CAP {
    get {
      ushort ret = questinterfacePINVOKE.RESOURCE_PERCENT_CAP_get();
      return ret;
    } 
  }

  public static ushort RESOURCE_AMOUNT_CAP {
    get {
      ushort ret = questinterfacePINVOKE.RESOURCE_AMOUNT_CAP_get();
      return ret;
    } 
  }

  public static ushort NEGATE_ATK_EXISTS {
    get {
      ushort ret = questinterfacePINVOKE.NEGATE_ATK_EXISTS_get();
      return ret;
    } 
  }

  public static ushort NEGATE_ATK_BUFFSLOT {
    get {
      ushort ret = questinterfacePINVOKE.NEGATE_ATK_BUFFSLOT_get();
      return ret;
    } 
  }

  public static ushort NEGATE_ATK_MAX_DMG_ABSORB_PER_HIT {
    get {
      ushort ret = questinterfacePINVOKE.NEGATE_ATK_MAX_DMG_ABSORB_PER_HIT_get();
      return ret;
    } 
  }

  public static ushort MITIGATION_RUNE_PERCENT {
    get {
      ushort ret = questinterfacePINVOKE.MITIGATION_RUNE_PERCENT_get();
      return ret;
    } 
  }

  public static ushort MITIGATION_RUNE_BUFFSLOT {
    get {
      ushort ret = questinterfacePINVOKE.MITIGATION_RUNE_BUFFSLOT_get();
      return ret;
    } 
  }

  public static ushort MITIGATION_RUNE_MAX_DMG_ABSORB_PER_HIT {
    get {
      ushort ret = questinterfacePINVOKE.MITIGATION_RUNE_MAX_DMG_ABSORB_PER_HIT_get();
      return ret;
    } 
  }

  public static ushort MITIGATION_RUNE_MAX_HP_AMT {
    get {
      ushort ret = questinterfacePINVOKE.MITIGATION_RUNE_MAX_HP_AMT_get();
      return ret;
    } 
  }

  public static ushort THRESHOLDGUARD_MITIGATION_PERCENT {
    get {
      ushort ret = questinterfacePINVOKE.THRESHOLDGUARD_MITIGATION_PERCENT_get();
      return ret;
    } 
  }

  public static ushort THRESHOLDGUARD_BUFFSLOT {
    get {
      ushort ret = questinterfacePINVOKE.THRESHOLDGUARD_BUFFSLOT_get();
      return ret;
    } 
  }

  public static ushort THRESHOLDGUARD_MIN_DMG_TO_TRIGGER {
    get {
      ushort ret = questinterfacePINVOKE.THRESHOLDGUARD_MIN_DMG_TO_TRIGGER_get();
      return ret;
    } 
  }

  public static ushort ENDURANCE_ABSORD_MITIGIATION {
    get {
      ushort ret = questinterfacePINVOKE.ENDURANCE_ABSORD_MITIGIATION_get();
      return ret;
    } 
  }

  public static ushort ENDURANCE_ABSORD_DRAIN_PER_HP {
    get {
      ushort ret = questinterfacePINVOKE.ENDURANCE_ABSORD_DRAIN_PER_HP_get();
      return ret;
    } 
  }

  public static ushort IMPROVED_TAUNT_MAX_LVL {
    get {
      ushort ret = questinterfacePINVOKE.IMPROVED_TAUNT_MAX_LVL_get();
      return ret;
    } 
  }

  public static ushort IMPROVED_TAUNT_AGGRO_MOD {
    get {
      ushort ret = questinterfacePINVOKE.IMPROVED_TAUNT_AGGRO_MOD_get();
      return ret;
    } 
  }

  public static ushort IMPROVED_TAUNT_BUFFSLOT {
    get {
      ushort ret = questinterfacePINVOKE.IMPROVED_TAUNT_BUFFSLOT_get();
      return ret;
    } 
  }

  public static ushort ROOT_EXISTS {
    get {
      ushort ret = questinterfacePINVOKE.ROOT_EXISTS_get();
      return ret;
    } 
  }

  public static ushort ROOT_BUFFSLOT {
    get {
      ushort ret = questinterfacePINVOKE.ROOT_BUFFSLOT_get();
      return ret;
    } 
  }

  public static ushort RUNE_AMOUNT {
    get {
      ushort ret = questinterfacePINVOKE.RUNE_AMOUNT_get();
      return ret;
    } 
  }

  public static ushort RUNE_BUFFSLOT {
    get {
      ushort ret = questinterfacePINVOKE.RUNE_BUFFSLOT_get();
      return ret;
    } 
  }

  public static ushort POSITION_BACK {
    get {
      ushort ret = questinterfacePINVOKE.POSITION_BACK_get();
      return ret;
    } 
  }

  public static ushort POSITION_FRONT {
    get {
      ushort ret = questinterfacePINVOKE.POSITION_FRONT_get();
      return ret;
    } 
  }

  public static ushort PET_RAMPAGE_CHANCE {
    get {
      ushort ret = questinterfacePINVOKE.PET_RAMPAGE_CHANCE_get();
      return ret;
    } 
  }

  public static ushort PET_RAMPAGE_DMG_MOD {
    get {
      ushort ret = questinterfacePINVOKE.PET_RAMPAGE_DMG_MOD_get();
      return ret;
    } 
  }

  public static ushort SKILLATK_PROC_SPELL_ID {
    get {
      ushort ret = questinterfacePINVOKE.SKILLATK_PROC_SPELL_ID_get();
      return ret;
    } 
  }

  public static ushort SKILLATK_PROC_CHANCE {
    get {
      ushort ret = questinterfacePINVOKE.SKILLATK_PROC_CHANCE_get();
      return ret;
    } 
  }

  public static ushort SKILLATK_PROC_SKILL {
    get {
      ushort ret = questinterfacePINVOKE.SKILLATK_PROC_SKILL_get();
      return ret;
    } 
  }

  public static ushort SLAYUNDEAD_RATE_MOD {
    get {
      ushort ret = questinterfacePINVOKE.SLAYUNDEAD_RATE_MOD_get();
      return ret;
    } 
  }

  public static ushort SLAYUNDEAD_DMG_MOD {
    get {
      ushort ret = questinterfacePINVOKE.SLAYUNDEAD_DMG_MOD_get();
      return ret;
    } 
  }

  public static ushort DOUBLE_RIPOSTE_CHANCE {
    get {
      ushort ret = questinterfacePINVOKE.DOUBLE_RIPOSTE_CHANCE_get();
      return ret;
    } 
  }

  public static ushort DOUBLE_RIPOSTE_SKILL_ATK_CHANCE {
    get {
      ushort ret = questinterfacePINVOKE.DOUBLE_RIPOSTE_SKILL_ATK_CHANCE_get();
      return ret;
    } 
  }

  public static ushort DOUBLE_RIPOSTE_SKILL {
    get {
      ushort ret = questinterfacePINVOKE.DOUBLE_RIPOSTE_SKILL_get();
      return ret;
    } 
  }

  public static ushort FINISHING_EFFECT_PROC_CHANCE {
    get {
      ushort ret = questinterfacePINVOKE.FINISHING_EFFECT_PROC_CHANCE_get();
      return ret;
    } 
  }

  public static ushort FINISHING_EFFECT_DMG {
    get {
      ushort ret = questinterfacePINVOKE.FINISHING_EFFECT_DMG_get();
      return ret;
    } 
  }

  public static ushort FINISHING_EFFECT_LEVEL_MAX {
    get {
      ushort ret = questinterfacePINVOKE.FINISHING_EFFECT_LEVEL_MAX_get();
      return ret;
    } 
  }

  public static ushort FINISHING_EFFECT_LEVEL_CHANCE_BONUS {
    get {
      ushort ret = questinterfacePINVOKE.FINISHING_EFFECT_LEVEL_CHANCE_BONUS_get();
      return ret;
    } 
  }

  public static ushort FINISHING_BLOW_LEVEL_HP_RATIO {
    get {
      ushort ret = questinterfacePINVOKE.FINISHING_BLOW_LEVEL_HP_RATIO_get();
      return ret;
    } 
  }

  public static ushort DOUBLE_MELEE_ROUND_CHANCE {
    get {
      ushort ret = questinterfacePINVOKE.DOUBLE_MELEE_ROUND_CHANCE_get();
      return ret;
    } 
  }

  public static ushort DOUBLE_MELEE_ROUND_DMG_BONUS {
    get {
      ushort ret = questinterfacePINVOKE.DOUBLE_MELEE_ROUND_DMG_BONUS_get();
      return ret;
    } 
  }

  public static ushort REFLECT_CHANCE {
    get {
      ushort ret = questinterfacePINVOKE.REFLECT_CHANCE_get();
      return ret;
    } 
  }

  public static ushort REFLECT_RESISTANCE_MOD {
    get {
      ushort ret = questinterfacePINVOKE.REFLECT_RESISTANCE_MOD_get();
      return ret;
    } 
  }

  public static ushort REFLECT_DMG_EFFECTIVENESS {
    get {
      ushort ret = questinterfacePINVOKE.REFLECT_DMG_EFFECTIVENESS_get();
      return ret;
    } 
  }

  public static ushort COMBAT_PROC_ORIGIN_ID {
    get {
      ushort ret = questinterfacePINVOKE.COMBAT_PROC_ORIGIN_ID_get();
      return ret;
    } 
  }

  public static ushort COMBAT_PROC_SPELL_ID {
    get {
      ushort ret = questinterfacePINVOKE.COMBAT_PROC_SPELL_ID_get();
      return ret;
    } 
  }

  public static ushort COMBAT_PROC_RATE_MOD {
    get {
      ushort ret = questinterfacePINVOKE.COMBAT_PROC_RATE_MOD_get();
      return ret;
    } 
  }

  public static ushort COMBAT_PROC_REUSE_TIMER {
    get {
      ushort ret = questinterfacePINVOKE.COMBAT_PROC_REUSE_TIMER_get();
      return ret;
    } 
  }

  public static ushort WEAPON_STANCE_TYPE_2H {
    get {
      ushort ret = questinterfacePINVOKE.WEAPON_STANCE_TYPE_2H_get();
      return ret;
    } 
  }

  public static ushort WEAPON_STANCE_TYPE_SHIELD {
    get {
      ushort ret = questinterfacePINVOKE.WEAPON_STANCE_TYPE_SHIELD_get();
      return ret;
    } 
  }

  public static ushort WEAPON_STANCE_TYPE_DUAL_WIELD {
    get {
      ushort ret = questinterfacePINVOKE.WEAPON_STANCE_TYPE_DUAL_WIELD_get();
      return ret;
    } 
  }

  public static EntityList entity_list {
    set {
      questinterfacePINVOKE.entity_list_set(EntityList.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.entity_list_get();
      EntityList ret = (cPtr == global::System.IntPtr.Zero) ? null : new EntityList(cPtr, false);
      return ret;
    } 
  }

  public static string strn0cpy(string dest, string source, uint size) {
    string ret = questinterfacePINVOKE.strn0cpy(dest, source, size);
    return ret;
  }

  public static int COLLISION_BOX_SIZE {
    get {
      int ret = questinterfacePINVOKE.COLLISION_BOX_SIZE_get();
      return ret;
    } 
  }

  public static uint HP300 {
    get {
      uint ret = questinterfacePINVOKE.HP300_get();
      return ret;
    } 
  }

  public static uint HP8000 {
    get {
      uint ret = questinterfacePINVOKE.HP8000_get();
      return ret;
    } 
  }

  public static Zone zone {
    set {
      questinterfacePINVOKE.zone_set(Zone.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.zone_get();
      Zone ret = (cPtr == global::System.IntPtr.Zero) ? null : new Zone(cPtr, false);
      return ret;
    } 
  }

  public static SWIGTYPE_p_TaskManager task_manager {
    set {
      questinterfacePINVOKE.task_manager_set(SWIGTYPE_p_TaskManager.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.task_manager_get();
      SWIGTYPE_p_TaskManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_TaskManager(cPtr, false);
      return ret;
    } 
  }

  public static SWIGTYPE_p_std__string GetZoneModeString(ZoneMode mode) {
    SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(questinterfacePINVOKE.GetZoneModeString((int)mode), true);
    return ret;
  }

  public static SWIGTYPE_p_std__string DIAWIND_RESPONSE_ONE_KEY {
    get {
      SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(questinterfacePINVOKE.DIAWIND_RESPONSE_ONE_KEY_get(), true);
      return ret;
    } 
  }

  public static SWIGTYPE_p_std__string DIAWIND_RESPONSE_TWO_KEY {
    get {
      SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(questinterfacePINVOKE.DIAWIND_RESPONSE_TWO_KEY_get(), true);
      return ret;
    } 
  }

  public static uint POPUPID_DIAWIND_ONE {
    get {
      uint ret = questinterfacePINVOKE.POPUPID_DIAWIND_ONE_get();
      return ret;
    } 
  }

  public static uint POPUPID_DIAWIND_TWO {
    get {
      uint ret = questinterfacePINVOKE.POPUPID_DIAWIND_TWO_get();
      return ret;
    } 
  }

  public static uint POPUPID_UPDATE_SHOWSTATSWINDOW {
    get {
      uint ret = questinterfacePINVOKE.POPUPID_UPDATE_SHOWSTATSWINDOW_get();
      return ret;
    } 
  }

  public static uint POPUPID_REPLACE_SPELLWINDOW {
    get {
      uint ret = questinterfacePINVOKE.POPUPID_REPLACE_SPELLWINDOW_get();
      return ret;
    } 
  }

  public static byte MAX_RAID_GROUPS {
    get {
      byte ret = questinterfacePINVOKE.MAX_RAID_GROUPS_get();
      return ret;
    } 
  }

  public static byte MAX_RAID_MEMBERS {
    get {
      byte ret = questinterfacePINVOKE.MAX_RAID_MEMBERS_get();
      return ret;
    } 
  }

  public static uint RAID_GROUPLESS {
    get {
      uint ret = questinterfacePINVOKE.RAID_GROUPLESS_get();
      return ret;
    } 
  }

  public static int format_as(SpawnCondition.OnChange val) {
    int ret = questinterfacePINVOKE.format_as__SWIG_0((int)val);
    return ret;
  }

  public static int format_as(SpawnEvent.Action val) {
    int ret = questinterfacePINVOKE.format_as__SWIG_1((int)val);
    return ret;
  }

  public static int MaxMercStanceID {
    get {
      int ret = questinterfacePINVOKE.MaxMercStanceID_get();
      return ret;
    } 
  }

  public static ZoneDatabase database {
    set {
      questinterfacePINVOKE.database_set(ZoneDatabase.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.database_get();
      ZoneDatabase ret = (cPtr == global::System.IntPtr.Zero) ? null : new ZoneDatabase(cPtr, false);
      return ret;
    } 
  }

  public static ZoneDatabase content_db {
    set {
      questinterfacePINVOKE.content_db_set(ZoneDatabase.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = questinterfacePINVOKE.content_db_get();
      ZoneDatabase ret = (cPtr == global::System.IntPtr.Zero) ? null : new ZoneDatabase(cPtr, false);
      return ret;
    } 
  }

  public static readonly int HIGHEST_RESIST = questinterfacePINVOKE.HIGHEST_RESIST_get();
  public static readonly int MAX_SPELL_PROJECTILE = questinterfacePINVOKE.MAX_SPELL_PROJECTILE_get();
  public static readonly float HEAD_POSITION = questinterfacePINVOKE.HEAD_POSITION_get();
  public static readonly float SEE_POSITION = questinterfacePINVOKE.SEE_POSITION_get();
  public static readonly int ARCHETYPE_HYBRID = questinterfacePINVOKE.ARCHETYPE_HYBRID_get();
  public static readonly int ARCHETYPE_CASTER = questinterfacePINVOKE.ARCHETYPE_CASTER_get();
  public static readonly int ARCHETYPE_MELEE = questinterfacePINVOKE.ARCHETYPE_MELEE_get();
  public static readonly int CON_GREEN = questinterfacePINVOKE.CON_GREEN_get();
  public static readonly int CON_LIGHTBLUE = questinterfacePINVOKE.CON_LIGHTBLUE_get();
  public static readonly int CON_BLUE = questinterfacePINVOKE.CON_BLUE_get();
  public static readonly int CON_WHITE = questinterfacePINVOKE.CON_WHITE_get();
  public static readonly int CON_WHITE_TITANIUM = questinterfacePINVOKE.CON_WHITE_TITANIUM_get();
  public static readonly int CON_YELLOW = questinterfacePINVOKE.CON_YELLOW_get();
  public static readonly int CON_RED = questinterfacePINVOKE.CON_RED_get();
  public static readonly int CON_GRAY = questinterfacePINVOKE.CON_GRAY_get();
  public static readonly int DMG_BLOCKED = questinterfacePINVOKE.DMG_BLOCKED_get();
  public static readonly int DMG_PARRIED = questinterfacePINVOKE.DMG_PARRIED_get();
  public static readonly int DMG_RIPOSTED = questinterfacePINVOKE.DMG_RIPOSTED_get();
  public static readonly int DMG_DODGED = questinterfacePINVOKE.DMG_DODGED_get();
  public static readonly int DMG_INVULNERABLE = questinterfacePINVOKE.DMG_INVULNERABLE_get();
  public static readonly int DMG_RUNE = questinterfacePINVOKE.DMG_RUNE_get();
  public static readonly int SPECIALIZE_FIZZLE = questinterfacePINVOKE.SPECIALIZE_FIZZLE_get();
  public static readonly float ZONEPOINT_NOZONE_RANGE = questinterfacePINVOKE.ZONEPOINT_NOZONE_RANGE_get();
  public static readonly float ZONEPOINT_ZONE_RANGE = questinterfacePINVOKE.ZONEPOINT_ZONE_RANGE_get();
  public static readonly int PET_HEALTHREPORT = questinterfacePINVOKE.PET_HEALTHREPORT_get();
  public static readonly int PET_LEADER = questinterfacePINVOKE.PET_LEADER_get();
  public static readonly int PET_ATTACK = questinterfacePINVOKE.PET_ATTACK_get();
  public static readonly int PET_QATTACK = questinterfacePINVOKE.PET_QATTACK_get();
  public static readonly int PET_FOLLOWME = questinterfacePINVOKE.PET_FOLLOWME_get();
  public static readonly int PET_GUARDHERE = questinterfacePINVOKE.PET_GUARDHERE_get();
  public static readonly int PET_SIT = questinterfacePINVOKE.PET_SIT_get();
  public static readonly int PET_SITDOWN = questinterfacePINVOKE.PET_SITDOWN_get();
  public static readonly int PET_STANDUP = questinterfacePINVOKE.PET_STANDUP_get();
  public static readonly int PET_STOP = questinterfacePINVOKE.PET_STOP_get();
  public static readonly int PET_STOP_ON = questinterfacePINVOKE.PET_STOP_ON_get();
  public static readonly int PET_STOP_OFF = questinterfacePINVOKE.PET_STOP_OFF_get();
  public static readonly int PET_TAUNT = questinterfacePINVOKE.PET_TAUNT_get();
  public static readonly int PET_TAUNT_ON = questinterfacePINVOKE.PET_TAUNT_ON_get();
  public static readonly int PET_TAUNT_OFF = questinterfacePINVOKE.PET_TAUNT_OFF_get();
  public static readonly int PET_HOLD = questinterfacePINVOKE.PET_HOLD_get();
  public static readonly int PET_HOLD_ON = questinterfacePINVOKE.PET_HOLD_ON_get();
  public static readonly int PET_HOLD_OFF = questinterfacePINVOKE.PET_HOLD_OFF_get();
  public static readonly int PET_GHOLD = questinterfacePINVOKE.PET_GHOLD_get();
  public static readonly int PET_GHOLD_ON = questinterfacePINVOKE.PET_GHOLD_ON_get();
  public static readonly int PET_GHOLD_OFF = questinterfacePINVOKE.PET_GHOLD_OFF_get();
  public static readonly int PET_SPELLHOLD = questinterfacePINVOKE.PET_SPELLHOLD_get();
  public static readonly int PET_SPELLHOLD_ON = questinterfacePINVOKE.PET_SPELLHOLD_ON_get();
  public static readonly int PET_SPELLHOLD_OFF = questinterfacePINVOKE.PET_SPELLHOLD_OFF_get();
  public static readonly int PET_FOCUS = questinterfacePINVOKE.PET_FOCUS_get();
  public static readonly int PET_FOCUS_ON = questinterfacePINVOKE.PET_FOCUS_ON_get();
  public static readonly int PET_FOCUS_OFF = questinterfacePINVOKE.PET_FOCUS_OFF_get();
  public static readonly int PET_FEIGN = questinterfacePINVOKE.PET_FEIGN_get();
  public static readonly int PET_BACKOFF = questinterfacePINVOKE.PET_BACKOFF_get();
  public static readonly int PET_GETLOST = questinterfacePINVOKE.PET_GETLOST_get();
  public static readonly int PET_GUARDME = questinterfacePINVOKE.PET_GUARDME_get();
  public static readonly int PET_REGROUP = questinterfacePINVOKE.PET_REGROUP_get();
  public static readonly int PET_REGROUP_ON = questinterfacePINVOKE.PET_REGROUP_ON_get();
  public static readonly int PET_REGROUP_OFF = questinterfacePINVOKE.PET_REGROUP_OFF_get();
  public static readonly int PET_MAXCOMMANDS = questinterfacePINVOKE.PET_MAXCOMMANDS_get();
  public static readonly int PET_BUTTON_SIT = questinterfacePINVOKE.PET_BUTTON_SIT_get();
  public static readonly int PET_BUTTON_STOP = questinterfacePINVOKE.PET_BUTTON_STOP_get();
  public static readonly int PET_BUTTON_REGROUP = questinterfacePINVOKE.PET_BUTTON_REGROUP_get();
  public static readonly int PET_BUTTON_FOLLOW = questinterfacePINVOKE.PET_BUTTON_FOLLOW_get();
  public static readonly int PET_BUTTON_GUARD = questinterfacePINVOKE.PET_BUTTON_GUARD_get();
  public static readonly int PET_BUTTON_TAUNT = questinterfacePINVOKE.PET_BUTTON_TAUNT_get();
  public static readonly int PET_BUTTON_HOLD = questinterfacePINVOKE.PET_BUTTON_HOLD_get();
  public static readonly int PET_BUTTON_GHOLD = questinterfacePINVOKE.PET_BUTTON_GHOLD_get();
  public static readonly int PET_BUTTON_FOCUS = questinterfacePINVOKE.PET_BUTTON_FOCUS_get();
  public static readonly int PET_BUTTON_SPELLHOLD = questinterfacePINVOKE.PET_BUTTON_SPELLHOLD_get();
  public static readonly int AURA_HARDCAP = questinterfacePINVOKE.AURA_HARDCAP_get();
  public static readonly int WEAPON_STANCE_TYPE_MAX = questinterfacePINVOKE.WEAPON_STANCE_TYPE_MAX_get();
  public static readonly int SHIELD_ABILITY_RECAST_TIME = questinterfacePINVOKE.SHIELD_ABILITY_RECAST_TIME_get();
  public static readonly int animKick = questinterfacePINVOKE.animKick_get();
  public static readonly int anim1HPiercing = questinterfacePINVOKE.anim1HPiercing_get();
  public static readonly int anim2HSlashing = questinterfacePINVOKE.anim2HSlashing_get();
  public static readonly int anim2HWeapon = questinterfacePINVOKE.anim2HWeapon_get();
  public static readonly int anim1HWeapon = questinterfacePINVOKE.anim1HWeapon_get();
  public static readonly int animDualWield = questinterfacePINVOKE.animDualWield_get();
  public static readonly int animTailRake = questinterfacePINVOKE.animTailRake_get();
  public static readonly int animHand2Hand = questinterfacePINVOKE.animHand2Hand_get();
  public static readonly int animShootBow = questinterfacePINVOKE.animShootBow_get();
  public static readonly int animRoundKick = questinterfacePINVOKE.animRoundKick_get();
  public static readonly int animSwarmAttack = questinterfacePINVOKE.animSwarmAttack_get();
  public static readonly int animFlyingKick = questinterfacePINVOKE.animFlyingKick_get();
  public static readonly int animTigerClaw = questinterfacePINVOKE.animTigerClaw_get();
  public static readonly int animEagleStrike = questinterfacePINVOKE.animEagleStrike_get();

  public static readonly int SKILLUP_UNKNOWN = questinterfacePINVOKE.SKILLUP_UNKNOWN_get();
  public static readonly int SKILLUP_SUCCESS = questinterfacePINVOKE.SKILLUP_SUCCESS_get();
  public static readonly int SKILLUP_FAILURE = questinterfacePINVOKE.SKILLUP_FAILURE_get();

  public static readonly int GridCircular = questinterfacePINVOKE.GridCircular_get();
  public static readonly int GridRandom10 = questinterfacePINVOKE.GridRandom10_get();
  public static readonly int GridRandom = questinterfacePINVOKE.GridRandom_get();
  public static readonly int GridPatrol = questinterfacePINVOKE.GridPatrol_get();
  public static readonly int GridOneWayRepop = questinterfacePINVOKE.GridOneWayRepop_get();
  public static readonly int GridRand5LoS = questinterfacePINVOKE.GridRand5LoS_get();
  public static readonly int GridOneWayDepop = questinterfacePINVOKE.GridOneWayDepop_get();
  public static readonly int GridCenterPoint = questinterfacePINVOKE.GridCenterPoint_get();
  public static readonly int GridRandomCenterPoint = questinterfacePINVOKE.GridRandomCenterPoint_get();
  public static readonly int GridRandomPath = questinterfacePINVOKE.GridRandomPath_get();

  public static readonly int MAX_SPECIAL_ATTACK_PARAMS = questinterfacePINVOKE.MAX_SPECIAL_ATTACK_PARAMS_get();
  public static readonly int CLIENT_LD_TIMEOUT = questinterfacePINVOKE.CLIENT_LD_TIMEOUT_get();
  public static readonly int TARGETING_RANGE = questinterfacePINVOKE.TARGETING_RANGE_get();
  public static readonly int XTARGET_HARDCAP = questinterfacePINVOKE.XTARGET_HARDCAP_get();
  public static readonly int MAX_SPECIALIZED_SKILL = questinterfacePINVOKE.MAX_SPECIALIZED_SKILL_get();
  public static readonly int SPELLBAR_UNLOCK = questinterfacePINVOKE.SPELLBAR_UNLOCK_get();
  public static readonly int memSpellUnknown = questinterfacePINVOKE.memSpellUnknown_get();
  public static readonly int memSpellScribing = questinterfacePINVOKE.memSpellScribing_get();
  public static readonly int memSpellMemorize = questinterfacePINVOKE.memSpellMemorize_get();
  public static readonly int memSpellForget = questinterfacePINVOKE.memSpellForget_get();
  public static readonly int memSpellSpellbar = questinterfacePINVOKE.memSpellSpellbar_get();

  public static readonly int HideCorpseNone = questinterfacePINVOKE.HideCorpseNone_get();
  public static readonly int HideCorpseAll = questinterfacePINVOKE.HideCorpseAll_get();
  public static readonly int HideCorpseAllButGroup = questinterfacePINVOKE.HideCorpseAllButGroup_get();
  public static readonly int HideCorpseLooted = questinterfacePINVOKE.HideCorpseLooted_get();
  public static readonly int HideCorpseNPC = questinterfacePINVOKE.HideCorpseNPC_get();

  public static readonly int MAX_LOOTERS = questinterfacePINVOKE.MAX_LOOTERS_get();
  public static readonly int MAX_MARKED_NPCS = questinterfacePINVOKE.MAX_MARKED_NPCS_get();
  public static readonly int RoleAssist = questinterfacePINVOKE.RoleAssist_get();
  public static readonly int RoleTank = questinterfacePINVOKE.RoleTank_get();
  public static readonly int RolePuller = questinterfacePINVOKE.RolePuller_get();

  public static readonly int FindNextMarkerSlot = questinterfacePINVOKE.FindNextMarkerSlot_get();
  public static readonly int FindNextAssisterSlot = questinterfacePINVOKE.FindNextAssisterSlot_get();
  public static readonly int RaidDelegateMainAssist = questinterfacePINVOKE.RaidDelegateMainAssist_get();
  public static readonly int RaidDelegateMainMarker = questinterfacePINVOKE.RaidDelegateMainMarker_get();

  public static readonly int ClearDelegate = questinterfacePINVOKE.ClearDelegate_get();
  public static readonly int SetDelegate = questinterfacePINVOKE.SetDelegate_get();
  public static readonly int FindNextRaidMainMarkerSlot = questinterfacePINVOKE.FindNextRaidMainMarkerSlot_get();
  public static readonly int FindNextRaidMainAssisterSlot = questinterfacePINVOKE.FindNextRaidMainAssisterSlot_get();
  public static readonly int DELEGATE_OFF = questinterfacePINVOKE.DELEGATE_OFF_get();
  public static readonly int DELEGATE_ON = questinterfacePINVOKE.DELEGATE_ON_get();

  public static readonly int MAX_NO_RAID_MAIN_ASSISTERS = questinterfacePINVOKE.MAX_NO_RAID_MAIN_ASSISTERS_get();
  public static readonly int MAX_NO_RAID_MAIN_MARKERS = questinterfacePINVOKE.MAX_NO_RAID_MAIN_MARKERS_get();
  public static readonly int TRAP_NPC_TYPE = questinterfacePINVOKE.TRAP_NPC_TYPE_get();
  public static readonly int SC_AlwaysEnabled = questinterfacePINVOKE.SC_AlwaysEnabled_get();
  public static readonly int CreateNewSpawn = questinterfacePINVOKE.CreateNewSpawn_get();
  public static readonly int AddNewSpawngroup = questinterfacePINVOKE.AddNewSpawngroup_get();
  public static readonly int UpdateAppearance = questinterfacePINVOKE.UpdateAppearance_get();
  public static readonly int RemoveSpawn = questinterfacePINVOKE.RemoveSpawn_get();
  public static readonly int DeleteSpawn = questinterfacePINVOKE.DeleteSpawn_get();
  public static readonly int AddSpawnFromSpawngroup = questinterfacePINVOKE.AddSpawnFromSpawngroup_get();
  public static readonly int CreateNewNPC = questinterfacePINVOKE.CreateNewNPC_get();

  public static readonly int RaidLeader = questinterfacePINVOKE.RaidLeader_get();
  public static readonly int GroupLeader = questinterfacePINVOKE.GroupLeader_get();
  public static readonly int Selected = questinterfacePINVOKE.Selected_get();
  public static readonly int All = questinterfacePINVOKE.All_get();

}

public class SWIGTYPE_p_EQ__versions__ClientVersionBitmask {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_EQ__versions__ClientVersionBitmask(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_EQ__versions__ClientVersionBitmask() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_EQ__versions__ClientVersionBitmask obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_EQ__versions__ClientVersionBitmask obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_SpellBuff_Struct {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_SpellBuff_Struct(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_SpellBuff_Struct() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_SpellBuff_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_SpellBuff_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_NewSpawn_Struct {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_NewSpawn_Struct(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_NewSpawn_Struct() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_NewSpawn_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_NewSpawn_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_char_t_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_char_t_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_char_t_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_char_t_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_char_t_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_EQ__textures__Tint_Struct {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_EQ__textures__Tint_Struct(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_EQ__textures__Tint_Struct() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_EQ__textures__Tint_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_EQ__textures__Tint_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__unique_ptrT_SpawnEntry_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__unique_ptrT_SpawnEntry_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__unique_ptrT_SpawnEntry_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__unique_ptrT_SpawnEntry_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__unique_ptrT_SpawnEntry_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_EQ__Random {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_EQ__Random(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_EQ__Random() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_EQ__Random obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_EQ__Random obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__vectorT_DynamicZone_p_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__vectorT_DynamicZone_p_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__vectorT_DynamicZone_p_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__vectorT_DynamicZone_p_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__vectorT_DynamicZone_p_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__vectorT_Bot_p_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__vectorT_Bot_p_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__vectorT_Bot_p_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__vectorT_Bot_p_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__vectorT_Bot_p_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__listT_Corpse_p_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__listT_Corpse_p_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__listT_Corpse_p_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__listT_Corpse_p_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__listT_Corpse_p_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_unsigned_long_long {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_unsigned_long_long(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_unsigned_long_long() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_unsigned_long_long obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_unsigned_long_long obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_GroupLeadershipAA_Struct {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_GroupLeadershipAA_Struct(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_GroupLeadershipAA_Struct() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_GroupLeadershipAA_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_GroupLeadershipAA_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_QGlobal {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_QGlobal(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_QGlobal() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_QGlobal obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_QGlobal obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_CharacterCorpsesRepository__CharacterCorpses {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_CharacterCorpsesRepository__CharacterCorpses(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_CharacterCorpsesRepository__CharacterCorpses() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_CharacterCorpsesRepository__CharacterCorpses obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_CharacterCorpsesRepository__CharacterCorpses obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_Trader_Struct {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_Trader_Struct(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_Trader_Struct() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_Trader_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_Trader_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_EQTime {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_EQTime(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_EQTime() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_EQTime obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_EQTime obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_BotDatabase {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_BotDatabase(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_BotDatabase() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_BotDatabase obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_BotDatabase obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_glm__vec3 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_glm__vec3(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_glm__vec3() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_glm__vec3 obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_glm__vec3 obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_TaskManager {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_TaskManager(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_TaskManager() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_TaskManager obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_TaskManager obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_AugmentItem_Struct {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_AugmentItem_Struct(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_AugmentItem_Struct() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_AugmentItem_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_AugmentItem_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_glm__vec4 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_glm__vec4(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_glm__vec4() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_glm__vec4 obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_glm__vec4 obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__vectorT_EQ__ItemInstance_p_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__vectorT_EQ__ItemInstance_p_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__vectorT_EQ__ItemInstance_p_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__vectorT_EQ__ItemInstance_p_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__vectorT_EQ__ItemInstance_p_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__setT_unsigned_int_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__setT_unsigned_int_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__setT_unsigned_int_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__setT_unsigned_int_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__setT_unsigned_int_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_float {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_float(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_float() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_float obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_float obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_ApplySpellType {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_ApplySpellType(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_ApplySpellType() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_ApplySpellType obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_ApplySpellType obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_GetItems_Struct {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_GetItems_Struct(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_GetItems_Struct() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_GetItems_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_GetItems_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_ExtendedProfile_Struct {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_ExtendedProfile_Struct(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_ExtendedProfile_Struct() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_ExtendedProfile_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_ExtendedProfile_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_p_NewSpawn_Struct {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_p_NewSpawn_Struct(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_p_NewSpawn_Struct() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_p_NewSpawn_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_p_NewSpawn_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_a_64__char {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_a_64__char(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_a_64__char() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_a_64__char obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_a_64__char obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_int {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_int(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_int() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_int obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_int obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__listT_Doors_p_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__listT_Doors_p_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__listT_Doors_p_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__listT_Doors_p_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__listT_Doors_p_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_LootItems {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_LootItems(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_LootItems() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_LootItems obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_LootItems obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__vectorT_ZonePointsRepository__ZonePoints_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__vectorT_ZonePointsRepository__ZonePoints_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__vectorT_ZonePointsRepository__ZonePoints_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__vectorT_ZonePointsRepository__ZonePoints_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__vectorT_ZonePointsRepository__ZonePoints_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_EQ__InternalTextureProfile {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_EQ__InternalTextureProfile(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_EQ__InternalTextureProfile() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_EQ__InternalTextureProfile obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_EQ__InternalTextureProfile obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_EQ__ItemInstance {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_EQ__ItemInstance(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_EQ__ItemInstance() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_EQ__ItemInstance obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_EQ__ItemInstance obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__vectorT_DynamicZoneCompassEntry_Struct_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__vectorT_DynamicZoneCompassEntry_Struct_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__vectorT_DynamicZoneCompassEntry_Struct_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__vectorT_DynamicZoneCompassEntry_Struct_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__vectorT_DynamicZoneCompassEntry_Struct_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__vectorT_std__any_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__vectorT_std__any_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__vectorT_std__any_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__vectorT_std__any_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__vectorT_std__any_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_HateListCountType {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_HateListCountType(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_HateListCountType() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_HateListCountType obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_HateListCountType obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_NPCType {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_NPCType(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_NPCType() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_NPCType obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_NPCType obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_p_EQApplicationPacket {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_p_EQApplicationPacket(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_p_EQApplicationPacket() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_p_EQApplicationPacket obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_p_EQApplicationPacket obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_LootdropEntriesRepository__LootdropEntries {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_LootdropEntriesRepository__LootdropEntries(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_LootdropEntriesRepository__LootdropEntries() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_LootdropEntriesRepository__LootdropEntries obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_LootdropEntriesRepository__LootdropEntries obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_PlayerEvent__PlayerEvent {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_PlayerEvent__PlayerEvent(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_PlayerEvent__PlayerEvent() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_PlayerEvent__PlayerEvent obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_PlayerEvent__PlayerEvent obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_TimeOfDay_Struct {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_TimeOfDay_Struct(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_TimeOfDay_Struct() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_TimeOfDay_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_TimeOfDay_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_p_NPCType {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_p_NPCType(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_p_NPCType() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_p_NPCType obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_p_NPCType obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_GlobalLootEntry {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_GlobalLootEntry(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_GlobalLootEntry() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_GlobalLootEntry obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_GlobalLootEntry obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_EntityFilterType {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_EntityFilterType(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_EntityFilterType() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_EntityFilterType obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_EntityFilterType obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__mapT_unsigned_int_NPCType_p_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__mapT_unsigned_int_NPCType_p_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__mapT_unsigned_int_NPCType_p_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__mapT_unsigned_int_NPCType_p_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__mapT_unsigned_int_NPCType_p_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_RaidLeadershipAA_Struct {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_RaidLeadershipAA_Struct(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_RaidLeadershipAA_Struct() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_RaidLeadershipAA_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_RaidLeadershipAA_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_CZClientMessageString_Struct {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_CZClientMessageString_Struct(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_CZClientMessageString_Struct() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_CZClientMessageString_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_CZClientMessageString_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_WaterMap {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_WaterMap(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_WaterMap() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_WaterMap obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_WaterMap obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_ClickObject_Struct {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_ClickObject_Struct(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_ClickObject_Struct() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_ClickObject_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_ClickObject_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__vectorT_std__string_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__vectorT_std__string_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__vectorT_std__string_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__vectorT_std__string_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__vectorT_std__string_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_NPC_Emote_Struct {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_NPC_Emote_Struct(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_NPC_Emote_Struct() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_NPC_Emote_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_NPC_Emote_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_unsigned_short {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_unsigned_short(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_unsigned_short() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_unsigned_short obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_unsigned_short obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__string_view {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__string_view(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__string_view() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__string_view obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__string_view obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_long_long {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_long_long(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_long_long() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_long_long obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_long_long obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__listT_Client_p_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__listT_Client_p_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__listT_Client_p_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__listT_Client_p_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__listT_Client_p_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_short {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_short(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_short() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_short obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_short obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__vectorT_unsigned_short_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__vectorT_unsigned_short_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__vectorT_unsigned_short_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__vectorT_unsigned_short_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__vectorT_unsigned_short_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_DynamicZone {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_DynamicZone(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_DynamicZone() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_DynamicZone obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_DynamicZone obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_signed_char {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_signed_char(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_signed_char() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_signed_char obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_signed_char obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_PTimerList {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_PTimerList(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_PTimerList() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_PTimerList obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_PTimerList obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_ServerPacket {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_ServerPacket(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_ServerPacket() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_ServerPacket obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_ServerPacket obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_QuestReward_Struct {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_QuestReward_Struct(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_QuestReward_Struct() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_QuestReward_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_QuestReward_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_BookRequest_Struct {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_BookRequest_Struct(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_BookRequest_Struct() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_BookRequest_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_BookRequest_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_TributeInfo_Struct {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_TributeInfo_Struct(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_TributeInfo_Struct() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_TributeInfo_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_TributeInfo_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_GuildBankItemUpdate_Struct {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_GuildBankItemUpdate_Struct(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_GuildBankItemUpdate_Struct() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_GuildBankItemUpdate_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_GuildBankItemUpdate_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_InspectMessage_Struct {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_InspectMessage_Struct(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_InspectMessage_Struct() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_InspectMessage_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_InspectMessage_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_EQ__spells__CastingSlot {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_EQ__spells__CastingSlot(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_EQ__spells__CastingSlot() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_EQ__spells__CastingSlot obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_EQ__spells__CastingSlot obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_SetServerFilter_Struct {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_SetServerFilter_Struct(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_SetServerFilter_Struct() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_SetServerFilter_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_SetServerFilter_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_RecipeAutoCombine_Struct {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_RecipeAutoCombine_Struct(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_RecipeAutoCombine_Struct() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_RecipeAutoCombine_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_RecipeAutoCombine_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_EQ__ItemData {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_EQ__ItemData(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_EQ__ItemData() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_EQ__ItemData obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_EQ__ItemData obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__vectorT_LootItem_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__vectorT_LootItem_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__vectorT_LootItem_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__vectorT_LootItem_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__vectorT_LootItem_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_GuildJoin_Struct {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_GuildJoin_Struct(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_GuildJoin_Struct() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_GuildJoin_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_GuildJoin_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_ClientTaskState {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_ClientTaskState(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_ClientTaskState() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_ClientTaskState obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_ClientTaskState obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_p_ZonePoint {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_p_ZonePoint(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_p_ZonePoint() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_p_ZonePoint obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_p_ZonePoint obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_EQ__versions__ClientVersion {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_EQ__versions__ClientVersion(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_EQ__versions__ClientVersion() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_EQ__versions__ClientVersion obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_EQ__versions__ClientVersion obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__unique_ptrT_EQApplicationPacket_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__unique_ptrT_EQApplicationPacket_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__unique_ptrT_EQApplicationPacket_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__unique_ptrT_EQApplicationPacket_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__unique_ptrT_EQApplicationPacket_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__unordered_mapT_int_std__unique_ptrT_AA__Ability_t_std__hashT_int_t_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__unordered_mapT_int_std__unique_ptrT_AA__Ability_t_std__hashT_int_t_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__unordered_mapT_int_std__unique_ptrT_AA__Ability_t_std__hashT_int_t_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__unordered_mapT_int_std__unique_ptrT_AA__Ability_t_std__hashT_int_t_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__unordered_mapT_int_std__unique_ptrT_AA__Ability_t_std__hashT_int_t_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__unordered_mapT_int_std__unique_ptrT_AA__Rank_t_std__hashT_int_t_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__unordered_mapT_int_std__unique_ptrT_AA__Rank_t_std__hashT_int_t_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__unordered_mapT_int_std__unique_ptrT_AA__Rank_t_std__hashT_int_t_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__unordered_mapT_int_std__unique_ptrT_AA__Rank_t_std__hashT_int_t_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__unordered_mapT_int_std__unique_ptrT_AA__Rank_t_std__hashT_int_t_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_NewCombine_Struct {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_NewCombine_Struct(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_NewCombine_Struct() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_NewCombine_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_NewCombine_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_Map {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_Map(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_Map() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_Map obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_Map obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_p_Mob {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_p_Mob(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_p_Mob() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_p_Mob obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_p_Mob obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_LootdropRepository__Lootdrop {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_LootdropRepository__Lootdrop(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_LootdropRepository__Lootdrop() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_LootdropRepository__Lootdrop obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_LootdropRepository__Lootdrop obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_NpcFactionRepository__NpcFaction {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_NpcFactionRepository__NpcFaction(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_NpcFactionRepository__NpcFaction() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_NpcFactionRepository__NpcFaction obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_NpcFactionRepository__NpcFaction obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_EQ__LightSourceProfile {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_EQ__LightSourceProfile(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_EQ__LightSourceProfile() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_EQ__LightSourceProfile obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_EQ__LightSourceProfile obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__vectorT_GridEntriesRepository__GridEntries_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__vectorT_GridEntriesRepository__GridEntries_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__vectorT_GridEntriesRepository__GridEntries_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__vectorT_GridEntriesRepository__GridEntries_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__vectorT_GridEntriesRepository__GridEntries_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_eqFilterType {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_eqFilterType(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_eqFilterType() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_eqFilterType obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_eqFilterType obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_unsigned_char {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_unsigned_char(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_unsigned_char() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_unsigned_char obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_unsigned_char obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_DoorsRepository__Doors {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_DoorsRepository__Doors(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_DoorsRepository__Doors() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_DoorsRepository__Doors obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_DoorsRepository__Doors obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_XTargetAutoHaters {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_XTargetAutoHaters(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_XTargetAutoHaters() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_XTargetAutoHaters obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_XTargetAutoHaters obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_PlayerProfile_Struct {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_PlayerProfile_Struct(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_PlayerProfile_Struct() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_PlayerProfile_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_PlayerProfile_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_FactionAssociationRepository__FactionAssociation {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_FactionAssociationRepository__FactionAssociation(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_FactionAssociationRepository__FactionAssociation() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_FactionAssociationRepository__FactionAssociation obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_FactionAssociationRepository__FactionAssociation obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__listT_Bot_p_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__listT_Bot_p_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__listT_Bot_p_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__listT_Bot_p_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__listT_Bot_p_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_TaskType {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_TaskType(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_TaskType() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_TaskType obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_TaskType obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_Expedition {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_Expedition(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_Expedition() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_Expedition obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_Expedition obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_FactionMods {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_FactionMods(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_FactionMods() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_FactionMods obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_FactionMods obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_Merc {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_Merc(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_Merc() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_Merc obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_Merc obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_GlobalGroup {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_GlobalGroup(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_GlobalGroup() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_GlobalGroup obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_GlobalGroup obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__vectorT_DBnpcspells_entries_Struct_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__vectorT_DBnpcspells_entries_Struct_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__vectorT_DBnpcspells_entries_Struct_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__vectorT_DBnpcspells_entries_Struct_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__vectorT_DBnpcspells_entries_Struct_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_Timer {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_Timer(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_Timer() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_Timer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_Timer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_AA__Ability {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_AA__Ability(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_AA__Ability() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_AA__Ability obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_AA__Ability obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__unique_ptrT_SpawnGroup_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__unique_ptrT_SpawnGroup_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__unique_ptrT_SpawnGroup_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__unique_ptrT_SpawnGroup_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__unique_ptrT_SpawnGroup_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__listT_RespawnOption_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__listT_RespawnOption_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__listT_RespawnOption_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__listT_RespawnOption_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__listT_RespawnOption_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_Petition {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_Petition(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_Petition() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_Petition obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_Petition obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__initializer_listT_std__string_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__initializer_listT_std__string_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__initializer_listT_std__string_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__initializer_listT_std__string_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__initializer_listT_std__string_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_PlayerPositionUpdateServer_Struct {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_PlayerPositionUpdateServer_Struct(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_PlayerPositionUpdateServer_Struct() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_PlayerPositionUpdateServer_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_PlayerPositionUpdateServer_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_SwarmPet {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_SwarmPet(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_SwarmPet() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_SwarmPet obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_SwarmPet obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_FaceChange_Struct {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_FaceChange_Struct(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_FaceChange_Struct() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_FaceChange_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_FaceChange_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_unsigned_int {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_unsigned_int(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_unsigned_int() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_unsigned_int obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_unsigned_int obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_GroundSpawns {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_GroundSpawns(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_GroundSpawns() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_GroundSpawns obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_GroundSpawns obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__mapT_unsigned_int_unsigned_int_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__mapT_unsigned_int_unsigned_int_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__mapT_unsigned_int_unsigned_int_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__mapT_unsigned_int_unsigned_int_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__mapT_unsigned_int_unsigned_int_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_CastAction_type {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_CastAction_type(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_CastAction_type() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_CastAction_type obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_CastAction_type obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_MoveItem_Struct {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_MoveItem_Struct(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_MoveItem_Struct() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_MoveItem_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_MoveItem_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_ActivityState {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_ActivityState(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_ActivityState() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_ActivityState obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_ActivityState obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_InternalVeteranReward {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_InternalVeteranReward(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_InternalVeteranReward() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_InternalVeteranReward obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_InternalVeteranReward obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_EmuAppearance {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_EmuAppearance(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_EmuAppearance() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_EmuAppearance obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_EmuAppearance obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__vectorT_FindPerson_Point_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__vectorT_FindPerson_Point_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__vectorT_FindPerson_Point_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__vectorT_FindPerson_Point_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__vectorT_FindPerson_Point_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_faction_map {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_faction_map(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_faction_map() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_faction_map obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_faction_map obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_npcDecayTimes_Struct {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_npcDecayTimes_Struct(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_npcDecayTimes_Struct() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_npcDecayTimes_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_npcDecayTimes_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__string {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__string(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__string() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__string obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__string obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__vectorT_RaidMember_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__vectorT_RaidMember_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__vectorT_RaidMember_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__vectorT_RaidMember_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__vectorT_RaidMember_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_Who_All_Struct {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_Who_All_Struct(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_Who_All_Struct() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_Who_All_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_Who_All_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_bodyType {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_bodyType(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_bodyType() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_bodyType obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_bodyType obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__listT_MercType_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__listT_MercType_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__listT_MercType_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__listT_MercType_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__listT_MercType_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_TaskActivityType {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_TaskActivityType(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_TaskActivityType() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_TaskActivityType obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_TaskActivityType obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__vectorT_ExpeditionLockoutTimer_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__vectorT_ExpeditionLockoutTimer_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__vectorT_ExpeditionLockoutTimer_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__vectorT_ExpeditionLockoutTimer_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__vectorT_ExpeditionLockoutTimer_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_Object_Struct {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_Object_Struct(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_Object_Struct() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_Object_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_Object_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_EQ__skills__SkillType {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_EQ__skills__SkillType(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_EQ__skills__SkillType() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_EQ__skills__SkillType obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_EQ__skills__SkillType obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_CombatRecord {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_CombatRecord(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_CombatRecord() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_CombatRecord obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_CombatRecord obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_GuildTributeMemberToggle {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_GuildTributeMemberToggle(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_GuildTributeMemberToggle() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_GuildTributeMemberToggle obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_GuildTributeMemberToggle obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_LeadershipAA_Struct {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_LeadershipAA_Struct(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_LeadershipAA_Struct() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_LeadershipAA_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_LeadershipAA_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__vectorT_CharacterCorpseItemEntry_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__vectorT_CharacterCorpseItemEntry_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__vectorT_CharacterCorpseItemEntry_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__vectorT_CharacterCorpseItemEntry_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__vectorT_CharacterCorpseItemEntry_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__listT_Object_p_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__listT_Object_p_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__listT_Object_p_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__listT_Object_p_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__listT_Object_p_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_p_LootItem {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_p_LootItem(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_p_LootItem() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_p_LootItem obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_p_LootItem obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_AltCurrencyDefinition_Struct {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_AltCurrencyDefinition_Struct(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_AltCurrencyDefinition_Struct() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_AltCurrencyDefinition_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_AltCurrencyDefinition_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_p_Spawn2 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_p_Spawn2(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_p_Spawn2() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_p_Spawn2 obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_p_Spawn2 obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__listT_MercData_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__listT_MercData_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__listT_MercData_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__listT_MercData_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__listT_MercData_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_bool {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_bool(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_bool() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_bool obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_bool obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_FACTION_VALUE {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_FACTION_VALUE(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_FACTION_VALUE() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_FACTION_VALUE obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_FACTION_VALUE obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_DataBucketKey {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_DataBucketKey(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_DataBucketKey() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_DataBucketKey obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_DataBucketKey obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__vectorT_NpcFactionEntriesRepository__NpcFactionEntries_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__vectorT_NpcFactionEntriesRepository__NpcFactionEntries_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__vectorT_NpcFactionEntriesRepository__NpcFactionEntries_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__vectorT_NpcFactionEntriesRepository__NpcFactionEntries_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__vectorT_NpcFactionEntriesRepository__NpcFactionEntries_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__vectorT_Mob_p_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__vectorT_Mob_p_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__vectorT_Mob_p_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__vectorT_Mob_p_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__vectorT_Mob_p_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_EQApplicationPacket {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_EQApplicationPacket(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_EQApplicationPacket() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_EQApplicationPacket obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_EQApplicationPacket obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_Aura {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_Aura(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_Aura() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_Aura obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_Aura obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_time_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_time_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_time_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_time_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_time_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__vectorT_GridRepository__Grid_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__vectorT_GridRepository__Grid_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__vectorT_GridRepository__Grid_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__vectorT_GridRepository__Grid_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__vectorT_GridRepository__Grid_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_LootItem {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_LootItem(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_LootItem() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_LootItem obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_LootItem obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_DmgShieldType {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_DmgShieldType(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_DmgShieldType() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_DmgShieldType obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_DmgShieldType obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__listT_void_p_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__listT_void_p_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__listT_void_p_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__listT_void_p_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__listT_void_p_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__listT_std__pairT_unsigned_int_int_t_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__listT_std__pairT_unsigned_int_int_t_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__listT_std__pairT_unsigned_int_int_t_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__listT_std__pairT_unsigned_int_int_t_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__listT_std__pairT_unsigned_int_int_t_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__listT_NpcFactionEntriesRepository__NpcFactionEntries_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__listT_NpcFactionEntriesRepository__NpcFactionEntries_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__listT_NpcFactionEntriesRepository__NpcFactionEntries_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__listT_NpcFactionEntriesRepository__NpcFactionEntries_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__listT_NpcFactionEntriesRepository__NpcFactionEntries_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__listT_wplist_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__listT_wplist_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__listT_wplist_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__listT_wplist_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__listT_wplist_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__mapT_unsigned_int_ZoneEXPModInfo_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__mapT_unsigned_int_ZoneEXPModInfo_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__mapT_unsigned_int_ZoneEXPModInfo_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__mapT_unsigned_int_ZoneEXPModInfo_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__mapT_unsigned_int_ZoneEXPModInfo_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_GuildTributeDonateItemRequest_Struct {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_GuildTributeDonateItemRequest_Struct(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_GuildTributeDonateItemRequest_Struct() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_GuildTributeDonateItemRequest_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_GuildTributeDonateItemRequest_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_QGlobalCache {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_QGlobalCache(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_QGlobalCache() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_QGlobalCache obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_QGlobalCache obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__vectorT_LootdropEntriesRepository__LootdropEntries_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__vectorT_LootdropEntriesRepository__LootdropEntries_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__vectorT_LootdropEntriesRepository__LootdropEntries_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__vectorT_LootdropEntriesRepository__LootdropEntries_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__vectorT_LootdropEntriesRepository__LootdropEntries_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__listT_std__pairT_short_unsigned_int_t_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__listT_std__pairT_short_unsigned_int_t_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__listT_std__pairT_short_unsigned_int_t_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__listT_std__pairT_short_unsigned_int_t_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__listT_std__pairT_short_unsigned_int_t_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_TraderBuy_Struct {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_TraderBuy_Struct(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_TraderBuy_Struct() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_TraderBuy_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_TraderBuy_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_DynamicZoneMemberStatus {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_DynamicZoneMemberStatus(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_DynamicZoneMemberStatus() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_DynamicZoneMemberStatus obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_DynamicZoneMemberStatus obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_EQ__TintProfile {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_EQ__TintProfile(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_EQ__TintProfile() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_EQ__TintProfile obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_EQ__TintProfile obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_NewZone_Struct {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_NewZone_Struct(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_NewZone_Struct() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_NewZone_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_NewZone_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_Bot {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_Bot(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_Bot() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_Bot obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_Bot obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__vectorT_Client_p_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__vectorT_Client_p_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__vectorT_Client_p_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__vectorT_Client_p_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__vectorT_Client_p_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__shared_ptrT_HealRotation_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__shared_ptrT_HealRotation_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__shared_ptrT_HealRotation_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__shared_ptrT_HealRotation_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__shared_ptrT_HealRotation_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__vectorT_DoorsRepository__Doors_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__vectorT_DoorsRepository__Doors_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__vectorT_DoorsRepository__Doors_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__vectorT_DoorsRepository__Doors_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__vectorT_DoorsRepository__Doors_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_EQStreamInterface {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_EQStreamInterface(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_EQStreamInterface() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_EQStreamInterface obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_EQStreamInterface obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_EQ__InventoryProfile {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_EQ__InventoryProfile(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_EQ__InventoryProfile() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_EQ__InventoryProfile obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_EQ__InventoryProfile obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_PendingTranslocate_Struct {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_PendingTranslocate_Struct(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_PendingTranslocate_Struct() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_PendingTranslocate_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_PendingTranslocate_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_ServerZoneIncomingClient_Struct {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_ServerZoneIncomingClient_Struct(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_ServerZoneIncomingClient_Struct() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_ServerZoneIncomingClient_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_ServerZoneIncomingClient_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__listT_struct_HateList_p_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__listT_struct_HateList_p_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__listT_struct_HateList_p_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__listT_struct_HateList_p_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__listT_struct_HateList_p_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__listT_Spawn2_p_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__listT_Spawn2_p_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__listT_Spawn2_p_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__listT_Spawn2_p_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__listT_Spawn2_p_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_LoottableRepository__Loottable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_LoottableRepository__Loottable(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_LoottableRepository__Loottable() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_LoottableRepository__Loottable obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_LoottableRepository__Loottable obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__vectorT_DBbotspells_entries_Struct_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__vectorT_DBbotspells_entries_Struct_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__vectorT_DBbotspells_entries_Struct_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__vectorT_DBbotspells_entries_Struct_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__vectorT_DBbotspells_entries_Struct_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__vectorT_unsigned_int_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__vectorT_unsigned_int_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__vectorT_unsigned_int_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__vectorT_unsigned_int_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__vectorT_unsigned_int_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__listT_Mob_p_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__listT_Mob_p_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__listT_Mob_p_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__listT_Mob_p_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__listT_Mob_p_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_CheatManager {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_CheatManager(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_CheatManager() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_CheatManager obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_CheatManager obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_ItemPacketType {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_ItemPacketType(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_ItemPacketType() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_ItemPacketType obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_ItemPacketType obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_void {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_void(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_void() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_void obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_void obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_IPathfinder {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_IPathfinder(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_IPathfinder() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_IPathfinder obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_IPathfinder obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__vectorT_LoottableEntriesRepository__LoottableEntries_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__vectorT_LoottableEntriesRepository__LoottableEntries_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__vectorT_LoottableEntriesRepository__LoottableEntries_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__vectorT_LoottableEntriesRepository__LoottableEntries_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__vectorT_LoottableEntriesRepository__LoottableEntries_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_BaseDataRepository__BaseData {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_BaseDataRepository__BaseData(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_BaseDataRepository__BaseData() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_BaseDataRepository__BaseData obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_BaseDataRepository__BaseData obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_eqFilterMode {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_eqFilterMode(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_eqFilterMode() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_eqFilterMode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_eqFilterMode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_AA__Rank {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_AA__Rank(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_AA__Rank() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_AA__Rank obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_AA__Rank obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_std__vectorT_NPC_Emote_Struct_p_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__vectorT_NPC_Emote_Struct_p_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__vectorT_NPC_Emote_Struct_p_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__vectorT_NPC_Emote_Struct_p_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_std__vectorT_NPC_Emote_Struct_p_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_BugReport_Struct {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_BugReport_Struct(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_BugReport_Struct() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_BugReport_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_BugReport_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_GuildTributeDonatePlatRequest_Struct {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_GuildTributeDonatePlatRequest_Struct(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_GuildTributeDonatePlatRequest_Struct() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_GuildTributeDonatePlatRequest_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_GuildTributeDonatePlatRequest_Struct obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_EQ__deity__DeityTypeBit {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_EQ__deity__DeityTypeBit(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_EQ__deity__DeityTypeBit() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_EQ__deity__DeityTypeBit obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_EQ__deity__DeityTypeBit obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

public class SWIGTYPE_p_RecipeCountType {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_RecipeCountType(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_RecipeCountType() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_RecipeCountType obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGTYPE_p_RecipeCountType obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}
